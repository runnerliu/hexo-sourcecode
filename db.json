{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/google63cd143b1fbb3ff4.html","path":"google63cd143b1fbb3ff4.html","modified":0,"renderable":0},{"_id":"source/images/2017-12-19 162037.png","path":"images/2017-12-19 162037.png","modified":0,"renderable":0},{"_id":"source/images/2017-12-19 162446.png","path":"images/2017-12-19 162446.png","modified":0,"renderable":0},{"_id":"source/images/2017-12-19 162624.png","path":"images/2017-12-19 162624.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 185017.png","path":"images/2017-4-11 185017.png","modified":0,"renderable":0},{"_id":"source/images/2017-12-19 161752.png","path":"images/2017-12-19 161752.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 195257.jpg","path":"images/2017-4-11 195257.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 195640.jpg","path":"images/2017-4-11 195640.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 135317.png","path":"images/2017-4-15 135317.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 135507.png","path":"images/2017-4-15 135507.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 135755.png","path":"images/2017-4-15 135755.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 195422.jpg","path":"images/2017-4-11 195422.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 140001.png","path":"images/2017-4-15 140001.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 172459.png","path":"images/2017-4-15 172459.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-2 102013.png","path":"images/2017-4-2 102013.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 200834.jpg","path":"images/2017-4-11 200834.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-2 165636.png","path":"images/2017-4-2 165636.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-15 173341.png","path":"images/2017-4-15 173341.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-2 102023.png","path":"images/2017-4-2 102023.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 140143.png","path":"images/2017-4-3 140143.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 143008.png","path":"images/2017-4-3 143008.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 145434.png","path":"images/2017-4-3 145434.png","modified":0,"renderable":0},{"_id":"source/images/2017-5-5 194823.png","path":"images/2017-5-5 194823.png","modified":0,"renderable":0},{"_id":"source/images/2017-5-5 194722.png","path":"images/2017-5-5 194722.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 150129.png","path":"images/2017-4-3 150129.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-4 132812.png","path":"images/2017-4-4 132812.png","modified":0,"renderable":0},{"_id":"source/images/2017-5-5 195940.png","path":"images/2017-5-5 195940.png","modified":0,"renderable":0},{"_id":"source/images/2017-7-15 160518.png","path":"images/2017-7-15 160518.png","modified":0,"renderable":0},{"_id":"source/images/2017-7-15 160641.png","path":"images/2017-7-15 160641.png","modified":0,"renderable":0},{"_id":"source/images/2017-7-16 143933.jpg","path":"images/2017-7-16 143933.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-7-16 144138.jpg","path":"images/2017-7-16 144138.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-6-22 144024.png","path":"images/2017-6-22 144024.png","modified":0,"renderable":0},{"_id":"source/images/2017-6-7 095218.png","path":"images/2017-6-7 095218.png","modified":0,"renderable":0},{"_id":"source/images/2017-9-1 161933.jpg","path":"images/2017-9-1 161933.jpg","modified":0,"renderable":0},{"_id":"source/images/2018-04-30T204111.png","path":"images/2018-04-30T204111.png","modified":0,"renderable":0},{"_id":"source/images/2018-04-30T204327.png","path":"images/2018-04-30T204327.png","modified":0,"renderable":0},{"_id":"source/images/2018-05-06T184140.png","path":"images/2018-05-06T184140.png","modified":0,"renderable":0},{"_id":"source/images/2018-05-06T190223.png","path":"images/2018-05-06T190223.png","modified":0,"renderable":0},{"_id":"source/images/2018-05-06T191813.png","path":"images/2018-05-06T191813.png","modified":0,"renderable":0},{"_id":"source/images/2018-05-27T222132.png","path":"images/2018-05-27T222132.png","modified":0,"renderable":0},{"_id":"source/images/2018-05-27T223227.png","path":"images/2018-05-27T223227.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T150500.png","path":"images/2020-10-25T150500.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T152300.png","path":"images/2020-10-25T152300.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T152800.png","path":"images/2020-10-25T152800.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T154700.png","path":"images/2020-10-25T154700.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T154800.png","path":"images/2020-10-25T154800.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T154900.png","path":"images/2020-10-25T154900.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T155200.png","path":"images/2020-10-25T155200.png","modified":0,"renderable":0},{"_id":"source/images/2020-10-25T155300.png","path":"images/2020-10-25T155300.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 191243.png","path":"images/2017-4-11 191243.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 194803.jpg","path":"images/2017-4-11 194803.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 194932.jpg","path":"images/2017-4-11 194932.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 195224.jpg","path":"images/2017-4-11 195224.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 145924.png","path":"images/2017-4-3 145924.png","modified":0,"renderable":0},{"_id":"source/images/2017-6-22 143353.png","path":"images/2017-6-22 143353.png","modified":0,"renderable":0},{"_id":"source/images/2017-6-22 143420.png","path":"images/2017-6-22 143420.png","modified":0,"renderable":0},{"_id":"source/images/2017-6-22 143824.png","path":"images/2017-6-22 143824.png","modified":0,"renderable":0},{"_id":"source/images/2017-6-7 194822.png","path":"images/2017-6-7 194822.png","modified":0,"renderable":0},{"_id":"source/images/2018-04-30T203835.png","path":"images/2018-04-30T203835.png","modified":0,"renderable":0},{"_id":"source/images/2018-04-30T204213.png","path":"images/2018-04-30T204213.png","modified":0,"renderable":0},{"_id":"source/images/2017-7-16 152145.png","path":"images/2017-7-16 152145.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/2017-4-11 195018.jpg","path":"images/2017-4-11 195018.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-4-3 141518.png","path":"images/2017-4-3 141518.png","modified":0,"renderable":0},{"_id":"source/images/2018-04-30T205037.png","path":"images/2018-04-30T205037.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/2017-4-11 200911.jpg","path":"images/2017-4-11 200911.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-6-22 134442.png","path":"images/2017-6-22 134442.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/images/2017-7-16 152540.jpg","path":"images/2017-7-16 152540.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"2a1a6186e75b6490e137fba02cc739e1c6c8a129","modified":1603608212288},{"_id":"source/google63cd143b1fbb3ff4.html","hash":"e327904eefc5c9c6763ff6ff9e204abd49837841","modified":1603608212289},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1603608212398},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1603608212402},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1603608212405},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1603608212406},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1603608212411},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1603608212411},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1603608212412},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1603608212413},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1603608212414},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1603608212415},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1603608212416},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1603608212418},{"_id":"themes/next/_config.yml","hash":"a16927e8ca3dc95d61cfe74f0d9553ef4a240899","modified":1603608212419},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1603608212420},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1603608212421},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1603608212549},{"_id":"source/_posts/aboutHexo.md","hash":"4508425004a4883347f1643370406fbb39c83757","modified":1603608212204},{"_id":"source/_posts/abstractinterface.md","hash":"9ddd6b22a5b70fcfb907f28b22e7a855824cb52a","modified":1603608212205},{"_id":"source/_posts/apachevirtualhost.md","hash":"32e557a903a7ff50156f1c2263ec4c8e1c9d6d5d","modified":1603608212206},{"_id":"source/_posts/badtasteofcode.md","hash":"a803fdfa579bd2c70ddfa0b146484207a6635acd","modified":1603608212207},{"_id":"source/_posts/bdphp1.md","hash":"472e29afe59d1f00c3ff35935cc00e1d51c6e648","modified":1603608212208},{"_id":"source/_posts/bdphp2.md","hash":"70de7b6c8c414df6e462bdc634c66fe785f31c93","modified":1603608212209},{"_id":"source/_posts/centosinstallpython3.md","hash":"bedef36a53e48aafb59960f5f228bc9f72be90f4","modified":1603608212210},{"_id":"source/_posts/cgifcgiphpfpm.md","hash":"9ed082e35b183dc8b191907f3eea854b4920e288","modified":1603608212211},{"_id":"source/_posts/datatables1.md","hash":"908cea10776d6a8dc948e0c76fef00631142f2b8","modified":1603608212212},{"_id":"source/_posts/distlock.md","hash":"f48a0529196599053551570a5d8a32da068b4827","modified":1603608212213},{"_id":"source/_posts/gitcommand.md","hash":"b15ccc0d5b9a2c3783ec462529db29f104c174ef","modified":1603608212215},{"_id":"source/_posts/go-series-0.md","hash":"d7d6fae69651fa65ff3889e3e9c50ec9bb27d700","modified":1603712200531},{"_id":"source/_posts/hexoOthers.md","hash":"cd5445947894b1bff6730f64331b04b1ae9d5303","modified":1603608212217},{"_id":"source/_posts/hexoNexT.md","hash":"bb7fc7963a7c1a7097f909791068feef27141d9e","modified":1603608212216},{"_id":"source/_posts/hexogithub.md","hash":"db158e4f695bbdc51fcf25bde34d7c65d6b5dfc0","modified":1603614851685},{"_id":"source/_posts/heyliuxiaoyang.md","hash":"de80fabd69d100a6a064c5dc6b63cadf3c453e5b","modified":1603608212219},{"_id":"source/_posts/httppostmethod.md","hash":"966dbd31fdd77ac127f6acb1f8245c9270b2198d","modified":1603608212220},{"_id":"source/_posts/httpstatecode.md","hash":"651e5495223b366fd5f1666d1d71bf24b3b59ebd","modified":1603608212221},{"_id":"source/_posts/josephring.md","hash":"6aad0b51de156df01153c6043e59674ed55a13c7","modified":1603608212222},{"_id":"source/_posts/jsmjiomj.md","hash":"2af3316c77a2309d1c6ed699f0207c6cd954a365","modified":1603608212223},{"_id":"source/_posts/gf-cli-series-0-md.md","hash":"f437b0af206cea96c4859509af762ad3c7c71dc8","modified":1603795443275},{"_id":"source/_posts/kafkasave.md","hash":"569598fbb6457dba49734106309b86f5f1881c20","modified":1603608212224},{"_id":"source/_posts/laraveladminlogin.md","hash":"b91af2e6f18d83f585a09ca210559a444886342f","modified":1603608212225},{"_id":"source/_posts/laraveliocanddi.md","hash":"ba3bbbf9cbd380df6e3534ec42e581643ddd2296","modified":1603608212226},{"_id":"source/_posts/laraveluserlogin.md","hash":"c6212b0d50829c4b8e9691d2993bc6e17ca34eae","modified":1603608212227},{"_id":"source/_posts/librdkafkainstallanduse.md","hash":"261c1288c6aa5357ce642c46cc5f50e50dade622","modified":1603608212228},{"_id":"source/_posts/linuxcd.md","hash":"85bd8e6d531cb28751cd88d57a35985375e188db","modified":1603608212229},{"_id":"source/_posts/linuxcp.md","hash":"c0c163cc8f43b7d3214a5255224f9bd9632f8ef9","modified":1603608212230},{"_id":"source/_posts/linuxcrontab.md","hash":"2fac565c8515be3bf23b759ffd2ae9987075b3db","modified":1603608212231},{"_id":"source/_posts/linuxln.md","hash":"e7a98734efa1fc06fa50c8b7a7ec02f5432575cc","modified":1603608212233},{"_id":"source/_posts/linuxls.md","hash":"eb94e961b075d150ca0447da9e40b365f15dcca1","modified":1603608212235},{"_id":"source/_posts/linuxnetstat.md","hash":"8c44c3084db3daed8a02c564b49841e8c8284eb6","modified":1603608212236},{"_id":"source/_posts/linuxping.md","hash":"2380b148cf135b279ce6303102c162c14a0e0d4a","modified":1603608212245},{"_id":"source/_posts/linuxps.md","hash":"f4e52a94687bd681809180a0d4b797577a38922d","modified":1603608212247},{"_id":"source/_posts/linuxtar.md","hash":"2a1a6ee77fb7a32b7103e1484015e7aa90038b07","modified":1603608212248},{"_id":"source/_posts/linuxtop.md","hash":"bb7441f6c848ef6b3062d028de7f3ac36baeebc8","modified":1603608212249},{"_id":"source/_posts/linuxyhtnht.md","hash":"c25fd96851c54ceedc3299b3720d9fd65a346fee","modified":1603608212250},{"_id":"source/_posts/myisaminnodb.md","hash":"7aadce6fee32bf21458f698328007c3178e38ba6","modified":1603608212251},{"_id":"source/_posts/mysqltransaction.md","hash":"4d78d257d6481e703c391c1213947a0347deadc0","modified":1603608212252},{"_id":"source/_posts/nginxstartpoweron.md","hash":"d05dc9e76b42f645157ca730714cb467aa1df514","modified":1603608212253},{"_id":"source/_posts/nginxtornadosupervisor.md","hash":"851bf9d08755826a8600e1b4793f997b60e0ca4c","modified":1603608212254},{"_id":"source/_posts/php-server.md","hash":"45b568577c1e621a134dd656d2ab2ce646aa11b9","modified":1603608212255},{"_id":"source/_posts/phpkeywords1.md","hash":"4bf503f5510c14cc58c1d217ce3e4fc7ca422fdf","modified":1603608212256},{"_id":"source/_posts/phpnewgc.md","hash":"c1973f436b6ad2a4193199f13626b23701fe2953","modified":1603608212257},{"_id":"source/_posts/phpsortalgorithm.md","hash":"49f05d679d07a74940bd2787cb0bf58986d25065","modified":1603608212258},{"_id":"source/_posts/phpvarinternstore1.md","hash":"d274d598ac491b0e2e3e51287002c746c2ac44c0","modified":1603608212259},{"_id":"source/_posts/phpvarinternstore2.md","hash":"96c45d20ab10bb4d5e12db6a46d37d944f3d701d","modified":1603608212260},{"_id":"source/_posts/processscheduling.md","hash":"52fcc07e1ecf6915c0e2ea8719cf1a4c34cbb7b7","modified":1603608212261},{"_id":"source/_posts/processthread.md","hash":"c16d5e92444de31cacee9d59861b08ca036d4abb","modified":1603608212262},{"_id":"source/_posts/pythoncontextmanager.md","hash":"6a8a47f417b89a3d52c76c957411827f9b299705","modified":1603608212263},{"_id":"source/_posts/pythongc.md","hash":"138fd6550075838125b605ed5c21ecbc21d05bf7","modified":1603608212264},{"_id":"source/_posts/requests-session.md","hash":"85159add635e0c1dd15e0a633f8b801105ece073","modified":1603608212265},{"_id":"source/_posts/sharesession.md","hash":"566053beca073ae09e5b5e732b62ec6d59de6ddb","modified":1603608212267},{"_id":"source/_posts/sina2014php.md","hash":"c7d3a33ca2a800ce77fa74a5def62b922f981397","modified":1603608212268},{"_id":"source/_posts/singleinstancepython.md","hash":"3b27ecefbf4d8872d21c9b1f7a0c05d92f202e42","modified":1603608212269},{"_id":"source/_posts/sqlalchemybug1.md","hash":"149a6d34ea2ee7dc8a75752a1ee671ac8109f6c4","modified":1603608212270},{"_id":"source/_posts/sublimetext3rightclick.md","hash":"ce47778a89b04796b33f34b1a38d316e20e301aa","modified":1603608212271},{"_id":"source/_posts/tcpdiff.md","hash":"d7d10c658b8d57bc3d0a841ba8bd3b9b40bacd94","modified":1603613136944},{"_id":"source/_posts/tcpip.md","hash":"4e874946130f4a019f2210294a0c098d147df835","modified":1603608212273},{"_id":"source/_posts/threadsubprocess.md","hash":"6f17e2a42635fe780284b58118c473d30a406af0","modified":1603608212273},{"_id":"source/_posts/tornado502-asnon.md","hash":"5bf07db2624ec91200e960067d985ca6f107502f","modified":1603608212274},{"_id":"source/_posts/tornado502-concurrentwebspider.md","hash":"a4b0952ea9950a809575c1f340a4eda4affc2f82","modified":1603608212275},{"_id":"source/_posts/tornado502-coroutines.md","hash":"6df78c79a30ce7e53178053e0c6db7136fbfeae4","modified":1603608212276},{"_id":"source/_posts/tornado502-introduction.md","hash":"6925b6032aa9efdd3866f3076f04424ff98422a4","modified":1603608212277},{"_id":"source/_posts/tornado502-userguide.md","hash":"d27caf9723676c8c674da8a650960c7e5cf0759b","modified":1603608212278},{"_id":"source/_posts/tornado502_start.md","hash":"e0713e54a103d18deabd03b4f62dca823d3e6054","modified":1603608212279},{"_id":"source/_posts/transitionstranslate.md","hash":"66edb13be8c80af5066e9b285c0702913ea0bc56","modified":1603608212281},{"_id":"source/_posts/uniqueprimarykey.md","hash":"d6df1d24cb3748a9327d05fb9a2e87755e34dda7","modified":1603608212282},{"_id":"source/_posts/urlrequestprocess.md","hash":"870d30174b517db0460658ce30533f1787af0425","modified":1603608212283},{"_id":"source/_posts/windowskillprocess.md","hash":"fb489093189f6eb498de9602ab672c6cf23adcce","modified":1603608212284},{"_id":"source/_posts/zsfzsybtb.md","hash":"a62f07ea290c36075713c6d6605344f2b1859ab2","modified":1603608212285},{"_id":"source/about/index.md","hash":"7a7bb7ac57a17459847be1c21a57e3d8a7280955","modified":1603615771438},{"_id":"source/categories/index.md","hash":"9badf7c257ba55a6c16483ee91698185272eaa98","modified":1603608212287},{"_id":"source/images/2017-12-19 162037.png","hash":"6318df5cd63125e5b97388720c5d89f8335757d7","modified":1603608212292},{"_id":"source/images/2017-12-19 162446.png","hash":"475c6f7c2078d1798869f216b6486e54c542f7ea","modified":1603608212292},{"_id":"source/images/2017-12-19 162624.png","hash":"17d37c2907d87336c6b4354c7a649eeef196598f","modified":1603608212293},{"_id":"source/images/2017-4-11 185017.png","hash":"f86c64b0f3692e46ca088f332596b23c85504331","modified":1603608212294},{"_id":"source/images/2017-12-19 161752.png","hash":"c95853ae3a34308e28dca53fbbf07fef8433311e","modified":1603608212291},{"_id":"source/images/2017-4-11 195257.jpg","hash":"5546c697c1911519373718d54662f1dc82d87299","modified":1603608212305},{"_id":"source/images/2017-4-11 195640.jpg","hash":"50f6550e925f01b99e3de2bd866461aeef93da3a","modified":1603608212308},{"_id":"source/images/2017-4-15 135317.png","hash":"c34573830912f7f22db3832951ca4ba362652756","modified":1603608212312},{"_id":"source/images/2017-4-15 135507.png","hash":"ba6025aea0bdd9864e4b41e4d173c1ed75b23b1d","modified":1603608212313},{"_id":"source/images/2017-4-15 135755.png","hash":"56f84269a3701b0854d4e02b0df8e0b647abf47e","modified":1603608212319},{"_id":"source/images/2017-4-11 195422.jpg","hash":"ce9ac0c0a2c706eba2f9542772df89b2c8441f44","modified":1603608212306},{"_id":"source/images/2017-4-15 140001.png","hash":"b54ee0e63470781c00ef20322b0bd00602456e58","modified":1603608212330},{"_id":"source/images/2017-4-15 172459.png","hash":"0fbae2f786038d1ea76708b18cf15efc156bc388","modified":1603608212335},{"_id":"source/images/2017-4-2 102013.png","hash":"5c6becbf5ea5c637f3ce2d4e24a79e7c15fc832f","modified":1603608212339},{"_id":"source/images/2017-4-11 200834.jpg","hash":"bd491daa4f568fefb5a7ccac28fa560c872f48fb","modified":1603608212309},{"_id":"source/images/2017-4-2 165636.png","hash":"8a2974ef512c5d7c8f15700ff5b9ffbfd0cb2428","modified":1603608212341},{"_id":"source/images/2017-4-15 173341.png","hash":"eed5475fc1ac5e7d839d943e8bbbedddc976b6ec","modified":1603608212338},{"_id":"source/images/2017-4-2 102023.png","hash":"944ad2b10893e866dec3729037c7befa2eaba560","modified":1603608212340},{"_id":"source/images/2017-4-3 140143.png","hash":"e580bf69e8b514b710d8f700d283a483c5d94c1d","modified":1603608212342},{"_id":"source/images/2017-4-3 143008.png","hash":"3e3166be01703dbd908a76a7315d544cf29ef8d4","modified":1603608212346},{"_id":"source/images/2017-4-3 145434.png","hash":"8729097b1a408846d843f8102b2a7de4c52f2983","modified":1603608212347},{"_id":"source/images/2017-5-5 194823.png","hash":"c549c7701d4caf72585d024c50a01ed02e341228","modified":1603608212354},{"_id":"source/images/2017-5-5 194722.png","hash":"c7eaf205cce8bcfe0d542c8cd2d76df235083738","modified":1603608212353},{"_id":"source/images/2017-4-3 150129.png","hash":"3b937f85306e76680ee94f79ed623d6cdc7647bc","modified":1603608212350},{"_id":"source/images/2017-4-4 132812.png","hash":"bca34f365b61c28d7943ecf2d207273a03e9dc34","modified":1603608212351},{"_id":"source/images/2017-5-5 195940.png","hash":"59576d70fc45740a378366689428743c40dbaf15","modified":1603608212355},{"_id":"source/images/2017-7-15 160518.png","hash":"97730b03d344fe63f8ce496c29d64af05e5f796b","modified":1603608212368},{"_id":"source/images/2017-7-15 160641.png","hash":"d2e0da5bc27d7b721ee2fd22f2e1c649f294109c","modified":1603608212370},{"_id":"source/images/2017-7-16 143933.jpg","hash":"bc4e98c758833d89083d274bf84069c9caab206c","modified":1603608212371},{"_id":"source/images/2017-7-16 144138.jpg","hash":"4f25b99a46db7487e1c1b885e216dbcc38171cec","modified":1603608212372},{"_id":"source/images/2017-6-22 144024.png","hash":"5045162211e541628744e38d2cec0fadd6654aeb","modified":1603608212364},{"_id":"source/images/2017-6-7 095218.png","hash":"f60fcab6fb7ccf1ad33eccbf94af9b8738d4a3f4","modified":1603608212365},{"_id":"source/images/2017-9-1 161933.jpg","hash":"74e2c8f8defbdcfbbda2c066abb8cce809912de3","modified":1603608212378},{"_id":"source/images/2018-04-30T204111.png","hash":"785fd98133c1bc74a78381eb8dcd03cbb51d2c19","modified":1603608212381},{"_id":"source/images/2018-04-30T204327.png","hash":"909492cac35e588471a13704a12270fa36095275","modified":1603608212385},{"_id":"source/images/2018-05-06T184140.png","hash":"8099dceb7b5a9d0acc0f553bb3477289f3bd845b","modified":1603608212388},{"_id":"source/images/2018-05-06T190223.png","hash":"a724cc7c40949ba7b56638730ce9ceb83e1abd8e","modified":1603608212389},{"_id":"source/images/2018-05-06T191813.png","hash":"7fa01c1fe82cba9fef3ab84596ac81ea1b3697c1","modified":1603608212390},{"_id":"source/images/2018-05-27T222132.png","hash":"f76b28fb9b5819bfdc6167d49f351385aa6588dc","modified":1603608212391},{"_id":"source/images/2018-05-27T223227.png","hash":"f40042818dc16b11a36238825f45106cef5ac174","modified":1603608212393},{"_id":"source/images/2020-10-25T150500.png","hash":"70f71de65380d978749f95ebb0822d1df666bed8","modified":1603609316460},{"_id":"source/images/2020-10-25T152300.png","hash":"49ed8ef9037c34d1a72d86b43e53edde62e22dc6","modified":1603610616998},{"_id":"source/images/2020-10-25T152800.png","hash":"d36d21f1afdd55e1746e73eb890ad5f09cd3d1bd","modified":1603610897036},{"_id":"source/images/2020-10-25T154700.png","hash":"0d8ae7bd3545a9d9977c3fe66a0201303c15301b","modified":1603612018826},{"_id":"source/images/2020-10-25T154800.png","hash":"dd0132e7c87db39fc976fa853516bfc7b3f12700","modified":1603612104283},{"_id":"source/images/2020-10-25T154900.png","hash":"9dd991a41db6c998deaa021d7d7279e42ab0528d","modified":1603612149830},{"_id":"source/images/2020-10-25T155200.png","hash":"0a99cb77ba122dcddde85850b87da4078a5df029","modified":1603612355826},{"_id":"source/images/2020-10-25T155300.png","hash":"cde64654c94d06a8d1423305f4f2ddbc556d23a4","modified":1603612388310},{"_id":"source/tags/index.md","hash":"e79231449776a2c47407956a4105071220adee35","modified":1603608212396},{"_id":"themes/next/layout/_layout.swig","hash":"1dc354c74b965827bca18971ce9d3d25a57de96f","modified":1603608212452},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1603608212542},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1603608212543},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1603608212544},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1603608212545},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1603608212546},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1603608212547},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1603608212548},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1603608212552},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1603608212551},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1603608212820},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1603608212821},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1603608212822},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1603608212423},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1603608212424},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1603608212424},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1603608212429},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1603608212430},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1603608212432},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1603608212433},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1603608212434},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1603608212443},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1603608212444},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1603608212445},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1603608212446},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1603608212448},{"_id":"source/images/2017-4-11 191243.png","hash":"108e5761bac04d965db3f25d87791be72491b889","modified":1603608212296},{"_id":"source/images/2017-4-11 194803.jpg","hash":"267acca18cec6b5965e59b256d29dc53e06a79a7","modified":1603608212298},{"_id":"source/images/2017-4-11 194932.jpg","hash":"431248e9465f6d1bbaae7fd0872bd8c7a7fdff02","modified":1603608212299},{"_id":"source/images/2017-4-11 195224.jpg","hash":"01f37f97172b4ff1e3bd72764c85ac77f85cbda0","modified":1603608212304},{"_id":"source/images/2017-4-3 145924.png","hash":"cf617a1faf22c79277f92db39cbeb6a6f079020b","modified":1603608212348},{"_id":"source/images/2017-6-22 143353.png","hash":"313513fa3233a5fabd71cdd26098c6dd75c08344","modified":1603608212359},{"_id":"source/images/2017-6-22 143420.png","hash":"93ac9834dbbf6c092f6dbe9bea6963f4e8d0f1f1","modified":1603608212360},{"_id":"source/images/2017-6-22 143824.png","hash":"e418ca86a70f1eb9ad8d8af35b5599621f34835f","modified":1603608212362},{"_id":"source/images/2017-6-7 194822.png","hash":"bfeb30dd058de54fe4f9581b6ca6bcbcfad9a1e2","modified":1603608212366},{"_id":"source/images/2018-04-30T203835.png","hash":"7c24d6801a5feb112e9b9110411f4719dccaee1e","modified":1603608212380},{"_id":"source/images/2018-04-30T204213.png","hash":"13cc734a53b796e567767116dcd7dc540cf51ddf","modified":1603608212383},{"_id":"source/images/2017-7-16 152145.png","hash":"eb8072980268710fc098345ff716264ecab39a7d","modified":1603608212374},{"_id":"source/images/avatar.png","hash":"5cf98741ab329a717e1f2ee058f59641243b21dd","modified":1603608212394},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212701},{"_id":"source/images/2017-4-11 195018.jpg","hash":"c314bace104608c818c804f7e1ecea9fbdd24ca3","modified":1603608212302},{"_id":"source/images/2017-4-3 141518.png","hash":"98243c2f719bd781fd45bf37cd12dc944f86fef1","modified":1603608212344},{"_id":"source/images/2018-04-30T205037.png","hash":"b4fbd047c9c065215ae7c82f7168979f93e55862","modified":1603608212386},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1603608212451},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1603608212450},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1603608212454},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1603608212455},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1603608212456},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1603608212457},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1603608212458},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1603608212459},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1603608212479},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1603608212480},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"bd174c8ad620da37616cad735503fc847240a3e7","modified":1603608212485},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1603608212524},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1603608212525},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1603608212529},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1603608212531},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1603608212461},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1603608212462},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1603608212463},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1603608212467},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1603608212468},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1603608212469},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1603608212470},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1603608212554},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1603608212555},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1603608212556},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1603608212557},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1603608212558},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1603608212559},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1603608212700},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1603608212703},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603608212705},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603608212706},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603608212707},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603608212709},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603608212710},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603608212712},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603608212713},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1603608212714},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1603608212715},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1603608212716},{"_id":"source/images/2017-4-11 200911.jpg","hash":"e2f228c4850f0a1b99ed89f09b0b108b3aa7b91a","modified":1603608212311},{"_id":"source/images/2017-6-22 134442.png","hash":"8a51da6087501d85e452bd44a60ed8cdd7e7a521","modified":1603608212357},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212483},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212483},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212637},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212638},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212652},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212697},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603608212699},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1603608212702},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603608212704},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603608212711},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1603608212481},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1603608212484},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1603608212487},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1603608212488},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1603608212489},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1603608212501},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1603608212502},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1603608212503},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1603608212504},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1603608212509},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1603608212510},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1603608212510},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1603608212512},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1603608212513},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1603608212517},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1603608212518},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1603608212519},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1603608212520},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1603608212521},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1603608212522},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1603608212523},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1603608212537},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1603608212538},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1603608212539},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1603608212541},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1603608212464},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1603608212465},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1603608212472},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1603608212473},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1603608212473},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1603608212475},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1603608212476},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1603608212477},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1603608212478},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1603608212636},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1603608212638},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1603608212651},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1603608212696},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1603608212697},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1603608212698},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1603608212732},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1603608212718},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1603608212720},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1603608212720},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1603608212722},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1603608212722},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1603608212724},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1603608212725},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1603608212727},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1603608212728},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1603608212736},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1603608212769},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1603608212770},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1603608212771},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1603608212772},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1603608212776},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1603608212777},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1603608212778},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1603608212779},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1603608212779},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1603608212796},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1603608212799},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1603608212801},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1603608212802},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1603608212803},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1603608212804},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1603608212805},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1603608212812},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1603608212813},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1603608212816},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1603608212817},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1603608212818},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1603608212798},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1603608212806},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1603608212533},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1603608212536},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1603608212562},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1603608212563},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1603608212564},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1603608212565},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1603608212567},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1603608212585},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1603608212611},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1603608212629},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1603608212630},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1603608212631},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1603608212632},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1603608212633},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1603608212635},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1603608212668},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1603608212670},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1603608212669},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1603608212684},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1603608212686},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1603608212689},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1603608212690},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1603608212691},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1603608212692},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1603608212693},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1603608212694},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1603608212653},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1603608212654},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1603608212655},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1603608212656},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1603608212657},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1603608212658},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1603608212659},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1603608212726},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603608212738},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603608212751},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603608212752},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603608212753},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603608212755},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603608212756},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1603608212765},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1603608212766},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1603608212774},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1603608212773},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1603608212781},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1603608212782},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1603608212783},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1603608212810},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1603608212811},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1603608212767},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1603608212793},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1603608212795},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1603608212568},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1603608212570},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1603608212571},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1603608212573},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1603608212572},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1603608212574},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1603608212575},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1603608212577},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1603608212578},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1603608212579},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1603608212580},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1603608212581},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1603608212582},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1603608212584},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1603608212613},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1603608212614},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1603608212615},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1603608212616},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1603608212617},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1603608212619},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1603608212687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1603608212601},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"c0c81317c8ef6fa5d2799fefe05d701b6ea0f039","modified":1603608212603},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1603608212605},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1603608212606},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1603608212607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1603608212608},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1603608212609},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1603608212610},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1603608212621},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1603608212620},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1603608212622},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1603608212623},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1603608212624},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1603608212625},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1603608212626},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1603608212627},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1603608212586},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1603608212587},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1603608212588},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1603608212589},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1603608212590},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1603608212592},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1603608212593},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1603608212594},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1603608212595},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1603608212596},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1603608212597},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1603608212599},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1603608212600},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1603608212661},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1603608212662},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603608212757},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603608212758},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1603608212759},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603608212762},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1603608212787},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1603608212815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1603608212604},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1603608212761},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1603608212763},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1603608212792},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1603608212789},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1603608212734},{"_id":"source/images/2017-7-16 152540.jpg","hash":"52544470d51d3899594dc852cb1cebb49c4e0673","modified":1603608212377},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1603608212791},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1603608212808},{"_id":"public/baidusitemap.xml","hash":"380e773d609c789c1a790cebc99738c1a5cf319a","modified":1603795468801},{"_id":"public/atom.xml","hash":"83f176c1f5db210364b39ecf8b17eae2420cde34","modified":1603795468803},{"_id":"public/search.xml","hash":"c37ad15d4d312ee39506ef10b4c676b6f0a59dcd","modified":1603795468807},{"_id":"public/sitemap.xml","hash":"c2ef7cfa003fb9ca8888fbc3ce2a7b9078c5868a","modified":1603795468917},{"_id":"public/about/index.html","hash":"15f5d34df55f354636e97dde9dcb49c5ab1bb929","modified":1603795475842},{"_id":"public/categories/index.html","hash":"9a47bd45256bc75d4ddd9d5b86787e3cd4289ba0","modified":1603795475846},{"_id":"public/tags/index.html","hash":"e8053789f5812881d27787df5c9cddd7eaba7c70","modified":1603795475851},{"_id":"public/2020/10/25/tcpdiff/index.html","hash":"971b752be8a651c3d4e371f15f7d119728d53768","modified":1603795475967},{"_id":"public/2020/10/26/go-series-0/index.html","hash":"8e13be7a4ae28316995e9cc35cda361b590660ed","modified":1603795475967},{"_id":"public/2018/06/18/tornado502-concurrentwebspider/index.html","hash":"1068123dbae6b8576e4bb63aad16b5a60bb363b6","modified":1603795475968},{"_id":"public/2018/06/26/centosinstallpython3/index.html","hash":"212e1be9213404dc6c6064e57ed7c8e94b2844a6","modified":1603795475968},{"_id":"public/2018/06/10/requests-session/index.html","hash":"efbef44b51678e06c92e48e6fc68149095a6afb4","modified":1603795475968},{"_id":"public/2018/06/10/tornado502-asnon/index.html","hash":"de548b1f6049774b3f576857c23bd7f2c99e71a5","modified":1603795475968},{"_id":"public/2018/06/10/tornado502-introduction/index.html","hash":"c8ab66bb49219919100724d078a117f43b6c8d0e","modified":1603795475968},{"_id":"public/2018/06/10/tornado502-userguide/index.html","hash":"cef1d0d64f7c9a06fb989378e3329a032a49e6b3","modified":1603795475968},{"_id":"public/2018/06/03/tornado502_start/index.html","hash":"fc0aa941b6ac3fc3f1cc1b82caf9f337a411b14c","modified":1603795475968},{"_id":"public/2018/05/27/datatables1/index.html","hash":"ad762b15cc787551ef4fbb69924641cdf0471e79","modified":1603795475968},{"_id":"public/2018/05/13/sqlalchemybug1/index.html","hash":"73cdcf0d66b09f3aaada9d3f17cb730977f6a77a","modified":1603795475969},{"_id":"public/2018/05/13/httppostmethod/index.html","hash":"4211caf0b2080a50012ea222c981c212d94e2a6b","modified":1603795475969},{"_id":"public/2018/05/06/distlock/index.html","hash":"d1c8d147a83d79cd21617db5fc35cd428ec44cf9","modified":1603795475969},{"_id":"public/2018/04/15/linuxls/index.html","hash":"a546b2be8e31fcc4e7cef08afcd09c6a427741d7","modified":1603795475969},{"_id":"public/2018/04/15/linuxcd/index.html","hash":"9b7791e8cb689631673104dee987f5020d4723e6","modified":1603795475969},{"_id":"public/2018/04/30/kafkasave/index.html","hash":"3a1d5c7675e07da96ddbf6346938902937214118","modified":1603795475969},{"_id":"public/2018/01/04/librdkafkainstallanduse/index.html","hash":"3f3d1d31df9d980bbae7409298e17343889585d0","modified":1603795475969},{"_id":"public/2018/01/04/linuxln/index.html","hash":"c6c9123455b825f809f29207b8440f08a0406981","modified":1603795475969},{"_id":"public/2018/01/04/linuxcp/index.html","hash":"9cea642ae8f9ce155095e9df84f4d6a5b2a4f5b3","modified":1603795475969},{"_id":"public/2018/01/04/linuxtar/index.html","hash":"ed4ca4a5e29fb20dabdc0b804c1254481da2460a","modified":1603795475970},{"_id":"public/2018/01/02/windowskillprocess/index.html","hash":"533868a9c4ebad8213664effac7e89f8019942d8","modified":1603795475970},{"_id":"public/2018/01/02/linuxnetstat/index.html","hash":"873db532dc5792c933d9042cd66783c997e6f5b7","modified":1603795475970},{"_id":"public/2018/06/18/tornado502-coroutines/index.html","hash":"3149dc3d5a34ba5e6a516486d34859c7e23e6dfc","modified":1603795475970},{"_id":"public/2018/01/02/linuxping/index.html","hash":"4eec8eeebda0708268023fd9fea03327d12954c7","modified":1603795475970},{"_id":"public/2018/01/02/pythoncontextmanager/index.html","hash":"135d1b897be4bc5224dcde2770cfe650611c501f","modified":1603795475971},{"_id":"public/2018/01/02/linuxps/index.html","hash":"e04a27da75f7c7b16efb009cff860deed8791e3b","modified":1603795475971},{"_id":"public/2017/10/09/gitcommand/index.html","hash":"ac91d151099f1c776d650aecff94304bc086e44c","modified":1603795475971},{"_id":"public/2017/09/03/nginxtornadosupervisor/index.html","hash":"abc294adbca2b2951bd99bd3e9ccd9c6726f3ff4","modified":1603795475971},{"_id":"public/2017/09/03/nginxstartpoweron/index.html","hash":"7adcff7f1a0ecb3f880a952d0b8501f2a9dabcbc","modified":1603795475972},{"_id":"public/2017/08/28/mysqltransaction/index.html","hash":"dd0d87795c7a07698ab7646593a68eb617b2af84","modified":1603795475972},{"_id":"public/2017/08/27/singleinstancepython/index.html","hash":"12329645ae083670efb35bd719cd077884452372","modified":1603795475972},{"_id":"public/2017/07/20/zsfzsybtb/index.html","hash":"9d77b14090f670d2bb92129363aa71dc26578a79","modified":1603795475972},{"_id":"public/2017/07/16/linuxyhtnht/index.html","hash":"5e1e3cfc2344a371c0bfb6f74dcd3f1d2dc2ff9f","modified":1603795475972},{"_id":"public/2017/07/16/pythongc/index.html","hash":"188b80793c206a78bf0e12b9174f58c3b4d36027","modified":1603795475972},{"_id":"public/2017/07/15/myisaminnodb/index.html","hash":"113b676425d9be2acf6ef4f53b6092e9aa7e88bb","modified":1603795475973},{"_id":"public/2017/07/15/jsmjiomj/index.html","hash":"7d3a28f18f54cb25af5f81d89c8f214a25b92d0d","modified":1603795475973},{"_id":"public/2017/07/15/uniqueprimarykey/index.html","hash":"a5303ff194e57262a40fcc0857dde43fe19f6fda","modified":1603795475973},{"_id":"public/2017/07/15/threadsubprocess/index.html","hash":"1349b46ea329ffd4f9187c9b81dafcf5d12c93d0","modified":1603795475973},{"_id":"public/2017/06/26/php-server/index.html","hash":"ed5a0677c6ba50082ab265b8a7bf2482995b736a","modified":1603795475973},{"_id":"public/2017/06/22/urlrequestprocess/index.html","hash":"c981dd92d7a4130f6a4bcd0ffc5d935132fb9495","modified":1603795475973},{"_id":"public/2017/06/21/bdphp2/index.html","hash":"b2d79e5447ecfad26bccbca038b770c39f5b1225","modified":1603795475973},{"_id":"public/2017/06/21/bdphp1/index.html","hash":"822804d306cabce2eb394995de1ec9d701317828","modified":1603795475973},{"_id":"public/2017/06/10/abstractinterface/index.html","hash":"8601e42c601dd0066c5df0456da19f6e2d1fee6b","modified":1603795475974},{"_id":"public/2017/06/07/cgifcgiphpfpm/index.html","hash":"022ae699da172a5319adda23488e0bffebc1cadc","modified":1603795475974},{"_id":"public/2017/06/07/linuxtop/index.html","hash":"b81637b702d5fa9c4d1bd47fb2edd6760433a742","modified":1603795475974},{"_id":"public/2017/06/07/sharesession/index.html","hash":"92f031bdea4eb55f993d6d9d17db39311e881c2a","modified":1603795475974},{"_id":"public/2017/10/11/sublimetext3rightclick/index.html","hash":"f531175771f889758a2e7c39d8d1dfa05963d0e0","modified":1603795475974},{"_id":"public/2017/05/26/transitionstranslate/index.html","hash":"ae9996c7ffe68805b29dab555da1c38f8c653b92","modified":1603795475974},{"_id":"public/2017/05/20/badtasteofcode/index.html","hash":"313ef292e8b03fd34631d16d3f9e24fb8e849d2d","modified":1603795475974},{"_id":"public/2017/05/05/laraveluserlogin/index.html","hash":"5bc64f541f3e12f8cd93426d17cb143e930d713a","modified":1603795475974},{"_id":"public/2017/05/05/laraveladminlogin/index.html","hash":"1f3db8d6b4baf3c09e33c90add0db4b2fd3277d3","modified":1603795475975},{"_id":"public/2017/04/27/laraveliocanddi/index.html","hash":"347f3be363a034c5c0848552c213b757d1b697de","modified":1603795475975},{"_id":"public/2017/04/15/phpnewgc/index.html","hash":"dacbe9b02b6a22bfe48f62b36d8165cb65dd1175","modified":1603795475975},{"_id":"public/2017/04/15/phpvarinternstore1/index.html","hash":"8e65cf63a88ecfc5bd7235ba9a441f0c0cbaec07","modified":1603795475975},{"_id":"public/2017/04/18/apachevirtualhost/index.html","hash":"56e494e232354e20d10b9a32df7f503204fee40b","modified":1603795475975},{"_id":"public/2017/04/15/phpvarinternstore2/index.html","hash":"6a6edb8b696882f2765c5b3a100d166028ff137a","modified":1603795475975},{"_id":"public/2017/04/11/phpsortalgorithm/index.html","hash":"35ca901025c2e66b479d651f604a25b56cb51aae","modified":1603795475975},{"_id":"public/2017/04/08/phpkeywords1/index.html","hash":"2c9d54ed5f0d7eb3e4fa28f340b2976a60f135a5","modified":1603795475975},{"_id":"public/2017/04/09/sina2014php/index.html","hash":"62cdafb4cb6e53ccab5f5ff1912c13972159cb21","modified":1603795475976},{"_id":"public/2017/04/06/josephring/index.html","hash":"2b55da0d79e3edcda79e277c36647a23baa3836a","modified":1603795475976},{"_id":"public/2017/04/04/processthread/index.html","hash":"bfece236c502a39477bfd63f9432d368772031e1","modified":1603795475976},{"_id":"public/2017/04/03/tcpip/index.html","hash":"e0b748cd4c66b5182d550aa9fab6ab1ded91cace","modified":1603795475976},{"_id":"public/2017/04/04/httpstatecode/index.html","hash":"18f2e75f666649edbdcec11f253837f98f8ed87d","modified":1603795475976},{"_id":"public/2017/04/02/linuxcrontab/index.html","hash":"664740e018b9aacddbde40739191e559f62d3136","modified":1603795475976},{"_id":"public/2017/04/02/processscheduling/index.html","hash":"82a1ea9edd5d73edf2b2e9459352284a3ab04e07","modified":1603795475976},{"_id":"public/2017/04/02/aboutHexo/index.html","hash":"adf8ba13ea7f36eb1054c65a3c9c32db71b81c1e","modified":1603795475977},{"_id":"public/2017/04/01/hexoOthers/index.html","hash":"8fd0a431e15bda9cb64519825a9915777025656e","modified":1603795475977},{"_id":"public/2017/04/01/hexoNexT/index.html","hash":"f38e3c048a9b227a05c33fa84a1143bf9fd5ddc6","modified":1603795475977},{"_id":"public/2017/04/01/hexogithub/index.html","hash":"a2cfe989ef97929b5e1d686dddef166c1ffa9043","modified":1603795475979},{"_id":"public/2017/04/01/heyliuxiaoyang/index.html","hash":"f6c4cac9f7756fb118bbc394aca94574abffc7ef","modified":1603795475979},{"_id":"public/archives/index.html","hash":"bfb7729e0ec748172980d160e116b855843e4ca5","modified":1603795475980},{"_id":"public/archives/page/2/index.html","hash":"2ec589dc0a79aa5f02dbf090f9da017e0978183c","modified":1603795475980},{"_id":"public/archives/page/3/index.html","hash":"16e5e7356524f18d842fadefa5e8ad3f5c1f4b0c","modified":1603795475980},{"_id":"public/archives/page/4/index.html","hash":"ad3cc4d26d7d6591a82aafb991997b848c88615d","modified":1603795475980},{"_id":"public/archives/page/6/index.html","hash":"867312a96b05271611398b917f49a2b7498be0df","modified":1603795475980},{"_id":"public/archives/page/7/index.html","hash":"bb809ba97c4bd997c4e5455c604442cf0e5d72ad","modified":1603795475981},{"_id":"public/archives/page/5/index.html","hash":"f42d9c090f8c3d8d34678bf7206f8ac2b17a7130","modified":1603795475981},{"_id":"public/archives/2017/index.html","hash":"d426231636e88e520d520b2517491b9288d7fd6b","modified":1603795475981},{"_id":"public/archives/2017/page/3/index.html","hash":"6d9adad46e475bc2b828e019646ece8560cd7a67","modified":1603795475981},{"_id":"public/archives/2017/page/2/index.html","hash":"31e3a41cc5381c5988ae21b6639a970a989fb106","modified":1603795475981},{"_id":"public/archives/2017/04/index.html","hash":"4e368e76415117277b113e302176779ce21f19fa","modified":1603795475981},{"_id":"public/archives/2017/page/4/index.html","hash":"07822b1954ac082d2444536cb716eed761e85cd8","modified":1603795475981},{"_id":"public/archives/2017/04/page/2/index.html","hash":"4a28536d19e6069dd4870598e8e631169dd754d0","modified":1603795475981},{"_id":"public/archives/2017/page/5/index.html","hash":"d11cc70b24802370b41892fc0cc2d041e37eda2c","modified":1603795475982},{"_id":"public/archives/2017/05/index.html","hash":"8bfeb3c14ab17cd9e89329806f3f86102b3bb06c","modified":1603795475982},{"_id":"public/archives/2017/06/index.html","hash":"a0e84c6824eeac8cae803568873da04b29e90822","modified":1603795475982},{"_id":"public/archives/2017/07/index.html","hash":"fbe46273ee06e30feea21bf5bed6332ad11ea2ce","modified":1603795475982},{"_id":"public/archives/2017/09/index.html","hash":"4f5c1ed8b54a2f7a268271f14350f3d43934c366","modified":1603795475982},{"_id":"public/2020/10/27/gf-cli-series-0-md/index.html","hash":"5d2400aa12b4e67f3a968fa59524a8919ff26bb5","modified":1603795476208},{"_id":"public/archives/page/8/index.html","hash":"f337b14d49c615084e5dc74ac006e12aa30501ec","modified":1603795476208},{"_id":"public/archives/2018/index.html","hash":"2382c36c26883ce5746ca217e264072233ba13fd","modified":1603795476210},{"_id":"public/archives/2017/08/index.html","hash":"c5e0a7d08a6cb07392c55857cc2d0e2734cb1899","modified":1603795476210},{"_id":"public/archives/2017/10/index.html","hash":"b277428c67e294e68f6dd28dc56a5779cfb93299","modified":1603795476210},{"_id":"public/archives/2018/page/2/index.html","hash":"9e8f84cc3b19b4dba464f3f2541166c2081028f8","modified":1603795476210},{"_id":"public/archives/2018/page/3/index.html","hash":"8f1081c4623e3bc967e27fd0d882298c2f7f0b3b","modified":1603795476210},{"_id":"public/archives/2018/01/index.html","hash":"b75d228057eea7fe75affc3844407924d31d9a6a","modified":1603795476210},{"_id":"public/archives/2018/04/index.html","hash":"380116a747cf3d88092af3b1691d85bb53a5a9c8","modified":1603795476210},{"_id":"public/archives/2018/05/index.html","hash":"76ded240b52ae41b48a48debcea982264101b980","modified":1603795476211},{"_id":"public/archives/2020/index.html","hash":"7830cbe0de5e1ff34d06c12a1430f196c289fed2","modified":1603795476211},{"_id":"public/archives/2018/06/index.html","hash":"25eedbe4f7c9a7f1ba60e806d9ec3e2c0ee93b9e","modified":1603795476211},{"_id":"public/archives/2020/10/index.html","hash":"411cebcdb51e2f1256e56f432fffcb631ff3082d","modified":1603795476211},{"_id":"public/categories/Hexo/index.html","hash":"3c92bedb1ece835204f41d6876c4b62a86c71522","modified":1603795476211},{"_id":"public/categories/重构/index.html","hash":"d573a7a4ab34304ab07aa79d6ecfde0cc0404272","modified":1603795476211},{"_id":"public/categories/Web/index.html","hash":"1ff5536d43407ff5a1cdf05194cb777cf23d3816","modified":1603795476211},{"_id":"public/categories/算法/index.html","hash":"dc82d798ea5db197cbeb7f3eaf10cdecc8cb7037","modified":1603795476211},{"_id":"public/categories/Linux-Unix/index.html","hash":"88a7b56b4aa2fb389edddd8f2b0da8026d27155b","modified":1603795476211},{"_id":"public/categories/Linux-Unix/page/2/index.html","hash":"ba6d171e018118b44a153f4036c219ef990954de","modified":1603795476212},{"_id":"public/categories/PHP/index.html","hash":"c9efa37b5a5b965425e33712a9a4eb02e302cb10","modified":1603795476212},{"_id":"public/categories/Git/index.html","hash":"28b2b809826609ed4d451eaefe54e44da8a1cf93","modified":1603795476212},{"_id":"public/categories/GO/index.html","hash":"2c9fbc8a233c5bfd3c91cdde71d9c631406dc02c","modified":1603795476212},{"_id":"public/categories/生活日志/index.html","hash":"8dc1e195e0a8159d6b57eafad67efd5854772b0d","modified":1603795476212},{"_id":"public/categories/HTTP/index.html","hash":"804e7dd21181ba04da0a2d6f2637863f56533763","modified":1603795476212},{"_id":"public/categories/进程-线程/index.html","hash":"44cb6663eb8628a8cff078c8d163fbccca6d2d22","modified":1603795476212},{"_id":"public/categories/MySQL/index.html","hash":"2e2438d43c03b23975fc229937000165b884f5d2","modified":1603795476212},{"_id":"public/categories/Nginx/index.html","hash":"e8c02fda3c8e3005263422fa11e9518153d9986b","modified":1603795476213},{"_id":"public/categories/Python/index.html","hash":"6eda28e0c8a370462969c5e3b9770709ba028f73","modified":1603795476213},{"_id":"public/categories/requests/index.html","hash":"56259e5ed1f1d29feaa9e15f3556c4039b09d26a","modified":1603795476213},{"_id":"public/categories/网络编程/index.html","hash":"b6fe8b242742bfde565da3c47197be1b04da176e","modified":1603795476213},{"_id":"public/categories/设计模式/index.html","hash":"fe9b18c98e02ab6ed48cf93bbb005544d64791e7","modified":1603795476213},{"_id":"public/categories/SQLAlchemy/index.html","hash":"6b1e29627794928daa26440cea8c24557b696b1c","modified":1603795476213},{"_id":"public/categories/辅助研发杂记/index.html","hash":"02669e1650f2eb6ea80e6ce7775d85f1bce97934","modified":1603795476213},{"_id":"public/categories/Tornado/index.html","hash":"ce36d3014e7c8871141aae4a638190960bea81c1","modified":1603795476213},{"_id":"public/categories/Windows/index.html","hash":"8125f23279fb31031affb4fcd9406f5d7fe88c49","modified":1603795476213},{"_id":"public/categories/基本概念/index.html","hash":"ff8ca3a7c7e750905337343b315f5d80e8591e90","modified":1603795476213},{"_id":"public/categories/消息队列/index.html","hash":"7374dbc62fcbeb6873acfdceca8836c05a094456","modified":1603795476213},{"_id":"public/categories/前端/index.html","hash":"fd31d851766210af6c41aa98ea88936faf59809b","modified":1603795476213},{"_id":"public/categories/Laravel/index.html","hash":"6553bf0d869a374698d70acac21fd5c4f2681938","modified":1603795476213},{"_id":"public/categories/kafka/index.html","hash":"1f6ad6ff433ec1968d1aa458118736e7ceae374a","modified":1603795476214},{"_id":"public/categories/数据库/index.html","hash":"9a3b5a64f8ee30bd1724710194c87b1add8e5f9d","modified":1603795476214},{"_id":"public/index.html","hash":"f7c6d2e8fd9d84fd04537549004f22e8758dc079","modified":1603795476214},{"_id":"public/page/3/index.html","hash":"e264fd90dbb9dc08e292122fa0e5993ef05838d7","modified":1603795476214},{"_id":"public/categories/工程/index.html","hash":"efcc30e2bdce7653e5fffff26b358943913ccf69","modified":1603795476214},{"_id":"public/page/2/index.html","hash":"29038f6011ddb04d13daf07eea9eb8f62cd380de","modified":1603795476214},{"_id":"public/categories/分布式锁/index.html","hash":"c6773e9c7923f87a2b393aa10bc4e8a775fb1198","modified":1603795476214},{"_id":"public/page/4/index.html","hash":"08984405bac8a400ab9908e1537db8177802fc93","modified":1603795476214},{"_id":"public/page/6/index.html","hash":"81f14c22ddf01dac8cf82eafc85521a65878d067","modified":1603795476214},{"_id":"public/page/5/index.html","hash":"baa33ea702f0cd5ce39cb9438057b7379170cf16","modified":1603795476214},{"_id":"public/tags/Hexo/index.html","hash":"d86159531a1d33455bd2b3ab30eecb44accfcd62","modified":1603795476214},{"_id":"public/page/7/index.html","hash":"f2d584616e93d8fe31a8dad67802217adf02f1be","modified":1603795476215},{"_id":"public/tags/原理/index.html","hash":"450d0b14c6fed8a5b6bf8167e24365598eb6f70a","modified":1603795476215},{"_id":"public/tags/命令/index.html","hash":"77e0b8343899afee5732bbd2cc23461d31cd6398","modified":1603795476215},{"_id":"public/tags/Apache/index.html","hash":"14885165cf93fd44ef89c54b941912ff07dd1ba2","modified":1603795476215},{"_id":"public/tags/命令/page/2/index.html","hash":"e52f1ac28d33cbecbcadd87886cb420998907143","modified":1603795476215},{"_id":"public/tags/虚拟主机/index.html","hash":"ba8f1d14432171e396efef8dc41d167f81b4f686","modified":1603795476215},{"_id":"public/tags/代码的坏味道/index.html","hash":"17f961a63522d1d6ff07815953975cb3f5e0d3f8","modified":1603795476215},{"_id":"public/tags/PHP/index.html","hash":"256b470d1c1360ec574813102fb3ef34bef2fd14","modified":1603795476215},{"_id":"public/tags/重构/index.html","hash":"497fde454648dc445d061e8cba8fd0160697b287","modified":1603795476215},{"_id":"public/tags/算法/index.html","hash":"493dbe6f2652f11a34eb9e1052127664e3aacfe0","modified":1603795476215},{"_id":"public/tags/Linux-Unix/index.html","hash":"cca6ea764174f54ea0854847c41c0732e626943f","modified":1603795476215},{"_id":"public/tags/Python3/index.html","hash":"00fff30631f376104891c1667bb796a4ebbba6bd","modified":1603795476216},{"_id":"public/tags/CGI/index.html","hash":"c7d7eacec4e11944ac4139001d499e5ac5e8ab39","modified":1603795476216},{"_id":"public/tags/FCGI/index.html","hash":"021630f4c599b9c2a5de4aeff863cc2c81ecf2a9","modified":1603795476216},{"_id":"public/tags/PHP-FPM/index.html","hash":"4c63062ab8b904d0687a3935748b5b5e85dc9026","modified":1603795476216},{"_id":"public/tags/PHP-CGI/index.html","hash":"158471c9c2a83fd6df4dff67d673ac1aa4c8ad2c","modified":1603795476216},{"_id":"public/tags/Git/index.html","hash":"87932121b38b0ce32787dee5f6e440e5d0926daa","modified":1603795476216},{"_id":"public/tags/GO/index.html","hash":"d993dce929d5bc44665c73971297ff764d7d45f0","modified":1603795476216},{"_id":"public/tags/主题/index.html","hash":"c95776fb4e252d83074a2ecf84ef12a57dede6dc","modified":1603795476216},{"_id":"public/tags/博客/index.html","hash":"ef69887bb8cafa4bba7926ed9cfbe2b2b133db42","modified":1603795476216},{"_id":"public/tags/NexT/index.html","hash":"d09b8fbbc8ea2c5ffefba2afdc465482f24aca51","modified":1603795476216},{"_id":"public/tags/GitHub/index.html","hash":"d9a53b9553147a518a0aee062786fbb410d61222","modified":1603795476217},{"_id":"public/tags/生活/index.html","hash":"3e8f591237a2192b74b092492c78a975a53bacff","modified":1603795476217},{"_id":"public/tags/Life/index.html","hash":"737eaa374ddb9739a4bbf09d66ea500cfca7d62e","modified":1603795476217},{"_id":"public/tags/HTTP/index.html","hash":"11de7d1dd671f69f149b11af22b1eaab5fefb018","modified":1603795476217},{"_id":"public/tags/POST/index.html","hash":"f4f52f38483db92ffa52f38a4ef8301799c0dfdd","modified":1603795476217},{"_id":"public/tags/状态码/index.html","hash":"9cb804f3b5f48213eb59ebe7259bd040b01977c9","modified":1603795476217},{"_id":"public/tags/约瑟夫环/index.html","hash":"6b73957da8aa39ee54e30c9f26998a7e2c28aa41","modified":1603795476217},{"_id":"public/tags/计算密集型任务/index.html","hash":"683ad4e28d8a185e28d2e95d553e1440336901b9","modified":1603795476217},{"_id":"public/tags/I-O密集型任务/index.html","hash":"652e57e4e4f67e566c5a3afa98887ac8586e0d68","modified":1603795476217},{"_id":"public/tags/Python/index.html","hash":"85a003ecf2e62152254c1c1adaeebb1a159eb484","modified":1603795476217},{"_id":"public/tags/Linux/index.html","hash":"6980cfac4b6a0f33757d55e90f2ab275392d81d5","modified":1603795476217},{"_id":"public/tags/cp/index.html","hash":"e1a71b55d05b79d769ba19f87ec57d140e8d58f0","modified":1603795476217},{"_id":"public/tags/Linux/page/2/index.html","hash":"c937ab4c1e74f205846115e48f7bd9d3f06c3ced","modified":1603795476218},{"_id":"public/tags/cd/index.html","hash":"e9d01dc1895a75929f566632e8a2a9cccb074e14","modified":1603795476218},{"_id":"public/tags/ln/index.html","hash":"1d9f4534a8d5886a9f7107c89e9045c0bdce8850","modified":1603795476218},{"_id":"public/tags/ping/index.html","hash":"17aa42c1ecfd69a09f1059f7b9bac7ba552116ce","modified":1603795476218},{"_id":"public/tags/用户态/index.html","hash":"8916f503fb7a5f48a701db3fb16dc5035c67e416","modified":1603795476218},{"_id":"public/tags/内核态/index.html","hash":"47d683c358848d643db0911b58acf1a6b78d5987","modified":1603795476218},{"_id":"public/tags/MySQL/index.html","hash":"8f877eec159691978198fa15d49a185264db8ab8","modified":1603795476218},{"_id":"public/tags/InnoDB/index.html","hash":"b2fe2ff118e5f52f7487c5e525e6abff29134f39","modified":1603795476218},{"_id":"public/tags/MyISAM/index.html","hash":"c7d189327809e9926462cc41dcd1cbc734566209","modified":1603795476218},{"_id":"public/tags/SERVER/index.html","hash":"39ba4dbcf2b6ef3435b9d47d52a8b0294a36bf4b","modified":1603795476220},{"_id":"public/tags/Nginx/index.html","hash":"609fa9590d4c62ef1cf8720efa223886d5a9c16e","modified":1603795476220},{"_id":"public/tags/变量的内部存储/index.html","hash":"89aba7a3415fa7f6a0e2db29e7c21a5e6e53f44d","modified":1603795476220},{"_id":"public/tags/操作系统/index.html","hash":"eedb018d96932e049fe951b7edd45610d770a286","modified":1603795476220},{"_id":"public/tags/进程调度/index.html","hash":"704a3f964759f17b8e1415643bd3b30cdc00bfa0","modified":1603795476220},{"_id":"public/tags/上下文管理器/index.html","hash":"26584539cc0dbe02879aa28ff5b87bb0dfb24fa8","modified":1603795476220},{"_id":"public/tags/垃圾回收/index.html","hash":"204dc266c7702217b5e6be35b89c3e568ae4907e","modified":1603795476220},{"_id":"public/tags/requests/index.html","hash":"25ecc72fe83ccd15038a8abf43ef0ccf5a28598a","modified":1603795476220},{"_id":"public/tags/session/index.html","hash":"6b706dfa63102ff2bd3578592d0dd68ef0530be3","modified":1603795476220},{"_id":"public/tags/会话对象/index.html","hash":"a2ba325fa744715b8d4c3296f6fba218fdbdb570","modified":1603795476221},{"_id":"public/tags/session共享/index.html","hash":"f92a991a714b59d466df9b4cbfb776c9966a5856","modified":1603795476221},{"_id":"public/tags/网络编程/index.html","hash":"faee210e753970d1a80cd5f9d92b2741a8a0a3ed","modified":1603795476221},{"_id":"public/tags/知识点/index.html","hash":"528de5dcb8b8999fbedd846628599df35fc29c1d","modified":1603795476221},{"_id":"public/tags/设计模式/index.html","hash":"d63e7bb248f898a8dce13da7ba371b408e357f23","modified":1603795476221},{"_id":"public/tags/单例模式/index.html","hash":"5baf8d36978b534a2b7f63080ae8abcf0c681c57","modified":1603795476221},{"_id":"public/tags/SQLAlchemy/index.html","hash":"6a1daac493cb1a5b3ba0c8169c16b4900b0ab560","modified":1603795476221},{"_id":"public/tags/bug/index.html","hash":"5708d9247f2783f75e2544f63e10f01dd39db323","modified":1603795476222},{"_id":"public/tags/Sublime-Text-3/index.html","hash":"f6664ec986ca54cbd456d897f6f7513042a01dfc","modified":1603795476222},{"_id":"public/tags/子进程/index.html","hash":"2d0e7d12d1492c7495ff4d12eded40b59e3f613d","modified":1603795476222},{"_id":"public/tags/线程/index.html","hash":"36f0e6bd6d7fe8f9d419439f185d0713338ff20c","modified":1603795476222},{"_id":"public/tags/Tornado/index.html","hash":"8ba54f218f039e24ca81d9f03a77a350352e24e5","modified":1603795476222},{"_id":"public/tags/翻译文档/index.html","hash":"2618b3524d572d7d1484f32513c1a10efbbd9ff9","modified":1603795476222},{"_id":"public/tags/并发网络爬虫/index.html","hash":"7768e4c4bae93e688a6dbd0705e939ba517249cc","modified":1603795476222},{"_id":"public/tags/用户指南/index.html","hash":"2d56bf0e1a8ee21c28403e25c5b8db780b3ccf69","modified":1603795476223},{"_id":"public/tags/UNIQUE-KEY/index.html","hash":"a39dc878d65c736b2b89a2c4b359d920d47bd5ad","modified":1603795476223},{"_id":"public/tags/PRIMARY-KEY/index.html","hash":"3b0b4acb28b381273dfc85a5b70c26079516eb64","modified":1603795476223},{"_id":"public/tags/Windows/index.html","hash":"123f124138583dc2b4fbbef58efabf3a5db80eba","modified":1603795476223},{"_id":"public/tags/阻塞/index.html","hash":"e9c73fa4b4850a1072e05bbb69b2b107b6b116e8","modified":1603795476223},{"_id":"public/tags/端口占用/index.html","hash":"69cec2bee67ccae4d0303200785a3170b62bc408","modified":1603795476223},{"_id":"public/tags/非阻塞/index.html","hash":"f0c0cfe5383aed46f5a55e6db3500a163e490866","modified":1603795476223},{"_id":"public/tags/异步/index.html","hash":"87163de7b30a03de5da213e6e0c6bd161adc9da3","modified":1603795476224},{"_id":"public/tags/同步/index.html","hash":"950a165cd66e4c896b1ce4ed047bcb00ff3e90d2","modified":1603795476224},{"_id":"public/tags/抽象类/index.html","hash":"0304ee11233360a7967e16f2a7dd491f77b7a6cc","modified":1603795476224},{"_id":"public/tags/接口/index.html","hash":"0e8759a9d025244b29b07ce68924c284b0d18e14","modified":1603795476224},{"_id":"public/tags/jquery/index.html","hash":"334a6b7cef00524c40f3e8f976889ec34ec79a58","modified":1603795476224},{"_id":"public/tags/datatables/index.html","hash":"7a7ed6ee87e0f3d9bbd5b808e434c8d7a1ad0de3","modified":1603795476224},{"_id":"public/tags/前端/index.html","hash":"97efeccd7a37fc707d60762fa840ca9ac976107f","modified":1603795476224},{"_id":"public/tags/kafka/index.html","hash":"0600d49c2fe2b004cee0e6ecea46fdccf6b93792","modified":1603795476224},{"_id":"public/tags/文件存储/index.html","hash":"021dc8fb300091f0dc22a709e4d3da9bf0b13201","modified":1603795476225},{"_id":"public/tags/Laravel/index.html","hash":"2cb6dabf278755acb3144819504a54aa6026e2db","modified":1603795476225},{"_id":"public/tags/验证原理/index.html","hash":"efc3f8afbb5315f10d20ab855430f01e7919bc66","modified":1603795476225},{"_id":"public/tags/多用户登录/index.html","hash":"da1299881565cc8c85afe91e5baf868b7dba75fc","modified":1603795476225},{"_id":"public/tags/librdkafka/index.html","hash":"65d2ef1a1190c7f12b7c45c8f15b343f09430b06","modified":1603795476225},{"_id":"public/tags/crontab/index.html","hash":"d6049a0ee4ce6d77182b802da1fda77f34d4d07b","modified":1603795476225},{"_id":"public/tags/ps/index.html","hash":"7e5f129a882f4935e4687a0010349679166c2b9c","modified":1603795476225},{"_id":"public/tags/tar/index.html","hash":"b2d126c2270329263ed83cdb17098c45f9b48747","modified":1603795476225},{"_id":"public/tags/top/index.html","hash":"3298b901fbf7f57976adcd3dde11b679e9956adf","modified":1603795476225},{"_id":"public/tags/数据库/index.html","hash":"889dc9158b782074bab35d64c50b8647da647c93","modified":1603795476225},{"_id":"public/tags/事物/index.html","hash":"bbde1e995fbb23afaf3748d864c9e0b7dc788bfd","modified":1603795476226},{"_id":"public/tags/事物隔离/index.html","hash":"ef92147d8c91a89005ad52d8b2deb5826893ae14","modified":1603795476226},{"_id":"public/tags/Supervisor/index.html","hash":"a2fd18565fb04e0c920894abb01d70e1d4d06ec8","modified":1603795476226},{"_id":"public/tags/项目部署/index.html","hash":"631176a79770d4d392839ffb3a628481aafb6666","modified":1603795476226},{"_id":"public/tags/self/index.html","hash":"77cd70ce8a3365107965d1e620df2f3b5d4cf187","modified":1603795476226},{"_id":"public/tags/final/index.html","hash":"749a236c252c7189befad8a713d3623ebf343d53","modified":1603795476226},{"_id":"public/tags/this/index.html","hash":"040c552906d9f6d66a81797fdff174f6183e622f","modified":1603795476227},{"_id":"public/tags/parent/index.html","hash":"21d981183b76f408b1811c4f719ca62d97496e4d","modified":1603795476227},{"_id":"public/tags/static/index.html","hash":"22e7e1308c520e01a6383dcc95993efcbdd607cc","modified":1603795476227},{"_id":"public/tags/进程/index.html","hash":"10c7e63d46fc5b0f9049f5eda2e91b741614bbd6","modified":1603795476227},{"_id":"public/tags/程序/index.html","hash":"6741d7264f61261b9b83805dcdc04fad674d9912","modified":1603795476227},{"_id":"public/tags/TCP-IP/index.html","hash":"32fa616396f1ab580e6ddbf1a31e0df0b446812f","modified":1603795476227},{"_id":"public/tags/协程/index.html","hash":"65c81c54847f89df21695db772341e201c8efd84","modified":1603795476227},{"_id":"public/tags/Web/index.html","hash":"9b421a79c00e95042c32c9dcfec6e88f688e4db3","modified":1603795476227},{"_id":"public/tags/后台用户认证/index.html","hash":"840c0f8b683bc8a738833c733617b031785f9d1d","modified":1603795476227},{"_id":"public/tags/netstat/index.html","hash":"fac55c27856ff2f477b74157075cdaae0513ab3a","modified":1603795476227},{"_id":"public/tags/ls/index.html","hash":"b9f3d7c19a9112e4978435ddfd15fad401105422","modified":1603795476228},{"_id":"public/tags/排序/index.html","hash":"2786c26555b1795e32fe73848da043e854d7351b","modified":1603795476228},{"_id":"public/tags/时间复杂度/index.html","hash":"1ba3023dc8f2bf3f1932f134e0236148bde79c81","modified":1603795476229},{"_id":"public/tags/控制反转-IoC/index.html","hash":"819e40eab7679562755531745e05c03dfb555a5d","modified":1603795476229},{"_id":"public/tags/依赖注入-DI/index.html","hash":"99d05fe9a8f7351e5f0828c9442ccd2fef2e380c","modified":1603795476229},{"_id":"public/tags/分布式锁/index.html","hash":"2e0275347fab3ae2adfbbeb9793c954edbcfb8b2","modified":1603795476229},{"_id":"public/tags/redis/index.html","hash":"34c5d318ac90d49cf360635f94ef5f7381370af6","modified":1603795476229},{"_id":"public/tags/zookeeper/index.html","hash":"b415fd0c6271f8880005cfeeda66d47f309a4a4f","modified":1603795476229},{"_id":"public/tags/Transitions/index.html","hash":"e1217fa5d9c6a7f29346b2f6d1eb5c0c76128661","modified":1603795476229},{"_id":"public/tags/状态机库/index.html","hash":"05d509985a42660911ffbd0eeecb067c92b9511b","modified":1603795476229},{"_id":"public/categories/gf-cli/index.html","hash":"29ff802552b63f999b3584a8087e59ca1ac6f443","modified":1603795476270},{"_id":"public/page/8/index.html","hash":"0ba9ace61a48ffee6974b5d005c71bf8482c2409","modified":1603795476270},{"_id":"public/tags/gf/index.html","hash":"209fb1f7b83f3982c901378828bebdd085809481","modified":1603795476270},{"_id":"public/tags/gf-cli/index.html","hash":"9fa48dbd5262a2c737d33ec38308c2a71ad5f2d7","modified":1603795476270},{"_id":"public/google63cd143b1fbb3ff4.html","hash":"e327904eefc5c9c6763ff6ff9e204abd49837841","modified":1603795476270},{"_id":"public/favicon.ico","hash":"2a1a6186e75b6490e137fba02cc739e1c6c8a129","modified":1603795476270},{"_id":"public/images/2017-12-19 162446.png","hash":"475c6f7c2078d1798869f216b6486e54c542f7ea","modified":1603795476270},{"_id":"public/images/2017-4-11 185017.png","hash":"f86c64b0f3692e46ca088f332596b23c85504331","modified":1603795476271},{"_id":"public/images/2017-12-19 162624.png","hash":"17d37c2907d87336c6b4354c7a649eeef196598f","modified":1603795476271},{"_id":"public/images/2017-4-11 195257.jpg","hash":"5546c697c1911519373718d54662f1dc82d87299","modified":1603795476271},{"_id":"public/images/2017-12-19 162037.png","hash":"6318df5cd63125e5b97388720c5d89f8335757d7","modified":1603795476271},{"_id":"public/images/2017-4-15 135317.png","hash":"c34573830912f7f22db3832951ca4ba362652756","modified":1603795476271},{"_id":"public/images/2017-4-11 195640.jpg","hash":"50f6550e925f01b99e3de2bd866461aeef93da3a","modified":1603795476271},{"_id":"public/images/2017-4-2 102013.png","hash":"5c6becbf5ea5c637f3ce2d4e24a79e7c15fc832f","modified":1603795476271},{"_id":"public/images/2017-4-15 135755.png","hash":"56f84269a3701b0854d4e02b0df8e0b647abf47e","modified":1603795476271},{"_id":"public/images/2017-4-15 140001.png","hash":"b54ee0e63470781c00ef20322b0bd00602456e58","modified":1603795476271},{"_id":"public/images/2017-4-2 165636.png","hash":"8a2974ef512c5d7c8f15700ff5b9ffbfd0cb2428","modified":1603795476271},{"_id":"public/images/2017-4-2 102023.png","hash":"944ad2b10893e866dec3729037c7befa2eaba560","modified":1603795476271},{"_id":"public/images/2017-4-3 143008.png","hash":"3e3166be01703dbd908a76a7315d544cf29ef8d4","modified":1603795476271},{"_id":"public/images/2017-4-3 140143.png","hash":"e580bf69e8b514b710d8f700d283a483c5d94c1d","modified":1603795476272},{"_id":"public/images/2017-4-3 145434.png","hash":"8729097b1a408846d843f8102b2a7de4c52f2983","modified":1603795476272},{"_id":"public/images/2017-5-5 194823.png","hash":"c549c7701d4caf72585d024c50a01ed02e341228","modified":1603795476272},{"_id":"public/images/2017-4-15 172459.png","hash":"0fbae2f786038d1ea76708b18cf15efc156bc388","modified":1603795476272},{"_id":"public/images/2017-4-4 132812.png","hash":"bca34f365b61c28d7943ecf2d207273a03e9dc34","modified":1603795476272},{"_id":"public/images/2017-7-16 144138.jpg","hash":"4f25b99a46db7487e1c1b885e216dbcc38171cec","modified":1603795476272},{"_id":"public/images/2017-6-22 144024.png","hash":"5045162211e541628744e38d2cec0fadd6654aeb","modified":1603795476272},{"_id":"public/images/2017-6-7 095218.png","hash":"f60fcab6fb7ccf1ad33eccbf94af9b8738d4a3f4","modified":1603795476272},{"_id":"public/images/2017-9-1 161933.jpg","hash":"74e2c8f8defbdcfbbda2c066abb8cce809912de3","modified":1603795476272},{"_id":"public/images/2017-7-16 143933.jpg","hash":"bc4e98c758833d89083d274bf84069c9caab206c","modified":1603795476272},{"_id":"public/images/2018-04-30T204111.png","hash":"785fd98133c1bc74a78381eb8dcd03cbb51d2c19","modified":1603795476272},{"_id":"public/images/2018-05-06T191813.png","hash":"7fa01c1fe82cba9fef3ab84596ac81ea1b3697c1","modified":1603795476272},{"_id":"public/images/2018-05-27T223227.png","hash":"f40042818dc16b11a36238825f45106cef5ac174","modified":1603795476273},{"_id":"public/images/2020-10-25T150500.png","hash":"70f71de65380d978749f95ebb0822d1df666bed8","modified":1603795476273},{"_id":"public/images/2020-10-25T152800.png","hash":"d36d21f1afdd55e1746e73eb890ad5f09cd3d1bd","modified":1603795476273},{"_id":"public/images/2020-10-25T152300.png","hash":"49ed8ef9037c34d1a72d86b43e53edde62e22dc6","modified":1603795476273},{"_id":"public/images/2020-10-25T154700.png","hash":"0d8ae7bd3545a9d9977c3fe66a0201303c15301b","modified":1603795476273},{"_id":"public/images/2020-10-25T154800.png","hash":"dd0132e7c87db39fc976fa853516bfc7b3f12700","modified":1603795476273},{"_id":"public/images/2020-10-25T154900.png","hash":"9dd991a41db6c998deaa021d7d7279e42ab0528d","modified":1603795476273},{"_id":"public/images/2020-10-25T155200.png","hash":"0a99cb77ba122dcddde85850b87da4078a5df029","modified":1603795476273},{"_id":"public/images/2020-10-25T155300.png","hash":"cde64654c94d06a8d1423305f4f2ddbc556d23a4","modified":1603795476273},{"_id":"public/images/2018-05-27T222132.png","hash":"f76b28fb9b5819bfdc6167d49f351385aa6588dc","modified":1603795476273},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1603795476273},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1603795476273},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1603795476273},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1603795476273},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1603795476274},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1603795476274},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1603795476274},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603795476274},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603795476274},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1603795476274},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1603795476274},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1603795476274},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1603795476274},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1603795476274},{"_id":"public/images/2018-05-06T190223.png","hash":"a724cc7c40949ba7b56638730ce9ceb83e1abd8e","modified":1603795476274},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1603795476274},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1603795476274},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603795476274},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603795476275},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603795476275},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603795476275},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603795476275},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603795476275},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1603795476275},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603795476275},{"_id":"public/images/2017-12-19 161752.png","hash":"c95853ae3a34308e28dca53fbbf07fef8433311e","modified":1603795478105},{"_id":"public/images/2017-4-11 195422.jpg","hash":"ce9ac0c0a2c706eba2f9542772df89b2c8441f44","modified":1603795478112},{"_id":"public/images/2017-4-15 135507.png","hash":"ba6025aea0bdd9864e4b41e4d173c1ed75b23b1d","modified":1603795478114},{"_id":"public/images/2017-4-11 200834.jpg","hash":"bd491daa4f568fefb5a7ccac28fa560c872f48fb","modified":1603795478114},{"_id":"public/images/2017-4-15 173341.png","hash":"eed5475fc1ac5e7d839d943e8bbbedddc976b6ec","modified":1603795478114},{"_id":"public/images/2017-4-3 150129.png","hash":"3b937f85306e76680ee94f79ed623d6cdc7647bc","modified":1603795478114},{"_id":"public/images/2017-5-5 194722.png","hash":"c7eaf205cce8bcfe0d542c8cd2d76df235083738","modified":1603795478114},{"_id":"public/images/2017-5-5 195940.png","hash":"59576d70fc45740a378366689428743c40dbaf15","modified":1603795478114},{"_id":"public/images/2017-7-15 160518.png","hash":"97730b03d344fe63f8ce496c29d64af05e5f796b","modified":1603795478114},{"_id":"public/images/2017-7-15 160641.png","hash":"d2e0da5bc27d7b721ee2fd22f2e1c649f294109c","modified":1603795478114},{"_id":"public/images/2018-04-30T204327.png","hash":"909492cac35e588471a13704a12270fa36095275","modified":1603795478114},{"_id":"public/images/2018-05-06T184140.png","hash":"8099dceb7b5a9d0acc0f553bb3477289f3bd845b","modified":1603795478114},{"_id":"public/images/2017-4-11 191243.png","hash":"108e5761bac04d965db3f25d87791be72491b889","modified":1603795478115},{"_id":"public/images/2017-4-11 194803.jpg","hash":"267acca18cec6b5965e59b256d29dc53e06a79a7","modified":1603795478115},{"_id":"public/images/2017-4-11 194932.jpg","hash":"431248e9465f6d1bbaae7fd0872bd8c7a7fdff02","modified":1603795478115},{"_id":"public/images/2017-4-11 195224.jpg","hash":"01f37f97172b4ff1e3bd72764c85ac77f85cbda0","modified":1603795478115},{"_id":"public/images/2017-4-3 145924.png","hash":"cf617a1faf22c79277f92db39cbeb6a6f079020b","modified":1603795478115},{"_id":"public/images/2017-6-22 143353.png","hash":"313513fa3233a5fabd71cdd26098c6dd75c08344","modified":1603795478115},{"_id":"public/images/2017-6-22 143420.png","hash":"93ac9834dbbf6c092f6dbe9bea6963f4e8d0f1f1","modified":1603795478115},{"_id":"public/images/2017-6-22 143824.png","hash":"e418ca86a70f1eb9ad8d8af35b5599621f34835f","modified":1603795478115},{"_id":"public/images/2018-04-30T204213.png","hash":"13cc734a53b796e567767116dcd7dc540cf51ddf","modified":1603795478116},{"_id":"public/images/2017-6-7 194822.png","hash":"bfeb30dd058de54fe4f9581b6ca6bcbcfad9a1e2","modified":1603795478116},{"_id":"public/images/2017-7-16 152145.png","hash":"eb8072980268710fc098345ff716264ecab39a7d","modified":1603795478116},{"_id":"public/images/avatar.png","hash":"5cf98741ab329a717e1f2ee058f59641243b21dd","modified":1603795478116},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1603795478116},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1603795478116},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1603795478131},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1603795478131},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1603795478132},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1603795478132},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1603795478132},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1603795478132},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1603795478132},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1603795478132},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1603795478132},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1603795478132},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1603795478132},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1603795478132},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1603795478132},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1603795478133},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1603795478133},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1603795478133},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1603795478133},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1603795478133},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1603795478133},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1603795478133},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603795478133},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1603795478133},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1603795478133},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603795478133},{"_id":"public/lib/fastclick/README.html","hash":"287b2e24cae1f7d01877dda79b76c24f81123895","modified":1603795478134},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bfb6e229fc36e493d45499b4ac30a7c298786ab4","modified":1603795478134},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1603795478134},{"_id":"public/css/main.css","hash":"3f177d533bf239a5fdeddd575bbbbd165def6f71","modified":1603795478134},{"_id":"public/images/2018-04-30T203835.png","hash":"7c24d6801a5feb112e9b9110411f4719dccaee1e","modified":1603795478134},{"_id":"public/images/2017-4-11 195018.jpg","hash":"c314bace104608c818c804f7e1ecea9fbdd24ca3","modified":1603795478134},{"_id":"public/images/2017-4-11 200911.jpg","hash":"e2f228c4850f0a1b99ed89f09b0b108b3aa7b91a","modified":1603795478134},{"_id":"public/images/2017-6-22 134442.png","hash":"8a51da6087501d85e452bd44a60ed8cdd7e7a521","modified":1603795478134},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1603795478134},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1603795478134},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1603795478135},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1603795478139},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603795478139},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1603795478139},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1603795478139},{"_id":"public/images/2018-04-30T205037.png","hash":"b4fbd047c9c065215ae7c82f7168979f93e55862","modified":1603795478140},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1603795478141},{"_id":"public/images/2017-4-3 141518.png","hash":"98243c2f719bd781fd45bf37cd12dc944f86fef1","modified":1603795478233},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1603795478234},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1603795478234},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1603795478276},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603795478276},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1603795478276},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1603795478276},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1603795478286},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1603795478319},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1603795478319},{"_id":"public/images/2017-7-16 152540.jpg","hash":"52544470d51d3899594dc852cb1cebb49c4e0673","modified":1603795478321},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1603795478326},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1603795478336},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1603795478341}],"Category":[{"name":"Hexo","_id":"ckgruepr70003molczg6ke3cq"},{"name":"Web","_id":"ckgruepri0008molc9w8l0uxo"},{"name":"重构","_id":"ckgrueprq000dmolcqy9o26zu"},{"name":"算法","_id":"ckgruepry000imolcwhuds15n"},{"name":"Linux/Unix","_id":"ckgruepsh000vmolc5kvkx179"},{"name":"PHP","_id":"ckgruepst0015molcx0mzv8yg"},{"name":"Git","_id":"ckgruepsz001bmolc5trjlbdj"},{"name":"GO","_id":"ckgruept8001jmolcawq7i0x0"},{"name":"生活日志","_id":"ckgruepte001omolco99jq327"},{"name":"HTTP","_id":"ckgrueptq001ymolcisqjwbr4"},{"name":"进程/线程","_id":"ckgruepu6002cmolc6b9zm807"},{"name":"gf-cli","_id":"ckgruepue002imolcped5foei"},{"name":"MySQL","_id":"ckgruepun002qmolc288qtdyy"},{"name":"Nginx","_id":"ckgruepuw002xmolcs1h108sa"},{"name":"Python","_id":"ckgruepva0038molcd2mz1rm9"},{"name":"requests","_id":"ckgruepvs003mmolcnn0q51g0"},{"name":"网络编程","_id":"ckgruepvy003tmolcjrk2bvgx"},{"name":"设计模式","_id":"ckgruepw2003xmolc4wsm8kjv"},{"name":"SQLAlchemy","_id":"ckgruepw40041molccdotuw4k"},{"name":"辅助研发杂记","_id":"ckgruepw80046molc2j1g80no"},{"name":"Tornado","_id":"ckgruepwc004bmolc3tkie62q"},{"name":"Windows","_id":"ckgruepwu004vmolcquqdxp1w"},{"name":"基本概念","_id":"ckgrueq620094molc6nuolx89"},{"name":"前端","_id":"ckgrueq6b0099molcyn0pgl56"},{"name":"消息队列","_id":"ckgrueq6h009emolc1i4hk703"},{"name":"Laravel","_id":"ckgrueq6n009lmolclahk7b8w"},{"name":"kafka","_id":"ckgrueq6t009rmolcvk3cwo9n"},{"name":"数据库","_id":"ckgrueq71009zmolc55b81d53"},{"name":"工程","_id":"ckgrueq7900a7molc5qqjo5bu"},{"name":"分布式锁","_id":"ckgrueqc800dimolczio73n76"}],"Data":[],"Page":[{"title":"博客简介","date":"2017-04-01T06:54:24.000Z","comments":0,"_content":"### 关于博主 ### \n\n后端研发工程师\n\n来自天津 现工作于某互联网娱乐公司 - 北京  \n\n热衷于羽毛球&跑步，全部业余 \n\n不吸烟不喝酒的好青年 \n\n天秤男 轻微洁癖  \n\nEmail：kevin920902@gmail.com\n\n### 关于BLOG ###\n\n博客搭建于[GitHub](https://github.com/EZLippi/EZLippi.github.io)，欢迎Fork \n\n博客主题地址：[NexT](http://theme-next.iissnan.com/) \n\nHexo搭建博客指南：[Hexo](https://hexo.io/)\n\n博客于2017年4月1日开始筹建，2017年4月2日基本完工 \n\n**Statement**：原创博文转载请注明转载地址，非原创博文在文尾会有原博链接","source":"about/index.md","raw":"---\ntitle: 博客简介\ndate: 2017-04-01 14:54:24\ncomments: false\n---\n### 关于博主 ### \n\n后端研发工程师\n\n来自天津 现工作于某互联网娱乐公司 - 北京  \n\n热衷于羽毛球&跑步，全部业余 \n\n不吸烟不喝酒的好青年 \n\n天秤男 轻微洁癖  \n\nEmail：kevin920902@gmail.com\n\n### 关于BLOG ###\n\n博客搭建于[GitHub](https://github.com/EZLippi/EZLippi.github.io)，欢迎Fork \n\n博客主题地址：[NexT](http://theme-next.iissnan.com/) \n\nHexo搭建博客指南：[Hexo](https://hexo.io/)\n\n博客于2017年4月1日开始筹建，2017年4月2日基本完工 \n\n**Statement**：原创博文转载请注明转载地址，非原创博文在文尾会有原博链接","updated":"2020-10-25T08:49:31.438Z","path":"about/index.html","layout":"page","_id":"ckgruepr10001molctbnpjgu5","content":"<h3 id=\"关于博主\"><a href=\"#关于博主\" class=\"headerlink\" title=\"关于博主\"></a>关于博主</h3><p>后端研发工程师</p>\n<p>来自天津 现工作于某互联网娱乐公司 - 北京  </p>\n<p>热衷于羽毛球&amp;跑步，全部业余 </p>\n<p>不吸烟不喝酒的好青年 </p>\n<p>天秤男 轻微洁癖  </p>\n<p>Email：<a href=\"mailto:kevin920902@gmail.com\" target=\"_blank\" rel=\"noopener\">kevin920902@gmail.com</a></p>\n<h3 id=\"关于BLOG\"><a href=\"#关于BLOG\" class=\"headerlink\" title=\"关于BLOG\"></a>关于BLOG</h3><p>博客搭建于<a href=\"https://github.com/EZLippi/EZLippi.github.io\" target=\"_blank\" rel=\"noopener\">GitHub</a>，欢迎Fork </p>\n<p>博客主题地址：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> </p>\n<p>Hexo搭建博客指南：<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p>博客于2017年4月1日开始筹建，2017年4月2日基本完工 </p>\n<p><strong>Statement</strong>：原创博文转载请注明转载地址，非原创博文在文尾会有原博链接</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于博主\"><a href=\"#关于博主\" class=\"headerlink\" title=\"关于博主\"></a>关于博主</h3><p>后端研发工程师</p>\n<p>来自天津 现工作于某互联网娱乐公司 - 北京  </p>\n<p>热衷于羽毛球&amp;跑步，全部业余 </p>\n<p>不吸烟不喝酒的好青年 </p>\n<p>天秤男 轻微洁癖  </p>\n<p>Email：<a href=\"mailto:kevin920902@gmail.com\" target=\"_blank\" rel=\"noopener\">kevin920902@gmail.com</a></p>\n<h3 id=\"关于BLOG\"><a href=\"#关于BLOG\" class=\"headerlink\" title=\"关于BLOG\"></a>关于BLOG</h3><p>博客搭建于<a href=\"https://github.com/EZLippi/EZLippi.github.io\" target=\"_blank\" rel=\"noopener\">GitHub</a>，欢迎Fork </p>\n<p>博客主题地址：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a> </p>\n<p>Hexo搭建博客指南：<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a></p>\n<p>博客于2017年4月1日开始筹建，2017年4月2日基本完工 </p>\n<p><strong>Statement</strong>：原创博文转载请注明转载地址，非原创博文在文尾会有原博链接</p>\n"},{"title":"categories","date":"2017-04-01T07:55:52.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-01 15:55:52\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-10-25T06:43:32.287Z","path":"categories/index.html","layout":"page","_id":"ckgrueq5u0091molcrmcol756","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-01T07:48:16.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-01 15:48:16\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-10-25T06:43:32.396Z","path":"tags/index.html","layout":"page","_id":"ckgrueq5z0093molcx84wvdz3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo原理及其常用命令","date":"2017-04-02T02:35:08.000Z","_content":"\n### Hexo原理\n\n2017年4月1日使用Hexo+GitHub创建了自己的博客，主要用于生活和学习总结，经过两天的折腾，基本的博客雏形已经出来了，不得不说GitHub Pages真是个好东西。给赞。\n\n对于Hexo，[官网文档](https://hexo.io/docs/) 解释为：\n\n> Hexo is a fast, simple and powerful blog framework. You write posts in [Markdown](http://daringfireball.net/projects/markdown/) (or other languages) and Hexo generates static files with a beautiful theme in seconds.\n\n**generates static files** 这就是Hexo的作用所在，我们都知道GitHub给了广大程序设计人员一个存放开源项目的平台，每个人都可以迭代更新自己的项目或参与开发其他人的项目，而GitHub Pages就是给你提供了一个平台来显示你博客的静态页面，注意是**静态页面**，因为GitHub Pages不支持动态语言，只能使用 html 拼合成博客。\n\nHexo就是这个生成静态页面的框架，流程如下\n\n```\nmarkdown**.md -> hexo -> **.html -> github -> update website\n```\n\n你在本地编写并用Hexo生成了静态页面，存储在/public 目录下，然后push到GitHub上，GitHub展示了你的页面而已。\n\n根据[Hexo的原理是什么](https://www.zhihu.com/question/51588481) 问题中[孔晨皓](https://www.zhihu.com/people/kong-chen-hao) 的回答：\n\n> 如果要做博客 wordpress 的思路是 php + MySql 而 gitpages 不支持动态语言，因此只能使用 html 拼合成博客\n>\n> 首先自己本地文件夹的 source 就是数据库，以 .md(markdown) 格式存储文章，\n>\n> theme 文件夹是主题文件，以 .yml 等类型，决定了页面如何“组装”\n>\n> 每次运行 hexo g 命令，hexo(node.js程序)会遍历你的 source 目录，建立索引，根据你 theme 文件夹的主题生成页面到 public 文件夹。这时 public 文件夹就是一个纯由 html javascript css 等内容制作的博客，而这些恰好能在 git pages 识别\n\n而我们直接打开/public 目录中的**.html 是不能直接显示的，需要在命令行中执行以下命令：\n\n```\nhexo s\n```\n\n这条命令相当于hexo通过nide.js启动了一个本地服务器。\n\n### Hexo常用命令\n\n详见[hexo常用命令笔记](https://segmentfault.com/a/1190000002632530) ","source":"_posts/aboutHexo.md","raw":"---\ntitle: Hexo原理及其常用命令\ndate: 2017-04-02 10:35:08\ntags:\n - Hexo\n - 原理\n - 命令\ncategories:\n - Hexo\n---\n\n### Hexo原理\n\n2017年4月1日使用Hexo+GitHub创建了自己的博客，主要用于生活和学习总结，经过两天的折腾，基本的博客雏形已经出来了，不得不说GitHub Pages真是个好东西。给赞。\n\n对于Hexo，[官网文档](https://hexo.io/docs/) 解释为：\n\n> Hexo is a fast, simple and powerful blog framework. You write posts in [Markdown](http://daringfireball.net/projects/markdown/) (or other languages) and Hexo generates static files with a beautiful theme in seconds.\n\n**generates static files** 这就是Hexo的作用所在，我们都知道GitHub给了广大程序设计人员一个存放开源项目的平台，每个人都可以迭代更新自己的项目或参与开发其他人的项目，而GitHub Pages就是给你提供了一个平台来显示你博客的静态页面，注意是**静态页面**，因为GitHub Pages不支持动态语言，只能使用 html 拼合成博客。\n\nHexo就是这个生成静态页面的框架，流程如下\n\n```\nmarkdown**.md -> hexo -> **.html -> github -> update website\n```\n\n你在本地编写并用Hexo生成了静态页面，存储在/public 目录下，然后push到GitHub上，GitHub展示了你的页面而已。\n\n根据[Hexo的原理是什么](https://www.zhihu.com/question/51588481) 问题中[孔晨皓](https://www.zhihu.com/people/kong-chen-hao) 的回答：\n\n> 如果要做博客 wordpress 的思路是 php + MySql 而 gitpages 不支持动态语言，因此只能使用 html 拼合成博客\n>\n> 首先自己本地文件夹的 source 就是数据库，以 .md(markdown) 格式存储文章，\n>\n> theme 文件夹是主题文件，以 .yml 等类型，决定了页面如何“组装”\n>\n> 每次运行 hexo g 命令，hexo(node.js程序)会遍历你的 source 目录，建立索引，根据你 theme 文件夹的主题生成页面到 public 文件夹。这时 public 文件夹就是一个纯由 html javascript css 等内容制作的博客，而这些恰好能在 git pages 识别\n\n而我们直接打开/public 目录中的**.html 是不能直接显示的，需要在命令行中执行以下命令：\n\n```\nhexo s\n```\n\n这条命令相当于hexo通过nide.js启动了一个本地服务器。\n\n### Hexo常用命令\n\n详见[hexo常用命令笔记](https://segmentfault.com/a/1190000002632530) ","slug":"aboutHexo","published":1,"updated":"2020-10-25T06:43:32.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepqt0000molc6e0hto03","content":"<h3 id=\"Hexo原理\"><a href=\"#Hexo原理\" class=\"headerlink\" title=\"Hexo原理\"></a>Hexo原理</h3><p>2017年4月1日使用Hexo+GitHub创建了自己的博客，主要用于生活和学习总结，经过两天的折腾，基本的博客雏形已经出来了，不得不说GitHub Pages真是个好东西。给赞。</p>\n<p>对于Hexo，<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 解释为：</p>\n<blockquote>\n<p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a> (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n</blockquote>\n<p><strong>generates static files</strong> 这就是Hexo的作用所在，我们都知道GitHub给了广大程序设计人员一个存放开源项目的平台，每个人都可以迭代更新自己的项目或参与开发其他人的项目，而GitHub Pages就是给你提供了一个平台来显示你博客的静态页面，注意是<strong>静态页面</strong>，因为GitHub Pages不支持动态语言，只能使用 html 拼合成博客。</p>\n<p>Hexo就是这个生成静态页面的框架，流程如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markdown**.md -&gt; hexo -&gt; **.html -&gt; github -&gt; update website</span><br></pre></td></tr></table></figure>\n<p>你在本地编写并用Hexo生成了静态页面，存储在/public 目录下，然后push到GitHub上，GitHub展示了你的页面而已。</p>\n<p>根据<a href=\"https://www.zhihu.com/question/51588481\" target=\"_blank\" rel=\"noopener\">Hexo的原理是什么</a> 问题中<a href=\"https://www.zhihu.com/people/kong-chen-hao\" target=\"_blank\" rel=\"noopener\">孔晨皓</a> 的回答：</p>\n<blockquote>\n<p>如果要做博客 wordpress 的思路是 php + MySql 而 gitpages 不支持动态语言，因此只能使用 html 拼合成博客</p>\n<p>首先自己本地文件夹的 source 就是数据库，以 .md(markdown) 格式存储文章，</p>\n<p>theme 文件夹是主题文件，以 .yml 等类型，决定了页面如何“组装”</p>\n<p>每次运行 hexo g 命令，hexo(node.js程序)会遍历你的 source 目录，建立索引，根据你 theme 文件夹的主题生成页面到 public 文件夹。这时 public 文件夹就是一个纯由 html javascript css 等内容制作的博客，而这些恰好能在 git pages 识别</p>\n</blockquote>\n<p>而我们直接打开/public 目录中的**.html 是不能直接显示的，需要在命令行中执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>这条命令相当于hexo通过nide.js启动了一个本地服务器。</p>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><p>详见<a href=\"https://segmentfault.com/a/1190000002632530\" target=\"_blank\" rel=\"noopener\">hexo常用命令笔记</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hexo原理\"><a href=\"#Hexo原理\" class=\"headerlink\" title=\"Hexo原理\"></a>Hexo原理</h3><p>2017年4月1日使用Hexo+GitHub创建了自己的博客，主要用于生活和学习总结，经过两天的折腾，基本的博客雏形已经出来了，不得不说GitHub Pages真是个好东西。给赞。</p>\n<p>对于Hexo，<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官网文档</a> 解释为：</p>\n<blockquote>\n<p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a> (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n</blockquote>\n<p><strong>generates static files</strong> 这就是Hexo的作用所在，我们都知道GitHub给了广大程序设计人员一个存放开源项目的平台，每个人都可以迭代更新自己的项目或参与开发其他人的项目，而GitHub Pages就是给你提供了一个平台来显示你博客的静态页面，注意是<strong>静态页面</strong>，因为GitHub Pages不支持动态语言，只能使用 html 拼合成博客。</p>\n<p>Hexo就是这个生成静态页面的框架，流程如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markdown**.md -&gt; hexo -&gt; **.html -&gt; github -&gt; update website</span><br></pre></td></tr></table></figure>\n<p>你在本地编写并用Hexo生成了静态页面，存储在/public 目录下，然后push到GitHub上，GitHub展示了你的页面而已。</p>\n<p>根据<a href=\"https://www.zhihu.com/question/51588481\" target=\"_blank\" rel=\"noopener\">Hexo的原理是什么</a> 问题中<a href=\"https://www.zhihu.com/people/kong-chen-hao\" target=\"_blank\" rel=\"noopener\">孔晨皓</a> 的回答：</p>\n<blockquote>\n<p>如果要做博客 wordpress 的思路是 php + MySql 而 gitpages 不支持动态语言，因此只能使用 html 拼合成博客</p>\n<p>首先自己本地文件夹的 source 就是数据库，以 .md(markdown) 格式存储文章，</p>\n<p>theme 文件夹是主题文件，以 .yml 等类型，决定了页面如何“组装”</p>\n<p>每次运行 hexo g 命令，hexo(node.js程序)会遍历你的 source 目录，建立索引，根据你 theme 文件夹的主题生成页面到 public 文件夹。这时 public 文件夹就是一个纯由 html javascript css 等内容制作的博客，而这些恰好能在 git pages 识别</p>\n</blockquote>\n<p>而我们直接打开/public 目录中的**.html 是不能直接显示的，需要在命令行中执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>这条命令相当于hexo通过nide.js启动了一个本地服务器。</p>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><p>详见<a href=\"https://segmentfault.com/a/1190000002632530\" target=\"_blank\" rel=\"noopener\">hexo常用命令笔记</a> </p>\n"},{"title":"Apache2.4配置虚拟主机","date":"2017-04-18T08:10:04.000Z","_content":"\n在开发项目的时候，每个项目对应的工程目录是不同的，想直接用一个自定义主机名来分别对应，这样就不用每次敲目录名了。Apache的虚拟主机可以实现这种功能。\n\n配置虚拟主机有三种方式：\n\n- 基于IP地址\n- 基于主机名\n- 基于端口号\n\n本文主要介绍 **基于主机名** 和 **基于端口号** 这两种方式。\n\n### 基于主机名\n\n我们安装好Apache后，如果成功安装，在浏览器中中输入 localhost 即可显示出欢迎界面，Apache 默认的监听端口是80端口，这里不用输入80端口号就可以。\n\n首先修改 *C:\\Windows\\System32\\drivers\\etc* 目录下的 hosts 文件，如果修改时保存失败，第一种方式是可以修改 hosts 文件的安全属性，右键->属性->安全，赋予相应用户的权限即可；第二种方式是，使用管理员身份打开记事本，然后在记事本中打开 hosts 文件，进行如下修改：\n\n```\n# Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#\t127.0.0.1       localhost\n#\t::1             localhost\n192.168.1.105 windows10.microdone.cn\n127.0.0.1       myapp.com\t\t\t// 自定义的主机名，名称不能与网上的域名冲突\n```\n\nhosts 文件配置好后，打开 *\\Apache24\\conf* 目录下的 httpd.conf 文件，修改如下：\n\n```\n# Virtual hosts\n# Include conf/extra/httpd-vhosts.conf\n\n将 # 去掉\n\n# Virtual hosts\nInclude conf/extra/httpd-vhosts.conf\n```\n\n然后打开 *\\Apache24\\conf\\extra* 目录下的 httpd-vhosts.conf 文件，修改如下：\n\n```\n<VirtualHost *:80>\n    ServerAdmin YourName\n    DocumentRoot \"${SRVROOT}/htdocs/laravel/public\"\n    ServerName myapp.com\n    ErrorLog \"${SRVROOT}/htdocs/laravel/myapp.com-error.log\"\n    CustomLog \"${SRVROOT}/htdocs/laravel/myapp.com-access.log\" common\n    <Directory \"${SRVROOT}/htdocs/laravel/public\">\n    \tOptions Indexes FollowSymLinks MultiViews\n\t\tAllowOverride None\n\t\tRequire all granted\n\t</Directory>\n</VirtualHost>\n```\n\nDocumentRoot 对应虚拟主机主目录； \nServerName 对应主机名； \nErrorLog 对应错误日志存放路径； \nCustomLog 对应访问日志存放路径； \n其中的< Directory >< Directory />对应相应地设置信息。\n\n最后，在浏览器中输入 mapp.com/index.php 就可以访问不同目录了。\n\n### 基于端口号\n\n打开 *\\Apache24\\conf* 目录下的 httpd.conf 文件，修改如下：\n\n```\n#\n# Listen: Allows you to bind Apache to specific IP addresses and/or\n# ports, instead of the default. See also the <VirtualHost>\n# directive.\n#\n# Change this to Listen on specific IP addresses as shown below to \n# prevent Apache from glomming onto all bound IP addresses.\n#\n#Listen 12.34.56.78:80\nListen 80\nListen 8090\t\t// 添加的apache监听的另一端口号，确保未被占用\n```\n\n然后打开 *\\Apache24\\conf\\extra* 目录下的 httpd-vhosts.conf 文件，修改如下：\n\n```\n<VirtualHost *:8090>\n    ServerAdmin YourName\n    DocumentRoot \"${SRVROOT}/htdocs/laravel/public\"\n    ServerName myapp.com\n    ErrorLog \"${SRVROOT}/htdocs/laravel/myapp.com-error.log\"\n    CustomLog \"${SRVROOT}/htdocs/laravel/myapp.com-access.log\" common\n    <Directory \"${SRVROOT}/htdocs/laravel/public\">\n    \tOptions Indexes FollowSymLinks MultiViews\n\t\tAllowOverride None\n\t\tRequire all granted\n\t</Directory>\n</VirtualHost>\n```\n\n\n\n以上通过两种方式实现了通过访问不同的主机名来访问不同目录，基于IP地址的方式请访问  [Apache 配置虚拟主机三种方式](http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html)  \n\n","source":"_posts/apachevirtualhost.md","raw":"---\ntitle: Apache2.4配置虚拟主机\ndate: 2017-04-18 16:10:04\ntags:\n - Apache\n - 虚拟主机\ncategories:\n - Web\n---\n\n在开发项目的时候，每个项目对应的工程目录是不同的，想直接用一个自定义主机名来分别对应，这样就不用每次敲目录名了。Apache的虚拟主机可以实现这种功能。\n\n配置虚拟主机有三种方式：\n\n- 基于IP地址\n- 基于主机名\n- 基于端口号\n\n本文主要介绍 **基于主机名** 和 **基于端口号** 这两种方式。\n\n### 基于主机名\n\n我们安装好Apache后，如果成功安装，在浏览器中中输入 localhost 即可显示出欢迎界面，Apache 默认的监听端口是80端口，这里不用输入80端口号就可以。\n\n首先修改 *C:\\Windows\\System32\\drivers\\etc* 目录下的 hosts 文件，如果修改时保存失败，第一种方式是可以修改 hosts 文件的安全属性，右键->属性->安全，赋予相应用户的权限即可；第二种方式是，使用管理员身份打开记事本，然后在记事本中打开 hosts 文件，进行如下修改：\n\n```\n# Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#\t127.0.0.1       localhost\n#\t::1             localhost\n192.168.1.105 windows10.microdone.cn\n127.0.0.1       myapp.com\t\t\t// 自定义的主机名，名称不能与网上的域名冲突\n```\n\nhosts 文件配置好后，打开 *\\Apache24\\conf* 目录下的 httpd.conf 文件，修改如下：\n\n```\n# Virtual hosts\n# Include conf/extra/httpd-vhosts.conf\n\n将 # 去掉\n\n# Virtual hosts\nInclude conf/extra/httpd-vhosts.conf\n```\n\n然后打开 *\\Apache24\\conf\\extra* 目录下的 httpd-vhosts.conf 文件，修改如下：\n\n```\n<VirtualHost *:80>\n    ServerAdmin YourName\n    DocumentRoot \"${SRVROOT}/htdocs/laravel/public\"\n    ServerName myapp.com\n    ErrorLog \"${SRVROOT}/htdocs/laravel/myapp.com-error.log\"\n    CustomLog \"${SRVROOT}/htdocs/laravel/myapp.com-access.log\" common\n    <Directory \"${SRVROOT}/htdocs/laravel/public\">\n    \tOptions Indexes FollowSymLinks MultiViews\n\t\tAllowOverride None\n\t\tRequire all granted\n\t</Directory>\n</VirtualHost>\n```\n\nDocumentRoot 对应虚拟主机主目录； \nServerName 对应主机名； \nErrorLog 对应错误日志存放路径； \nCustomLog 对应访问日志存放路径； \n其中的< Directory >< Directory />对应相应地设置信息。\n\n最后，在浏览器中输入 mapp.com/index.php 就可以访问不同目录了。\n\n### 基于端口号\n\n打开 *\\Apache24\\conf* 目录下的 httpd.conf 文件，修改如下：\n\n```\n#\n# Listen: Allows you to bind Apache to specific IP addresses and/or\n# ports, instead of the default. See also the <VirtualHost>\n# directive.\n#\n# Change this to Listen on specific IP addresses as shown below to \n# prevent Apache from glomming onto all bound IP addresses.\n#\n#Listen 12.34.56.78:80\nListen 80\nListen 8090\t\t// 添加的apache监听的另一端口号，确保未被占用\n```\n\n然后打开 *\\Apache24\\conf\\extra* 目录下的 httpd-vhosts.conf 文件，修改如下：\n\n```\n<VirtualHost *:8090>\n    ServerAdmin YourName\n    DocumentRoot \"${SRVROOT}/htdocs/laravel/public\"\n    ServerName myapp.com\n    ErrorLog \"${SRVROOT}/htdocs/laravel/myapp.com-error.log\"\n    CustomLog \"${SRVROOT}/htdocs/laravel/myapp.com-access.log\" common\n    <Directory \"${SRVROOT}/htdocs/laravel/public\">\n    \tOptions Indexes FollowSymLinks MultiViews\n\t\tAllowOverride None\n\t\tRequire all granted\n\t</Directory>\n</VirtualHost>\n```\n\n\n\n以上通过两种方式实现了通过访问不同的主机名来访问不同目录，基于IP地址的方式请访问  [Apache 配置虚拟主机三种方式](http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html)  \n\n","slug":"apachevirtualhost","published":1,"updated":"2020-10-25T06:43:32.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepr30002molco3d6hmt7","content":"<p>在开发项目的时候，每个项目对应的工程目录是不同的，想直接用一个自定义主机名来分别对应，这样就不用每次敲目录名了。Apache的虚拟主机可以实现这种功能。</p>\n<p>配置虚拟主机有三种方式：</p>\n<ul>\n<li>基于IP地址</li>\n<li>基于主机名</li>\n<li>基于端口号</li>\n</ul>\n<p>本文主要介绍 <strong>基于主机名</strong> 和 <strong>基于端口号</strong> 这两种方式。</p>\n<h3 id=\"基于主机名\"><a href=\"#基于主机名\" class=\"headerlink\" title=\"基于主机名\"></a>基于主机名</h3><p>我们安装好Apache后，如果成功安装，在浏览器中中输入 localhost 即可显示出欢迎界面，Apache 默认的监听端口是80端口，这里不用输入80端口号就可以。</p>\n<p>首先修改 <em>C:\\Windows\\System32\\drivers\\etc</em> 目录下的 hosts 文件，如果修改时保存失败，第一种方式是可以修改 hosts 文件的安全属性，右键-&gt;属性-&gt;安全，赋予相应用户的权限即可；第二种方式是，使用管理员身份打开记事本，然后在记事本中打开 hosts 文件，进行如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This file contains the mappings of IP addresses to host names. Each</span><br><span class=\"line\"># entry should be kept on an individual line. The IP address should</span><br><span class=\"line\"># be placed in the first column followed by the corresponding host name.</span><br><span class=\"line\"># The IP address and the host name should be separated by at least one</span><br><span class=\"line\"># space.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Additionally, comments (such as these) may be inserted on individual</span><br><span class=\"line\"># lines or following the machine name denoted by a &apos;#&apos; symbol.</span><br><span class=\"line\">#</span><br><span class=\"line\"># For example:</span><br><span class=\"line\">#</span><br><span class=\"line\">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class=\"line\">#       38.25.63.10     x.acme.com              # x client host</span><br><span class=\"line\"></span><br><span class=\"line\"># localhost name resolution is handled within DNS itself.</span><br><span class=\"line\">#\t127.0.0.1       localhost</span><br><span class=\"line\">#\t::1             localhost</span><br><span class=\"line\">192.168.1.105 windows10.microdone.cn</span><br><span class=\"line\">127.0.0.1       myapp.com\t\t\t// 自定义的主机名，名称不能与网上的域名冲突</span><br></pre></td></tr></table></figure>\n<p>hosts 文件配置好后，打开 <em>\\Apache24\\conf</em> 目录下的 httpd.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Virtual hosts</span><br><span class=\"line\"># Include conf/extra/httpd-vhosts.conf</span><br><span class=\"line\"></span><br><span class=\"line\">将 # 去掉</span><br><span class=\"line\"></span><br><span class=\"line\"># Virtual hosts</span><br><span class=\"line\">Include conf/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>\n<p>然后打开 <em>\\Apache24\\conf\\extra</em> 目录下的 httpd-vhosts.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin YourName</span><br><span class=\"line\">    DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;</span><br><span class=\"line\">    ServerName myapp.com</span><br><span class=\"line\">    ErrorLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-error.log&quot;</span><br><span class=\"line\">    CustomLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-access.log&quot; common</span><br><span class=\"line\">    &lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;&gt;</span><br><span class=\"line\">    \tOptions Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">\t\tAllowOverride None</span><br><span class=\"line\">\t\tRequire all granted</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>DocumentRoot 对应虚拟主机主目录；<br>ServerName 对应主机名；<br>ErrorLog 对应错误日志存放路径；<br>CustomLog 对应访问日志存放路径；<br>其中的&lt; Directory &gt;&lt; Directory /&gt;对应相应地设置信息。</p>\n<p>最后，在浏览器中输入 mapp.com/index.php 就可以访问不同目录了。</p>\n<h3 id=\"基于端口号\"><a href=\"#基于端口号\" class=\"headerlink\" title=\"基于端口号\"></a>基于端口号</h3><p>打开 <em>\\Apache24\\conf</em> 目录下的 httpd.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Listen: Allows you to bind Apache to specific IP addresses and/or</span><br><span class=\"line\"># ports, instead of the default. See also the &lt;VirtualHost&gt;</span><br><span class=\"line\"># directive.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Change this to Listen on specific IP addresses as shown below to </span><br><span class=\"line\"># prevent Apache from glomming onto all bound IP addresses.</span><br><span class=\"line\">#</span><br><span class=\"line\">#Listen 12.34.56.78:80</span><br><span class=\"line\">Listen 80</span><br><span class=\"line\">Listen 8090\t\t// 添加的apache监听的另一端口号，确保未被占用</span><br></pre></td></tr></table></figure>\n<p>然后打开 <em>\\Apache24\\conf\\extra</em> 目录下的 httpd-vhosts.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8090&gt;</span><br><span class=\"line\">    ServerAdmin YourName</span><br><span class=\"line\">    DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;</span><br><span class=\"line\">    ServerName myapp.com</span><br><span class=\"line\">    ErrorLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-error.log&quot;</span><br><span class=\"line\">    CustomLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-access.log&quot; common</span><br><span class=\"line\">    &lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;&gt;</span><br><span class=\"line\">    \tOptions Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">\t\tAllowOverride None</span><br><span class=\"line\">\t\tRequire all granted</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>以上通过两种方式实现了通过访问不同的主机名来访问不同目录，基于IP地址的方式请访问  <a href=\"http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html\" target=\"_blank\" rel=\"noopener\">Apache 配置虚拟主机三种方式</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发项目的时候，每个项目对应的工程目录是不同的，想直接用一个自定义主机名来分别对应，这样就不用每次敲目录名了。Apache的虚拟主机可以实现这种功能。</p>\n<p>配置虚拟主机有三种方式：</p>\n<ul>\n<li>基于IP地址</li>\n<li>基于主机名</li>\n<li>基于端口号</li>\n</ul>\n<p>本文主要介绍 <strong>基于主机名</strong> 和 <strong>基于端口号</strong> 这两种方式。</p>\n<h3 id=\"基于主机名\"><a href=\"#基于主机名\" class=\"headerlink\" title=\"基于主机名\"></a>基于主机名</h3><p>我们安装好Apache后，如果成功安装，在浏览器中中输入 localhost 即可显示出欢迎界面，Apache 默认的监听端口是80端口，这里不用输入80端口号就可以。</p>\n<p>首先修改 <em>C:\\Windows\\System32\\drivers\\etc</em> 目录下的 hosts 文件，如果修改时保存失败，第一种方式是可以修改 hosts 文件的安全属性，右键-&gt;属性-&gt;安全，赋予相应用户的权限即可；第二种方式是，使用管理员身份打开记事本，然后在记事本中打开 hosts 文件，进行如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class=\"line\">#</span><br><span class=\"line\"># This file contains the mappings of IP addresses to host names. Each</span><br><span class=\"line\"># entry should be kept on an individual line. The IP address should</span><br><span class=\"line\"># be placed in the first column followed by the corresponding host name.</span><br><span class=\"line\"># The IP address and the host name should be separated by at least one</span><br><span class=\"line\"># space.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Additionally, comments (such as these) may be inserted on individual</span><br><span class=\"line\"># lines or following the machine name denoted by a &apos;#&apos; symbol.</span><br><span class=\"line\">#</span><br><span class=\"line\"># For example:</span><br><span class=\"line\">#</span><br><span class=\"line\">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class=\"line\">#       38.25.63.10     x.acme.com              # x client host</span><br><span class=\"line\"></span><br><span class=\"line\"># localhost name resolution is handled within DNS itself.</span><br><span class=\"line\">#\t127.0.0.1       localhost</span><br><span class=\"line\">#\t::1             localhost</span><br><span class=\"line\">192.168.1.105 windows10.microdone.cn</span><br><span class=\"line\">127.0.0.1       myapp.com\t\t\t// 自定义的主机名，名称不能与网上的域名冲突</span><br></pre></td></tr></table></figure>\n<p>hosts 文件配置好后，打开 <em>\\Apache24\\conf</em> 目录下的 httpd.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Virtual hosts</span><br><span class=\"line\"># Include conf/extra/httpd-vhosts.conf</span><br><span class=\"line\"></span><br><span class=\"line\">将 # 去掉</span><br><span class=\"line\"></span><br><span class=\"line\"># Virtual hosts</span><br><span class=\"line\">Include conf/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>\n<p>然后打开 <em>\\Apache24\\conf\\extra</em> 目录下的 httpd-vhosts.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin YourName</span><br><span class=\"line\">    DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;</span><br><span class=\"line\">    ServerName myapp.com</span><br><span class=\"line\">    ErrorLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-error.log&quot;</span><br><span class=\"line\">    CustomLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-access.log&quot; common</span><br><span class=\"line\">    &lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;&gt;</span><br><span class=\"line\">    \tOptions Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">\t\tAllowOverride None</span><br><span class=\"line\">\t\tRequire all granted</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>DocumentRoot 对应虚拟主机主目录；<br>ServerName 对应主机名；<br>ErrorLog 对应错误日志存放路径；<br>CustomLog 对应访问日志存放路径；<br>其中的&lt; Directory &gt;&lt; Directory /&gt;对应相应地设置信息。</p>\n<p>最后，在浏览器中输入 mapp.com/index.php 就可以访问不同目录了。</p>\n<h3 id=\"基于端口号\"><a href=\"#基于端口号\" class=\"headerlink\" title=\"基于端口号\"></a>基于端口号</h3><p>打开 <em>\\Apache24\\conf</em> 目录下的 httpd.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Listen: Allows you to bind Apache to specific IP addresses and/or</span><br><span class=\"line\"># ports, instead of the default. See also the &lt;VirtualHost&gt;</span><br><span class=\"line\"># directive.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Change this to Listen on specific IP addresses as shown below to </span><br><span class=\"line\"># prevent Apache from glomming onto all bound IP addresses.</span><br><span class=\"line\">#</span><br><span class=\"line\">#Listen 12.34.56.78:80</span><br><span class=\"line\">Listen 80</span><br><span class=\"line\">Listen 8090\t\t// 添加的apache监听的另一端口号，确保未被占用</span><br></pre></td></tr></table></figure>\n<p>然后打开 <em>\\Apache24\\conf\\extra</em> 目录下的 httpd-vhosts.conf 文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8090&gt;</span><br><span class=\"line\">    ServerAdmin YourName</span><br><span class=\"line\">    DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;</span><br><span class=\"line\">    ServerName myapp.com</span><br><span class=\"line\">    ErrorLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-error.log&quot;</span><br><span class=\"line\">    CustomLog &quot;$&#123;SRVROOT&#125;/htdocs/laravel/myapp.com-access.log&quot; common</span><br><span class=\"line\">    &lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs/laravel/public&quot;&gt;</span><br><span class=\"line\">    \tOptions Indexes FollowSymLinks MultiViews</span><br><span class=\"line\">\t\tAllowOverride None</span><br><span class=\"line\">\t\tRequire all granted</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>以上通过两种方式实现了通过访问不同的主机名来访问不同目录，基于IP地址的方式请访问  <a href=\"http://www.cnblogs.com/hi-bazinga/archive/2012/04/23/2466605.html\" target=\"_blank\" rel=\"noopener\">Apache 配置虚拟主机三种方式</a>  </p>\n"},{"title":"重构改善既有代码的设计-代码的坏味道","date":"2017-05-20T10:16:38.000Z","_content":"\n《重构，改善既有代码的设计》一书中，将重构时机用味道来形容，“代码的坏味道”顾名思义就是我们的程序中存在一些不合理、难以理解、难以扩展的设计，本文参考书中的“坏味道条款”列举程序设计中可能遇到的可重构代码。\n\n#### Alternative Class with Different Interfaces\n\n说明：异曲同工的类。如果两个函数做同一件事儿，却有着不同的签名。\n\n拟可重构方法：Rename Method(函数重命名)，Move Method(搬移函数)\n\n#### Comments\n\n说明：过多的注释。并不是说不该写注释，但是过多无谓的注释，不如几行简洁的代码，毕竟代码说明了一切。\n\n拟可重构方法：Extract Method(提炼函数)，Introduce Assertion(引入断言)\n\n#### Data Class\n\n说明：纯稚的类。某个类拥有一些字段，已经用于访问这些字段的函数。\n\n拟可重构方法：Move Method(搬移函数)，Encapsulate Filed(封装字段)，Encapsulate Collection(封装集合)\n\n#### Data Clumps\n\n说明：数据泥团。比如多个类中有相同的字段，几个函数签名中有相同的参数。\n\n拟可重构方法：Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)\n\n#### Divergent Change\n\n说明：发散式变化。比如我们在一个类中，如果换一种数据库，需要修改这三个函数，如果出现一种新的解决办法，需要修改那四个函数。\n\n拟可重构方法：Extract Class(提炼类)\n\n#### Duplicated Code\n\n说明：重复代码。有重复就会有重构。\n\n拟可重构方法：Extract Method(提炼函数)，Extract Class(提炼类)，Pull Up Method(函数上移)，Form Template Method(塑造模板函数)\n\n#### Feature Envy\n\n说明：依赖情结。某个函数对另一个类的依赖高于其所处的类。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Extract Method(提炼函数)\n\n#### Inappropriate Intimacy\n\n说明：狎昵关系。如果某一个类过渡访问另一个类的private字段，这就需要将这种关系拆散。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Change Bidirectional Association to Unidirectional(将双向关联改为单向关联)，Replace Inheritance with Delegation(以委托取代继承)，Hide Delegation(隐藏委托关系)\n\n#### Incomplete Library\n\n说明：不完美的库类。类库中提供的函数不足以我们的程序设计。\n\n拟可重构方法：Introduce Foreign Method(引入外加函数)，Introduce Local Extension(引入本地扩展)\n\n#### Large Class\n\n说明：过大的类。\n\n拟可重构方法：Extract Class(提炼类)，Extract Subclass(提炼子类)，Extract Interface(提炼接口)，Replace Data Value with Object(以对象取代数值)\n\n#### Lazy Class\n\n说明：冗赘类。如果某一个类的功能过于简单或者根本没有必要，我们去除这个类可以使代码更加简洁明了。\n\n拟可重构方法：Inline Class(将类内联化)，Collapse Hierarchy(折叠继承关系)\n\n#### Long Method\n\n说明：过长的函数。程序越长越难理解，并且不易于维护。\n\n拟可重构方法：Move Method(搬移函数)，Replace Temp with Query(以查询取代临时变量)，Replace Method with Method Object(以函数对象取代函数)，Decompose Conditional(分解条件表达式)\n\n#### Long Parameter List\n\n说明：过长参数列。太长的参数列难以理解，可能造成前后不一致，不易使用。\n\n拟可重构方法：Replace Parameter with Method(以函数取代参数)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)\n\n#### Message Chains\n\n说明：过度耦合的消息链。对象A请求对象B，对象B请求对象C......无穷无尽。\n\n拟可重构方法：Hide Delegate(隐藏委托关系)\n\n#### Middle Man\n\n说明：中间人。滥用委托的结果，某个类接口有一半的函数都委托给其他类。\n\n拟可重构方法：Remove Middle Man(移除中间人)，Inline Method(内联函数)，Replace Delegation with Inheritance(以继承取代委托)\n\n#### Parallel Inheritance Hierarchies\n\n说明：平行继承体系。为某一个类添加一个子类时，必须也为另一个类增加相应的子类。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)\n\n#### Primitive Obsession\n\n说明：基本类型偏执 。一个很大的类中可能含有许多基本类型数据，或者一个函数参数列表由数个基本类型构成。完全可以用对象来代替这些基本类型。比如结合数值和币种的money类。\n\n拟可重构方法：Replace Data Value with Object(以对象取代数据值)，Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Replace Array with Object(以对象取代数组)，Replace Type Code with Class(以类取代类型码)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)\n\n#### Refuse Bequest\n\n说明：被拒绝的遗赠。子类不想继承父类的函数和数据。\n\n拟可重构方法：Replace Interface with Delegation(以委托取代继承)\n\n#### Shotgun Surgery\n\n说明：散弹式修改。我们希望软件发生变化时，只修改程序中的一个地方，而不是各个角落。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Inline Class(将类内联化)\n\n#### Speculative Generality\n\n说明：夸夸其谈未来性。我们在项目设计的时候总想着以后会有什么新的需要，所以企图以各种各式各样的钩子和特殊情况处理一些给必要的事情，这就导致了系统更加难以理解和维护。\n\n拟可重构方法：Collapse Hierarchy(折叠继承体系)，Inline Class(将类内联化)，Remove Parameter(移除参数)，Rename Method(重命名函数)\n\n#### Switch Statements\n\n说明：switch惊悚现身。switch语句的问题就在于重复，有重复就可以重构。\n\n拟可重构方法：Replace Conditional with Polymorphism(以多态取代条件表达式)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)，Replace Parameter with Explicit Methods(以明确函数取代参数)，Introduce Null Object(引入Null对象)\n\n#### Temporary Field\n\n说明：令人迷惑的暂时字段。某个类的实例变量只是服务于某种特殊情况，这会给阅读者造成理解障碍。\n\n拟可重构方法：Extract Class(提炼类)，Introduce Null Object(引入Null对象)\n\n\n\n> 参考文章：\n>\n> 《重构—改善既有代码的设计》","source":"_posts/badtasteofcode.md","raw":"---\ntitle: 重构改善既有代码的设计-代码的坏味道\ndate: 2017-05-20 18:16:38\ntags:\n - 重构\n - 代码的坏味道\ncategories:\n - 重构\n---\n\n《重构，改善既有代码的设计》一书中，将重构时机用味道来形容，“代码的坏味道”顾名思义就是我们的程序中存在一些不合理、难以理解、难以扩展的设计，本文参考书中的“坏味道条款”列举程序设计中可能遇到的可重构代码。\n\n#### Alternative Class with Different Interfaces\n\n说明：异曲同工的类。如果两个函数做同一件事儿，却有着不同的签名。\n\n拟可重构方法：Rename Method(函数重命名)，Move Method(搬移函数)\n\n#### Comments\n\n说明：过多的注释。并不是说不该写注释，但是过多无谓的注释，不如几行简洁的代码，毕竟代码说明了一切。\n\n拟可重构方法：Extract Method(提炼函数)，Introduce Assertion(引入断言)\n\n#### Data Class\n\n说明：纯稚的类。某个类拥有一些字段，已经用于访问这些字段的函数。\n\n拟可重构方法：Move Method(搬移函数)，Encapsulate Filed(封装字段)，Encapsulate Collection(封装集合)\n\n#### Data Clumps\n\n说明：数据泥团。比如多个类中有相同的字段，几个函数签名中有相同的参数。\n\n拟可重构方法：Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)\n\n#### Divergent Change\n\n说明：发散式变化。比如我们在一个类中，如果换一种数据库，需要修改这三个函数，如果出现一种新的解决办法，需要修改那四个函数。\n\n拟可重构方法：Extract Class(提炼类)\n\n#### Duplicated Code\n\n说明：重复代码。有重复就会有重构。\n\n拟可重构方法：Extract Method(提炼函数)，Extract Class(提炼类)，Pull Up Method(函数上移)，Form Template Method(塑造模板函数)\n\n#### Feature Envy\n\n说明：依赖情结。某个函数对另一个类的依赖高于其所处的类。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Extract Method(提炼函数)\n\n#### Inappropriate Intimacy\n\n说明：狎昵关系。如果某一个类过渡访问另一个类的private字段，这就需要将这种关系拆散。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Change Bidirectional Association to Unidirectional(将双向关联改为单向关联)，Replace Inheritance with Delegation(以委托取代继承)，Hide Delegation(隐藏委托关系)\n\n#### Incomplete Library\n\n说明：不完美的库类。类库中提供的函数不足以我们的程序设计。\n\n拟可重构方法：Introduce Foreign Method(引入外加函数)，Introduce Local Extension(引入本地扩展)\n\n#### Large Class\n\n说明：过大的类。\n\n拟可重构方法：Extract Class(提炼类)，Extract Subclass(提炼子类)，Extract Interface(提炼接口)，Replace Data Value with Object(以对象取代数值)\n\n#### Lazy Class\n\n说明：冗赘类。如果某一个类的功能过于简单或者根本没有必要，我们去除这个类可以使代码更加简洁明了。\n\n拟可重构方法：Inline Class(将类内联化)，Collapse Hierarchy(折叠继承关系)\n\n#### Long Method\n\n说明：过长的函数。程序越长越难理解，并且不易于维护。\n\n拟可重构方法：Move Method(搬移函数)，Replace Temp with Query(以查询取代临时变量)，Replace Method with Method Object(以函数对象取代函数)，Decompose Conditional(分解条件表达式)\n\n#### Long Parameter List\n\n说明：过长参数列。太长的参数列难以理解，可能造成前后不一致，不易使用。\n\n拟可重构方法：Replace Parameter with Method(以函数取代参数)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)\n\n#### Message Chains\n\n说明：过度耦合的消息链。对象A请求对象B，对象B请求对象C......无穷无尽。\n\n拟可重构方法：Hide Delegate(隐藏委托关系)\n\n#### Middle Man\n\n说明：中间人。滥用委托的结果，某个类接口有一半的函数都委托给其他类。\n\n拟可重构方法：Remove Middle Man(移除中间人)，Inline Method(内联函数)，Replace Delegation with Inheritance(以继承取代委托)\n\n#### Parallel Inheritance Hierarchies\n\n说明：平行继承体系。为某一个类添加一个子类时，必须也为另一个类增加相应的子类。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)\n\n#### Primitive Obsession\n\n说明：基本类型偏执 。一个很大的类中可能含有许多基本类型数据，或者一个函数参数列表由数个基本类型构成。完全可以用对象来代替这些基本类型。比如结合数值和币种的money类。\n\n拟可重构方法：Replace Data Value with Object(以对象取代数据值)，Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Replace Array with Object(以对象取代数组)，Replace Type Code with Class(以类取代类型码)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)\n\n#### Refuse Bequest\n\n说明：被拒绝的遗赠。子类不想继承父类的函数和数据。\n\n拟可重构方法：Replace Interface with Delegation(以委托取代继承)\n\n#### Shotgun Surgery\n\n说明：散弹式修改。我们希望软件发生变化时，只修改程序中的一个地方，而不是各个角落。\n\n拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Inline Class(将类内联化)\n\n#### Speculative Generality\n\n说明：夸夸其谈未来性。我们在项目设计的时候总想着以后会有什么新的需要，所以企图以各种各式各样的钩子和特殊情况处理一些给必要的事情，这就导致了系统更加难以理解和维护。\n\n拟可重构方法：Collapse Hierarchy(折叠继承体系)，Inline Class(将类内联化)，Remove Parameter(移除参数)，Rename Method(重命名函数)\n\n#### Switch Statements\n\n说明：switch惊悚现身。switch语句的问题就在于重复，有重复就可以重构。\n\n拟可重构方法：Replace Conditional with Polymorphism(以多态取代条件表达式)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)，Replace Parameter with Explicit Methods(以明确函数取代参数)，Introduce Null Object(引入Null对象)\n\n#### Temporary Field\n\n说明：令人迷惑的暂时字段。某个类的实例变量只是服务于某种特殊情况，这会给阅读者造成理解障碍。\n\n拟可重构方法：Extract Class(提炼类)，Introduce Null Object(引入Null对象)\n\n\n\n> 参考文章：\n>\n> 《重构—改善既有代码的设计》","slug":"badtasteofcode","published":1,"updated":"2020-10-25T06:43:32.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprb0005molcwva9w7y5","content":"<p>《重构，改善既有代码的设计》一书中，将重构时机用味道来形容，“代码的坏味道”顾名思义就是我们的程序中存在一些不合理、难以理解、难以扩展的设计，本文参考书中的“坏味道条款”列举程序设计中可能遇到的可重构代码。</p>\n<h4 id=\"Alternative-Class-with-Different-Interfaces\"><a href=\"#Alternative-Class-with-Different-Interfaces\" class=\"headerlink\" title=\"Alternative Class with Different Interfaces\"></a>Alternative Class with Different Interfaces</h4><p>说明：异曲同工的类。如果两个函数做同一件事儿，却有着不同的签名。</p>\n<p>拟可重构方法：Rename Method(函数重命名)，Move Method(搬移函数)</p>\n<h4 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h4><p>说明：过多的注释。并不是说不该写注释，但是过多无谓的注释，不如几行简洁的代码，毕竟代码说明了一切。</p>\n<p>拟可重构方法：Extract Method(提炼函数)，Introduce Assertion(引入断言)</p>\n<h4 id=\"Data-Class\"><a href=\"#Data-Class\" class=\"headerlink\" title=\"Data Class\"></a>Data Class</h4><p>说明：纯稚的类。某个类拥有一些字段，已经用于访问这些字段的函数。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Encapsulate Filed(封装字段)，Encapsulate Collection(封装集合)</p>\n<h4 id=\"Data-Clumps\"><a href=\"#Data-Clumps\" class=\"headerlink\" title=\"Data Clumps\"></a>Data Clumps</h4><p>说明：数据泥团。比如多个类中有相同的字段，几个函数签名中有相同的参数。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)</p>\n<h4 id=\"Divergent-Change\"><a href=\"#Divergent-Change\" class=\"headerlink\" title=\"Divergent Change\"></a>Divergent Change</h4><p>说明：发散式变化。比如我们在一个类中，如果换一种数据库，需要修改这三个函数，如果出现一种新的解决办法，需要修改那四个函数。</p>\n<p>拟可重构方法：Extract Class(提炼类)</p>\n<h4 id=\"Duplicated-Code\"><a href=\"#Duplicated-Code\" class=\"headerlink\" title=\"Duplicated Code\"></a>Duplicated Code</h4><p>说明：重复代码。有重复就会有重构。</p>\n<p>拟可重构方法：Extract Method(提炼函数)，Extract Class(提炼类)，Pull Up Method(函数上移)，Form Template Method(塑造模板函数)</p>\n<h4 id=\"Feature-Envy\"><a href=\"#Feature-Envy\" class=\"headerlink\" title=\"Feature Envy\"></a>Feature Envy</h4><p>说明：依赖情结。某个函数对另一个类的依赖高于其所处的类。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Extract Method(提炼函数)</p>\n<h4 id=\"Inappropriate-Intimacy\"><a href=\"#Inappropriate-Intimacy\" class=\"headerlink\" title=\"Inappropriate Intimacy\"></a>Inappropriate Intimacy</h4><p>说明：狎昵关系。如果某一个类过渡访问另一个类的private字段，这就需要将这种关系拆散。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Change Bidirectional Association to Unidirectional(将双向关联改为单向关联)，Replace Inheritance with Delegation(以委托取代继承)，Hide Delegation(隐藏委托关系)</p>\n<h4 id=\"Incomplete-Library\"><a href=\"#Incomplete-Library\" class=\"headerlink\" title=\"Incomplete Library\"></a>Incomplete Library</h4><p>说明：不完美的库类。类库中提供的函数不足以我们的程序设计。</p>\n<p>拟可重构方法：Introduce Foreign Method(引入外加函数)，Introduce Local Extension(引入本地扩展)</p>\n<h4 id=\"Large-Class\"><a href=\"#Large-Class\" class=\"headerlink\" title=\"Large Class\"></a>Large Class</h4><p>说明：过大的类。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Extract Subclass(提炼子类)，Extract Interface(提炼接口)，Replace Data Value with Object(以对象取代数值)</p>\n<h4 id=\"Lazy-Class\"><a href=\"#Lazy-Class\" class=\"headerlink\" title=\"Lazy Class\"></a>Lazy Class</h4><p>说明：冗赘类。如果某一个类的功能过于简单或者根本没有必要，我们去除这个类可以使代码更加简洁明了。</p>\n<p>拟可重构方法：Inline Class(将类内联化)，Collapse Hierarchy(折叠继承关系)</p>\n<h4 id=\"Long-Method\"><a href=\"#Long-Method\" class=\"headerlink\" title=\"Long Method\"></a>Long Method</h4><p>说明：过长的函数。程序越长越难理解，并且不易于维护。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Replace Temp with Query(以查询取代临时变量)，Replace Method with Method Object(以函数对象取代函数)，Decompose Conditional(分解条件表达式)</p>\n<h4 id=\"Long-Parameter-List\"><a href=\"#Long-Parameter-List\" class=\"headerlink\" title=\"Long Parameter List\"></a>Long Parameter List</h4><p>说明：过长参数列。太长的参数列难以理解，可能造成前后不一致，不易使用。</p>\n<p>拟可重构方法：Replace Parameter with Method(以函数取代参数)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)</p>\n<h4 id=\"Message-Chains\"><a href=\"#Message-Chains\" class=\"headerlink\" title=\"Message Chains\"></a>Message Chains</h4><p>说明：过度耦合的消息链。对象A请求对象B，对象B请求对象C……无穷无尽。</p>\n<p>拟可重构方法：Hide Delegate(隐藏委托关系)</p>\n<h4 id=\"Middle-Man\"><a href=\"#Middle-Man\" class=\"headerlink\" title=\"Middle Man\"></a>Middle Man</h4><p>说明：中间人。滥用委托的结果，某个类接口有一半的函数都委托给其他类。</p>\n<p>拟可重构方法：Remove Middle Man(移除中间人)，Inline Method(内联函数)，Replace Delegation with Inheritance(以继承取代委托)</p>\n<h4 id=\"Parallel-Inheritance-Hierarchies\"><a href=\"#Parallel-Inheritance-Hierarchies\" class=\"headerlink\" title=\"Parallel Inheritance Hierarchies\"></a>Parallel Inheritance Hierarchies</h4><p>说明：平行继承体系。为某一个类添加一个子类时，必须也为另一个类增加相应的子类。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)</p>\n<h4 id=\"Primitive-Obsession\"><a href=\"#Primitive-Obsession\" class=\"headerlink\" title=\"Primitive Obsession\"></a>Primitive Obsession</h4><p>说明：基本类型偏执 。一个很大的类中可能含有许多基本类型数据，或者一个函数参数列表由数个基本类型构成。完全可以用对象来代替这些基本类型。比如结合数值和币种的money类。</p>\n<p>拟可重构方法：Replace Data Value with Object(以对象取代数据值)，Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Replace Array with Object(以对象取代数组)，Replace Type Code with Class(以类取代类型码)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)</p>\n<h4 id=\"Refuse-Bequest\"><a href=\"#Refuse-Bequest\" class=\"headerlink\" title=\"Refuse Bequest\"></a>Refuse Bequest</h4><p>说明：被拒绝的遗赠。子类不想继承父类的函数和数据。</p>\n<p>拟可重构方法：Replace Interface with Delegation(以委托取代继承)</p>\n<h4 id=\"Shotgun-Surgery\"><a href=\"#Shotgun-Surgery\" class=\"headerlink\" title=\"Shotgun Surgery\"></a>Shotgun Surgery</h4><p>说明：散弹式修改。我们希望软件发生变化时，只修改程序中的一个地方，而不是各个角落。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Inline Class(将类内联化)</p>\n<h4 id=\"Speculative-Generality\"><a href=\"#Speculative-Generality\" class=\"headerlink\" title=\"Speculative Generality\"></a>Speculative Generality</h4><p>说明：夸夸其谈未来性。我们在项目设计的时候总想着以后会有什么新的需要，所以企图以各种各式各样的钩子和特殊情况处理一些给必要的事情，这就导致了系统更加难以理解和维护。</p>\n<p>拟可重构方法：Collapse Hierarchy(折叠继承体系)，Inline Class(将类内联化)，Remove Parameter(移除参数)，Rename Method(重命名函数)</p>\n<h4 id=\"Switch-Statements\"><a href=\"#Switch-Statements\" class=\"headerlink\" title=\"Switch Statements\"></a>Switch Statements</h4><p>说明：switch惊悚现身。switch语句的问题就在于重复，有重复就可以重构。</p>\n<p>拟可重构方法：Replace Conditional with Polymorphism(以多态取代条件表达式)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)，Replace Parameter with Explicit Methods(以明确函数取代参数)，Introduce Null Object(引入Null对象)</p>\n<h4 id=\"Temporary-Field\"><a href=\"#Temporary-Field\" class=\"headerlink\" title=\"Temporary Field\"></a>Temporary Field</h4><p>说明：令人迷惑的暂时字段。某个类的实例变量只是服务于某种特殊情况，这会给阅读者造成理解障碍。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Introduce Null Object(引入Null对象)</p>\n<blockquote>\n<p>参考文章：</p>\n<p>《重构—改善既有代码的设计》</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>《重构，改善既有代码的设计》一书中，将重构时机用味道来形容，“代码的坏味道”顾名思义就是我们的程序中存在一些不合理、难以理解、难以扩展的设计，本文参考书中的“坏味道条款”列举程序设计中可能遇到的可重构代码。</p>\n<h4 id=\"Alternative-Class-with-Different-Interfaces\"><a href=\"#Alternative-Class-with-Different-Interfaces\" class=\"headerlink\" title=\"Alternative Class with Different Interfaces\"></a>Alternative Class with Different Interfaces</h4><p>说明：异曲同工的类。如果两个函数做同一件事儿，却有着不同的签名。</p>\n<p>拟可重构方法：Rename Method(函数重命名)，Move Method(搬移函数)</p>\n<h4 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h4><p>说明：过多的注释。并不是说不该写注释，但是过多无谓的注释，不如几行简洁的代码，毕竟代码说明了一切。</p>\n<p>拟可重构方法：Extract Method(提炼函数)，Introduce Assertion(引入断言)</p>\n<h4 id=\"Data-Class\"><a href=\"#Data-Class\" class=\"headerlink\" title=\"Data Class\"></a>Data Class</h4><p>说明：纯稚的类。某个类拥有一些字段，已经用于访问这些字段的函数。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Encapsulate Filed(封装字段)，Encapsulate Collection(封装集合)</p>\n<h4 id=\"Data-Clumps\"><a href=\"#Data-Clumps\" class=\"headerlink\" title=\"Data Clumps\"></a>Data Clumps</h4><p>说明：数据泥团。比如多个类中有相同的字段，几个函数签名中有相同的参数。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)</p>\n<h4 id=\"Divergent-Change\"><a href=\"#Divergent-Change\" class=\"headerlink\" title=\"Divergent Change\"></a>Divergent Change</h4><p>说明：发散式变化。比如我们在一个类中，如果换一种数据库，需要修改这三个函数，如果出现一种新的解决办法，需要修改那四个函数。</p>\n<p>拟可重构方法：Extract Class(提炼类)</p>\n<h4 id=\"Duplicated-Code\"><a href=\"#Duplicated-Code\" class=\"headerlink\" title=\"Duplicated Code\"></a>Duplicated Code</h4><p>说明：重复代码。有重复就会有重构。</p>\n<p>拟可重构方法：Extract Method(提炼函数)，Extract Class(提炼类)，Pull Up Method(函数上移)，Form Template Method(塑造模板函数)</p>\n<h4 id=\"Feature-Envy\"><a href=\"#Feature-Envy\" class=\"headerlink\" title=\"Feature Envy\"></a>Feature Envy</h4><p>说明：依赖情结。某个函数对另一个类的依赖高于其所处的类。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Extract Method(提炼函数)</p>\n<h4 id=\"Inappropriate-Intimacy\"><a href=\"#Inappropriate-Intimacy\" class=\"headerlink\" title=\"Inappropriate Intimacy\"></a>Inappropriate Intimacy</h4><p>说明：狎昵关系。如果某一个类过渡访问另一个类的private字段，这就需要将这种关系拆散。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Change Bidirectional Association to Unidirectional(将双向关联改为单向关联)，Replace Inheritance with Delegation(以委托取代继承)，Hide Delegation(隐藏委托关系)</p>\n<h4 id=\"Incomplete-Library\"><a href=\"#Incomplete-Library\" class=\"headerlink\" title=\"Incomplete Library\"></a>Incomplete Library</h4><p>说明：不完美的库类。类库中提供的函数不足以我们的程序设计。</p>\n<p>拟可重构方法：Introduce Foreign Method(引入外加函数)，Introduce Local Extension(引入本地扩展)</p>\n<h4 id=\"Large-Class\"><a href=\"#Large-Class\" class=\"headerlink\" title=\"Large Class\"></a>Large Class</h4><p>说明：过大的类。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Extract Subclass(提炼子类)，Extract Interface(提炼接口)，Replace Data Value with Object(以对象取代数值)</p>\n<h4 id=\"Lazy-Class\"><a href=\"#Lazy-Class\" class=\"headerlink\" title=\"Lazy Class\"></a>Lazy Class</h4><p>说明：冗赘类。如果某一个类的功能过于简单或者根本没有必要，我们去除这个类可以使代码更加简洁明了。</p>\n<p>拟可重构方法：Inline Class(将类内联化)，Collapse Hierarchy(折叠继承关系)</p>\n<h4 id=\"Long-Method\"><a href=\"#Long-Method\" class=\"headerlink\" title=\"Long Method\"></a>Long Method</h4><p>说明：过长的函数。程序越长越难理解，并且不易于维护。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Replace Temp with Query(以查询取代临时变量)，Replace Method with Method Object(以函数对象取代函数)，Decompose Conditional(分解条件表达式)</p>\n<h4 id=\"Long-Parameter-List\"><a href=\"#Long-Parameter-List\" class=\"headerlink\" title=\"Long Parameter List\"></a>Long Parameter List</h4><p>说明：过长参数列。太长的参数列难以理解，可能造成前后不一致，不易使用。</p>\n<p>拟可重构方法：Replace Parameter with Method(以函数取代参数)，Introduce Parameter Object(引入参数对象)，Preserve Whole Object(保持对象完整)</p>\n<h4 id=\"Message-Chains\"><a href=\"#Message-Chains\" class=\"headerlink\" title=\"Message Chains\"></a>Message Chains</h4><p>说明：过度耦合的消息链。对象A请求对象B，对象B请求对象C……无穷无尽。</p>\n<p>拟可重构方法：Hide Delegate(隐藏委托关系)</p>\n<h4 id=\"Middle-Man\"><a href=\"#Middle-Man\" class=\"headerlink\" title=\"Middle Man\"></a>Middle Man</h4><p>说明：中间人。滥用委托的结果，某个类接口有一半的函数都委托给其他类。</p>\n<p>拟可重构方法：Remove Middle Man(移除中间人)，Inline Method(内联函数)，Replace Delegation with Inheritance(以继承取代委托)</p>\n<h4 id=\"Parallel-Inheritance-Hierarchies\"><a href=\"#Parallel-Inheritance-Hierarchies\" class=\"headerlink\" title=\"Parallel Inheritance Hierarchies\"></a>Parallel Inheritance Hierarchies</h4><p>说明：平行继承体系。为某一个类添加一个子类时，必须也为另一个类增加相应的子类。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)</p>\n<h4 id=\"Primitive-Obsession\"><a href=\"#Primitive-Obsession\" class=\"headerlink\" title=\"Primitive Obsession\"></a>Primitive Obsession</h4><p>说明：基本类型偏执 。一个很大的类中可能含有许多基本类型数据，或者一个函数参数列表由数个基本类型构成。完全可以用对象来代替这些基本类型。比如结合数值和币种的money类。</p>\n<p>拟可重构方法：Replace Data Value with Object(以对象取代数据值)，Extract Class(提炼类)，Introduce Parameter Object(引入参数对象)，Replace Array with Object(以对象取代数组)，Replace Type Code with Class(以类取代类型码)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)</p>\n<h4 id=\"Refuse-Bequest\"><a href=\"#Refuse-Bequest\" class=\"headerlink\" title=\"Refuse Bequest\"></a>Refuse Bequest</h4><p>说明：被拒绝的遗赠。子类不想继承父类的函数和数据。</p>\n<p>拟可重构方法：Replace Interface with Delegation(以委托取代继承)</p>\n<h4 id=\"Shotgun-Surgery\"><a href=\"#Shotgun-Surgery\" class=\"headerlink\" title=\"Shotgun Surgery\"></a>Shotgun Surgery</h4><p>说明：散弹式修改。我们希望软件发生变化时，只修改程序中的一个地方，而不是各个角落。</p>\n<p>拟可重构方法：Move Method(搬移函数)，Move Filed(搬移字段)，Inline Class(将类内联化)</p>\n<h4 id=\"Speculative-Generality\"><a href=\"#Speculative-Generality\" class=\"headerlink\" title=\"Speculative Generality\"></a>Speculative Generality</h4><p>说明：夸夸其谈未来性。我们在项目设计的时候总想着以后会有什么新的需要，所以企图以各种各式各样的钩子和特殊情况处理一些给必要的事情，这就导致了系统更加难以理解和维护。</p>\n<p>拟可重构方法：Collapse Hierarchy(折叠继承体系)，Inline Class(将类内联化)，Remove Parameter(移除参数)，Rename Method(重命名函数)</p>\n<h4 id=\"Switch-Statements\"><a href=\"#Switch-Statements\" class=\"headerlink\" title=\"Switch Statements\"></a>Switch Statements</h4><p>说明：switch惊悚现身。switch语句的问题就在于重复，有重复就可以重构。</p>\n<p>拟可重构方法：Replace Conditional with Polymorphism(以多态取代条件表达式)，Replace Type Code with Subclass(以子类取代类型码)，Replace Type Code with State/Strategy(以State/Strategy取代类型码)，Replace Parameter with Explicit Methods(以明确函数取代参数)，Introduce Null Object(引入Null对象)</p>\n<h4 id=\"Temporary-Field\"><a href=\"#Temporary-Field\" class=\"headerlink\" title=\"Temporary Field\"></a>Temporary Field</h4><p>说明：令人迷惑的暂时字段。某个类的实例变量只是服务于某种特殊情况，这会给阅读者造成理解障碍。</p>\n<p>拟可重构方法：Extract Class(提炼类)，Introduce Null Object(引入Null对象)</p>\n<blockquote>\n<p>参考文章：</p>\n<p>《重构—改善既有代码的设计》</p>\n</blockquote>\n"},{"title":"PHP初级算法系列 - 1","date":"2017-06-21T03:18:56.000Z","_content":"\n给定一个数组：\n\n```\n$arr = array('b' => 'a', 'c' => 'a', 'e' => 'b', 'd' => 'b', 'f' => 'c', 'g' => 'e', 'h' => 'f');\n```\n\n给出可以完成以下格式转换的算法。\n\n```\nArray\n(\n    [a] => Array\n        (\n            [b] => Array\n                (\n                    [e] => Array\n                        (\n                            [0] => g\n                        )\n\n                    [0] => d\n                )\n\n            [c] => Array\n                (\n                    [f] => Array\n                        (\n                            [0] => h\n                        )\n\n                )\n\n        )\n\n)\n```\n\n算法实现：\n\n```\nclass BDphp1\n{\n    private function php1($tmp_array, $start)\n    {\n        $result = array();\n        if ($ret = array_keys($tmp_array, $start)) {\n            foreach ($ret as $v) {\n                if ($rev = $this->php1($tmp_array, $v)) {\n                    $result[$v] = $rev;\n                } else {\n                    $result[] = $v;\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function bd_php1($tmp_array, $start = '')\n    {\n        $tmp = array();\n        if ($start == null) {\n            $start = array_shift(array_values($tmp_array));\n        }\n        $ret = $this->php1($tmp_array, $start);\n        $tmp[$start] = $ret;\n        return $tmp;\n    }\n\n}\n```\n\n算法说明：主要使用 `array_shift(),array_values(),array_keys()` 函数和递归思想。  ","source":"_posts/bdphp1.md","raw":"---\ntitle: PHP初级算法系列 - 1\ndate: 2017-06-21 11:18:56\ntags:\n - PHP\n - 算法\ncategories:\n - 算法\n---\n\n给定一个数组：\n\n```\n$arr = array('b' => 'a', 'c' => 'a', 'e' => 'b', 'd' => 'b', 'f' => 'c', 'g' => 'e', 'h' => 'f');\n```\n\n给出可以完成以下格式转换的算法。\n\n```\nArray\n(\n    [a] => Array\n        (\n            [b] => Array\n                (\n                    [e] => Array\n                        (\n                            [0] => g\n                        )\n\n                    [0] => d\n                )\n\n            [c] => Array\n                (\n                    [f] => Array\n                        (\n                            [0] => h\n                        )\n\n                )\n\n        )\n\n)\n```\n\n算法实现：\n\n```\nclass BDphp1\n{\n    private function php1($tmp_array, $start)\n    {\n        $result = array();\n        if ($ret = array_keys($tmp_array, $start)) {\n            foreach ($ret as $v) {\n                if ($rev = $this->php1($tmp_array, $v)) {\n                    $result[$v] = $rev;\n                } else {\n                    $result[] = $v;\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function bd_php1($tmp_array, $start = '')\n    {\n        $tmp = array();\n        if ($start == null) {\n            $start = array_shift(array_values($tmp_array));\n        }\n        $ret = $this->php1($tmp_array, $start);\n        $tmp[$start] = $ret;\n        return $tmp;\n    }\n\n}\n```\n\n算法说明：主要使用 `array_shift(),array_values(),array_keys()` 函数和递归思想。  ","slug":"bdphp1","published":1,"updated":"2020-10-25T06:43:32.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepre0006molcprxcji9t","content":"<p>给定一个数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(&apos;b&apos; =&gt; &apos;a&apos;, &apos;c&apos; =&gt; &apos;a&apos;, &apos;e&apos; =&gt; &apos;b&apos;, &apos;d&apos; =&gt; &apos;b&apos;, &apos;f&apos; =&gt; &apos;c&apos;, &apos;g&apos; =&gt; &apos;e&apos;, &apos;h&apos; =&gt; &apos;f&apos;);</span><br></pre></td></tr></table></figure>\n<p>给出可以完成以下格式转换的算法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [a] =&gt; Array</span><br><span class=\"line\">        (</span><br><span class=\"line\">            [b] =&gt; Array</span><br><span class=\"line\">                (</span><br><span class=\"line\">                    [e] =&gt; Array</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            [0] =&gt; g</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    [0] =&gt; d</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">            [c] =&gt; Array</span><br><span class=\"line\">                (</span><br><span class=\"line\">                    [f] =&gt; Array</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            [0] =&gt; h</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>算法实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private function php1($tmp_array, $start)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $result = array();</span><br><span class=\"line\">        if ($ret = array_keys($tmp_array, $start)) &#123;</span><br><span class=\"line\">            foreach ($ret as $v) &#123;</span><br><span class=\"line\">                if ($rev = $this-&gt;php1($tmp_array, $v)) &#123;</span><br><span class=\"line\">                    $result[$v] = $rev;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    $result[] = $v;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bd_php1($tmp_array, $start = &apos;&apos;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $tmp = array();</span><br><span class=\"line\">        if ($start == null) &#123;</span><br><span class=\"line\">            $start = array_shift(array_values($tmp_array));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $ret = $this-&gt;php1($tmp_array, $start);</span><br><span class=\"line\">        $tmp[$start] = $ret;</span><br><span class=\"line\">        return $tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法说明：主要使用 <code>array_shift(),array_values(),array_keys()</code> 函数和递归思想。  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(&apos;b&apos; =&gt; &apos;a&apos;, &apos;c&apos; =&gt; &apos;a&apos;, &apos;e&apos; =&gt; &apos;b&apos;, &apos;d&apos; =&gt; &apos;b&apos;, &apos;f&apos; =&gt; &apos;c&apos;, &apos;g&apos; =&gt; &apos;e&apos;, &apos;h&apos; =&gt; &apos;f&apos;);</span><br></pre></td></tr></table></figure>\n<p>给出可以完成以下格式转换的算法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [a] =&gt; Array</span><br><span class=\"line\">        (</span><br><span class=\"line\">            [b] =&gt; Array</span><br><span class=\"line\">                (</span><br><span class=\"line\">                    [e] =&gt; Array</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            [0] =&gt; g</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    [0] =&gt; d</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">            [c] =&gt; Array</span><br><span class=\"line\">                (</span><br><span class=\"line\">                    [f] =&gt; Array</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            [0] =&gt; h</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>算法实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private function php1($tmp_array, $start)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $result = array();</span><br><span class=\"line\">        if ($ret = array_keys($tmp_array, $start)) &#123;</span><br><span class=\"line\">            foreach ($ret as $v) &#123;</span><br><span class=\"line\">                if ($rev = $this-&gt;php1($tmp_array, $v)) &#123;</span><br><span class=\"line\">                    $result[$v] = $rev;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    $result[] = $v;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bd_php1($tmp_array, $start = &apos;&apos;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $tmp = array();</span><br><span class=\"line\">        if ($start == null) &#123;</span><br><span class=\"line\">            $start = array_shift(array_values($tmp_array));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $ret = $this-&gt;php1($tmp_array, $start);</span><br><span class=\"line\">        $tmp[$start] = $ret;</span><br><span class=\"line\">        return $tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法说明：主要使用 <code>array_shift(),array_values(),array_keys()</code> 函数和递归思想。  </p>\n"},{"title":"PHP初级算法系列 - 2","date":"2017-06-21T06:40:13.000Z","_content":"\n算法功能：返回数组中最小的 `k` 个数。\n\n算法实现1：\n\n```\nclass BDphp3\n{\n    public function bd_php3($tmp_array, $k)\n    {\n        $count = 0;\n        $length = count($tmp_array);\n        if ($length < $k) {\n            return false;\n        }\n        for ($i = 0; $i < $length; $i++) {\n            $min = $i;\n            for ($j = $i + 1; $j < $length; $j++) {\n                if ($tmp_array[$j] < $tmp_array[$min]) {\n                    $min = $j;\n                }\n            }\n            $tmp = $tmp_array[$i];\n            $tmp_array[$i] = $tmp_array[$min];\n            $tmp_array[$min] = $tmp;\n            $count++;\n            if ($count > $k) {\n                break;\n            }\n        }\n        return array_slice($tmp_array, 0, $k);\n    }\n}\n```\n\n算法实现2：\n\n```\nclass BDphp3\n{\n    private function replaceMaxValue($arr, $otherNum)\n    {\n        $max = $arr[0];\n        for ($i = 1; $i < count($arr); $i++) {\n            if ($arr[$i] > $max) {\n                $max = &$arr[$i];\n            }\n        }\n        if ($otherNum < $max) {\n            $max = $otherNum;\n        }\n        return $arr;\n    }\n\n    public function getTop($arr, $topNum)\n    {\n        $topK = array_slice($arr, 0, $topNum);\n        $other = array_slice($arr, $topNum);\n        foreach ($other as $value) {\n            $topK = $this->replaceMaxValue($topK, $value);\n        }\n        return $topK;\n    }\n}\n```\n\n算法说明：第一种方式中改进了直接插入排序算法，只是将数组排序 k 次，然后返回数组的前 k 个数。第二种方式将数组分割成两部分，前 k 个数值为第一部分，其余数值为第二部分，对于第二部分的每个数值，如果存在小于第一部分最大值的数值，将第一部分的最大值替换，最后返回第一部分。","source":"_posts/bdphp2.md","raw":"---\ntitle: PHP初级算法系列 - 2\ndate: 2017-06-21 14:40:13\ntags:\n - PHP\n - 算法\ncategories:\n - 算法\n---\n\n算法功能：返回数组中最小的 `k` 个数。\n\n算法实现1：\n\n```\nclass BDphp3\n{\n    public function bd_php3($tmp_array, $k)\n    {\n        $count = 0;\n        $length = count($tmp_array);\n        if ($length < $k) {\n            return false;\n        }\n        for ($i = 0; $i < $length; $i++) {\n            $min = $i;\n            for ($j = $i + 1; $j < $length; $j++) {\n                if ($tmp_array[$j] < $tmp_array[$min]) {\n                    $min = $j;\n                }\n            }\n            $tmp = $tmp_array[$i];\n            $tmp_array[$i] = $tmp_array[$min];\n            $tmp_array[$min] = $tmp;\n            $count++;\n            if ($count > $k) {\n                break;\n            }\n        }\n        return array_slice($tmp_array, 0, $k);\n    }\n}\n```\n\n算法实现2：\n\n```\nclass BDphp3\n{\n    private function replaceMaxValue($arr, $otherNum)\n    {\n        $max = $arr[0];\n        for ($i = 1; $i < count($arr); $i++) {\n            if ($arr[$i] > $max) {\n                $max = &$arr[$i];\n            }\n        }\n        if ($otherNum < $max) {\n            $max = $otherNum;\n        }\n        return $arr;\n    }\n\n    public function getTop($arr, $topNum)\n    {\n        $topK = array_slice($arr, 0, $topNum);\n        $other = array_slice($arr, $topNum);\n        foreach ($other as $value) {\n            $topK = $this->replaceMaxValue($topK, $value);\n        }\n        return $topK;\n    }\n}\n```\n\n算法说明：第一种方式中改进了直接插入排序算法，只是将数组排序 k 次，然后返回数组的前 k 个数。第二种方式将数组分割成两部分，前 k 个数值为第一部分，其余数值为第二部分，对于第二部分的每个数值，如果存在小于第一部分最大值的数值，将第一部分的最大值替换，最后返回第一部分。","slug":"bdphp2","published":1,"updated":"2020-10-25T06:43:32.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprg0007molcfvob77nw","content":"<p>算法功能：返回数组中最小的 <code>k</code> 个数。</p>\n<p>算法实现1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function bd_php3($tmp_array, $k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $count = 0;</span><br><span class=\"line\">        $length = count($tmp_array);</span><br><span class=\"line\">        if ($length &lt; $k) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">            $min = $i;</span><br><span class=\"line\">            for ($j = $i + 1; $j &lt; $length; $j++) &#123;</span><br><span class=\"line\">                if ($tmp_array[$j] &lt; $tmp_array[$min]) &#123;</span><br><span class=\"line\">                    $min = $j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $tmp = $tmp_array[$i];</span><br><span class=\"line\">            $tmp_array[$i] = $tmp_array[$min];</span><br><span class=\"line\">            $tmp_array[$min] = $tmp;</span><br><span class=\"line\">            $count++;</span><br><span class=\"line\">            if ($count &gt; $k) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array_slice($tmp_array, 0, $k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法实现2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private function replaceMaxValue($arr, $otherNum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $max = $arr[0];</span><br><span class=\"line\">        for ($i = 1; $i &lt; count($arr); $i++) &#123;</span><br><span class=\"line\">            if ($arr[$i] &gt; $max) &#123;</span><br><span class=\"line\">                $max = &amp;$arr[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ($otherNum &lt; $max) &#123;</span><br><span class=\"line\">            $max = $otherNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function getTop($arr, $topNum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $topK = array_slice($arr, 0, $topNum);</span><br><span class=\"line\">        $other = array_slice($arr, $topNum);</span><br><span class=\"line\">        foreach ($other as $value) &#123;</span><br><span class=\"line\">            $topK = $this-&gt;replaceMaxValue($topK, $value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $topK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法说明：第一种方式中改进了直接插入排序算法，只是将数组排序 k 次，然后返回数组的前 k 个数。第二种方式将数组分割成两部分，前 k 个数值为第一部分，其余数值为第二部分，对于第二部分的每个数值，如果存在小于第一部分最大值的数值，将第一部分的最大值替换，最后返回第一部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>算法功能：返回数组中最小的 <code>k</code> 个数。</p>\n<p>算法实现1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function bd_php3($tmp_array, $k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $count = 0;</span><br><span class=\"line\">        $length = count($tmp_array);</span><br><span class=\"line\">        if ($length &lt; $k) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">            $min = $i;</span><br><span class=\"line\">            for ($j = $i + 1; $j &lt; $length; $j++) &#123;</span><br><span class=\"line\">                if ($tmp_array[$j] &lt; $tmp_array[$min]) &#123;</span><br><span class=\"line\">                    $min = $j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $tmp = $tmp_array[$i];</span><br><span class=\"line\">            $tmp_array[$i] = $tmp_array[$min];</span><br><span class=\"line\">            $tmp_array[$min] = $tmp;</span><br><span class=\"line\">            $count++;</span><br><span class=\"line\">            if ($count &gt; $k) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array_slice($tmp_array, 0, $k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法实现2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BDphp3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private function replaceMaxValue($arr, $otherNum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $max = $arr[0];</span><br><span class=\"line\">        for ($i = 1; $i &lt; count($arr); $i++) &#123;</span><br><span class=\"line\">            if ($arr[$i] &gt; $max) &#123;</span><br><span class=\"line\">                $max = &amp;$arr[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ($otherNum &lt; $max) &#123;</span><br><span class=\"line\">            $max = $otherNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function getTop($arr, $topNum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $topK = array_slice($arr, 0, $topNum);</span><br><span class=\"line\">        $other = array_slice($arr, $topNum);</span><br><span class=\"line\">        foreach ($other as $value) &#123;</span><br><span class=\"line\">            $topK = $this-&gt;replaceMaxValue($topK, $value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $topK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法说明：第一种方式中改进了直接插入排序算法，只是将数组排序 k 次，然后返回数组的前 k 个数。第二种方式将数组分割成两部分，前 k 个数值为第一部分，其余数值为第二部分，对于第二部分的每个数值，如果存在小于第一部分最大值的数值，将第一部分的最大值替换，最后返回第一部分。</p>\n"},{"title":"CentOS编译安装Python3","date":"2018-06-26T14:25:22.000Z","_content":"\nLinux 下大部分系统默认自带 python2.x 的版本，最常见的是 python2.6 或 python2.7 版本，默认的python 被系统很多程序所依赖，比如 CentOS 下的 yum 就是 python2.x 写的，所以默认版本不要轻易删除，否则会有一些问题。如果需要使用最新的 Python3 那么我们可以编译安装源码包到独立目录，这和系统默认环境之间是没有任何影响的，Python3 和 Python2 两个环境并存即可。\n\n首先去 Python 官网下载 Python3 的源码包，[传送门](https://www.python.org/) \n\n进去之后点击导航栏的 Downloads，也可以鼠标放到 Downloads 上弹出菜单选择 Source code，表示源码包，这里选择最新版本 3.6.5，当然下面也有很多其他历史版本，点进去之后页面下方可以看到下载链接，包括源码包、Mac OSX 安装包、Windows 安装包等。Linux 系统可以直接使用以下命令：\n\n```\nwget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz\n```\n\n接下来，如果是全新的 Linux 系统，可能需要安装一些 Python 的依赖，如 openssl、readline等模块。需要的依赖主要如下：\n\n```\nyum -y install zlib zlib-devel\nyum -y install bzip2 bzip2-devel\nyum -y install ncurses ncurses-devel\nyum -y install readline readline-devel\nyum -y install openssl openssl-devel\nyum -y install openssl-static\nyum -y install xz lzma xz-devel\nyum -y install sqlite sqlite-devel\nyum -y install gdbm gdbm-devel\nyum -y install tk tk-devel\n```\n\n如果不是全新的 Linux 系统，可以查看是否安装了以上依赖：\n\n```\nyum list installed | grep zlib\nyum list installed | grep zlib-devel\nyum list installed | grep bzip2\nyum list installed | grep bzip2-devel\n......\n```\n\n解压文件：\n\n```\ntar -zxvf Python-3.6.5.tgz\n```\n\n进入目录：\n\n```\ncd Python-3.6.5/\n```\n\n配置编译：\n\n```\n./configure --prefix=/usr/local/python3.6.5 --enable-shared CFLAGS=-fPIC\n```\n\n因为上面依赖包是用 yum 安装而不是自己编译的，所以都是安装在系统默认目录下，因此各种选项不用加默认即可生效。`--enable-shared` 和 `-fPIC` 之后可以将 Python3 的动态链接库编译出来，默认情况编译完 lib 下面只有 Python3.xm.a 这样的文件，python本身可以正常使用，但是如果编译第三方库需要python 接口的比如 caffe 等，则会报错；所以这里建议按照上面的方式配置。\n\n然后编译并安装：\n\n```\nmake && make install\n```\n\n整个过程大约5分钟，安装成功之后，安装目录就在 `/usr/local/python3.6.5/` 。\n\n一般为了系统环境的干净，不需要将 python3、pip3 加入到系统环境变量中，使用全路径运行 Python 文件或安装第三方库即可，如：\n\n```\n/usr/local/python3.6.5/bin/python3.6 xxx.py\n/usr/local/python3.6.5/bin/pip3.6 install twisted\n```\n\n但是一般在开发机上时，加入环境变量会更加方便，建立软连接如下：\n\n```\nln -s /usr/python3.6.5/bin/python3.6 /usr/bin/python36\nln -s /usr/python3.6.5/bin/pip3 /usr/bin/pip3\n```\n\n然后可以直接使用软连接运行 Python 文件或安装第三方库：\n\n```\npython36 xxx.py\npip3 install twisted\n```\n\n如上在 CentOS 上安装 Python3 就完成了，安装其他版本的 Python 解释器同理。\n\n\n\nRead More:\n\n> [Linux下编译安装python3](https://www.cnblogs.com/freeweb/p/5181764.html)","source":"_posts/centosinstallpython3.md","raw":"---\ntitle: CentOS编译安装Python3\ndate: 2018-06-26 22:25:22\ntags:\n - Linux/Unix\n - Python3\ncategories:\n - Linux/Unix\n---\n\nLinux 下大部分系统默认自带 python2.x 的版本，最常见的是 python2.6 或 python2.7 版本，默认的python 被系统很多程序所依赖，比如 CentOS 下的 yum 就是 python2.x 写的，所以默认版本不要轻易删除，否则会有一些问题。如果需要使用最新的 Python3 那么我们可以编译安装源码包到独立目录，这和系统默认环境之间是没有任何影响的，Python3 和 Python2 两个环境并存即可。\n\n首先去 Python 官网下载 Python3 的源码包，[传送门](https://www.python.org/) \n\n进去之后点击导航栏的 Downloads，也可以鼠标放到 Downloads 上弹出菜单选择 Source code，表示源码包，这里选择最新版本 3.6.5，当然下面也有很多其他历史版本，点进去之后页面下方可以看到下载链接，包括源码包、Mac OSX 安装包、Windows 安装包等。Linux 系统可以直接使用以下命令：\n\n```\nwget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz\n```\n\n接下来，如果是全新的 Linux 系统，可能需要安装一些 Python 的依赖，如 openssl、readline等模块。需要的依赖主要如下：\n\n```\nyum -y install zlib zlib-devel\nyum -y install bzip2 bzip2-devel\nyum -y install ncurses ncurses-devel\nyum -y install readline readline-devel\nyum -y install openssl openssl-devel\nyum -y install openssl-static\nyum -y install xz lzma xz-devel\nyum -y install sqlite sqlite-devel\nyum -y install gdbm gdbm-devel\nyum -y install tk tk-devel\n```\n\n如果不是全新的 Linux 系统，可以查看是否安装了以上依赖：\n\n```\nyum list installed | grep zlib\nyum list installed | grep zlib-devel\nyum list installed | grep bzip2\nyum list installed | grep bzip2-devel\n......\n```\n\n解压文件：\n\n```\ntar -zxvf Python-3.6.5.tgz\n```\n\n进入目录：\n\n```\ncd Python-3.6.5/\n```\n\n配置编译：\n\n```\n./configure --prefix=/usr/local/python3.6.5 --enable-shared CFLAGS=-fPIC\n```\n\n因为上面依赖包是用 yum 安装而不是自己编译的，所以都是安装在系统默认目录下，因此各种选项不用加默认即可生效。`--enable-shared` 和 `-fPIC` 之后可以将 Python3 的动态链接库编译出来，默认情况编译完 lib 下面只有 Python3.xm.a 这样的文件，python本身可以正常使用，但是如果编译第三方库需要python 接口的比如 caffe 等，则会报错；所以这里建议按照上面的方式配置。\n\n然后编译并安装：\n\n```\nmake && make install\n```\n\n整个过程大约5分钟，安装成功之后，安装目录就在 `/usr/local/python3.6.5/` 。\n\n一般为了系统环境的干净，不需要将 python3、pip3 加入到系统环境变量中，使用全路径运行 Python 文件或安装第三方库即可，如：\n\n```\n/usr/local/python3.6.5/bin/python3.6 xxx.py\n/usr/local/python3.6.5/bin/pip3.6 install twisted\n```\n\n但是一般在开发机上时，加入环境变量会更加方便，建立软连接如下：\n\n```\nln -s /usr/python3.6.5/bin/python3.6 /usr/bin/python36\nln -s /usr/python3.6.5/bin/pip3 /usr/bin/pip3\n```\n\n然后可以直接使用软连接运行 Python 文件或安装第三方库：\n\n```\npython36 xxx.py\npip3 install twisted\n```\n\n如上在 CentOS 上安装 Python3 就完成了，安装其他版本的 Python 解释器同理。\n\n\n\nRead More:\n\n> [Linux下编译安装python3](https://www.cnblogs.com/freeweb/p/5181764.html)","slug":"centosinstallpython3","published":1,"updated":"2020-10-25T06:43:32.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprj000amolc05b54w0e","content":"<p>Linux 下大部分系统默认自带 python2.x 的版本，最常见的是 python2.6 或 python2.7 版本，默认的python 被系统很多程序所依赖，比如 CentOS 下的 yum 就是 python2.x 写的，所以默认版本不要轻易删除，否则会有一些问题。如果需要使用最新的 Python3 那么我们可以编译安装源码包到独立目录，这和系统默认环境之间是没有任何影响的，Python3 和 Python2 两个环境并存即可。</p>\n<p>首先去 Python 官网下载 Python3 的源码包，<a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">传送门</a> </p>\n<p>进去之后点击导航栏的 Downloads，也可以鼠标放到 Downloads 上弹出菜单选择 Source code，表示源码包，这里选择最新版本 3.6.5，当然下面也有很多其他历史版本，点进去之后页面下方可以看到下载链接，包括源码包、Mac OSX 安装包、Windows 安装包等。Linux 系统可以直接使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br></pre></td></tr></table></figure>\n<p>接下来，如果是全新的 Linux 系统，可能需要安装一些 Python 的依赖，如 openssl、readline等模块。需要的依赖主要如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib zlib-devel</span><br><span class=\"line\">yum -y install bzip2 bzip2-devel</span><br><span class=\"line\">yum -y install ncurses ncurses-devel</span><br><span class=\"line\">yum -y install readline readline-devel</span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br><span class=\"line\">yum -y install openssl-static</span><br><span class=\"line\">yum -y install xz lzma xz-devel</span><br><span class=\"line\">yum -y install sqlite sqlite-devel</span><br><span class=\"line\">yum -y install gdbm gdbm-devel</span><br><span class=\"line\">yum -y install tk tk-devel</span><br></pre></td></tr></table></figure>\n<p>如果不是全新的 Linux 系统，可以查看是否安装了以上依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list installed | grep zlib</span><br><span class=\"line\">yum list installed | grep zlib-devel</span><br><span class=\"line\">yum list installed | grep bzip2</span><br><span class=\"line\">yum list installed | grep bzip2-devel</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>解压文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.6.5.tgz</span><br></pre></td></tr></table></figure>\n<p>进入目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Python-3.6.5/</span><br></pre></td></tr></table></figure>\n<p>配置编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/python3.6.5 --enable-shared CFLAGS=-fPIC</span><br></pre></td></tr></table></figure>\n<p>因为上面依赖包是用 yum 安装而不是自己编译的，所以都是安装在系统默认目录下，因此各种选项不用加默认即可生效。<code>--enable-shared</code> 和 <code>-fPIC</code> 之后可以将 Python3 的动态链接库编译出来，默认情况编译完 lib 下面只有 Python3.xm.a 这样的文件，python本身可以正常使用，但是如果编译第三方库需要python 接口的比如 caffe 等，则会报错；所以这里建议按照上面的方式配置。</p>\n<p>然后编译并安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>整个过程大约5分钟，安装成功之后，安装目录就在 <code>/usr/local/python3.6.5/</code> 。</p>\n<p>一般为了系统环境的干净，不需要将 python3、pip3 加入到系统环境变量中，使用全路径运行 Python 文件或安装第三方库即可，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/python3.6.5/bin/python3.6 xxx.py</span><br><span class=\"line\">/usr/local/python3.6.5/bin/pip3.6 install twisted</span><br></pre></td></tr></table></figure>\n<p>但是一般在开发机上时，加入环境变量会更加方便，建立软连接如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/python3.6.5/bin/python3.6 /usr/bin/python36</span><br><span class=\"line\">ln -s /usr/python3.6.5/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>然后可以直接使用软连接运行 Python 文件或安装第三方库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python36 xxx.py</span><br><span class=\"line\">pip3 install twisted</span><br></pre></td></tr></table></figure>\n<p>如上在 CentOS 上安装 Python3 就完成了，安装其他版本的 Python 解释器同理。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/freeweb/p/5181764.html\" target=\"_blank\" rel=\"noopener\">Linux下编译安装python3</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 下大部分系统默认自带 python2.x 的版本，最常见的是 python2.6 或 python2.7 版本，默认的python 被系统很多程序所依赖，比如 CentOS 下的 yum 就是 python2.x 写的，所以默认版本不要轻易删除，否则会有一些问题。如果需要使用最新的 Python3 那么我们可以编译安装源码包到独立目录，这和系统默认环境之间是没有任何影响的，Python3 和 Python2 两个环境并存即可。</p>\n<p>首先去 Python 官网下载 Python3 的源码包，<a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">传送门</a> </p>\n<p>进去之后点击导航栏的 Downloads，也可以鼠标放到 Downloads 上弹出菜单选择 Source code，表示源码包，这里选择最新版本 3.6.5，当然下面也有很多其他历史版本，点进去之后页面下方可以看到下载链接，包括源码包、Mac OSX 安装包、Windows 安装包等。Linux 系统可以直接使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br></pre></td></tr></table></figure>\n<p>接下来，如果是全新的 Linux 系统，可能需要安装一些 Python 的依赖，如 openssl、readline等模块。需要的依赖主要如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install zlib zlib-devel</span><br><span class=\"line\">yum -y install bzip2 bzip2-devel</span><br><span class=\"line\">yum -y install ncurses ncurses-devel</span><br><span class=\"line\">yum -y install readline readline-devel</span><br><span class=\"line\">yum -y install openssl openssl-devel</span><br><span class=\"line\">yum -y install openssl-static</span><br><span class=\"line\">yum -y install xz lzma xz-devel</span><br><span class=\"line\">yum -y install sqlite sqlite-devel</span><br><span class=\"line\">yum -y install gdbm gdbm-devel</span><br><span class=\"line\">yum -y install tk tk-devel</span><br></pre></td></tr></table></figure>\n<p>如果不是全新的 Linux 系统，可以查看是否安装了以上依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list installed | grep zlib</span><br><span class=\"line\">yum list installed | grep zlib-devel</span><br><span class=\"line\">yum list installed | grep bzip2</span><br><span class=\"line\">yum list installed | grep bzip2-devel</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>解压文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.6.5.tgz</span><br></pre></td></tr></table></figure>\n<p>进入目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Python-3.6.5/</span><br></pre></td></tr></table></figure>\n<p>配置编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/python3.6.5 --enable-shared CFLAGS=-fPIC</span><br></pre></td></tr></table></figure>\n<p>因为上面依赖包是用 yum 安装而不是自己编译的，所以都是安装在系统默认目录下，因此各种选项不用加默认即可生效。<code>--enable-shared</code> 和 <code>-fPIC</code> 之后可以将 Python3 的动态链接库编译出来，默认情况编译完 lib 下面只有 Python3.xm.a 这样的文件，python本身可以正常使用，但是如果编译第三方库需要python 接口的比如 caffe 等，则会报错；所以这里建议按照上面的方式配置。</p>\n<p>然后编译并安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>整个过程大约5分钟，安装成功之后，安装目录就在 <code>/usr/local/python3.6.5/</code> 。</p>\n<p>一般为了系统环境的干净，不需要将 python3、pip3 加入到系统环境变量中，使用全路径运行 Python 文件或安装第三方库即可，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/python3.6.5/bin/python3.6 xxx.py</span><br><span class=\"line\">/usr/local/python3.6.5/bin/pip3.6 install twisted</span><br></pre></td></tr></table></figure>\n<p>但是一般在开发机上时，加入环境变量会更加方便，建立软连接如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/python3.6.5/bin/python3.6 /usr/bin/python36</span><br><span class=\"line\">ln -s /usr/python3.6.5/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>然后可以直接使用软连接运行 Python 文件或安装第三方库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python36 xxx.py</span><br><span class=\"line\">pip3 install twisted</span><br></pre></td></tr></table></figure>\n<p>如上在 CentOS 上安装 Python3 就完成了，安装其他版本的 Python 解释器同理。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/freeweb/p/5181764.html\" target=\"_blank\" rel=\"noopener\">Linux下编译安装python3</a></p>\n</blockquote>\n"},{"title":"浅析FCGI与PHP-FPM","date":"2017-06-07T08:33:43.000Z","_content":"\n### 基本概念\n\n#### CGI\n\n**通用网关接口**（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI 描述了服务器和请求处理程序之间传输数据的一种标准。\n\n#### FCGI\n\n**快速通用网关接口**（Fast Common Gateway Interface/FastCGI）是一种让交互程序与 Web 服务器通信的协议。多数流行的 HTTP server 都支持 FastCGI，包括 Apache、Nginx 和 lighttpd 等，同时，FastCGI 也被许多脚本语言所支持，其中就有 PHP。FastCGI 是早期通用网关接口（CGI）的增强版本。\n\nFastCGI 致力于减少网页服务器与 CGI 程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。\n\n>  CGI 和 FastCGI 是一种通信协议规范，不是一个实体。\n\n在平时讨论中我们应该用词规范。有些人说 CGI ，其实指的是实现 CGI 协议的程序，我们称之为 CGI 程序；有些人说 FCGI ，其实指的是实现 FCGI 协议的程序，我们称之为 FCGI 程序。\n\n### CGI 程序\n\nweb server（比如说 Nginx）只是内容的分发者。比如，如果请求 `/index.html`，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。如果现在请求的是 `/index.php`，根据配置文件，Nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？比如：URL、查询字符串、POST 数据、HTTP header等。CGI 就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。\n\n当 web server 收到 `/index.php` 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。\n\nCGI 程序运行在独立的进程中，并对每个 Web 请求建立一个进程（每个请求都会解析 php.ini、初始化执行环境、处理请求），这种方法非常容易实现，但效率很差，难以扩展。面对大量请求，进程的大量建立和消亡使操作系统性能大大下降。此外，由于地址空间无法共享，也限制了资源重用。\n\n### FCGI 程序\n\nFCGI 协议是 CGI 协议的增强版本，是为了提高 CGI 程序的性能。那么CGI 程序的性能问题在哪呢？\n\n就是\"PHP解析器解析php.ini文件，初始化执行环境\"这个工作。标准的CGI 程序对每个请求都会执行这些步骤，所以处理每个时间的时间会比较长。\n\n那么 FCGI 程序是怎么做的呢？首先，FCGI 程序会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 FCGI 程序的对进程的管理。\n\n### PHP-CGI 与 PHP-FPM\n\n**PHP-CGI 和 PHP-FPM 都是实现 FastCGI 协议 的程序，并且提供了进程管理的功能**\n\nPHP-FPM 是一个 PHP 进程管理器，包含 master 进程和 worker 进程两种进程：master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个 (具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。\n\nPHP-CGI 的问题在于 ：\n\n- PHP-CGI 变更 php.ini 配置后需重启 PHP-CGI 才能让新的 php-ini 生效，不可以平滑重启 \n- 直接杀死 PHP-CGI 进程，PHP 就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。） \n\n针对 PHP-CGI 的不足，PHP-FPM（PHP-Fast CGI Process Manager） 应运而生。PHP-FPM 的管理对象是 PHP-CGI。使用 PHP-FPM 来控制 PHP-CGI 的 FastCGI 进程。\n\n### FCGI运行模式分析\n\nFastCGI 的工作原理是：\n\n1. Web Server 启动时载入 FastCGI 进程管理器（PHP-FPM）；\n2. FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程 (在任务管理器中可见多个 php-cgi.exe )并等待来自 Web Server 的连接；\n3. 当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi.exe；\n4. FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server。当 FastCGI 子进程关闭连接时，请求便告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器（运行在 WebServer中）的下一个连接。 在正常的CGI模式中，php-cgi.exe 在此便退出了。\n\n如果使用正常的 CGI 协议，你可以想象请求处理有多慢。每一个 Web 请求 PHP 都必须重新解析 php.ini、重新载入全部 dll 扩展并重初始化全部数据结构。使用 FastCGI，所有这些 都只在进程启动时发生一次。一个额外的好处是，持续数据库连接可以工作。\n\nFastCGI 的主要优点是把动态语言和 HTTP Server 分离开来，所以 Nginx 与 PHP/PHP-FPM 经常被部署在不同的服务器上，以分担前端 Nginx 服务器的压力，使 Nginx 专一处理静 态请求和转发动态请求，而 PHP/PHP-FPM 服务器专一解析PHP动态请求。\n\n### 给张图\n\n![2017-6-7 194822](/images/2017-6-7 194822.png)\n\n图中表示了 Nginx、FCGI、Wrapper、PHP 之间的关系。其中 fastcgi_pass 指定了 FastCGI 服务器监听端口与地址，Wrapper 是调用其他程序的一段辅助程序，整个的执行流程是：\n\n- 用户将 HTTP 请求发送给 Nginx 服务器；\n- Nginx  会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；\n- Nginx  会将请求交给 fastcgi 客户端，通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；\n- fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；\n- Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；\n- PHP 会将查询到的结果返回给 Nginx ；\n- Nginx  构造一个响应报文将结果返回给用户。\n\n\n\n\n\n> 参考文章：\n>\n> [PHP-FastCGI详解](http://www.cnblogs.com/JohnABC/p/3529786.html)   [搞不清FastCgi与PHP-fpm之间是个什么样的关系](https://segmentfault.com/q/1010000000256516)  [关于CGI 和 PHP-FPM需要弄清的](http://www.cleey.com/blog/single/id/848.html)  [理解CGI、FCGI、php-cgi、php-fpm的概念](http://blog.csdn.net/fan2012huan/article/details/53020064)  [Nginx-->进阶-->原理-->Nginx+php+fastcgi的原理与关系](http://www.cnblogs.com/mangguoxiansheng/p/5967745.html)  [Nginx+Php-fpm运行原理详解](https://segmentfault.com/a/1190000007322358) \n\n","source":"_posts/cgifcgiphpfpm.md","raw":"---\ntitle: 浅析FCGI与PHP-FPM\ndate: 2017-06-07 16:33:43\ntags:\n - CGI\n - FCGI\n - PHP-FPM\n - PHP-CGI\ncategories:\n - PHP\n---\n\n### 基本概念\n\n#### CGI\n\n**通用网关接口**（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI 描述了服务器和请求处理程序之间传输数据的一种标准。\n\n#### FCGI\n\n**快速通用网关接口**（Fast Common Gateway Interface/FastCGI）是一种让交互程序与 Web 服务器通信的协议。多数流行的 HTTP server 都支持 FastCGI，包括 Apache、Nginx 和 lighttpd 等，同时，FastCGI 也被许多脚本语言所支持，其中就有 PHP。FastCGI 是早期通用网关接口（CGI）的增强版本。\n\nFastCGI 致力于减少网页服务器与 CGI 程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。\n\n>  CGI 和 FastCGI 是一种通信协议规范，不是一个实体。\n\n在平时讨论中我们应该用词规范。有些人说 CGI ，其实指的是实现 CGI 协议的程序，我们称之为 CGI 程序；有些人说 FCGI ，其实指的是实现 FCGI 协议的程序，我们称之为 FCGI 程序。\n\n### CGI 程序\n\nweb server（比如说 Nginx）只是内容的分发者。比如，如果请求 `/index.html`，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。如果现在请求的是 `/index.php`，根据配置文件，Nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？比如：URL、查询字符串、POST 数据、HTTP header等。CGI 就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。\n\n当 web server 收到 `/index.php` 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。\n\nCGI 程序运行在独立的进程中，并对每个 Web 请求建立一个进程（每个请求都会解析 php.ini、初始化执行环境、处理请求），这种方法非常容易实现，但效率很差，难以扩展。面对大量请求，进程的大量建立和消亡使操作系统性能大大下降。此外，由于地址空间无法共享，也限制了资源重用。\n\n### FCGI 程序\n\nFCGI 协议是 CGI 协议的增强版本，是为了提高 CGI 程序的性能。那么CGI 程序的性能问题在哪呢？\n\n就是\"PHP解析器解析php.ini文件，初始化执行环境\"这个工作。标准的CGI 程序对每个请求都会执行这些步骤，所以处理每个时间的时间会比较长。\n\n那么 FCGI 程序是怎么做的呢？首先，FCGI 程序会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 FCGI 程序的对进程的管理。\n\n### PHP-CGI 与 PHP-FPM\n\n**PHP-CGI 和 PHP-FPM 都是实现 FastCGI 协议 的程序，并且提供了进程管理的功能**\n\nPHP-FPM 是一个 PHP 进程管理器，包含 master 进程和 worker 进程两种进程：master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个 (具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。\n\nPHP-CGI 的问题在于 ：\n\n- PHP-CGI 变更 php.ini 配置后需重启 PHP-CGI 才能让新的 php-ini 生效，不可以平滑重启 \n- 直接杀死 PHP-CGI 进程，PHP 就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。） \n\n针对 PHP-CGI 的不足，PHP-FPM（PHP-Fast CGI Process Manager） 应运而生。PHP-FPM 的管理对象是 PHP-CGI。使用 PHP-FPM 来控制 PHP-CGI 的 FastCGI 进程。\n\n### FCGI运行模式分析\n\nFastCGI 的工作原理是：\n\n1. Web Server 启动时载入 FastCGI 进程管理器（PHP-FPM）；\n2. FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程 (在任务管理器中可见多个 php-cgi.exe )并等待来自 Web Server 的连接；\n3. 当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi.exe；\n4. FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server。当 FastCGI 子进程关闭连接时，请求便告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器（运行在 WebServer中）的下一个连接。 在正常的CGI模式中，php-cgi.exe 在此便退出了。\n\n如果使用正常的 CGI 协议，你可以想象请求处理有多慢。每一个 Web 请求 PHP 都必须重新解析 php.ini、重新载入全部 dll 扩展并重初始化全部数据结构。使用 FastCGI，所有这些 都只在进程启动时发生一次。一个额外的好处是，持续数据库连接可以工作。\n\nFastCGI 的主要优点是把动态语言和 HTTP Server 分离开来，所以 Nginx 与 PHP/PHP-FPM 经常被部署在不同的服务器上，以分担前端 Nginx 服务器的压力，使 Nginx 专一处理静 态请求和转发动态请求，而 PHP/PHP-FPM 服务器专一解析PHP动态请求。\n\n### 给张图\n\n![2017-6-7 194822](/images/2017-6-7 194822.png)\n\n图中表示了 Nginx、FCGI、Wrapper、PHP 之间的关系。其中 fastcgi_pass 指定了 FastCGI 服务器监听端口与地址，Wrapper 是调用其他程序的一段辅助程序，整个的执行流程是：\n\n- 用户将 HTTP 请求发送给 Nginx 服务器；\n- Nginx  会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；\n- Nginx  会将请求交给 fastcgi 客户端，通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；\n- fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；\n- Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；\n- PHP 会将查询到的结果返回给 Nginx ；\n- Nginx  构造一个响应报文将结果返回给用户。\n\n\n\n\n\n> 参考文章：\n>\n> [PHP-FastCGI详解](http://www.cnblogs.com/JohnABC/p/3529786.html)   [搞不清FastCgi与PHP-fpm之间是个什么样的关系](https://segmentfault.com/q/1010000000256516)  [关于CGI 和 PHP-FPM需要弄清的](http://www.cleey.com/blog/single/id/848.html)  [理解CGI、FCGI、php-cgi、php-fpm的概念](http://blog.csdn.net/fan2012huan/article/details/53020064)  [Nginx-->进阶-->原理-->Nginx+php+fastcgi的原理与关系](http://www.cnblogs.com/mangguoxiansheng/p/5967745.html)  [Nginx+Php-fpm运行原理详解](https://segmentfault.com/a/1190000007322358) \n\n","slug":"cgifcgiphpfpm","published":1,"updated":"2020-10-25T06:43:32.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprn000bmolcg5d04vh1","content":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h4><p><strong>通用网关接口</strong>（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI 描述了服务器和请求处理程序之间传输数据的一种标准。</p>\n<h4 id=\"FCGI\"><a href=\"#FCGI\" class=\"headerlink\" title=\"FCGI\"></a>FCGI</h4><p><strong>快速通用网关接口</strong>（Fast Common Gateway Interface/FastCGI）是一种让交互程序与 Web 服务器通信的协议。多数流行的 HTTP server 都支持 FastCGI，包括 Apache、Nginx 和 lighttpd 等，同时，FastCGI 也被许多脚本语言所支持，其中就有 PHP。FastCGI 是早期通用网关接口（CGI）的增强版本。</p>\n<p>FastCGI 致力于减少网页服务器与 CGI 程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。</p>\n<blockquote>\n<p> CGI 和 FastCGI 是一种通信协议规范，不是一个实体。</p>\n</blockquote>\n<p>在平时讨论中我们应该用词规范。有些人说 CGI ，其实指的是实现 CGI 协议的程序，我们称之为 CGI 程序；有些人说 FCGI ，其实指的是实现 FCGI 协议的程序，我们称之为 FCGI 程序。</p>\n<h3 id=\"CGI-程序\"><a href=\"#CGI-程序\" class=\"headerlink\" title=\"CGI 程序\"></a>CGI 程序</h3><p>web server（比如说 Nginx）只是内容的分发者。比如，如果请求 <code>/index.html</code>，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。如果现在请求的是 <code>/index.php</code>，根据配置文件，Nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？比如：URL、查询字符串、POST 数据、HTTP header等。CGI 就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。</p>\n<p>当 web server 收到 <code>/index.php</code> 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。</p>\n<p>CGI 程序运行在独立的进程中，并对每个 Web 请求建立一个进程（每个请求都会解析 php.ini、初始化执行环境、处理请求），这种方法非常容易实现，但效率很差，难以扩展。面对大量请求，进程的大量建立和消亡使操作系统性能大大下降。此外，由于地址空间无法共享，也限制了资源重用。</p>\n<h3 id=\"FCGI-程序\"><a href=\"#FCGI-程序\" class=\"headerlink\" title=\"FCGI 程序\"></a>FCGI 程序</h3><p>FCGI 协议是 CGI 协议的增强版本，是为了提高 CGI 程序的性能。那么CGI 程序的性能问题在哪呢？</p>\n<p>就是”PHP解析器解析php.ini文件，初始化执行环境”这个工作。标准的CGI 程序对每个请求都会执行这些步骤，所以处理每个时间的时间会比较长。</p>\n<p>那么 FCGI 程序是怎么做的呢？首先，FCGI 程序会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 FCGI 程序的对进程的管理。</p>\n<h3 id=\"PHP-CGI-与-PHP-FPM\"><a href=\"#PHP-CGI-与-PHP-FPM\" class=\"headerlink\" title=\"PHP-CGI 与 PHP-FPM\"></a>PHP-CGI 与 PHP-FPM</h3><p><strong>PHP-CGI 和 PHP-FPM 都是实现 FastCGI 协议 的程序，并且提供了进程管理的功能</strong></p>\n<p>PHP-FPM 是一个 PHP 进程管理器，包含 master 进程和 worker 进程两种进程：master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个 (具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p>\n<p>PHP-CGI 的问题在于 ：</p>\n<ul>\n<li>PHP-CGI 变更 php.ini 配置后需重启 PHP-CGI 才能让新的 php-ini 生效，不可以平滑重启 </li>\n<li>直接杀死 PHP-CGI 进程，PHP 就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。） </li>\n</ul>\n<p>针对 PHP-CGI 的不足，PHP-FPM（PHP-Fast CGI Process Manager） 应运而生。PHP-FPM 的管理对象是 PHP-CGI。使用 PHP-FPM 来控制 PHP-CGI 的 FastCGI 进程。</p>\n<h3 id=\"FCGI运行模式分析\"><a href=\"#FCGI运行模式分析\" class=\"headerlink\" title=\"FCGI运行模式分析\"></a>FCGI运行模式分析</h3><p>FastCGI 的工作原理是：</p>\n<ol>\n<li>Web Server 启动时载入 FastCGI 进程管理器（PHP-FPM）；</li>\n<li>FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程 (在任务管理器中可见多个 php-cgi.exe )并等待来自 Web Server 的连接；</li>\n<li>当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi.exe；</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server。当 FastCGI 子进程关闭连接时，请求便告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器（运行在 WebServer中）的下一个连接。 在正常的CGI模式中，php-cgi.exe 在此便退出了。</li>\n</ol>\n<p>如果使用正常的 CGI 协议，你可以想象请求处理有多慢。每一个 Web 请求 PHP 都必须重新解析 php.ini、重新载入全部 dll 扩展并重初始化全部数据结构。使用 FastCGI，所有这些 都只在进程启动时发生一次。一个额外的好处是，持续数据库连接可以工作。</p>\n<p>FastCGI 的主要优点是把动态语言和 HTTP Server 分离开来，所以 Nginx 与 PHP/PHP-FPM 经常被部署在不同的服务器上，以分担前端 Nginx 服务器的压力，使 Nginx 专一处理静 态请求和转发动态请求，而 PHP/PHP-FPM 服务器专一解析PHP动态请求。</p>\n<h3 id=\"给张图\"><a href=\"#给张图\" class=\"headerlink\" title=\"给张图\"></a>给张图</h3><p><img src=\"/images/2017-6-7 194822.png\" alt=\"2017-6-7 194822\"></p>\n<p>图中表示了 Nginx、FCGI、Wrapper、PHP 之间的关系。其中 fastcgi_pass 指定了 FastCGI 服务器监听端口与地址，Wrapper 是调用其他程序的一段辅助程序，整个的执行流程是：</p>\n<ul>\n<li>用户将 HTTP 请求发送给 Nginx 服务器；</li>\n<li>Nginx  会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；</li>\n<li>Nginx  会将请求交给 fastcgi 客户端，通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；</li>\n<li>fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；</li>\n<li>Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；</li>\n<li>PHP 会将查询到的结果返回给 Nginx ；</li>\n<li>Nginx  构造一个响应报文将结果返回给用户。</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/JohnABC/p/3529786.html\" target=\"_blank\" rel=\"noopener\">PHP-FastCGI详解</a>   <a href=\"https://segmentfault.com/q/1010000000256516\" target=\"_blank\" rel=\"noopener\">搞不清FastCgi与PHP-fpm之间是个什么样的关系</a>  <a href=\"http://www.cleey.com/blog/single/id/848.html\" target=\"_blank\" rel=\"noopener\">关于CGI 和 PHP-FPM需要弄清的</a>  <a href=\"http://blog.csdn.net/fan2012huan/article/details/53020064\" target=\"_blank\" rel=\"noopener\">理解CGI、FCGI、php-cgi、php-fpm的概念</a>  <a href=\"http://www.cnblogs.com/mangguoxiansheng/p/5967745.html\" target=\"_blank\" rel=\"noopener\">Nginx–&gt;进阶–&gt;原理–&gt;Nginx+php+fastcgi的原理与关系</a>  <a href=\"https://segmentfault.com/a/1190000007322358\" target=\"_blank\" rel=\"noopener\">Nginx+Php-fpm运行原理详解</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h4><p><strong>通用网关接口</strong>（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI 描述了服务器和请求处理程序之间传输数据的一种标准。</p>\n<h4 id=\"FCGI\"><a href=\"#FCGI\" class=\"headerlink\" title=\"FCGI\"></a>FCGI</h4><p><strong>快速通用网关接口</strong>（Fast Common Gateway Interface/FastCGI）是一种让交互程序与 Web 服务器通信的协议。多数流行的 HTTP server 都支持 FastCGI，包括 Apache、Nginx 和 lighttpd 等，同时，FastCGI 也被许多脚本语言所支持，其中就有 PHP。FastCGI 是早期通用网关接口（CGI）的增强版本。</p>\n<p>FastCGI 致力于减少网页服务器与 CGI 程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。</p>\n<blockquote>\n<p> CGI 和 FastCGI 是一种通信协议规范，不是一个实体。</p>\n</blockquote>\n<p>在平时讨论中我们应该用词规范。有些人说 CGI ，其实指的是实现 CGI 协议的程序，我们称之为 CGI 程序；有些人说 FCGI ，其实指的是实现 FCGI 协议的程序，我们称之为 FCGI 程序。</p>\n<h3 id=\"CGI-程序\"><a href=\"#CGI-程序\" class=\"headerlink\" title=\"CGI 程序\"></a>CGI 程序</h3><p>web server（比如说 Nginx）只是内容的分发者。比如，如果请求 <code>/index.html</code>，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。如果现在请求的是 <code>/index.php</code>，根据配置文件，Nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？比如：URL、查询字符串、POST 数据、HTTP header等。CGI 就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。</p>\n<p>当 web server 收到 <code>/index.php</code> 这个请求后，会启动对应的 CGI 程序，这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程。web server 再把结果返回给浏览器。</p>\n<p>CGI 程序运行在独立的进程中，并对每个 Web 请求建立一个进程（每个请求都会解析 php.ini、初始化执行环境、处理请求），这种方法非常容易实现，但效率很差，难以扩展。面对大量请求，进程的大量建立和消亡使操作系统性能大大下降。此外，由于地址空间无法共享，也限制了资源重用。</p>\n<h3 id=\"FCGI-程序\"><a href=\"#FCGI-程序\" class=\"headerlink\" title=\"FCGI 程序\"></a>FCGI 程序</h3><p>FCGI 协议是 CGI 协议的增强版本，是为了提高 CGI 程序的性能。那么CGI 程序的性能问题在哪呢？</p>\n<p>就是”PHP解析器解析php.ini文件，初始化执行环境”这个工作。标准的CGI 程序对每个请求都会执行这些步骤，所以处理每个时间的时间会比较长。</p>\n<p>那么 FCGI 程序是怎么做的呢？首先，FCGI 程序会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 FCGI 程序的对进程的管理。</p>\n<h3 id=\"PHP-CGI-与-PHP-FPM\"><a href=\"#PHP-CGI-与-PHP-FPM\" class=\"headerlink\" title=\"PHP-CGI 与 PHP-FPM\"></a>PHP-CGI 与 PHP-FPM</h3><p><strong>PHP-CGI 和 PHP-FPM 都是实现 FastCGI 协议 的程序，并且提供了进程管理的功能</strong></p>\n<p>PHP-FPM 是一个 PHP 进程管理器，包含 master 进程和 worker 进程两种进程：master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个 (具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p>\n<p>PHP-CGI 的问题在于 ：</p>\n<ul>\n<li>PHP-CGI 变更 php.ini 配置后需重启 PHP-CGI 才能让新的 php-ini 生效，不可以平滑重启 </li>\n<li>直接杀死 PHP-CGI 进程，PHP 就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。） </li>\n</ul>\n<p>针对 PHP-CGI 的不足，PHP-FPM（PHP-Fast CGI Process Manager） 应运而生。PHP-FPM 的管理对象是 PHP-CGI。使用 PHP-FPM 来控制 PHP-CGI 的 FastCGI 进程。</p>\n<h3 id=\"FCGI运行模式分析\"><a href=\"#FCGI运行模式分析\" class=\"headerlink\" title=\"FCGI运行模式分析\"></a>FCGI运行模式分析</h3><p>FastCGI 的工作原理是：</p>\n<ol>\n<li>Web Server 启动时载入 FastCGI 进程管理器（PHP-FPM）；</li>\n<li>FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程 (在任务管理器中可见多个 php-cgi.exe )并等待来自 Web Server 的连接；</li>\n<li>当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi.exe；</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server。当 FastCGI 子进程关闭连接时，请求便告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器（运行在 WebServer中）的下一个连接。 在正常的CGI模式中，php-cgi.exe 在此便退出了。</li>\n</ol>\n<p>如果使用正常的 CGI 协议，你可以想象请求处理有多慢。每一个 Web 请求 PHP 都必须重新解析 php.ini、重新载入全部 dll 扩展并重初始化全部数据结构。使用 FastCGI，所有这些 都只在进程启动时发生一次。一个额外的好处是，持续数据库连接可以工作。</p>\n<p>FastCGI 的主要优点是把动态语言和 HTTP Server 分离开来，所以 Nginx 与 PHP/PHP-FPM 经常被部署在不同的服务器上，以分担前端 Nginx 服务器的压力，使 Nginx 专一处理静 态请求和转发动态请求，而 PHP/PHP-FPM 服务器专一解析PHP动态请求。</p>\n<h3 id=\"给张图\"><a href=\"#给张图\" class=\"headerlink\" title=\"给张图\"></a>给张图</h3><p><img src=\"/images/2017-6-7 194822.png\" alt=\"2017-6-7 194822\"></p>\n<p>图中表示了 Nginx、FCGI、Wrapper、PHP 之间的关系。其中 fastcgi_pass 指定了 FastCGI 服务器监听端口与地址，Wrapper 是调用其他程序的一段辅助程序，整个的执行流程是：</p>\n<ul>\n<li>用户将 HTTP 请求发送给 Nginx 服务器；</li>\n<li>Nginx  会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；</li>\n<li>Nginx  会将请求交给 fastcgi 客户端，通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；</li>\n<li>fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；</li>\n<li>Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；</li>\n<li>PHP 会将查询到的结果返回给 Nginx ；</li>\n<li>Nginx  构造一个响应报文将结果返回给用户。</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/JohnABC/p/3529786.html\" target=\"_blank\" rel=\"noopener\">PHP-FastCGI详解</a>   <a href=\"https://segmentfault.com/q/1010000000256516\" target=\"_blank\" rel=\"noopener\">搞不清FastCgi与PHP-fpm之间是个什么样的关系</a>  <a href=\"http://www.cleey.com/blog/single/id/848.html\" target=\"_blank\" rel=\"noopener\">关于CGI 和 PHP-FPM需要弄清的</a>  <a href=\"http://blog.csdn.net/fan2012huan/article/details/53020064\" target=\"_blank\" rel=\"noopener\">理解CGI、FCGI、php-cgi、php-fpm的概念</a>  <a href=\"http://www.cnblogs.com/mangguoxiansheng/p/5967745.html\" target=\"_blank\" rel=\"noopener\">Nginx–&gt;进阶–&gt;原理–&gt;Nginx+php+fastcgi的原理与关系</a>  <a href=\"https://segmentfault.com/a/1190000007322358\" target=\"_blank\" rel=\"noopener\">Nginx+Php-fpm运行原理详解</a> </p>\n</blockquote>\n"},{"title":"Git常用命令的简单使用","date":"2017-10-09T12:39:43.000Z","_content":"\n### git add\n\n`git add` 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。\n\n#### 描述\n\n将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。\n\n该命令可以在提交之前多次执行。它只在运行 `git add` 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 `git add` 将新的内容添加到索引。\n\n#### 示例\n\n```\ngit add .             # 将所有修改添加到暂存区\ngit add *             # Ant风格添加修改\ngit add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\ngit add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区\ngit add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java\n```\n\n### git commit\n\n`git commit` 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n#### 描述\n\n`git commit` 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n要添加的内容可以通过以下几种方式指定：\n\n1. 在使用 `git commit` 命令之前，通过使用 `git add` 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为`added`）；\n2. 通过使用 `git rm` 从工作树和索引中删除文件，再次使用 `git commit` 命令;\n3. 通过将文件作为参数列出到 `git commit` 命令（不使用 `--interactive` 或 `--patch` 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；\n4. 通过使用带有 `-a` 选项的 `git commit` 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 `rm` 文件 ，然后执行实际提交；\n5. 通过使用 `--interactive` 或 `--patch` 选项与 `git commit` 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。\n\n如果提交后立即发现错误，可以使用 `git reset` 命令恢复。\n\n#### 示例\n\n```\ngit commit -m \"the commit message\" # git add 存储到暂存区之后将内容提交\n```\n\n### git push\n\n`git push` 命令用于将本地分支的更新，推送到远程主机。\n\n#### 描述\n\n使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 `<repository>` 参数推送的位置时，将查询当前分支的 `branch.*.remote` 配置以确定要在哪里推送。 如果配置丢失，则默认为`origin`。\n\n#### 示例\n\n```\ngit push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。\ngit push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。\ngit push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。\ngit push --all origin # 将所有本地分支都推送到origin主机。\n```\n\n### git clone\n\n`git clone` 命令将存储库克隆到新目录中。\n\n#### 描述\n\n将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。\n\n#### 示例\n\n```\ngit clone <版本库的网址>\n如：git clone http://github.com/jquery/jquery.git\n```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。\n\n```\ngit clone <版本库的网址> <本地目录名>\n```\n\n该命令可指定不同的目录名。\n\n### git fetch\n\n`git fetch` 命令用于从另一个存储库下载对象和引用。\n\n#### 描述\n\n从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到`git fetch` 命令。\n\n#### 示例\n\n更新远程代码到本地仓库：\n\n```\n方式一：\n1. 查看远程仓库：git remote -v\n2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master\n3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master\n4. 远程仓库和本地仓库的合并：git merge origin/master\n\n方式二：\n1. 查看远程仓库：git remote -v\n2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp\n3. 比较本地仓库和远程仓库的区别：git diff temp\n4. 合并temp分支到master分支：git merge temp\n5. 删除temp分支：git branch -d temp\n注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D <分支名>\n```","source":"_posts/gitcommand.md","raw":"---\ntitle: Git常用命令的简单使用\ndate: 2017-10-09 20:39:43\ntags:\n - Git\ncategories:\n - Git\n---\n\n### git add\n\n`git add` 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。\n\n#### 描述\n\n将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。\n\n该命令可以在提交之前多次执行。它只在运行 `git add` 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 `git add` 将新的内容添加到索引。\n\n#### 示例\n\n```\ngit add .             # 将所有修改添加到暂存区\ngit add *             # Ant风格添加修改\ngit add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\ngit add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区\ngit add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java\n```\n\n### git commit\n\n`git commit` 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n#### 描述\n\n`git commit` 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n要添加的内容可以通过以下几种方式指定：\n\n1. 在使用 `git commit` 命令之前，通过使用 `git add` 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为`added`）；\n2. 通过使用 `git rm` 从工作树和索引中删除文件，再次使用 `git commit` 命令;\n3. 通过将文件作为参数列出到 `git commit` 命令（不使用 `--interactive` 或 `--patch` 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；\n4. 通过使用带有 `-a` 选项的 `git commit` 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 `rm` 文件 ，然后执行实际提交；\n5. 通过使用 `--interactive` 或 `--patch` 选项与 `git commit` 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。\n\n如果提交后立即发现错误，可以使用 `git reset` 命令恢复。\n\n#### 示例\n\n```\ngit commit -m \"the commit message\" # git add 存储到暂存区之后将内容提交\n```\n\n### git push\n\n`git push` 命令用于将本地分支的更新，推送到远程主机。\n\n#### 描述\n\n使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 `<repository>` 参数推送的位置时，将查询当前分支的 `branch.*.remote` 配置以确定要在哪里推送。 如果配置丢失，则默认为`origin`。\n\n#### 示例\n\n```\ngit push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。\ngit push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。\ngit push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。\ngit push --all origin # 将所有本地分支都推送到origin主机。\n```\n\n### git clone\n\n`git clone` 命令将存储库克隆到新目录中。\n\n#### 描述\n\n将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。\n\n#### 示例\n\n```\ngit clone <版本库的网址>\n如：git clone http://github.com/jquery/jquery.git\n```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。\n\n```\ngit clone <版本库的网址> <本地目录名>\n```\n\n该命令可指定不同的目录名。\n\n### git fetch\n\n`git fetch` 命令用于从另一个存储库下载对象和引用。\n\n#### 描述\n\n从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到`git fetch` 命令。\n\n#### 示例\n\n更新远程代码到本地仓库：\n\n```\n方式一：\n1. 查看远程仓库：git remote -v\n2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master\n3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master\n4. 远程仓库和本地仓库的合并：git merge origin/master\n\n方式二：\n1. 查看远程仓库：git remote -v\n2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp\n3. 比较本地仓库和远程仓库的区别：git diff temp\n4. 合并temp分支到master分支：git merge temp\n5. 删除temp分支：git branch -d temp\n注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D <分支名>\n```","slug":"gitcommand","published":1,"updated":"2020-10-25T06:43:32.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprs000fmolc2opnpdxx","content":"<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p><code>git add</code> 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。</p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p>\n<p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .             # 将所有修改添加到暂存区</span><br><span class=\"line\">git add *             # Ant风格添加修改</span><br><span class=\"line\">git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区</span><br><span class=\"line\">git add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区</span><br><span class=\"line\">git add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p><code>git commit</code> 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p><code>git commit</code> 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<p>要添加的内容可以通过以下几种方式指定：</p>\n<ol>\n<li>在使用 <code>git commit</code> 命令之前，通过使用 <code>git add</code> 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为<code>added</code>）；</li>\n<li>通过使用 <code>git rm</code> 从工作树和索引中删除文件，再次使用 <code>git commit</code> 命令;</li>\n<li>通过将文件作为参数列出到 <code>git commit</code> 命令（不使用 <code>--interactive</code> 或 <code>--patch</code> 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；</li>\n<li>通过使用带有 <code>-a</code> 选项的 <code>git commit</code> 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 <code>rm</code> 文件 ，然后执行实际提交；</li>\n<li>通过使用 <code>--interactive</code> 或 <code>--patch</code> 选项与 <code>git commit</code> 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。</li>\n</ol>\n<p>如果提交后立即发现错误，可以使用 <code>git reset</code> 命令恢复。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;the commit message&quot; # git add 存储到暂存区之后将内容提交</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p><code>git push</code> 命令用于将本地分支的更新，推送到远程主机。</p>\n<h4 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 <code>&lt;repository&gt;</code> 参数推送的位置时，将查询当前分支的 <code>branch.*.remote</code> 配置以确定要在哪里推送。 如果配置丢失，则默认为<code>origin</code>。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。</span><br><span class=\"line\">git push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><br><span class=\"line\">git push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。</span><br><span class=\"line\">git push --all origin # 将所有本地分支都推送到origin主机。</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p><code>git clone</code> 命令将存储库克隆到新目录中。</p>\n<h4 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt;</span><br><span class=\"line\">如：git clone http://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n<p>该命令可指定不同的目录名。</p>\n<h3 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h3><p><code>git fetch</code> 命令用于从另一个存储库下载对象和引用。</p>\n<h4 id=\"描述-4\"><a href=\"#描述-4\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到<code>git fetch</code> 命令。</p>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>更新远程代码到本地仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式一：</span><br><span class=\"line\">1. 查看远程仓库：git remote -v</span><br><span class=\"line\">2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master</span><br><span class=\"line\">3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master</span><br><span class=\"line\">4. 远程仓库和本地仓库的合并：git merge origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">方式二：</span><br><span class=\"line\">1. 查看远程仓库：git remote -v</span><br><span class=\"line\">2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp</span><br><span class=\"line\">3. 比较本地仓库和远程仓库的区别：git diff temp</span><br><span class=\"line\">4. 合并temp分支到master分支：git merge temp</span><br><span class=\"line\">5. 删除temp分支：git branch -d temp</span><br><span class=\"line\">注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p><code>git add</code> 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。</p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p>\n<p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .             # 将所有修改添加到暂存区</span><br><span class=\"line\">git add *             # Ant风格添加修改</span><br><span class=\"line\">git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区</span><br><span class=\"line\">git add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区</span><br><span class=\"line\">git add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p><code>git commit</code> 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p><code>git commit</code> 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<p>要添加的内容可以通过以下几种方式指定：</p>\n<ol>\n<li>在使用 <code>git commit</code> 命令之前，通过使用 <code>git add</code> 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为<code>added</code>）；</li>\n<li>通过使用 <code>git rm</code> 从工作树和索引中删除文件，再次使用 <code>git commit</code> 命令;</li>\n<li>通过将文件作为参数列出到 <code>git commit</code> 命令（不使用 <code>--interactive</code> 或 <code>--patch</code> 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；</li>\n<li>通过使用带有 <code>-a</code> 选项的 <code>git commit</code> 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 <code>rm</code> 文件 ，然后执行实际提交；</li>\n<li>通过使用 <code>--interactive</code> 或 <code>--patch</code> 选项与 <code>git commit</code> 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。</li>\n</ol>\n<p>如果提交后立即发现错误，可以使用 <code>git reset</code> 命令恢复。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;the commit message&quot; # git add 存储到暂存区之后将内容提交</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p><code>git push</code> 命令用于将本地分支的更新，推送到远程主机。</p>\n<h4 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 <code>&lt;repository&gt;</code> 参数推送的位置时，将查询当前分支的 <code>branch.*.remote</code> 配置以确定要在哪里推送。 如果配置丢失，则默认为<code>origin</code>。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。</span><br><span class=\"line\">git push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><br><span class=\"line\">git push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。</span><br><span class=\"line\">git push --all origin # 将所有本地分支都推送到origin主机。</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p><code>git clone</code> 命令将存储库克隆到新目录中。</p>\n<h4 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt;</span><br><span class=\"line\">如：git clone http://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n<p>该命令可指定不同的目录名。</p>\n<h3 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h3><p><code>git fetch</code> 命令用于从另一个存储库下载对象和引用。</p>\n<h4 id=\"描述-4\"><a href=\"#描述-4\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到<code>git fetch</code> 命令。</p>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>更新远程代码到本地仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式一：</span><br><span class=\"line\">1. 查看远程仓库：git remote -v</span><br><span class=\"line\">2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master</span><br><span class=\"line\">3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master</span><br><span class=\"line\">4. 远程仓库和本地仓库的合并：git merge origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">方式二：</span><br><span class=\"line\">1. 查看远程仓库：git remote -v</span><br><span class=\"line\">2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp</span><br><span class=\"line\">3. 比较本地仓库和远程仓库的区别：git diff temp</span><br><span class=\"line\">4. 合并temp分支到master分支：git merge temp</span><br><span class=\"line\">5. 删除temp分支：git branch -d temp</span><br><span class=\"line\">注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure>"},{"title":"GO学习系列0 - 学习资料","date":"2020-10-26T10:31:25.000Z","_content":"\n#### 文档\n\n[github.com/golang/go](https://github.com/golang/go)\n\n[Go 编程实例 Go by Example](https://learnku.com/docs/gobyexample/2020)\n\n[Go 入门指南](https://learnku.com/docs/the-way-to-go)\n\n#### 博客\n\n#### 框架\n\n##### Go Frame\n\n- [框架介绍](https://goframe.org/index)","source":"_posts/go-series-0.md","raw":"---\ntitle: GO学习系列0 - 学习资料\ndate: 2020-10-26 18:31:25\ntags:\n - GO\ncategories:\n - GO\n---\n\n#### 文档\n\n[github.com/golang/go](https://github.com/golang/go)\n\n[Go 编程实例 Go by Example](https://learnku.com/docs/gobyexample/2020)\n\n[Go 入门指南](https://learnku.com/docs/the-way-to-go)\n\n#### 博客\n\n#### 框架\n\n##### Go Frame\n\n- [框架介绍](https://goframe.org/index)","slug":"go-series-0","published":1,"updated":"2020-10-26T11:36:40.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprv000gmolc9tgp828j","content":"<h4 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h4><p><a href=\"https://github.com/golang/go\" target=\"_blank\" rel=\"noopener\">github.com/golang/go</a></p>\n<p><a href=\"https://learnku.com/docs/gobyexample/2020\" target=\"_blank\" rel=\"noopener\">Go 编程实例 Go by Example</a></p>\n<p><a href=\"https://learnku.com/docs/the-way-to-go\" target=\"_blank\" rel=\"noopener\">Go 入门指南</a></p>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><h5 id=\"Go-Frame\"><a href=\"#Go-Frame\" class=\"headerlink\" title=\"Go Frame\"></a>Go Frame</h5><ul>\n<li><a href=\"https://goframe.org/index\" target=\"_blank\" rel=\"noopener\">框架介绍</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h4><p><a href=\"https://github.com/golang/go\" target=\"_blank\" rel=\"noopener\">github.com/golang/go</a></p>\n<p><a href=\"https://learnku.com/docs/gobyexample/2020\" target=\"_blank\" rel=\"noopener\">Go 编程实例 Go by Example</a></p>\n<p><a href=\"https://learnku.com/docs/the-way-to-go\" target=\"_blank\" rel=\"noopener\">Go 入门指南</a></p>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><h5 id=\"Go-Frame\"><a href=\"#Go-Frame\" class=\"headerlink\" title=\"Go Frame\"></a>Go Frame</h5><ul>\n<li><a href=\"https://goframe.org/index\" target=\"_blank\" rel=\"noopener\">框架介绍</a></li>\n</ul>\n"},{"title":"Heox主题的其他配置","date":"2017-04-01T13:34:40.000Z","_content":"\n### Hexo页面底部次数显示\n\n很多网站中都有访问人数和总访问量，也就是下图所示的功能：\n\n![截图20170402095045](/images/2017-4-2 102013.png)\n\n我们可以通过在主题配置文件中添加以下代码来实现此功能：\n\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i> 访问人数\n  site_uv_footer:\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i> 总访问量\n  site_pv_footer: 次\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i> 浏览\n  page_pv_footer: 次\n```\n\n### 添加社交链接\n\n如果希望试下下图显示的功能：\n\n![截图20170402095414](/images/2017-4-2 102023.png)\n\n可以在主题配置文件中添加如下代码：\n\n```\nsocial:\n  #LinkLabel: Link\n  GitHub: 链接地址\n  weibo: 链接地址\n  zhihu: 链接地址\n\n\n# Social Links Icons\n# Icon Mapping:\n#   Map a menu item to a specific FontAwesome icon name.\n#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.\n#   When an globe mask icon presenting up means that the item has no mapping icon.\nsocial_icons:\n  enable: true\n  # Icon Mappings.\n  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome\n  GitHub: github\n  weibo: weibo\n  zhihu: hand-o-right\n```\n\nHexo主题使用的图标都在 [FontAwesome](http://fontawesome.io/) 上，你可以根据自己需要选择，我发现这是一个很不错的网站，各种图标很漂亮，PPT中也可以用。\n\n### 分类、归档、关于页面的创建\n\n安装完成Hexo之后，我们点击“分类”、“关于”、“标签”页面都会显示GitH的404页面，这是因为我们还没有创建每个功能对应的文件，使用如下方法创建：\n\n分类：\n\n```\nhexo new page \"categories\"\n```\n\n关于：\n\n```\nhexo new page \"about\"\n```\n\n标签：\n\n```\nhexo new page \"tags\"\n```\n\n使用以上hexo命令会在Hexo根目录的source文件夹下创建各个对应的文件夹，每个文件夹中都有index.md文件，这就成功了，文件中的内容不用修改。\n\n创建完成之后，我们在编辑文章时：\n\n```\ntitle: 标题\ndate: 2017-04-01 21:34:40\ntags:\n - Hexo\n - 主题\n - 博客\ncategories:\n - Hexo\n```\n\n“tags”、“categories”是对文章打的标签和分类，默认文章是可以评论的，如果不希望评论，可以加上：\n\n```\ncomments： false\n```\n### 首页文章显示摘要\n\n第一种方式：在主题配置文件中，找到auto_excerpt，修改如下：\n\n```\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: true\n  length: 150\n```\n\n第二种方式：根据文章的内容，自己在合适的位置添加`<!--more-->`标签，使用灵活，也是Hexo推荐的方法\n\n![img](http://upload-images.jianshu.io/upload_images/2352140-ec93f0ac69d07b21.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第三种方式：在文章中的`front-matter`中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。\n\n![img](http://upload-images.jianshu.io/upload_images/2352140-67c6e1edb5695035.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/hexoOthers.md","raw":"---\ntitle: Heox主题的其他配置\ndate: 2017-04-01 21:34:40\ntags:\n - Hexo\n - 主题\n - 博客\ncategories:\n - Hexo\n---\n\n### Hexo页面底部次数显示\n\n很多网站中都有访问人数和总访问量，也就是下图所示的功能：\n\n![截图20170402095045](/images/2017-4-2 102013.png)\n\n我们可以通过在主题配置文件中添加以下代码来实现此功能：\n\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i> 访问人数\n  site_uv_footer:\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i> 总访问量\n  site_pv_footer: 次\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i> 浏览\n  page_pv_footer: 次\n```\n\n### 添加社交链接\n\n如果希望试下下图显示的功能：\n\n![截图20170402095414](/images/2017-4-2 102023.png)\n\n可以在主题配置文件中添加如下代码：\n\n```\nsocial:\n  #LinkLabel: Link\n  GitHub: 链接地址\n  weibo: 链接地址\n  zhihu: 链接地址\n\n\n# Social Links Icons\n# Icon Mapping:\n#   Map a menu item to a specific FontAwesome icon name.\n#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.\n#   When an globe mask icon presenting up means that the item has no mapping icon.\nsocial_icons:\n  enable: true\n  # Icon Mappings.\n  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome\n  GitHub: github\n  weibo: weibo\n  zhihu: hand-o-right\n```\n\nHexo主题使用的图标都在 [FontAwesome](http://fontawesome.io/) 上，你可以根据自己需要选择，我发现这是一个很不错的网站，各种图标很漂亮，PPT中也可以用。\n\n### 分类、归档、关于页面的创建\n\n安装完成Hexo之后，我们点击“分类”、“关于”、“标签”页面都会显示GitH的404页面，这是因为我们还没有创建每个功能对应的文件，使用如下方法创建：\n\n分类：\n\n```\nhexo new page \"categories\"\n```\n\n关于：\n\n```\nhexo new page \"about\"\n```\n\n标签：\n\n```\nhexo new page \"tags\"\n```\n\n使用以上hexo命令会在Hexo根目录的source文件夹下创建各个对应的文件夹，每个文件夹中都有index.md文件，这就成功了，文件中的内容不用修改。\n\n创建完成之后，我们在编辑文章时：\n\n```\ntitle: 标题\ndate: 2017-04-01 21:34:40\ntags:\n - Hexo\n - 主题\n - 博客\ncategories:\n - Hexo\n```\n\n“tags”、“categories”是对文章打的标签和分类，默认文章是可以评论的，如果不希望评论，可以加上：\n\n```\ncomments： false\n```\n### 首页文章显示摘要\n\n第一种方式：在主题配置文件中，找到auto_excerpt，修改如下：\n\n```\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: true\n  length: 150\n```\n\n第二种方式：根据文章的内容，自己在合适的位置添加`<!--more-->`标签，使用灵活，也是Hexo推荐的方法\n\n![img](http://upload-images.jianshu.io/upload_images/2352140-ec93f0ac69d07b21.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第三种方式：在文章中的`front-matter`中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。\n\n![img](http://upload-images.jianshu.io/upload_images/2352140-67c6e1edb5695035.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"hexoOthers","published":1,"updated":"2020-10-25T06:43:32.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueprz000kmolc1pjv6r29","content":"<h3 id=\"Hexo页面底部次数显示\"><a href=\"#Hexo页面底部次数显示\" class=\"headerlink\" title=\"Hexo页面底部次数显示\"></a>Hexo页面底部次数显示</h3><p>很多网站中都有访问人数和总访问量，也就是下图所示的功能：</p>\n<p><img src=\"/images/2017-4-2 102013.png\" alt=\"截图20170402095045\"></p>\n<p>我们可以通过在主题配置文件中添加以下代码来实现此功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class=\"line\">  site_uv_footer:</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问量</span><br><span class=\"line\">  site_pv_footer: 次</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 浏览</span><br><span class=\"line\">  page_pv_footer: 次</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加社交链接\"><a href=\"#添加社交链接\" class=\"headerlink\" title=\"添加社交链接\"></a>添加社交链接</h3><p>如果希望试下下图显示的功能：</p>\n<p><img src=\"/images/2017-4-2 102023.png\" alt=\"截图20170402095414\"></p>\n<p>可以在主题配置文件中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social:</span><br><span class=\"line\">  #LinkLabel: Link</span><br><span class=\"line\">  GitHub: 链接地址</span><br><span class=\"line\">  weibo: 链接地址</span><br><span class=\"line\">  zhihu: 链接地址</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Social Links Icons</span><br><span class=\"line\"># Icon Mapping:</span><br><span class=\"line\">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class=\"line\">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class=\"line\">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings.</span><br><span class=\"line\">  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  weibo: weibo</span><br><span class=\"line\">  zhihu: hand-o-right</span><br></pre></td></tr></table></figure>\n<p>Hexo主题使用的图标都在 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">FontAwesome</a> 上，你可以根据自己需要选择，我发现这是一个很不错的网站，各种图标很漂亮，PPT中也可以用。</p>\n<h3 id=\"分类、归档、关于页面的创建\"><a href=\"#分类、归档、关于页面的创建\" class=\"headerlink\" title=\"分类、归档、关于页面的创建\"></a>分类、归档、关于页面的创建</h3><p>安装完成Hexo之后，我们点击“分类”、“关于”、“标签”页面都会显示GitH的404页面，这是因为我们还没有创建每个功能对应的文件，使用如下方法创建：</p>\n<p>分类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>关于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>\n<p>标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n<p>使用以上hexo命令会在Hexo根目录的source文件夹下创建各个对应的文件夹，每个文件夹中都有index.md文件，这就成功了，文件中的内容不用修改。</p>\n<p>创建完成之后，我们在编辑文章时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 2017-04-01 21:34:40</span><br><span class=\"line\">tags:</span><br><span class=\"line\"> - Hexo</span><br><span class=\"line\"> - 主题</span><br><span class=\"line\"> - 博客</span><br><span class=\"line\">categories:</span><br><span class=\"line\"> - Hexo</span><br></pre></td></tr></table></figure>\n<p>“tags”、“categories”是对文章打的标签和分类，默认文章是可以评论的，如果不希望评论，可以加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments： false</span><br></pre></td></tr></table></figure>\n<h3 id=\"首页文章显示摘要\"><a href=\"#首页文章显示摘要\" class=\"headerlink\" title=\"首页文章显示摘要\"></a>首页文章显示摘要</h3><p>第一种方式：在主题配置文件中，找到auto_excerpt，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Automatically Excerpt. Not recommend.</span><br><span class=\"line\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 150</span><br></pre></td></tr></table></figure>\n<p>第二种方式：根据文章的内容，自己在合适的位置添加<code>&lt;!--more--&gt;</code>标签，使用灵活，也是Hexo推荐的方法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2352140-ec93f0ac69d07b21.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>第三种方式：在文章中的<code>front-matter</code>中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2352140-67c6e1edb5695035.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hexo页面底部次数显示\"><a href=\"#Hexo页面底部次数显示\" class=\"headerlink\" title=\"Hexo页面底部次数显示\"></a>Hexo页面底部次数显示</h3><p>很多网站中都有访问人数和总访问量，也就是下图所示的功能：</p>\n<p><img src=\"/images/2017-4-2 102013.png\" alt=\"截图20170402095045\"></p>\n<p>我们可以通过在主题配置文件中添加以下代码来实现此功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class=\"line\">  site_uv_footer:</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问量</span><br><span class=\"line\">  site_pv_footer: 次</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 浏览</span><br><span class=\"line\">  page_pv_footer: 次</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加社交链接\"><a href=\"#添加社交链接\" class=\"headerlink\" title=\"添加社交链接\"></a>添加社交链接</h3><p>如果希望试下下图显示的功能：</p>\n<p><img src=\"/images/2017-4-2 102023.png\" alt=\"截图20170402095414\"></p>\n<p>可以在主题配置文件中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social:</span><br><span class=\"line\">  #LinkLabel: Link</span><br><span class=\"line\">  GitHub: 链接地址</span><br><span class=\"line\">  weibo: 链接地址</span><br><span class=\"line\">  zhihu: 链接地址</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Social Links Icons</span><br><span class=\"line\"># Icon Mapping:</span><br><span class=\"line\">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class=\"line\">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class=\"line\">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings.</span><br><span class=\"line\">  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  weibo: weibo</span><br><span class=\"line\">  zhihu: hand-o-right</span><br></pre></td></tr></table></figure>\n<p>Hexo主题使用的图标都在 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">FontAwesome</a> 上，你可以根据自己需要选择，我发现这是一个很不错的网站，各种图标很漂亮，PPT中也可以用。</p>\n<h3 id=\"分类、归档、关于页面的创建\"><a href=\"#分类、归档、关于页面的创建\" class=\"headerlink\" title=\"分类、归档、关于页面的创建\"></a>分类、归档、关于页面的创建</h3><p>安装完成Hexo之后，我们点击“分类”、“关于”、“标签”页面都会显示GitH的404页面，这是因为我们还没有创建每个功能对应的文件，使用如下方法创建：</p>\n<p>分类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>关于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>\n<p>标签：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n<p>使用以上hexo命令会在Hexo根目录的source文件夹下创建各个对应的文件夹，每个文件夹中都有index.md文件，这就成功了，文件中的内容不用修改。</p>\n<p>创建完成之后，我们在编辑文章时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 2017-04-01 21:34:40</span><br><span class=\"line\">tags:</span><br><span class=\"line\"> - Hexo</span><br><span class=\"line\"> - 主题</span><br><span class=\"line\"> - 博客</span><br><span class=\"line\">categories:</span><br><span class=\"line\"> - Hexo</span><br></pre></td></tr></table></figure>\n<p>“tags”、“categories”是对文章打的标签和分类，默认文章是可以评论的，如果不希望评论，可以加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments： false</span><br></pre></td></tr></table></figure>\n<h3 id=\"首页文章显示摘要\"><a href=\"#首页文章显示摘要\" class=\"headerlink\" title=\"首页文章显示摘要\"></a>首页文章显示摘要</h3><p>第一种方式：在主题配置文件中，找到auto_excerpt，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Automatically Excerpt. Not recommend.</span><br><span class=\"line\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 150</span><br></pre></td></tr></table></figure>\n<p>第二种方式：根据文章的内容，自己在合适的位置添加<code>&lt;!--more--&gt;</code>标签，使用灵活，也是Hexo推荐的方法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2352140-ec93f0ac69d07b21.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n<p>第三种方式：在文章中的<code>front-matter</code>中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2352140-67c6e1edb5695035.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\"></p>\n"},{"title":"Hexo应用NexT主题","date":"2017-04-01T12:46:49.000Z","_content":"### Hexo主题 ###\n\n\nHexo 为我们提供了很多[主题](\"https://hexo.io/themes/)，本博客的主题使用的是[NexT](https://github.com/iissnan/hexo-theme-next)主题，是目前Github上Star最高的Hexo主题，支持几种不同的风格。所以本文以NexT为例，介绍Hexo主题的配置及使用。\n\n\n### 安装NexT主题 ###\n\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。比如我的电脑下的 D:\\Hexo 目录下的称为站点配置文件，D:\\Hexo\\themes\\next 目录下的成为主题配置文件。\n\n在终端窗口下，定位到 Hexo 站点目录下。运行下面的代码：\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n\n### 启用NexT主题 ###\n\n\n与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。\n\n```\ntheme: next\n```\n\n\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 执行以下代码清除 Hexo 的缓存\n\n```\nhexo clean\n```\n\n\n### 验证主题 ###\n\n\n首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：\n\n> INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n若运行成功，NexT 默认的 Scheme —— Muse\n\n\n### 主题设定 ###\n\n\nScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme\n\n```\nMuse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\nMist - Muse 的紧凑版本，整洁有序的单栏外观\nPisces - 双栏 Scheme，小家碧玉似的清新\n```\n\n将不需要启用的主题注释 # 掉即可。\n\n```\n# scheme: Muse\n# scheme: Mist\nscheme: Pisces\n```\n\n\n### 设置语言 ###\n\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n```\nlanguage: zh-Hans\n```\n\n\n### 其他主题设置 ###\n\n访问 [NexT官方设置文档](http://theme-next.iissnan.com/getting-started.html) 进行设置\n\n如果想要在“站点概览”页面显示“友情链接”，需要在站点配置文件中加入以下代码：\n\n```\n# title, chinese available\nlinks_title: 友情链接 \n# # links\nlinks:\n   显示名称: 链接地址\n```\n\n\n### 集成三方工具 ###\n\n\n#### 添加文章阅读量功能 ####\n\n\n参考 [为NexT主题添加文章阅读量统计功能](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud) 进行设置，该博客只是针对NexT主题，其他主题请寻找其他解决办法。\n\n\n#### 添加站内搜索能 ####\n\n\nNexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。\n\n安装 hexo-generator-search\n\n在站点的根目录下执行以下命令：\n\n```\nnpm install hexo-generator-search --save\n```\n\n\n安装 hexo-generator-searchdb\n\n在站点的根目录下执行以下命令：\n\n```\nnpm install hexo-generator-searchdb --save\n```\n\n\n启用搜索\n\n编辑 站点配置文件，新增以下内容到任意位置：\n\n```\nsearch:\n\tpath: search.xml\n  \tfield: post\n  \tformat: html\n  \tlimit: 10000\n```\n\n最后不要忘了将站点配置文件的local_search改成true。\n\n```\n# Local search\nlocal_search:\n  enable: true\n```\n\n#### 给博客添加feed ####\n\n\n安装hexo-generator-feed\n\n```\nnpm install hexo-generator-feed --save\n```\n\n\n配置到站点配置文件_config.yml\n\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n#RSS订阅\nplugin:\n- hexo-generator-feed\n#Feed Atom\nfeed:\ntype: atom\npath: atom.xml\nlimit: 20\n```\n\n最后，在你next主题下的_config.yml下，添加RSS订阅链接即可：\n\n```\nrss: /atom.xml\n```\n\n\n#### 给博客生成一个站点地图 ####\n\n\n安装hexo-generator-seo-friendly-sitemap\n\n```\nnpm install hexo-generator-seo-friendly-sitemap --save\n```\n\n\n在站点配置文件_config.yml 中添加\n\n```\nsitemap:\n\tpath: sitemap.xml\n```\n\n#### 头像圆形旋转 ####\n\n\n把完整的 [sidebar-author.styl](https://github.com/ehlxr/useful-code/blob/master/resources/sidebar-author.styl) 文件内容复制替换到\n\n```\n..hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl\n```\n\n\n\n> 参考博客：  \n> [Hexo博客添加站内搜索](http://www.ezlippi.com/blog/2017/02/hexo-search.html)  \n> [记录Hexo+Github免费搭建个人博客](https://superbsco.coding.me/2017/01/13/new-article/)","source":"_posts/hexoNexT.md","raw":"---\ntitle: Hexo应用NexT主题\ndate: 2017-04-01 20:46:49\ntags:\n - Hexo\n - NexT\n - 主题\ncategories:\n - Hexo\n---\n### Hexo主题 ###\n\n\nHexo 为我们提供了很多[主题](\"https://hexo.io/themes/)，本博客的主题使用的是[NexT](https://github.com/iissnan/hexo-theme-next)主题，是目前Github上Star最高的Hexo主题，支持几种不同的风格。所以本文以NexT为例，介绍Hexo主题的配置及使用。\n\n\n### 安装NexT主题 ###\n\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。比如我的电脑下的 D:\\Hexo 目录下的称为站点配置文件，D:\\Hexo\\themes\\next 目录下的成为主题配置文件。\n\n在终端窗口下，定位到 Hexo 站点目录下。运行下面的代码：\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n\n### 启用NexT主题 ###\n\n\n与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。\n\n```\ntheme: next\n```\n\n\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 执行以下代码清除 Hexo 的缓存\n\n```\nhexo clean\n```\n\n\n### 验证主题 ###\n\n\n首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：\n\n> INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n若运行成功，NexT 默认的 Scheme —— Muse\n\n\n### 主题设定 ###\n\n\nScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme\n\n```\nMuse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\nMist - Muse 的紧凑版本，整洁有序的单栏外观\nPisces - 双栏 Scheme，小家碧玉似的清新\n```\n\n将不需要启用的主题注释 # 掉即可。\n\n```\n# scheme: Muse\n# scheme: Mist\nscheme: Pisces\n```\n\n\n### 设置语言 ###\n\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n```\nlanguage: zh-Hans\n```\n\n\n### 其他主题设置 ###\n\n访问 [NexT官方设置文档](http://theme-next.iissnan.com/getting-started.html) 进行设置\n\n如果想要在“站点概览”页面显示“友情链接”，需要在站点配置文件中加入以下代码：\n\n```\n# title, chinese available\nlinks_title: 友情链接 \n# # links\nlinks:\n   显示名称: 链接地址\n```\n\n\n### 集成三方工具 ###\n\n\n#### 添加文章阅读量功能 ####\n\n\n参考 [为NexT主题添加文章阅读量统计功能](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud) 进行设置，该博客只是针对NexT主题，其他主题请寻找其他解决办法。\n\n\n#### 添加站内搜索能 ####\n\n\nNexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。\n\n安装 hexo-generator-search\n\n在站点的根目录下执行以下命令：\n\n```\nnpm install hexo-generator-search --save\n```\n\n\n安装 hexo-generator-searchdb\n\n在站点的根目录下执行以下命令：\n\n```\nnpm install hexo-generator-searchdb --save\n```\n\n\n启用搜索\n\n编辑 站点配置文件，新增以下内容到任意位置：\n\n```\nsearch:\n\tpath: search.xml\n  \tfield: post\n  \tformat: html\n  \tlimit: 10000\n```\n\n最后不要忘了将站点配置文件的local_search改成true。\n\n```\n# Local search\nlocal_search:\n  enable: true\n```\n\n#### 给博客添加feed ####\n\n\n安装hexo-generator-feed\n\n```\nnpm install hexo-generator-feed --save\n```\n\n\n配置到站点配置文件_config.yml\n\n```\n# Extensions\n## Plugins: http://hexo.io/plugins/\n#RSS订阅\nplugin:\n- hexo-generator-feed\n#Feed Atom\nfeed:\ntype: atom\npath: atom.xml\nlimit: 20\n```\n\n最后，在你next主题下的_config.yml下，添加RSS订阅链接即可：\n\n```\nrss: /atom.xml\n```\n\n\n#### 给博客生成一个站点地图 ####\n\n\n安装hexo-generator-seo-friendly-sitemap\n\n```\nnpm install hexo-generator-seo-friendly-sitemap --save\n```\n\n\n在站点配置文件_config.yml 中添加\n\n```\nsitemap:\n\tpath: sitemap.xml\n```\n\n#### 头像圆形旋转 ####\n\n\n把完整的 [sidebar-author.styl](https://github.com/ehlxr/useful-code/blob/master/resources/sidebar-author.styl) 文件内容复制替换到\n\n```\n..hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl\n```\n\n\n\n> 参考博客：  \n> [Hexo博客添加站内搜索](http://www.ezlippi.com/blog/2017/02/hexo-search.html)  \n> [记录Hexo+Github免费搭建个人博客](https://superbsco.coding.me/2017/01/13/new-article/)","slug":"hexoNexT","published":1,"updated":"2020-10-25T06:43:32.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueps2000mmolcf881o495","content":"<h3 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h3><p>Hexo 为我们提供了很多<a href=\"&quot;https://hexo.io/themes/\">主题</a>，本博客的主题使用的是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a>主题，是目前Github上Star最高的Hexo主题，支持几种不同的风格。所以本文以NexT为例，介绍Hexo主题的配置及使用。</p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。比如我的电脑下的 D:\\Hexo 目录下的称为站点配置文件，D:\\Hexo\\themes\\next 目录下的成为主题配置文件。</p>\n<p>在终端窗口下，定位到 Hexo 站点目录下。运行下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用NexT主题\"><a href=\"#启用NexT主题\" class=\"headerlink\" title=\"启用NexT主题\"></a>启用NexT主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 执行以下代码清除 Hexo 的缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>\n<blockquote>\n<p>INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>\n</blockquote>\n<p>若运行成功，NexT 默认的 Scheme —— Muse</p>\n<h3 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class=\"line\">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class=\"line\">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br></pre></td></tr></table></figure>\n<p>将不需要启用的主题注释 # 掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># scheme: Muse</span><br><span class=\"line\"># scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h3><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他主题设置\"><a href=\"#其他主题设置\" class=\"headerlink\" title=\"其他主题设置\"></a>其他主题设置</h3><p>访问 <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT官方设置文档</a> 进行设置</p>\n<p>如果想要在“站点概览”页面显示“友情链接”，需要在站点配置文件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># title, chinese available</span><br><span class=\"line\">links_title: 友情链接 </span><br><span class=\"line\"># # links</span><br><span class=\"line\">links:</span><br><span class=\"line\">   显示名称: 链接地址</span><br></pre></td></tr></table></figure>\n<h3 id=\"集成三方工具\"><a href=\"#集成三方工具\" class=\"headerlink\" title=\"集成三方工具\"></a>集成三方工具</h3><h4 id=\"添加文章阅读量功能\"><a href=\"#添加文章阅读量功能\" class=\"headerlink\" title=\"添加文章阅读量功能\"></a>添加文章阅读量功能</h4><p>参考 <a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud\" target=\"_blank\" rel=\"noopener\">为NexT主题添加文章阅读量统计功能</a> 进行设置，该博客只是针对NexT主题，其他主题请寻找其他解决办法。</p>\n<h4 id=\"添加站内搜索能\"><a href=\"#添加站内搜索能\" class=\"headerlink\" title=\"添加站内搜索能\"></a>添加站内搜索能</h4><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>\n<p>安装 hexo-generator-search</p>\n<p>在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n<p>安装 hexo-generator-searchdb</p>\n<p>在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p>启用搜索</p>\n<p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">\tpath: search.xml</span><br><span class=\"line\">  \tfield: post</span><br><span class=\"line\">  \tformat: html</span><br><span class=\"line\">  \tlimit: 10000</span><br></pre></td></tr></table></figure>\n<p>最后不要忘了将站点配置文件的local_search改成true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"给博客添加feed\"><a href=\"#给博客添加feed\" class=\"headerlink\" title=\"给博客添加feed\"></a>给博客添加feed</h4><p>安装hexo-generator-feed</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>配置到站点配置文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http://hexo.io/plugins/</span><br><span class=\"line\">#RSS订阅</span><br><span class=\"line\">plugin:</span><br><span class=\"line\">- hexo-generator-feed</span><br><span class=\"line\">#Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">type: atom</span><br><span class=\"line\">path: atom.xml</span><br><span class=\"line\">limit: 20</span><br></pre></td></tr></table></figure>\n<p>最后，在你next主题下的_config.yml下，添加RSS订阅链接即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss: /atom.xml</span><br></pre></td></tr></table></figure>\n<h4 id=\"给博客生成一个站点地图\"><a href=\"#给博客生成一个站点地图\" class=\"headerlink\" title=\"给博客生成一个站点地图\"></a>给博客生成一个站点地图</h4><p>安装hexo-generator-seo-friendly-sitemap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>在站点配置文件_config.yml 中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">\tpath: sitemap.xml</span><br></pre></td></tr></table></figure>\n<h4 id=\"头像圆形旋转\"><a href=\"#头像圆形旋转\" class=\"headerlink\" title=\"头像圆形旋转\"></a>头像圆形旋转</h4><p>把完整的 <a href=\"https://github.com/ehlxr/useful-code/blob/master/resources/sidebar-author.styl\" target=\"_blank\" rel=\"noopener\">sidebar-author.styl</a> 文件内容复制替换到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考博客：<br><a href=\"http://www.ezlippi.com/blog/2017/02/hexo-search.html\" target=\"_blank\" rel=\"noopener\">Hexo博客添加站内搜索</a><br><a href=\"https://superbsco.coding.me/2017/01/13/new-article/\" target=\"_blank\" rel=\"noopener\">记录Hexo+Github免费搭建个人博客</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h3><p>Hexo 为我们提供了很多<a href=\"&quot;https://hexo.io/themes/\">主题</a>，本博客的主题使用的是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a>主题，是目前Github上Star最高的Hexo主题，支持几种不同的风格。所以本文以NexT为例，介绍Hexo主题的配置及使用。</p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。比如我的电脑下的 D:\\Hexo 目录下的称为站点配置文件，D:\\Hexo\\themes\\next 目录下的成为主题配置文件。</p>\n<p>在终端窗口下，定位到 Hexo 站点目录下。运行下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用NexT主题\"><a href=\"#启用NexT主题\" class=\"headerlink\" title=\"启用NexT主题\"></a>启用NexT主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 执行以下代码清除 Hexo 的缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>\n<blockquote>\n<p>INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>\n</blockquote>\n<p>若运行成功，NexT 默认的 Scheme —— Muse</p>\n<h3 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class=\"line\">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class=\"line\">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br></pre></td></tr></table></figure>\n<p>将不需要启用的主题注释 # 掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># scheme: Muse</span><br><span class=\"line\"># scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h3><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-Hans</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他主题设置\"><a href=\"#其他主题设置\" class=\"headerlink\" title=\"其他主题设置\"></a>其他主题设置</h3><p>访问 <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT官方设置文档</a> 进行设置</p>\n<p>如果想要在“站点概览”页面显示“友情链接”，需要在站点配置文件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># title, chinese available</span><br><span class=\"line\">links_title: 友情链接 </span><br><span class=\"line\"># # links</span><br><span class=\"line\">links:</span><br><span class=\"line\">   显示名称: 链接地址</span><br></pre></td></tr></table></figure>\n<h3 id=\"集成三方工具\"><a href=\"#集成三方工具\" class=\"headerlink\" title=\"集成三方工具\"></a>集成三方工具</h3><h4 id=\"添加文章阅读量功能\"><a href=\"#添加文章阅读量功能\" class=\"headerlink\" title=\"添加文章阅读量功能\"></a>添加文章阅读量功能</h4><p>参考 <a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud\" target=\"_blank\" rel=\"noopener\">为NexT主题添加文章阅读量统计功能</a> 进行设置，该博客只是针对NexT主题，其他主题请寻找其他解决办法。</p>\n<h4 id=\"添加站内搜索能\"><a href=\"#添加站内搜索能\" class=\"headerlink\" title=\"添加站内搜索能\"></a>添加站内搜索能</h4><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>\n<p>安装 hexo-generator-search</p>\n<p>在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n<p>安装 hexo-generator-searchdb</p>\n<p>在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p>启用搜索</p>\n<p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">\tpath: search.xml</span><br><span class=\"line\">  \tfield: post</span><br><span class=\"line\">  \tformat: html</span><br><span class=\"line\">  \tlimit: 10000</span><br></pre></td></tr></table></figure>\n<p>最后不要忘了将站点配置文件的local_search改成true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"给博客添加feed\"><a href=\"#给博客添加feed\" class=\"headerlink\" title=\"给博客添加feed\"></a>给博客添加feed</h4><p>安装hexo-generator-feed</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>配置到站点配置文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: http://hexo.io/plugins/</span><br><span class=\"line\">#RSS订阅</span><br><span class=\"line\">plugin:</span><br><span class=\"line\">- hexo-generator-feed</span><br><span class=\"line\">#Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">type: atom</span><br><span class=\"line\">path: atom.xml</span><br><span class=\"line\">limit: 20</span><br></pre></td></tr></table></figure>\n<p>最后，在你next主题下的_config.yml下，添加RSS订阅链接即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss: /atom.xml</span><br></pre></td></tr></table></figure>\n<h4 id=\"给博客生成一个站点地图\"><a href=\"#给博客生成一个站点地图\" class=\"headerlink\" title=\"给博客生成一个站点地图\"></a>给博客生成一个站点地图</h4><p>安装hexo-generator-seo-friendly-sitemap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>在站点配置文件_config.yml 中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">\tpath: sitemap.xml</span><br></pre></td></tr></table></figure>\n<h4 id=\"头像圆形旋转\"><a href=\"#头像圆形旋转\" class=\"headerlink\" title=\"头像圆形旋转\"></a>头像圆形旋转</h4><p>把完整的 <a href=\"https://github.com/ehlxr/useful-code/blob/master/resources/sidebar-author.styl\" target=\"_blank\" rel=\"noopener\">sidebar-author.styl</a> 文件内容复制替换到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考博客：<br><a href=\"http://www.ezlippi.com/blog/2017/02/hexo-search.html\" target=\"_blank\" rel=\"noopener\">Hexo博客添加站内搜索</a><br><a href=\"https://superbsco.coding.me/2017/01/13/new-article/\" target=\"_blank\" rel=\"noopener\">记录Hexo+Github免费搭建个人博客</a></p>\n</blockquote>\n"},{"title":"Hexo+Github搭建个人博客","date":"2017-04-01T09:31:17.000Z","_content":"\n### 动机 ###\n\n促使我建立自己博客的动机很简单，其他的博客平台太丑了！简直不能看啊，然而我并没有在说CSDN、CNBLOG等等。还有一个原因就是，我有一颗向往技术大神的心，所以需要靠自己一点点的积累。在过滤各种博客平台的时候，看到某乎大神建议使用GitHub搭建自己的博客，So，心动不如行动，于是搜集各种资料，搭建了自己博客，本文主要是记录搭建的过程以及可能遇到的问题及解决办法。  \n> **本教程只适用于windows操作系统**\n\n### 准备工具 ###\n\n\n- [GitHub](https://github.com/)账户配置  \n- 安装[Node.js](https://nodejs.org/en/)环境  \n- 安装[Git](https://git-scm.com/)环境\n\n\n#### GitHub账户配置 ####\n\n[GitHub](https://github.com/)账户申请：  \n\n\n- 如果已经拥有GitHub账户，请进行第二步注册结束后，一定前往自己的注册邮箱，点开GitHub发送给你的注册确认信，确认注册，结束注册流程。否则无法使用gh-pages。\n\n\n创建代码库：\n\n\n- 登陆之后，点击页面右上角的加号，选择New repository新建代码库；  \n  进入代码库创建页面，在Repository name下填写yourname.github.io，Description (可选)下填写一些简单的描述（不写也可以）；\n- **注意**：比如我的github名称是runnerliu,这里就填 [runnerliu.github.io](runnerliu.github.io)；\n\n\n代码库设置:\n\n\n- 开启gh-pages功能，正确创建代码库后，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages；\n- 点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了；**注意**：我自己在操作过程中并没有这一步，可能是GitHub升级了？\n\n\n#### 安装Node.js环境 ####\n\n\n根据自己操作系统的版本前往[Node.js](https://nodejs.org/en/)下载相应的Node.js，可以根据所需选择安装路径，默认安装的话一路next就可以。  \n\n\n验证安装：\n\n\n- 打开控制台（Win+R输入cmd，回车）；\n- 输入`node -v`查看是否输出版本号；\n- 输入`npm -v`查看是否输出版本号；\n- 如果全部输出成功，证明安装成功，否则检查系统环境变量是否配置。\n\n\n#### 安装Git环境 ####\n\n\n前往[Git](https://git-scm.com/)官网下载相应版本的Git；  \n\n和Node.js一样，根据需要选择安装路径，可以一路默认安装；  \n\n安装完成后，在控制台中输入`git --version`查看是否添加了系统环境变量，这样就可以直接在dos中使用git命令了；  如果输出有误，检查git环境变量的设置。    \n\n\n> 完成以上步骤，准备阶段的工作就完成了。\n\n\n### Hexo ###\n\n\n- 安装Hexo\n- 配置Hexo\n- 将Hexo与github page绑定\n- Hexo的使用设置\n\n\n#### 安装Hexo ####\n\n\n在合适的地方创建一个文件夹，这里我以D：/hexo 为例讲解，首先在D盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录；\n\n在命令行中输入`npm install hexo-cli -g`，如果看到WARN也别担心，不影响使用；\n\n继续输入`npm install hexo --save`；\n\n稍等安装完成后，输入`hexo -v`查看Hexo是否安装成功。如果安装成功会显示出hexo的版本号以及其他信息；\n\n\n#### 配置Hexo ####\n\n\n初始化Hexo：\n\n\n- 在DOS中输入`hexo init`；\n- 然后输入`npm install`，npm将会自动安装你需要的组件，只需要等待npm操作即可。\n\n\n体验Hexo：\n\n\n- 在DOS中输入`hexo g`，等待完成；\n- 然后输入`hexo s`，如果提示`INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`，证明Hexo启动成功；\n- 在浏览器中打开http://localhost:4000/，会看到Hexo的效果。  \n\n\n#### 将Hexo与github page绑定 ####\n\n\n配置Git个人信息\n\n\n- 设置Git的user name和email：(如果是第一次的话)\n- 运行`git config --global user.name \"zhangsan\"`，\"zhangsan\"是你GitHub账户名；\n- 运行`git config --global user.email \"zhangsan@163.com\"`，\"zhangsan@163.com\"是你注册GitHub的邮箱。\n\n\n使用SSH远程连接GitHub库（本部分命令都在Git Bash中执行）\n\n\n- **注意**：配置SSH主要是用于本地远程更新GitHub代码库，在搜集资料的时候看到有人说可以用https url的方式，但是我实践过程中是不行的，而且https url的方式在fetch和push代码都需要输入账号和密码，这是比较麻烦的。建议使用SSH-Key方式。\n- 打开Git Bash，输入`ssh-keygen -t rsa -C \"zhangsan@163.com\" -f \"filename\"`生成密钥，\"zhangsan@163.com\"是你注册GitHub的邮箱，然后**连续三个回车**；\n- 最后得到了两个文件：id\\_rsa和id\\_rsa.pub，默认存数在`C:\\Users\\电脑名称\\.ssh`；\n- 添加密钥到ssh-agent：输入 `eval \"$(ssh-agent -s)\"` ，输入 `ssh-add ~/.ssh/id_rsa` ；\n- 登录GitHub，点击自己头像选择\"Settings\"，选择\"SSH and GPG keys\"，选择\"New SSH key\"，将id_rsa.pub中的内容copy过去；\n- 在Git Bash终端中输入 `ssh -T git@github.com` 验证SSH-key是否配置成功，如果出现 `Hi zhagnsan! You’ve successfully authenticated, but GitHub does not provide shell access.` 表明配置成功；\n\n\n配置Deployment\n\n\n- 在Hexo根目录下的_config.yml文件中，找到Deployment，然后按照如下修改：\n\n  ```\n  deploy:\n  \ttype: git\n  \trepo: git@github.com:yourname/yourname.github.io.git\n  \tbranch: master\n  ```\n\n\n#### Hexo的使用设置 ####\n\n\n首先安装扩展： `npm install hexo-deployer-git --save` ；\n\n新建一篇博客，执行下面的命令： `hexo new post \"article title\"` ，这时候在电脑的目录下 D:\\Hexo\\source\\_posts 将会看到 article title.md 文件；\n\n用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：\n\n```\nhexo g   // 生成\nhexo d   // 部署 \n\n或者 hexo d -g //在部署前先生成\n```\n\n然后访问 https://yourName.github.io/ 查看生成的博客。  \n\n\n#### 站点配置信息 ####\n\n在Hexo根目录下的\\_config.yml文件中，根据需要配置各项信息:\n\n```\n博客名称\ntitle: 我的博客\n副标题\nsubtitle: 一天进步一点\n简介\ndescription: 记录生活点滴\n博客作者\nauthor: John Doe\n博客语言\nlanguage: zh-CN\n时区\ntimezone:\n博客地址,与申请的GitHub一致\nurl: http://zhangsan.github.io\nroot: /\n博客链接格式\npermalink: :year/:month/:day/:title/\npermalink_defaults:\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n日期格式\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n分页，每页文章数量\nper_page: 10\npagination_dir: page\n博客主题\ntheme: \n发布设置\ndeploy: \n  type: git\n  repository: https://github.com/zhangsan/zhangsan.github.io.git\n  branch: master\n```\n\n\n> 参考博客：  \n> [手把手教你用Hexo+Github 搭建属于自己的博客](http://blog.csdn.net/gdutxiaoxu/article/details/53576018)   \n> [Git ssh 配置及使用](http://blog.csdn.net/gdutxiaoxu/article/details/53573399)","source":"_posts/hexogithub.md","raw":"---\ntitle: Hexo+Github搭建个人博客\ndate: 2017-04-01 17:31:17\ntags:\n - Hexo\n - GitHub\n - 博客\ncategories:\n - Hexo\n---\n\n### 动机 ###\n\n促使我建立自己博客的动机很简单，其他的博客平台太丑了！简直不能看啊，然而我并没有在说CSDN、CNBLOG等等。还有一个原因就是，我有一颗向往技术大神的心，所以需要靠自己一点点的积累。在过滤各种博客平台的时候，看到某乎大神建议使用GitHub搭建自己的博客，So，心动不如行动，于是搜集各种资料，搭建了自己博客，本文主要是记录搭建的过程以及可能遇到的问题及解决办法。  \n> **本教程只适用于windows操作系统**\n\n### 准备工具 ###\n\n\n- [GitHub](https://github.com/)账户配置  \n- 安装[Node.js](https://nodejs.org/en/)环境  \n- 安装[Git](https://git-scm.com/)环境\n\n\n#### GitHub账户配置 ####\n\n[GitHub](https://github.com/)账户申请：  \n\n\n- 如果已经拥有GitHub账户，请进行第二步注册结束后，一定前往自己的注册邮箱，点开GitHub发送给你的注册确认信，确认注册，结束注册流程。否则无法使用gh-pages。\n\n\n创建代码库：\n\n\n- 登陆之后，点击页面右上角的加号，选择New repository新建代码库；  \n  进入代码库创建页面，在Repository name下填写yourname.github.io，Description (可选)下填写一些简单的描述（不写也可以）；\n- **注意**：比如我的github名称是runnerliu,这里就填 [runnerliu.github.io](runnerliu.github.io)；\n\n\n代码库设置:\n\n\n- 开启gh-pages功能，正确创建代码库后，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages；\n- 点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了；**注意**：我自己在操作过程中并没有这一步，可能是GitHub升级了？\n\n\n#### 安装Node.js环境 ####\n\n\n根据自己操作系统的版本前往[Node.js](https://nodejs.org/en/)下载相应的Node.js，可以根据所需选择安装路径，默认安装的话一路next就可以。  \n\n\n验证安装：\n\n\n- 打开控制台（Win+R输入cmd，回车）；\n- 输入`node -v`查看是否输出版本号；\n- 输入`npm -v`查看是否输出版本号；\n- 如果全部输出成功，证明安装成功，否则检查系统环境变量是否配置。\n\n\n#### 安装Git环境 ####\n\n\n前往[Git](https://git-scm.com/)官网下载相应版本的Git；  \n\n和Node.js一样，根据需要选择安装路径，可以一路默认安装；  \n\n安装完成后，在控制台中输入`git --version`查看是否添加了系统环境变量，这样就可以直接在dos中使用git命令了；  如果输出有误，检查git环境变量的设置。    \n\n\n> 完成以上步骤，准备阶段的工作就完成了。\n\n\n### Hexo ###\n\n\n- 安装Hexo\n- 配置Hexo\n- 将Hexo与github page绑定\n- Hexo的使用设置\n\n\n#### 安装Hexo ####\n\n\n在合适的地方创建一个文件夹，这里我以D：/hexo 为例讲解，首先在D盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录；\n\n在命令行中输入`npm install hexo-cli -g`，如果看到WARN也别担心，不影响使用；\n\n继续输入`npm install hexo --save`；\n\n稍等安装完成后，输入`hexo -v`查看Hexo是否安装成功。如果安装成功会显示出hexo的版本号以及其他信息；\n\n\n#### 配置Hexo ####\n\n\n初始化Hexo：\n\n\n- 在DOS中输入`hexo init`；\n- 然后输入`npm install`，npm将会自动安装你需要的组件，只需要等待npm操作即可。\n\n\n体验Hexo：\n\n\n- 在DOS中输入`hexo g`，等待完成；\n- 然后输入`hexo s`，如果提示`INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`，证明Hexo启动成功；\n- 在浏览器中打开http://localhost:4000/，会看到Hexo的效果。  \n\n\n#### 将Hexo与github page绑定 ####\n\n\n配置Git个人信息\n\n\n- 设置Git的user name和email：(如果是第一次的话)\n- 运行`git config --global user.name \"zhangsan\"`，\"zhangsan\"是你GitHub账户名；\n- 运行`git config --global user.email \"zhangsan@163.com\"`，\"zhangsan@163.com\"是你注册GitHub的邮箱。\n\n\n使用SSH远程连接GitHub库（本部分命令都在Git Bash中执行）\n\n\n- **注意**：配置SSH主要是用于本地远程更新GitHub代码库，在搜集资料的时候看到有人说可以用https url的方式，但是我实践过程中是不行的，而且https url的方式在fetch和push代码都需要输入账号和密码，这是比较麻烦的。建议使用SSH-Key方式。\n- 打开Git Bash，输入`ssh-keygen -t rsa -C \"zhangsan@163.com\" -f \"filename\"`生成密钥，\"zhangsan@163.com\"是你注册GitHub的邮箱，然后**连续三个回车**；\n- 最后得到了两个文件：id\\_rsa和id\\_rsa.pub，默认存数在`C:\\Users\\电脑名称\\.ssh`；\n- 添加密钥到ssh-agent：输入 `eval \"$(ssh-agent -s)\"` ，输入 `ssh-add ~/.ssh/id_rsa` ；\n- 登录GitHub，点击自己头像选择\"Settings\"，选择\"SSH and GPG keys\"，选择\"New SSH key\"，将id_rsa.pub中的内容copy过去；\n- 在Git Bash终端中输入 `ssh -T git@github.com` 验证SSH-key是否配置成功，如果出现 `Hi zhagnsan! You’ve successfully authenticated, but GitHub does not provide shell access.` 表明配置成功；\n\n\n配置Deployment\n\n\n- 在Hexo根目录下的_config.yml文件中，找到Deployment，然后按照如下修改：\n\n  ```\n  deploy:\n  \ttype: git\n  \trepo: git@github.com:yourname/yourname.github.io.git\n  \tbranch: master\n  ```\n\n\n#### Hexo的使用设置 ####\n\n\n首先安装扩展： `npm install hexo-deployer-git --save` ；\n\n新建一篇博客，执行下面的命令： `hexo new post \"article title\"` ，这时候在电脑的目录下 D:\\Hexo\\source\\_posts 将会看到 article title.md 文件；\n\n用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：\n\n```\nhexo g   // 生成\nhexo d   // 部署 \n\n或者 hexo d -g //在部署前先生成\n```\n\n然后访问 https://yourName.github.io/ 查看生成的博客。  \n\n\n#### 站点配置信息 ####\n\n在Hexo根目录下的\\_config.yml文件中，根据需要配置各项信息:\n\n```\n博客名称\ntitle: 我的博客\n副标题\nsubtitle: 一天进步一点\n简介\ndescription: 记录生活点滴\n博客作者\nauthor: John Doe\n博客语言\nlanguage: zh-CN\n时区\ntimezone:\n博客地址,与申请的GitHub一致\nurl: http://zhangsan.github.io\nroot: /\n博客链接格式\npermalink: :year/:month/:day/:title/\npermalink_defaults:\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n日期格式\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n分页，每页文章数量\nper_page: 10\npagination_dir: page\n博客主题\ntheme: \n发布设置\ndeploy: \n  type: git\n  repository: https://github.com/zhangsan/zhangsan.github.io.git\n  branch: master\n```\n\n\n> 参考博客：  \n> [手把手教你用Hexo+Github 搭建属于自己的博客](http://blog.csdn.net/gdutxiaoxu/article/details/53576018)   \n> [Git ssh 配置及使用](http://blog.csdn.net/gdutxiaoxu/article/details/53573399)","slug":"hexogithub","published":1,"updated":"2020-10-25T08:34:11.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueps7000rmolcybdf4o03","content":"<h3 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h3><p>促使我建立自己博客的动机很简单，其他的博客平台太丑了！简直不能看啊，然而我并没有在说CSDN、CNBLOG等等。还有一个原因就是，我有一颗向往技术大神的心，所以需要靠自己一点点的积累。在过滤各种博客平台的时候，看到某乎大神建议使用GitHub搭建自己的博客，So，心动不如行动，于是搜集各种资料，搭建了自己博客，本文主要是记录搭建的过程以及可能遇到的问题及解决办法。  </p>\n<blockquote>\n<p><strong>本教程只适用于windows操作系统</strong></p>\n</blockquote>\n<h3 id=\"准备工具\"><a href=\"#准备工具\" class=\"headerlink\" title=\"准备工具\"></a>准备工具</h3><ul>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账户配置  </li>\n<li>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>环境  </li>\n<li>安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>环境</li>\n</ul>\n<h4 id=\"GitHub账户配置\"><a href=\"#GitHub账户配置\" class=\"headerlink\" title=\"GitHub账户配置\"></a>GitHub账户配置</h4><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账户申请：  </p>\n<ul>\n<li>如果已经拥有GitHub账户，请进行第二步注册结束后，一定前往自己的注册邮箱，点开GitHub发送给你的注册确认信，确认注册，结束注册流程。否则无法使用gh-pages。</li>\n</ul>\n<p>创建代码库：</p>\n<ul>\n<li>登陆之后，点击页面右上角的加号，选择New repository新建代码库；<br>进入代码库创建页面，在Repository name下填写yourname.github.io，Description (可选)下填写一些简单的描述（不写也可以）；</li>\n<li><strong>注意</strong>：比如我的github名称是runnerliu,这里就填 <a href=\"runnerliu.github.io\">runnerliu.github.io</a>；</li>\n</ul>\n<p>代码库设置:</p>\n<ul>\n<li>开启gh-pages功能，正确创建代码库后，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages；</li>\n<li>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了；<strong>注意</strong>：我自己在操作过程中并没有这一步，可能是GitHub升级了？</li>\n</ul>\n<h4 id=\"安装Node-js环境\"><a href=\"#安装Node-js环境\" class=\"headerlink\" title=\"安装Node.js环境\"></a>安装Node.js环境</h4><p>根据自己操作系统的版本前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>下载相应的Node.js，可以根据所需选择安装路径，默认安装的话一路next就可以。  </p>\n<p>验证安装：</p>\n<ul>\n<li>打开控制台（Win+R输入cmd，回车）；</li>\n<li>输入<code>node -v</code>查看是否输出版本号；</li>\n<li>输入<code>npm -v</code>查看是否输出版本号；</li>\n<li>如果全部输出成功，证明安装成功，否则检查系统环境变量是否配置。</li>\n</ul>\n<h4 id=\"安装Git环境\"><a href=\"#安装Git环境\" class=\"headerlink\" title=\"安装Git环境\"></a>安装Git环境</h4><p>前往<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>官网下载相应版本的Git；  </p>\n<p>和Node.js一样，根据需要选择安装路径，可以一路默认安装；  </p>\n<p>安装完成后，在控制台中输入<code>git --version</code>查看是否添加了系统环境变量，这样就可以直接在dos中使用git命令了；  如果输出有误，检查git环境变量的设置。    </p>\n<blockquote>\n<p>完成以上步骤，准备阶段的工作就完成了。</p>\n</blockquote>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><ul>\n<li>安装Hexo</li>\n<li>配置Hexo</li>\n<li>将Hexo与github page绑定</li>\n<li>Hexo的使用设置</li>\n</ul>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>在合适的地方创建一个文件夹，这里我以D：/hexo 为例讲解，首先在D盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录；</p>\n<p>在命令行中输入<code>npm install hexo-cli -g</code>，如果看到WARN也别担心，不影响使用；</p>\n<p>继续输入<code>npm install hexo --save</code>；</p>\n<p>稍等安装完成后，输入<code>hexo -v</code>查看Hexo是否安装成功。如果安装成功会显示出hexo的版本号以及其他信息；</p>\n<h4 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h4><p>初始化Hexo：</p>\n<ul>\n<li>在DOS中输入<code>hexo init</code>；</li>\n<li>然后输入<code>npm install</code>，npm将会自动安装你需要的组件，只需要等待npm操作即可。</li>\n</ul>\n<p>体验Hexo：</p>\n<ul>\n<li>在DOS中输入<code>hexo g</code>，等待完成；</li>\n<li>然后输入<code>hexo s</code>，如果提示<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code>，证明Hexo启动成功；</li>\n<li>在浏览器中打开<a href=\"http://localhost:4000/，会看到Hexo的效果。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，会看到Hexo的效果。</a>  </li>\n</ul>\n<h4 id=\"将Hexo与github-page绑定\"><a href=\"#将Hexo与github-page绑定\" class=\"headerlink\" title=\"将Hexo与github page绑定\"></a>将Hexo与github page绑定</h4><p>配置Git个人信息</p>\n<ul>\n<li>设置Git的user name和email：(如果是第一次的话)</li>\n<li>运行<code>git config --global user.name &quot;zhangsan&quot;</code>，”zhangsan”是你GitHub账户名；</li>\n<li>运行<code>git config --global user.email &quot;zhangsan@163.com&quot;</code>，”<a href=\"mailto:zhangsan@163.com\" target=\"_blank\" rel=\"noopener\">zhangsan@163.com</a>“是你注册GitHub的邮箱。</li>\n</ul>\n<p>使用SSH远程连接GitHub库（本部分命令都在Git Bash中执行）</p>\n<ul>\n<li><strong>注意</strong>：配置SSH主要是用于本地远程更新GitHub代码库，在搜集资料的时候看到有人说可以用https url的方式，但是我实践过程中是不行的，而且https url的方式在fetch和push代码都需要输入账号和密码，这是比较麻烦的。建议使用SSH-Key方式。</li>\n<li>打开Git Bash，输入<code>ssh-keygen -t rsa -C &quot;zhangsan@163.com&quot; -f &quot;filename&quot;</code>生成密钥，”<a href=\"mailto:zhangsan@163.com\" target=\"_blank\" rel=\"noopener\">zhangsan@163.com</a>“是你注册GitHub的邮箱，然后<strong>连续三个回车</strong>；</li>\n<li>最后得到了两个文件：id_rsa和id_rsa.pub，默认存数在<code>C:\\Users\\电脑名称\\.ssh</code>；</li>\n<li>添加密钥到ssh-agent：输入 <code>eval &quot;$(ssh-agent -s)&quot;</code> ，输入 <code>ssh-add ~/.ssh/id_rsa</code> ；</li>\n<li>登录GitHub，点击自己头像选择”Settings”，选择”SSH and GPG keys”，选择”New SSH key”，将id_rsa.pub中的内容copy过去；</li>\n<li>在Git Bash终端中输入 <code>ssh -T git@github.com</code> 验证SSH-key是否配置成功，如果出现 <code>Hi zhagnsan! You’ve successfully authenticated, but GitHub does not provide shell access.</code> 表明配置成功；</li>\n</ul>\n<p>配置Deployment</p>\n<ul>\n<li><p>在Hexo根目录下的_config.yml文件中，找到Deployment，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Hexo的使用设置\"><a href=\"#Hexo的使用设置\" class=\"headerlink\" title=\"Hexo的使用设置\"></a>Hexo的使用设置</h4><p>首先安装扩展： <code>npm install hexo-deployer-git --save</code> ；</p>\n<p>新建一篇博客，执行下面的命令： <code>hexo new post &quot;article title&quot;</code> ，这时候在电脑的目录下 D:\\Hexo\\source_posts 将会看到 article title.md 文件；</p>\n<p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   // 生成</span><br><span class=\"line\">hexo d   // 部署 </span><br><span class=\"line\"></span><br><span class=\"line\">或者 hexo d -g //在部署前先生成</span><br></pre></td></tr></table></figure>\n<p>然后访问 <a href=\"https://yourName.github.io/\" target=\"_blank\" rel=\"noopener\">https://yourName.github.io/</a> 查看生成的博客。  </p>\n<h4 id=\"站点配置信息\"><a href=\"#站点配置信息\" class=\"headerlink\" title=\"站点配置信息\"></a>站点配置信息</h4><p>在Hexo根目录下的_config.yml文件中，根据需要配置各项信息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客名称</span><br><span class=\"line\">title: 我的博客</span><br><span class=\"line\">副标题</span><br><span class=\"line\">subtitle: 一天进步一点</span><br><span class=\"line\">简介</span><br><span class=\"line\">description: 记录生活点滴</span><br><span class=\"line\">博客作者</span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\">博客语言</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">时区</span><br><span class=\"line\">timezone:</span><br><span class=\"line\">博客地址,与申请的GitHub一致</span><br><span class=\"line\">url: http://zhangsan.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">博客链接格式</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: true</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\">日期格式</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\">分页，每页文章数量</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\">博客主题</span><br><span class=\"line\">theme: </span><br><span class=\"line\">发布设置</span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/zhangsan/zhangsan.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考博客：<br><a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">手把手教你用Hexo+Github 搭建属于自己的博客</a><br><a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53573399\" target=\"_blank\" rel=\"noopener\">Git ssh 配置及使用</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h3><p>促使我建立自己博客的动机很简单，其他的博客平台太丑了！简直不能看啊，然而我并没有在说CSDN、CNBLOG等等。还有一个原因就是，我有一颗向往技术大神的心，所以需要靠自己一点点的积累。在过滤各种博客平台的时候，看到某乎大神建议使用GitHub搭建自己的博客，So，心动不如行动，于是搜集各种资料，搭建了自己博客，本文主要是记录搭建的过程以及可能遇到的问题及解决办法。  </p>\n<blockquote>\n<p><strong>本教程只适用于windows操作系统</strong></p>\n</blockquote>\n<h3 id=\"准备工具\"><a href=\"#准备工具\" class=\"headerlink\" title=\"准备工具\"></a>准备工具</h3><ul>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账户配置  </li>\n<li>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>环境  </li>\n<li>安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>环境</li>\n</ul>\n<h4 id=\"GitHub账户配置\"><a href=\"#GitHub账户配置\" class=\"headerlink\" title=\"GitHub账户配置\"></a>GitHub账户配置</h4><p><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>账户申请：  </p>\n<ul>\n<li>如果已经拥有GitHub账户，请进行第二步注册结束后，一定前往自己的注册邮箱，点开GitHub发送给你的注册确认信，确认注册，结束注册流程。否则无法使用gh-pages。</li>\n</ul>\n<p>创建代码库：</p>\n<ul>\n<li>登陆之后，点击页面右上角的加号，选择New repository新建代码库；<br>进入代码库创建页面，在Repository name下填写yourname.github.io，Description (可选)下填写一些简单的描述（不写也可以）；</li>\n<li><strong>注意</strong>：比如我的github名称是runnerliu,这里就填 <a href=\"runnerliu.github.io\">runnerliu.github.io</a>；</li>\n</ul>\n<p>代码库设置:</p>\n<ul>\n<li>开启gh-pages功能，正确创建代码库后，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages；</li>\n<li>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了；<strong>注意</strong>：我自己在操作过程中并没有这一步，可能是GitHub升级了？</li>\n</ul>\n<h4 id=\"安装Node-js环境\"><a href=\"#安装Node-js环境\" class=\"headerlink\" title=\"安装Node.js环境\"></a>安装Node.js环境</h4><p>根据自己操作系统的版本前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>下载相应的Node.js，可以根据所需选择安装路径，默认安装的话一路next就可以。  </p>\n<p>验证安装：</p>\n<ul>\n<li>打开控制台（Win+R输入cmd，回车）；</li>\n<li>输入<code>node -v</code>查看是否输出版本号；</li>\n<li>输入<code>npm -v</code>查看是否输出版本号；</li>\n<li>如果全部输出成功，证明安装成功，否则检查系统环境变量是否配置。</li>\n</ul>\n<h4 id=\"安装Git环境\"><a href=\"#安装Git环境\" class=\"headerlink\" title=\"安装Git环境\"></a>安装Git环境</h4><p>前往<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>官网下载相应版本的Git；  </p>\n<p>和Node.js一样，根据需要选择安装路径，可以一路默认安装；  </p>\n<p>安装完成后，在控制台中输入<code>git --version</code>查看是否添加了系统环境变量，这样就可以直接在dos中使用git命令了；  如果输出有误，检查git环境变量的设置。    </p>\n<blockquote>\n<p>完成以上步骤，准备阶段的工作就完成了。</p>\n</blockquote>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><ul>\n<li>安装Hexo</li>\n<li>配置Hexo</li>\n<li>将Hexo与github page绑定</li>\n<li>Hexo的使用设置</li>\n</ul>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>在合适的地方创建一个文件夹，这里我以D：/hexo 为例讲解，首先在D盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录；</p>\n<p>在命令行中输入<code>npm install hexo-cli -g</code>，如果看到WARN也别担心，不影响使用；</p>\n<p>继续输入<code>npm install hexo --save</code>；</p>\n<p>稍等安装完成后，输入<code>hexo -v</code>查看Hexo是否安装成功。如果安装成功会显示出hexo的版本号以及其他信息；</p>\n<h4 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h4><p>初始化Hexo：</p>\n<ul>\n<li>在DOS中输入<code>hexo init</code>；</li>\n<li>然后输入<code>npm install</code>，npm将会自动安装你需要的组件，只需要等待npm操作即可。</li>\n</ul>\n<p>体验Hexo：</p>\n<ul>\n<li>在DOS中输入<code>hexo g</code>，等待完成；</li>\n<li>然后输入<code>hexo s</code>，如果提示<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code>，证明Hexo启动成功；</li>\n<li>在浏览器中打开<a href=\"http://localhost:4000/，会看到Hexo的效果。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，会看到Hexo的效果。</a>  </li>\n</ul>\n<h4 id=\"将Hexo与github-page绑定\"><a href=\"#将Hexo与github-page绑定\" class=\"headerlink\" title=\"将Hexo与github page绑定\"></a>将Hexo与github page绑定</h4><p>配置Git个人信息</p>\n<ul>\n<li>设置Git的user name和email：(如果是第一次的话)</li>\n<li>运行<code>git config --global user.name &quot;zhangsan&quot;</code>，”zhangsan”是你GitHub账户名；</li>\n<li>运行<code>git config --global user.email &quot;zhangsan@163.com&quot;</code>，”<a href=\"mailto:zhangsan@163.com\" target=\"_blank\" rel=\"noopener\">zhangsan@163.com</a>“是你注册GitHub的邮箱。</li>\n</ul>\n<p>使用SSH远程连接GitHub库（本部分命令都在Git Bash中执行）</p>\n<ul>\n<li><strong>注意</strong>：配置SSH主要是用于本地远程更新GitHub代码库，在搜集资料的时候看到有人说可以用https url的方式，但是我实践过程中是不行的，而且https url的方式在fetch和push代码都需要输入账号和密码，这是比较麻烦的。建议使用SSH-Key方式。</li>\n<li>打开Git Bash，输入<code>ssh-keygen -t rsa -C &quot;zhangsan@163.com&quot; -f &quot;filename&quot;</code>生成密钥，”<a href=\"mailto:zhangsan@163.com\" target=\"_blank\" rel=\"noopener\">zhangsan@163.com</a>“是你注册GitHub的邮箱，然后<strong>连续三个回车</strong>；</li>\n<li>最后得到了两个文件：id_rsa和id_rsa.pub，默认存数在<code>C:\\Users\\电脑名称\\.ssh</code>；</li>\n<li>添加密钥到ssh-agent：输入 <code>eval &quot;$(ssh-agent -s)&quot;</code> ，输入 <code>ssh-add ~/.ssh/id_rsa</code> ；</li>\n<li>登录GitHub，点击自己头像选择”Settings”，选择”SSH and GPG keys”，选择”New SSH key”，将id_rsa.pub中的内容copy过去；</li>\n<li>在Git Bash终端中输入 <code>ssh -T git@github.com</code> 验证SSH-key是否配置成功，如果出现 <code>Hi zhagnsan! You’ve successfully authenticated, but GitHub does not provide shell access.</code> 表明配置成功；</li>\n</ul>\n<p>配置Deployment</p>\n<ul>\n<li><p>在Hexo根目录下的_config.yml文件中，找到Deployment，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">\tbranch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Hexo的使用设置\"><a href=\"#Hexo的使用设置\" class=\"headerlink\" title=\"Hexo的使用设置\"></a>Hexo的使用设置</h4><p>首先安装扩展： <code>npm install hexo-deployer-git --save</code> ；</p>\n<p>新建一篇博客，执行下面的命令： <code>hexo new post &quot;article title&quot;</code> ，这时候在电脑的目录下 D:\\Hexo\\source_posts 将会看到 article title.md 文件；</p>\n<p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   // 生成</span><br><span class=\"line\">hexo d   // 部署 </span><br><span class=\"line\"></span><br><span class=\"line\">或者 hexo d -g //在部署前先生成</span><br></pre></td></tr></table></figure>\n<p>然后访问 <a href=\"https://yourName.github.io/\" target=\"_blank\" rel=\"noopener\">https://yourName.github.io/</a> 查看生成的博客。  </p>\n<h4 id=\"站点配置信息\"><a href=\"#站点配置信息\" class=\"headerlink\" title=\"站点配置信息\"></a>站点配置信息</h4><p>在Hexo根目录下的_config.yml文件中，根据需要配置各项信息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客名称</span><br><span class=\"line\">title: 我的博客</span><br><span class=\"line\">副标题</span><br><span class=\"line\">subtitle: 一天进步一点</span><br><span class=\"line\">简介</span><br><span class=\"line\">description: 记录生活点滴</span><br><span class=\"line\">博客作者</span><br><span class=\"line\">author: John Doe</span><br><span class=\"line\">博客语言</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">时区</span><br><span class=\"line\">timezone:</span><br><span class=\"line\">博客地址,与申请的GitHub一致</span><br><span class=\"line\">url: http://zhangsan.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">博客链接格式</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: true</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\">日期格式</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\">分页，每页文章数量</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\">博客主题</span><br><span class=\"line\">theme: </span><br><span class=\"line\">发布设置</span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/zhangsan/zhangsan.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考博客：<br><a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">手把手教你用Hexo+Github 搭建属于自己的博客</a><br><a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53573399\" target=\"_blank\" rel=\"noopener\">Git ssh 配置及使用</a></p>\n</blockquote>\n"},{"title":"愚人节","date":"2017-04-01T03:31:40.000Z","_content":"今天是愚人节，我的个人博客上线了。","source":"_posts/heyliuxiaoyang.md","raw":"---\ntitle: 愚人节\ndate: 2017-04-01 11:31:40\ntags: \n - 生活\n - Life\ncategories: \n - 生活日志\n---\n今天是愚人节，我的个人博客上线了。","slug":"heyliuxiaoyang","published":1,"updated":"2020-10-25T06:43:32.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepse000tmolcd1p6p2nq","content":"<p>今天是愚人节，我的个人博客上线了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是愚人节，我的个人博客上线了。</p>\n"},{"title":"HTTP POST提交数据分常见方式","date":"2018-05-13T06:17:00.000Z","_content":"\n[HTTP/1.1协议](http://www.ietf.org/rfc/rfc2616.txt) 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。其中 POST 一般用来向服务端提交数据，我们在写类似接口文档这种被业务方调用的服务时，涉及到 POST 的默认提交方式基本都是：`application/x-www-form-urlencoded` 。本 文主要讨论 POST 提交数据的几种方式。\n\n我们知道，HTTP 协议是以 **ASCII** 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n\n> <method> <request-URL> <version>\n>\n> <headers>\n>\n> <entity-body>\n\n协议规定 POST 提交的数据必须放在消息主体（`entity-body`）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 java php python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 `Content-Type `字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 `Content-Type` 和消息主体编码方式两部分。下面进入正题。\n\n### application/x-www-form-urlencoded\n\n这种方式是最常见的 POST 提交数据的方式。浏览器的原生 `<form>` 表单，如果不设置 `enctype` 属性，那么最终就会以 `application/x-www-form-urlencoded` 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\ntitle=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n```\n\n首先，Content-Type 被指定为 `application/x-www-form-urlencoded` ；其次，提交的数据按照 `key1=val1&key2=val2` 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。\n\n通常，我们用 Ajax 提交数据时，也是使用这种方式。例如 [JQuery](http://jquery.com/) 和 [QWrap](http://www.qwrap.com/) 的 Ajax，`Content-Type` 默认值都是 `application/x-www-form-urlencoded;charset=utf-8` 。\n\n### multipart/form-data\n\n在使用表单上传文件时，必须让 `<form>` 表单的 `enctype` 等于 `multipart/form-data`。直接来看一个请求示例：\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA\n\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"text\"\n\ntitle\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"file\"; filename=\"chrome.png\"\nContent-Type: image/png\n\nPNG ... content of chrome.png ...\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA--\n```\n\n这个例子稍微复杂点。首先生成了一个 `boundary` 用于分割不同的字段，为了避免与正文内容重复，`boundary` 很长很复杂。然后 `Content-Type ` 里指明了数据是以 `multipart/form-data` 来编码，本次请求的 `boundary` 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 `--boundary` 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 `--boundary--` 标示结束。关于 ` multipart/form-data ` 的详细定义，请前往 [rfc1867](http://www.ietf.org/rfc/rfc1867.txt) 查看。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。\n\n以上提到的两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 \\<form\\> 表单也 [只支持这两种方式](http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4)（通过 `<form>` 元素的 `enctype` 属性指定，默认为 `application/x-www-form-urlencoded`。其实 `enctype` 还支持 `text/plain`，不过用得非常少）。\n\n随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。\n\n### application/json\n\n`application/json ` 这个 `Content-Type` 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。\n\nGoogle 的 [AngularJS](http://angularjs.org/) 中的 Ajax 功能，默认就是提交 JSON 字符串。例如下面这段代码：\n\n```\nvar data = {'title':'test', 'sub' : [1,2,3]};\n$http.post(url, data).success(function(result) {\n    ...\n});\n```\n\n最终发送的请求是：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n\n这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $\\_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 `Content-Type` 为 `application/json` 时，从 `php://input` 里获得原始输入流，再 `json_decode` 成对象。一些 php 框架已经开始这么做了。\n\n当然 AngularJS 也可以配置为使用 `x-www-form-urlencoded ` 方式提交数据。如有需要，可以参考 [这里](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)。\n\n### text/xml\n\n这种方式目前几乎很少在用，因为 JSON 方式更加灵活方便，而 xml 方式显得比较臃肿和繁琐。`XML-RPC（XML Remote Procedure Call）` 协议是一套允许运行在不同操作系统、不同环境的程序实现基于 Internet 过程调用的规范和一系列的实现。这种远程过程调用使用 HTTP 作为传输协议，XML 作为传送信息的编码格式。\n\n典型的 `XML-RPC` 请求是这样的：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: text/xml\n\n<?xml version=\"1.0\"?>\n<methodCall>\n    <methodName>examples.getStateName</methodName>\n    <params>\n        <param>\n            <value><i4>41</i4></value>\n        </param>\n    </params>\n</methodCall>\n```","source":"_posts/httppostmethod.md","raw":"---\ntitle: HTTP POST提交数据分常见方式\ndate: 2018-05-13 14:17:00\ntags:\n - HTTP\n - POST\ncategories:\n - HTTP\n---\n\n[HTTP/1.1协议](http://www.ietf.org/rfc/rfc2616.txt) 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。其中 POST 一般用来向服务端提交数据，我们在写类似接口文档这种被业务方调用的服务时，涉及到 POST 的默认提交方式基本都是：`application/x-www-form-urlencoded` 。本 文主要讨论 POST 提交数据的几种方式。\n\n我们知道，HTTP 协议是以 **ASCII** 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n\n> <method> <request-URL> <version>\n>\n> <headers>\n>\n> <entity-body>\n\n协议规定 POST 提交的数据必须放在消息主体（`entity-body`）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 java php python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 `Content-Type `字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 `Content-Type` 和消息主体编码方式两部分。下面进入正题。\n\n### application/x-www-form-urlencoded\n\n这种方式是最常见的 POST 提交数据的方式。浏览器的原生 `<form>` 表单，如果不设置 `enctype` 属性，那么最终就会以 `application/x-www-form-urlencoded` 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\ntitle=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n```\n\n首先，Content-Type 被指定为 `application/x-www-form-urlencoded` ；其次，提交的数据按照 `key1=val1&key2=val2` 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。\n\n通常，我们用 Ajax 提交数据时，也是使用这种方式。例如 [JQuery](http://jquery.com/) 和 [QWrap](http://www.qwrap.com/) 的 Ajax，`Content-Type` 默认值都是 `application/x-www-form-urlencoded;charset=utf-8` 。\n\n### multipart/form-data\n\n在使用表单上传文件时，必须让 `<form>` 表单的 `enctype` 等于 `multipart/form-data`。直接来看一个请求示例：\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA\n\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"text\"\n\ntitle\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"file\"; filename=\"chrome.png\"\nContent-Type: image/png\n\nPNG ... content of chrome.png ...\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA--\n```\n\n这个例子稍微复杂点。首先生成了一个 `boundary` 用于分割不同的字段，为了避免与正文内容重复，`boundary` 很长很复杂。然后 `Content-Type ` 里指明了数据是以 `multipart/form-data` 来编码，本次请求的 `boundary` 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 `--boundary` 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 `--boundary--` 标示结束。关于 ` multipart/form-data ` 的详细定义，请前往 [rfc1867](http://www.ietf.org/rfc/rfc1867.txt) 查看。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。\n\n以上提到的两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 \\<form\\> 表单也 [只支持这两种方式](http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4)（通过 `<form>` 元素的 `enctype` 属性指定，默认为 `application/x-www-form-urlencoded`。其实 `enctype` 还支持 `text/plain`，不过用得非常少）。\n\n随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。\n\n### application/json\n\n`application/json ` 这个 `Content-Type` 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。\n\nGoogle 的 [AngularJS](http://angularjs.org/) 中的 Ajax 功能，默认就是提交 JSON 字符串。例如下面这段代码：\n\n```\nvar data = {'title':'test', 'sub' : [1,2,3]};\n$http.post(url, data).success(function(result) {\n    ...\n});\n```\n\n最终发送的请求是：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n\n这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $\\_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 `Content-Type` 为 `application/json` 时，从 `php://input` 里获得原始输入流，再 `json_decode` 成对象。一些 php 框架已经开始这么做了。\n\n当然 AngularJS 也可以配置为使用 `x-www-form-urlencoded ` 方式提交数据。如有需要，可以参考 [这里](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)。\n\n### text/xml\n\n这种方式目前几乎很少在用，因为 JSON 方式更加灵活方便，而 xml 方式显得比较臃肿和繁琐。`XML-RPC（XML Remote Procedure Call）` 协议是一套允许运行在不同操作系统、不同环境的程序实现基于 Internet 过程调用的规范和一系列的实现。这种远程过程调用使用 HTTP 作为传输协议，XML 作为传送信息的编码格式。\n\n典型的 `XML-RPC` 请求是这样的：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: text/xml\n\n<?xml version=\"1.0\"?>\n<methodCall>\n    <methodName>examples.getStateName</methodName>\n    <params>\n        <param>\n            <value><i4>41</i4></value>\n        </param>\n    </params>\n</methodCall>\n```","slug":"httppostmethod","published":1,"updated":"2020-10-25T06:43:32.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepsi000wmolccrfj408a","content":"<p><a href=\"http://www.ietf.org/rfc/rfc2616.txt\" target=\"_blank\" rel=\"noopener\">HTTP/1.1协议</a> 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。其中 POST 一般用来向服务端提交数据，我们在写类似接口文档这种被业务方调用的服务时，涉及到 POST 的默认提交方式基本都是：<code>application/x-www-form-urlencoded</code> 。本 文主要讨论 POST 提交数据的几种方式。</p>\n<p>我们知道，HTTP 协议是以 <strong>ASCII</strong> 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<blockquote>\n<p><method> <request-url> <version></version></request-url></method></p>\n<headers>\n\n<p><entity-body></entity-body></p>\n</headers></blockquote>\n<p>协议规定 POST 提交的数据必须放在消息主体（<code>entity-body</code>）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 java php python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 <code>Content-Type</code>字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 <code>Content-Type</code> 和消息主体编码方式两部分。下面进入正题。</p>\n<h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h3><p>这种方式是最常见的 POST 提交数据的方式。浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class=\"line\">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure>\n<p>首先，Content-Type 被指定为 <code>application/x-www-form-urlencoded</code> ；其次，提交的数据按照 <code>key1=val1&amp;key2=val2</code> 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。</p>\n<p>通常，我们用 Ajax 提交数据时，也是使用这种方式。例如 <a href=\"http://jquery.com/\" target=\"_blank\" rel=\"noopener\">JQuery</a> 和 <a href=\"http://www.qwrap.com/\" target=\"_blank\" rel=\"noopener\">QWrap</a> 的 Ajax，<code>Content-Type</code> 默认值都是 <code>application/x-www-form-urlencoded;charset=utf-8</code> 。</p>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h3><p>在使用表单上传文件时，必须让 <code>&lt;form&gt;</code> 表单的 <code>enctype</code> 等于 <code>multipart/form-data</code>。直接来看一个请求示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">title</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\"></span><br><span class=\"line\">PNG ... content of chrome.png ...</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>\n<p>这个例子稍微复杂点。首先生成了一个 <code>boundary</code> 用于分割不同的字段，为了避免与正文内容重复，<code>boundary</code> 很长很复杂。然后 <code>Content-Type</code> 里指明了数据是以 <code>multipart/form-data</code> 来编码，本次请求的 <code>boundary</code> 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 <code>--boundary</code> 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 <code>--boundary--</code> 标示结束。关于 <code>multipart/form-data</code> 的详细定义，请前往 <a href=\"http://www.ietf.org/rfc/rfc1867.txt\" target=\"_blank\" rel=\"noopener\">rfc1867</a> 查看。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。</p>\n<p>以上提到的两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 \\&lt;form> 表单也 <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4\" target=\"_blank\" rel=\"noopener\">只支持这两种方式</a>（通过 <code>&lt;form&gt;</code> 元素的 <code>enctype</code> 属性指定，默认为 <code>application/x-www-form-urlencoded</code>。其实 <code>enctype</code> 还支持 <code>text/plain</code>，不过用得非常少）。</p>\n<p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</p>\n<h3 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h3><p><code>application/json</code> 这个 <code>Content-Type</code> 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。</p>\n<p>Google 的 <a href=\"http://angularjs.org/\" target=\"_blank\" rel=\"noopener\">AngularJS</a> 中的 Ajax 功能，默认就是提交 JSON 字符串。例如下面这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = &#123;&apos;title&apos;:&apos;test&apos;, &apos;sub&apos; : [1,2,3]&#125;;</span><br><span class=\"line\">$http.post(url, data).success(function(result) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: application/json;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 <code>Content-Type</code> 为 <code>application/json</code> 时，从 <code>php://input</code> 里获得原始输入流，再 <code>json_decode</code> 成对象。一些 php 框架已经开始这么做了。</p>\n<p>当然 AngularJS 也可以配置为使用 <code>x-www-form-urlencoded</code> 方式提交数据。如有需要，可以参考 <a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"text-xml\"><a href=\"#text-xml\" class=\"headerlink\" title=\"text/xml\"></a>text/xml</h3><p>这种方式目前几乎很少在用，因为 JSON 方式更加灵活方便，而 xml 方式显得比较臃肿和繁琐。<code>XML-RPC（XML Remote Procedure Call）</code> 协议是一套允许运行在不同操作系统、不同环境的程序实现基于 Internet 过程调用的规范和一系列的实现。这种远程过程调用使用 HTTP 作为传输协议，XML 作为传送信息的编码格式。</p>\n<p>典型的 <code>XML-RPC</code> 请求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: text/xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class=\"line\">    &lt;params&gt;</span><br><span class=\"line\">        &lt;param&gt;</span><br><span class=\"line\">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class=\"line\">        &lt;/param&gt;</span><br><span class=\"line\">    &lt;/params&gt;</span><br><span class=\"line\">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.ietf.org/rfc/rfc2616.txt\" target=\"_blank\" rel=\"noopener\">HTTP/1.1协议</a> 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。其中 POST 一般用来向服务端提交数据，我们在写类似接口文档这种被业务方调用的服务时，涉及到 POST 的默认提交方式基本都是：<code>application/x-www-form-urlencoded</code> 。本 文主要讨论 POST 提交数据的几种方式。</p>\n<p>我们知道，HTTP 协议是以 <strong>ASCII</strong> 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<blockquote>\n<p><method> <request-url> <version></version></request-url></method></p>\n<headers>\n\n<p><entity-body></entity-body></p>\n</headers></blockquote>\n<p>协议规定 POST 提交的数据必须放在消息主体（<code>entity-body</code>）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 java php python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 <code>Content-Type</code>字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 <code>Content-Type</code> 和消息主体编码方式两部分。下面进入正题。</p>\n<h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h3><p>这种方式是最常见的 POST 提交数据的方式。浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class=\"line\">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure>\n<p>首先，Content-Type 被指定为 <code>application/x-www-form-urlencoded</code> ；其次，提交的数据按照 <code>key1=val1&amp;key2=val2</code> 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。</p>\n<p>通常，我们用 Ajax 提交数据时，也是使用这种方式。例如 <a href=\"http://jquery.com/\" target=\"_blank\" rel=\"noopener\">JQuery</a> 和 <a href=\"http://www.qwrap.com/\" target=\"_blank\" rel=\"noopener\">QWrap</a> 的 Ajax，<code>Content-Type</code> 默认值都是 <code>application/x-www-form-urlencoded;charset=utf-8</code> 。</p>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h3><p>在使用表单上传文件时，必须让 <code>&lt;form&gt;</code> 表单的 <code>enctype</code> 等于 <code>multipart/form-data</code>。直接来看一个请求示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">title</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\"></span><br><span class=\"line\">PNG ... content of chrome.png ...</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>\n<p>这个例子稍微复杂点。首先生成了一个 <code>boundary</code> 用于分割不同的字段，为了避免与正文内容重复，<code>boundary</code> 很长很复杂。然后 <code>Content-Type</code> 里指明了数据是以 <code>multipart/form-data</code> 来编码，本次请求的 <code>boundary</code> 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 <code>--boundary</code> 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 <code>--boundary--</code> 标示结束。关于 <code>multipart/form-data</code> 的详细定义，请前往 <a href=\"http://www.ietf.org/rfc/rfc1867.txt\" target=\"_blank\" rel=\"noopener\">rfc1867</a> 查看。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。</p>\n<p>以上提到的两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 \\&lt;form> 表单也 <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4\" target=\"_blank\" rel=\"noopener\">只支持这两种方式</a>（通过 <code>&lt;form&gt;</code> 元素的 <code>enctype</code> 属性指定，默认为 <code>application/x-www-form-urlencoded</code>。其实 <code>enctype</code> 还支持 <code>text/plain</code>，不过用得非常少）。</p>\n<p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</p>\n<h3 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h3><p><code>application/json</code> 这个 <code>Content-Type</code> 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。</p>\n<p>Google 的 <a href=\"http://angularjs.org/\" target=\"_blank\" rel=\"noopener\">AngularJS</a> 中的 Ajax 功能，默认就是提交 JSON 字符串。例如下面这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = &#123;&apos;title&apos;:&apos;test&apos;, &apos;sub&apos; : [1,2,3]&#125;;</span><br><span class=\"line\">$http.post(url, data).success(function(result) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: application/json;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 <code>Content-Type</code> 为 <code>application/json</code> 时，从 <code>php://input</code> 里获得原始输入流，再 <code>json_decode</code> 成对象。一些 php 框架已经开始这么做了。</p>\n<p>当然 AngularJS 也可以配置为使用 <code>x-www-form-urlencoded</code> 方式提交数据。如有需要，可以参考 <a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"text-xml\"><a href=\"#text-xml\" class=\"headerlink\" title=\"text/xml\"></a>text/xml</h3><p>这种方式目前几乎很少在用，因为 JSON 方式更加灵活方便，而 xml 方式显得比较臃肿和繁琐。<code>XML-RPC（XML Remote Procedure Call）</code> 协议是一套允许运行在不同操作系统、不同环境的程序实现基于 Internet 过程调用的规范和一系列的实现。这种远程过程调用使用 HTTP 作为传输协议，XML 作为传送信息的编码格式。</p>\n<p>典型的 <code>XML-RPC</code> 请求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: text/xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class=\"line\">    &lt;params&gt;</span><br><span class=\"line\">        &lt;param&gt;</span><br><span class=\"line\">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class=\"line\">        &lt;/param&gt;</span><br><span class=\"line\">    &lt;/params&gt;</span><br><span class=\"line\">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>"},{"title":"HTTP常用状态码详解","date":"2017-04-04T08:01:51.000Z","_content":"\nHTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。\n\n| 类别   | 说明              |\n| ---- | --------------- |\n| 1xx  | 请求收到，继续处理       |\n| 2xx  | 操作成功收到，分析、接受    |\n| 3xx  | 完成此请求必须进一步处理    |\n| 4xx  | 请求包含一个错误语法或不能完成 |\n| 5xx  | 服务器执行一个完全有效请求失败 |\n\n### 1xx：请求收到，继续处理\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 100  | 客户端必须继续发送请求                              |\n| 101  | 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求 |\n| 102  | 处理将被继续执行                                 |\n\n### 2xx：操作成功收到，分析、接受\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 200  | 请求已成功，请求所希望的响应头或数据体将随此响应返回               |\n| 201  | 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回 |\n| 202  | 服务器已接受请求，但尚未处理                           |\n| 203  | 返回信息不确定或不完整                              |\n| 204  | 请求收到，但返回信息为空                             |\n| 205  | 服务器完成了请求，用户代理必须复位当前已经浏览过的文件              |\n| 206  | 服务器已经完成了部分用户的GET请求                       |\n| 207  | 之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码 |\n\n### 3xx：完成此请求必须进一步处理\n\n| 状态码  | 说明                       |\n| ---- | ------------------------ |\n| 300  | 请求的资源可在多处得到              |\n| 301  | 删除请求数据                   |\n| 302  | 在其他地址发现了请求数据             |\n| 303  | 建议客户访问其他URL或访问方式         |\n| 304  | 客户端已经执行了GET，但文件未变化       |\n| 305  | 请求的资源必须从服务器指定的地址得到       |\n| 306  | 前一版本HTTP中使用的代码，现行版本中不再使用 |\n| 307  | 申明请求的资源临时性删除             |\n\n### 4xx：请求包含一个错误语法或不能完成\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 400  | 错误请求，如语法错误                               |\n| 401  | 请求授权失败                                   |\n| 402  | 保留有效ChargeTo头响应                          |\n| 403  | 请求不允许                                    |\n| 404  | 没有发现文件、查询或URl                            |\n| 405  | 用户在Request-Line字段定义的方法不允许                |\n| 406  | 根据用户发送的Accept拖，请求资源不可访问                  |\n| 407  | 类似401，用户必须首先在代理服务器上得到授权                  |\n| 408  | 客户端没有在用户指定的饿时间内完成请求                      |\n| 409  | 对当前资源状态，请求不能完成                           |\n| 410  | 服务器上不再有此资源且无进一步的参考地址                     |\n| 411  | 服务器拒绝用户定义的Content-Length属性请求             |\n| 412  | 一个或多个请求头字段在当前请求中错误                       |\n| 413  | 请求的资源大于服务器允许的大小                          |\n| 414  | 请求的资源URL长于服务器允许的长度                       |\n| 415  | 请求资源不支持请求项目格式                            |\n| 416  | 请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段 |\n| 417  | 服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求 |\n| 422  | 请求格式正确，但是由于含有语义错误，无法响应                   |\n| 423  | 当前资源被锁定                                  |\n| 424  | 由于之前的某个请求发生的错误，导致当前请求失败                  |\n| 425  | 在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中 |\n| 426  | 客户端应当切换到TLS/1.0                          |\n| 427  | 请求应当在执行完适当的操作后进行重试                       |\n\n### 5xx：服务器执行一个完全有效请求失败\n\n| 状态   | 说明                                |\n| ---- | --------------------------------- |\n| 500  | 服务器产生内部错误                         |\n| 501  | 服务器不支持请求的函数                       |\n| 502  | 服务器作为网关或代理，从上游服务器收到无效响应           |\n| 503  | 服务器目前无法使用(由于超载或停机维护)              |\n| 504  | 关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长 |\n| 505  | 服务器不支持或拒绝支请求头中指定的HTTP版本           |\n| 506  | 服务器存在内部配置错误                       |\n| 507  | 服务器无法存储完成请求所必须的内容                 |\n| 509  | 服务器达到带宽限制                         |\n| 510  | 获取资源所需要的策略并没有没满足                  |\n\n\n\n\n\n> 参考文章：\n>\n> [HTTP 返回状态值详解](http://www.cnblogs.com/jinjiangongzuoshi/p/3778883.html)\n\n","source":"_posts/httpstatecode.md","raw":"---\ntitle: HTTP常用状态码详解\ndate: 2017-04-04 16:01:51\ntags:\n - HTTP\n - 状态码\ncategories:\n - HTTP\n---\n\nHTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。\n\n| 类别   | 说明              |\n| ---- | --------------- |\n| 1xx  | 请求收到，继续处理       |\n| 2xx  | 操作成功收到，分析、接受    |\n| 3xx  | 完成此请求必须进一步处理    |\n| 4xx  | 请求包含一个错误语法或不能完成 |\n| 5xx  | 服务器执行一个完全有效请求失败 |\n\n### 1xx：请求收到，继续处理\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 100  | 客户端必须继续发送请求                              |\n| 101  | 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求 |\n| 102  | 处理将被继续执行                                 |\n\n### 2xx：操作成功收到，分析、接受\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 200  | 请求已成功，请求所希望的响应头或数据体将随此响应返回               |\n| 201  | 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回 |\n| 202  | 服务器已接受请求，但尚未处理                           |\n| 203  | 返回信息不确定或不完整                              |\n| 204  | 请求收到，但返回信息为空                             |\n| 205  | 服务器完成了请求，用户代理必须复位当前已经浏览过的文件              |\n| 206  | 服务器已经完成了部分用户的GET请求                       |\n| 207  | 之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码 |\n\n### 3xx：完成此请求必须进一步处理\n\n| 状态码  | 说明                       |\n| ---- | ------------------------ |\n| 300  | 请求的资源可在多处得到              |\n| 301  | 删除请求数据                   |\n| 302  | 在其他地址发现了请求数据             |\n| 303  | 建议客户访问其他URL或访问方式         |\n| 304  | 客户端已经执行了GET，但文件未变化       |\n| 305  | 请求的资源必须从服务器指定的地址得到       |\n| 306  | 前一版本HTTP中使用的代码，现行版本中不再使用 |\n| 307  | 申明请求的资源临时性删除             |\n\n### 4xx：请求包含一个错误语法或不能完成\n\n| 状态码  | 说明                                       |\n| ---- | ---------------------------------------- |\n| 400  | 错误请求，如语法错误                               |\n| 401  | 请求授权失败                                   |\n| 402  | 保留有效ChargeTo头响应                          |\n| 403  | 请求不允许                                    |\n| 404  | 没有发现文件、查询或URl                            |\n| 405  | 用户在Request-Line字段定义的方法不允许                |\n| 406  | 根据用户发送的Accept拖，请求资源不可访问                  |\n| 407  | 类似401，用户必须首先在代理服务器上得到授权                  |\n| 408  | 客户端没有在用户指定的饿时间内完成请求                      |\n| 409  | 对当前资源状态，请求不能完成                           |\n| 410  | 服务器上不再有此资源且无进一步的参考地址                     |\n| 411  | 服务器拒绝用户定义的Content-Length属性请求             |\n| 412  | 一个或多个请求头字段在当前请求中错误                       |\n| 413  | 请求的资源大于服务器允许的大小                          |\n| 414  | 请求的资源URL长于服务器允许的长度                       |\n| 415  | 请求资源不支持请求项目格式                            |\n| 416  | 请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段 |\n| 417  | 服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求 |\n| 422  | 请求格式正确，但是由于含有语义错误，无法响应                   |\n| 423  | 当前资源被锁定                                  |\n| 424  | 由于之前的某个请求发生的错误，导致当前请求失败                  |\n| 425  | 在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中 |\n| 426  | 客户端应当切换到TLS/1.0                          |\n| 427  | 请求应当在执行完适当的操作后进行重试                       |\n\n### 5xx：服务器执行一个完全有效请求失败\n\n| 状态   | 说明                                |\n| ---- | --------------------------------- |\n| 500  | 服务器产生内部错误                         |\n| 501  | 服务器不支持请求的函数                       |\n| 502  | 服务器作为网关或代理，从上游服务器收到无效响应           |\n| 503  | 服务器目前无法使用(由于超载或停机维护)              |\n| 504  | 关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长 |\n| 505  | 服务器不支持或拒绝支请求头中指定的HTTP版本           |\n| 506  | 服务器存在内部配置错误                       |\n| 507  | 服务器无法存储完成请求所必须的内容                 |\n| 509  | 服务器达到带宽限制                         |\n| 510  | 获取资源所需要的策略并没有没满足                  |\n\n\n\n\n\n> 参考文章：\n>\n> [HTTP 返回状态值详解](http://www.cnblogs.com/jinjiangongzuoshi/p/3778883.html)\n\n","slug":"httpstatecode","published":1,"updated":"2020-10-25T06:43:32.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepsn0010molcw4yft620","content":"<p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>请求收到，继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功收到，分析、接受</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>完成此请求必须进一步处理</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>请求包含一个错误语法或不能完成</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器执行一个完全有效请求失败</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1xx：请求收到，继续处理\"><a href=\"#1xx：请求收到，继续处理\" class=\"headerlink\" title=\"1xx：请求收到，继续处理\"></a>1xx：请求收到，继续处理</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>客户端必须继续发送请求</td>\n</tr>\n<tr>\n<td>101</td>\n<td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求</td>\n</tr>\n<tr>\n<td>102</td>\n<td>处理将被继续执行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2xx：操作成功收到，分析、接受\"><a href=\"#2xx：操作成功收到，分析、接受\" class=\"headerlink\" title=\"2xx：操作成功收到，分析、接受\"></a>2xx：操作成功收到，分析、接受</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td>\n</tr>\n<tr>\n<td>201</td>\n<td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已接受请求，但尚未处理</td>\n</tr>\n<tr>\n<td>203</td>\n<td>返回信息不确定或不完整</td>\n</tr>\n<tr>\n<td>204</td>\n<td>请求收到，但返回信息为空</td>\n</tr>\n<tr>\n<td>205</td>\n<td>服务器完成了请求，用户代理必须复位当前已经浏览过的文件</td>\n</tr>\n<tr>\n<td>206</td>\n<td>服务器已经完成了部分用户的GET请求</td>\n</tr>\n<tr>\n<td>207</td>\n<td>之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3xx：完成此请求必须进一步处理\"><a href=\"#3xx：完成此请求必须进一步处理\" class=\"headerlink\" title=\"3xx：完成此请求必须进一步处理\"></a>3xx：完成此请求必须进一步处理</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>300</td>\n<td>请求的资源可在多处得到</td>\n</tr>\n<tr>\n<td>301</td>\n<td>删除请求数据</td>\n</tr>\n<tr>\n<td>302</td>\n<td>在其他地址发现了请求数据</td>\n</tr>\n<tr>\n<td>303</td>\n<td>建议客户访问其他URL或访问方式</td>\n</tr>\n<tr>\n<td>304</td>\n<td>客户端已经执行了GET，但文件未变化</td>\n</tr>\n<tr>\n<td>305</td>\n<td>请求的资源必须从服务器指定的地址得到</td>\n</tr>\n<tr>\n<td>306</td>\n<td>前一版本HTTP中使用的代码，现行版本中不再使用</td>\n</tr>\n<tr>\n<td>307</td>\n<td>申明请求的资源临时性删除</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4xx：请求包含一个错误语法或不能完成\"><a href=\"#4xx：请求包含一个错误语法或不能完成\" class=\"headerlink\" title=\"4xx：请求包含一个错误语法或不能完成\"></a>4xx：请求包含一个错误语法或不能完成</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td>错误请求，如语法错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>请求授权失败</td>\n</tr>\n<tr>\n<td>402</td>\n<td>保留有效ChargeTo头响应</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求不允许</td>\n</tr>\n<tr>\n<td>404</td>\n<td>没有发现文件、查询或URl</td>\n</tr>\n<tr>\n<td>405</td>\n<td>用户在Request-Line字段定义的方法不允许</td>\n</tr>\n<tr>\n<td>406</td>\n<td>根据用户发送的Accept拖，请求资源不可访问</td>\n</tr>\n<tr>\n<td>407</td>\n<td>类似401，用户必须首先在代理服务器上得到授权</td>\n</tr>\n<tr>\n<td>408</td>\n<td>客户端没有在用户指定的饿时间内完成请求</td>\n</tr>\n<tr>\n<td>409</td>\n<td>对当前资源状态，请求不能完成</td>\n</tr>\n<tr>\n<td>410</td>\n<td>服务器上不再有此资源且无进一步的参考地址</td>\n</tr>\n<tr>\n<td>411</td>\n<td>服务器拒绝用户定义的Content-Length属性请求</td>\n</tr>\n<tr>\n<td>412</td>\n<td>一个或多个请求头字段在当前请求中错误</td>\n</tr>\n<tr>\n<td>413</td>\n<td>请求的资源大于服务器允许的大小</td>\n</tr>\n<tr>\n<td>414</td>\n<td>请求的资源URL长于服务器允许的长度</td>\n</tr>\n<tr>\n<td>415</td>\n<td>请求资源不支持请求项目格式</td>\n</tr>\n<tr>\n<td>416</td>\n<td>请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</td>\n</tr>\n<tr>\n<td>417</td>\n<td>服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</td>\n</tr>\n<tr>\n<td>422</td>\n<td>请求格式正确，但是由于含有语义错误，无法响应</td>\n</tr>\n<tr>\n<td>423</td>\n<td>当前资源被锁定</td>\n</tr>\n<tr>\n<td>424</td>\n<td>由于之前的某个请求发生的错误，导致当前请求失败</td>\n</tr>\n<tr>\n<td>425</td>\n<td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中</td>\n</tr>\n<tr>\n<td>426</td>\n<td>客户端应当切换到TLS/1.0</td>\n</tr>\n<tr>\n<td>427</td>\n<td>请求应当在执行完适当的操作后进行重试</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5xx：服务器执行一个完全有效请求失败\"><a href=\"#5xx：服务器执行一个完全有效请求失败\" class=\"headerlink\" title=\"5xx：服务器执行一个完全有效请求失败\"></a>5xx：服务器执行一个完全有效请求失败</h3><table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500</td>\n<td>服务器产生内部错误</td>\n</tr>\n<tr>\n<td>501</td>\n<td>服务器不支持请求的函数</td>\n</tr>\n<tr>\n<td>502</td>\n<td>服务器作为网关或代理，从上游服务器收到无效响应</td>\n</tr>\n<tr>\n<td>503</td>\n<td>服务器目前无法使用(由于超载或停机维护)</td>\n</tr>\n<tr>\n<td>504</td>\n<td>关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</td>\n</tr>\n<tr>\n<td>505</td>\n<td>服务器不支持或拒绝支请求头中指定的HTTP版本</td>\n</tr>\n<tr>\n<td>506</td>\n<td>服务器存在内部配置错误</td>\n</tr>\n<tr>\n<td>507</td>\n<td>服务器无法存储完成请求所必须的内容</td>\n</tr>\n<tr>\n<td>509</td>\n<td>服务器达到带宽限制</td>\n</tr>\n<tr>\n<td>510</td>\n<td>获取资源所需要的策略并没有没满足</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/jinjiangongzuoshi/p/3778883.html\" target=\"_blank\" rel=\"noopener\">HTTP 返回状态值详解</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>请求收到，继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功收到，分析、接受</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>完成此请求必须进一步处理</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>请求包含一个错误语法或不能完成</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器执行一个完全有效请求失败</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1xx：请求收到，继续处理\"><a href=\"#1xx：请求收到，继续处理\" class=\"headerlink\" title=\"1xx：请求收到，继续处理\"></a>1xx：请求收到，继续处理</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>客户端必须继续发送请求</td>\n</tr>\n<tr>\n<td>101</td>\n<td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求</td>\n</tr>\n<tr>\n<td>102</td>\n<td>处理将被继续执行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2xx：操作成功收到，分析、接受\"><a href=\"#2xx：操作成功收到，分析、接受\" class=\"headerlink\" title=\"2xx：操作成功收到，分析、接受\"></a>2xx：操作成功收到，分析、接受</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td>\n</tr>\n<tr>\n<td>201</td>\n<td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已接受请求，但尚未处理</td>\n</tr>\n<tr>\n<td>203</td>\n<td>返回信息不确定或不完整</td>\n</tr>\n<tr>\n<td>204</td>\n<td>请求收到，但返回信息为空</td>\n</tr>\n<tr>\n<td>205</td>\n<td>服务器完成了请求，用户代理必须复位当前已经浏览过的文件</td>\n</tr>\n<tr>\n<td>206</td>\n<td>服务器已经完成了部分用户的GET请求</td>\n</tr>\n<tr>\n<td>207</td>\n<td>之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3xx：完成此请求必须进一步处理\"><a href=\"#3xx：完成此请求必须进一步处理\" class=\"headerlink\" title=\"3xx：完成此请求必须进一步处理\"></a>3xx：完成此请求必须进一步处理</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>300</td>\n<td>请求的资源可在多处得到</td>\n</tr>\n<tr>\n<td>301</td>\n<td>删除请求数据</td>\n</tr>\n<tr>\n<td>302</td>\n<td>在其他地址发现了请求数据</td>\n</tr>\n<tr>\n<td>303</td>\n<td>建议客户访问其他URL或访问方式</td>\n</tr>\n<tr>\n<td>304</td>\n<td>客户端已经执行了GET，但文件未变化</td>\n</tr>\n<tr>\n<td>305</td>\n<td>请求的资源必须从服务器指定的地址得到</td>\n</tr>\n<tr>\n<td>306</td>\n<td>前一版本HTTP中使用的代码，现行版本中不再使用</td>\n</tr>\n<tr>\n<td>307</td>\n<td>申明请求的资源临时性删除</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4xx：请求包含一个错误语法或不能完成\"><a href=\"#4xx：请求包含一个错误语法或不能完成\" class=\"headerlink\" title=\"4xx：请求包含一个错误语法或不能完成\"></a>4xx：请求包含一个错误语法或不能完成</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td>错误请求，如语法错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>请求授权失败</td>\n</tr>\n<tr>\n<td>402</td>\n<td>保留有效ChargeTo头响应</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求不允许</td>\n</tr>\n<tr>\n<td>404</td>\n<td>没有发现文件、查询或URl</td>\n</tr>\n<tr>\n<td>405</td>\n<td>用户在Request-Line字段定义的方法不允许</td>\n</tr>\n<tr>\n<td>406</td>\n<td>根据用户发送的Accept拖，请求资源不可访问</td>\n</tr>\n<tr>\n<td>407</td>\n<td>类似401，用户必须首先在代理服务器上得到授权</td>\n</tr>\n<tr>\n<td>408</td>\n<td>客户端没有在用户指定的饿时间内完成请求</td>\n</tr>\n<tr>\n<td>409</td>\n<td>对当前资源状态，请求不能完成</td>\n</tr>\n<tr>\n<td>410</td>\n<td>服务器上不再有此资源且无进一步的参考地址</td>\n</tr>\n<tr>\n<td>411</td>\n<td>服务器拒绝用户定义的Content-Length属性请求</td>\n</tr>\n<tr>\n<td>412</td>\n<td>一个或多个请求头字段在当前请求中错误</td>\n</tr>\n<tr>\n<td>413</td>\n<td>请求的资源大于服务器允许的大小</td>\n</tr>\n<tr>\n<td>414</td>\n<td>请求的资源URL长于服务器允许的长度</td>\n</tr>\n<tr>\n<td>415</td>\n<td>请求资源不支持请求项目格式</td>\n</tr>\n<tr>\n<td>416</td>\n<td>请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</td>\n</tr>\n<tr>\n<td>417</td>\n<td>服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</td>\n</tr>\n<tr>\n<td>422</td>\n<td>请求格式正确，但是由于含有语义错误，无法响应</td>\n</tr>\n<tr>\n<td>423</td>\n<td>当前资源被锁定</td>\n</tr>\n<tr>\n<td>424</td>\n<td>由于之前的某个请求发生的错误，导致当前请求失败</td>\n</tr>\n<tr>\n<td>425</td>\n<td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中</td>\n</tr>\n<tr>\n<td>426</td>\n<td>客户端应当切换到TLS/1.0</td>\n</tr>\n<tr>\n<td>427</td>\n<td>请求应当在执行完适当的操作后进行重试</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5xx：服务器执行一个完全有效请求失败\"><a href=\"#5xx：服务器执行一个完全有效请求失败\" class=\"headerlink\" title=\"5xx：服务器执行一个完全有效请求失败\"></a>5xx：服务器执行一个完全有效请求失败</h3><table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500</td>\n<td>服务器产生内部错误</td>\n</tr>\n<tr>\n<td>501</td>\n<td>服务器不支持请求的函数</td>\n</tr>\n<tr>\n<td>502</td>\n<td>服务器作为网关或代理，从上游服务器收到无效响应</td>\n</tr>\n<tr>\n<td>503</td>\n<td>服务器目前无法使用(由于超载或停机维护)</td>\n</tr>\n<tr>\n<td>504</td>\n<td>关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</td>\n</tr>\n<tr>\n<td>505</td>\n<td>服务器不支持或拒绝支请求头中指定的HTTP版本</td>\n</tr>\n<tr>\n<td>506</td>\n<td>服务器存在内部配置错误</td>\n</tr>\n<tr>\n<td>507</td>\n<td>服务器无法存储完成请求所必须的内容</td>\n</tr>\n<tr>\n<td>509</td>\n<td>服务器达到带宽限制</td>\n</tr>\n<tr>\n<td>510</td>\n<td>获取资源所需要的策略并没有没满足</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/jinjiangongzuoshi/p/3778883.html\" target=\"_blank\" rel=\"noopener\">HTTP 返回状态值详解</a></p>\n</blockquote>\n"},{"title":"约瑟夫环问题","date":"2017-04-06T12:42:03.000Z","_content":"\n约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3...n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列（或者求最后一个出列的人的编号）。\n\n这里提供了三种方法：\n\n逻辑去除法；\n\n递归法；\n\n线性表法。\n\n这个问题我觉得应该也可以用循环队列来解决，这种方法以后再加上。\n\n### 逻辑去除法\n\n```\n\t/**\n     * 逻辑去除法\n     * @param $n\n     * @param $m\n     * @return int\n     */\n    public function ExJosephRing_Logic($n, $m)\n    {\n        $tmp_array = array();\n        // $left_over记录数组中不为0的个数\n        $left_over = $n;\n        // $ret_value记录最后返回的数字\n        $ret_value = 0;\n        // 记录开始循环查找的起点\n        $start = 0;\n        // 初始化数组\n        for ($i = 0; $i <= $n; $i++) {\n            $tmp_array[$i] = $i;\n        }\n        $array_length = count($tmp_array);\n        while ($left_over != 1) {\n            for ($j = 1; $j <= $m; $j++) {\n                $start++;\n                // $tmp_array[$start] == 0检测数组越界\n                if ($start != $array_length && $tmp_array[$start] == 0) {\n                    for ($k = $start; $k < $array_length; $k++) {\n                        if ($tmp_array[$k] == 0) {\n                            $start++;\n                        } elseif ($tmp_array[$k] > 0) {\n                            break;\n                        }\n                    }\n                }\n                // 循环到头，重新开始\n                if ($start == $array_length) {\n                    $start = 0;\n                }\n                if ($tmp_array[$start] == 0) {\n                    for ($k = $start; $k < $array_length; $k++) {\n                        if ($tmp_array[$k] == 0) {\n                            $start++;\n                        } elseif ($tmp_array[$k] > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            $tmp_array[$start] = 0;\n\n            // 循环遍历，记录数组中不为0的元素的个数\n            $left_over = 0;\n            foreach ($tmp_array as $key => $value) {\n                if ($value != 0) {\n                    $left_over++;\n                    $ret_value = $value;\n                }\n            }\n        }\n        return $ret_value;\n    }\n```\n\n### 递归方法\n\n```\n\t/**\n     * 递归方法\n     * @param $tmp_array\n     * @param $m\n     * @param int $current\n     * @return int\n     */\n    public function ExJosephRing_Recursive($tmp_array, $m, $current = 0)\n    {\n        $array_length = count($tmp_array);\n        $num = 1;\n        if (count($tmp_array) == 1) {\n            return $tmp_array[0];\n        } else {\n            while ($num++ < $m) {\n                $current++;\n                $current = $current % $array_length;\n            }\n            array_splice($tmp_array, $current, 1);\n            // 如果需要返回数据，这里必须加上return，否则不会返回结果\n            return $this->ExJosephRing_Recursive($tmp_array, $m, $current);\n        }\n    }\n```\n\n### 线性表法\n\n```\n\t/**\n     * 线性表法\n     * @param $n\n     * @param $m\n     * @return int\n     */\n    public function ExJosephRing_Linear($n, $m)\n    {\n        $r = 0;\n        for ($i = 2; $i <= $n; $i++) {\n            $r = ($r + $m) % $i;\n        }\n        return $r + 1;\n    }\n```\n\n对于线性表法的解释：每个人出列后，剩下的人又组成了另一个子问题。只是他们的编号变化了。第一个出列的人肯定是a[1] = m(mod)n（m/n的余数），他除去后剩下的人编号是a[1]+1、a[1]+2、…、n、1、2、…a[1]-2、a[1]-1，对应的新编号是1，2，3…n-1。设此时某个人的新编号是i，他原来的编号就是(i+a[1])%n。于是，这便形成了一个递归问题。假如知道了这个子问题（n-1个人）的解是x，那么原问题（n个人）的解便是：(x+m%n)%n = (x+m)%n。问题的起始条件：如果n=1,那么结果就是1。\n\n\n\n> 参考文章：\n>\n> [用PHP解决“约瑟夫环”的几种方法](http://9iphp.com/web/php/1112.html)","source":"_posts/josephring.md","raw":"---\ntitle: 约瑟夫环问题\ndate: 2017-04-06 20:42:03\ntags:\n - 约瑟夫环\n - PHP\ncategories:\n - 算法\n---\n\n约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3...n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列（或者求最后一个出列的人的编号）。\n\n这里提供了三种方法：\n\n逻辑去除法；\n\n递归法；\n\n线性表法。\n\n这个问题我觉得应该也可以用循环队列来解决，这种方法以后再加上。\n\n### 逻辑去除法\n\n```\n\t/**\n     * 逻辑去除法\n     * @param $n\n     * @param $m\n     * @return int\n     */\n    public function ExJosephRing_Logic($n, $m)\n    {\n        $tmp_array = array();\n        // $left_over记录数组中不为0的个数\n        $left_over = $n;\n        // $ret_value记录最后返回的数字\n        $ret_value = 0;\n        // 记录开始循环查找的起点\n        $start = 0;\n        // 初始化数组\n        for ($i = 0; $i <= $n; $i++) {\n            $tmp_array[$i] = $i;\n        }\n        $array_length = count($tmp_array);\n        while ($left_over != 1) {\n            for ($j = 1; $j <= $m; $j++) {\n                $start++;\n                // $tmp_array[$start] == 0检测数组越界\n                if ($start != $array_length && $tmp_array[$start] == 0) {\n                    for ($k = $start; $k < $array_length; $k++) {\n                        if ($tmp_array[$k] == 0) {\n                            $start++;\n                        } elseif ($tmp_array[$k] > 0) {\n                            break;\n                        }\n                    }\n                }\n                // 循环到头，重新开始\n                if ($start == $array_length) {\n                    $start = 0;\n                }\n                if ($tmp_array[$start] == 0) {\n                    for ($k = $start; $k < $array_length; $k++) {\n                        if ($tmp_array[$k] == 0) {\n                            $start++;\n                        } elseif ($tmp_array[$k] > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n            \n            $tmp_array[$start] = 0;\n\n            // 循环遍历，记录数组中不为0的元素的个数\n            $left_over = 0;\n            foreach ($tmp_array as $key => $value) {\n                if ($value != 0) {\n                    $left_over++;\n                    $ret_value = $value;\n                }\n            }\n        }\n        return $ret_value;\n    }\n```\n\n### 递归方法\n\n```\n\t/**\n     * 递归方法\n     * @param $tmp_array\n     * @param $m\n     * @param int $current\n     * @return int\n     */\n    public function ExJosephRing_Recursive($tmp_array, $m, $current = 0)\n    {\n        $array_length = count($tmp_array);\n        $num = 1;\n        if (count($tmp_array) == 1) {\n            return $tmp_array[0];\n        } else {\n            while ($num++ < $m) {\n                $current++;\n                $current = $current % $array_length;\n            }\n            array_splice($tmp_array, $current, 1);\n            // 如果需要返回数据，这里必须加上return，否则不会返回结果\n            return $this->ExJosephRing_Recursive($tmp_array, $m, $current);\n        }\n    }\n```\n\n### 线性表法\n\n```\n\t/**\n     * 线性表法\n     * @param $n\n     * @param $m\n     * @return int\n     */\n    public function ExJosephRing_Linear($n, $m)\n    {\n        $r = 0;\n        for ($i = 2; $i <= $n; $i++) {\n            $r = ($r + $m) % $i;\n        }\n        return $r + 1;\n    }\n```\n\n对于线性表法的解释：每个人出列后，剩下的人又组成了另一个子问题。只是他们的编号变化了。第一个出列的人肯定是a[1] = m(mod)n（m/n的余数），他除去后剩下的人编号是a[1]+1、a[1]+2、…、n、1、2、…a[1]-2、a[1]-1，对应的新编号是1，2，3…n-1。设此时某个人的新编号是i，他原来的编号就是(i+a[1])%n。于是，这便形成了一个递归问题。假如知道了这个子问题（n-1个人）的解是x，那么原问题（n个人）的解便是：(x+m%n)%n = (x+m)%n。问题的起始条件：如果n=1,那么结果就是1。\n\n\n\n> 参考文章：\n>\n> [用PHP解决“约瑟夫环”的几种方法](http://9iphp.com/web/php/1112.html)","slug":"josephring","published":1,"updated":"2020-10-25T06:43:32.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepsq0013molcmbe1a8dn","content":"<p>约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列（或者求最后一个出列的人的编号）。</p>\n<p>这里提供了三种方法：</p>\n<p>逻辑去除法；</p>\n<p>递归法；</p>\n<p>线性表法。</p>\n<p>这个问题我觉得应该也可以用循环队列来解决，这种方法以后再加上。</p>\n<h3 id=\"逻辑去除法\"><a href=\"#逻辑去除法\" class=\"headerlink\" title=\"逻辑去除法\"></a>逻辑去除法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 逻辑去除法</span><br><span class=\"line\">    * @param $n</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Logic($n, $m)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $tmp_array = array();</span><br><span class=\"line\">       // $left_over记录数组中不为0的个数</span><br><span class=\"line\">       $left_over = $n;</span><br><span class=\"line\">       // $ret_value记录最后返回的数字</span><br><span class=\"line\">       $ret_value = 0;</span><br><span class=\"line\">       // 记录开始循环查找的起点</span><br><span class=\"line\">       $start = 0;</span><br><span class=\"line\">       // 初始化数组</span><br><span class=\"line\">       for ($i = 0; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">           $tmp_array[$i] = $i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $array_length = count($tmp_array);</span><br><span class=\"line\">       while ($left_over != 1) &#123;</span><br><span class=\"line\">           for ($j = 1; $j &lt;= $m; $j++) &#123;</span><br><span class=\"line\">               $start++;</span><br><span class=\"line\">               // $tmp_array[$start] == 0检测数组越界</span><br><span class=\"line\">               if ($start != $array_length &amp;&amp; $tmp_array[$start] == 0) &#123;</span><br><span class=\"line\">                   for ($k = $start; $k &lt; $array_length; $k++) &#123;</span><br><span class=\"line\">                       if ($tmp_array[$k] == 0) &#123;</span><br><span class=\"line\">                           $start++;</span><br><span class=\"line\">                       &#125; elseif ($tmp_array[$k] &gt; 0) &#123;</span><br><span class=\"line\">                           break;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               // 循环到头，重新开始</span><br><span class=\"line\">               if ($start == $array_length) &#123;</span><br><span class=\"line\">                   $start = 0;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               if ($tmp_array[$start] == 0) &#123;</span><br><span class=\"line\">                   for ($k = $start; $k &lt; $array_length; $k++) &#123;</span><br><span class=\"line\">                       if ($tmp_array[$k] == 0) &#123;</span><br><span class=\"line\">                           $start++;</span><br><span class=\"line\">                       &#125; elseif ($tmp_array[$k] &gt; 0) &#123;</span><br><span class=\"line\">                           break;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           $tmp_array[$start] = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">           // 循环遍历，记录数组中不为0的元素的个数</span><br><span class=\"line\">           $left_over = 0;</span><br><span class=\"line\">           foreach ($tmp_array as $key =&gt; $value) &#123;</span><br><span class=\"line\">               if ($value != 0) &#123;</span><br><span class=\"line\">                   $left_over++;</span><br><span class=\"line\">                   $ret_value = $value;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return $ret_value;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归方法\"><a href=\"#递归方法\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 递归方法</span><br><span class=\"line\">    * @param $tmp_array</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @param int $current</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Recursive($tmp_array, $m, $current = 0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $array_length = count($tmp_array);</span><br><span class=\"line\">       $num = 1;</span><br><span class=\"line\">       if (count($tmp_array) == 1) &#123;</span><br><span class=\"line\">           return $tmp_array[0];</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           while ($num++ &lt; $m) &#123;</span><br><span class=\"line\">               $current++;</span><br><span class=\"line\">               $current = $current % $array_length;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           array_splice($tmp_array, $current, 1);</span><br><span class=\"line\">           // 如果需要返回数据，这里必须加上return，否则不会返回结果</span><br><span class=\"line\">           return $this-&gt;ExJosephRing_Recursive($tmp_array, $m, $current);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线性表法\"><a href=\"#线性表法\" class=\"headerlink\" title=\"线性表法\"></a>线性表法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 线性表法</span><br><span class=\"line\">    * @param $n</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Linear($n, $m)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $r = 0;</span><br><span class=\"line\">       for ($i = 2; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">           $r = ($r + $m) % $i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return $r + 1;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>对于线性表法的解释：每个人出列后，剩下的人又组成了另一个子问题。只是他们的编号变化了。第一个出列的人肯定是a[1] = m(mod)n（m/n的余数），他除去后剩下的人编号是a[1]+1、a[1]+2、…、n、1、2、…a[1]-2、a[1]-1，对应的新编号是1，2，3…n-1。设此时某个人的新编号是i，他原来的编号就是(i+a[1])%n。于是，这便形成了一个递归问题。假如知道了这个子问题（n-1个人）的解是x，那么原问题（n个人）的解便是：(x+m%n)%n = (x+m)%n。问题的起始条件：如果n=1,那么结果就是1。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://9iphp.com/web/php/1112.html\" target=\"_blank\" rel=\"noopener\">用PHP解决“约瑟夫环”的几种方法</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列（或者求最后一个出列的人的编号）。</p>\n<p>这里提供了三种方法：</p>\n<p>逻辑去除法；</p>\n<p>递归法；</p>\n<p>线性表法。</p>\n<p>这个问题我觉得应该也可以用循环队列来解决，这种方法以后再加上。</p>\n<h3 id=\"逻辑去除法\"><a href=\"#逻辑去除法\" class=\"headerlink\" title=\"逻辑去除法\"></a>逻辑去除法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 逻辑去除法</span><br><span class=\"line\">    * @param $n</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Logic($n, $m)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $tmp_array = array();</span><br><span class=\"line\">       // $left_over记录数组中不为0的个数</span><br><span class=\"line\">       $left_over = $n;</span><br><span class=\"line\">       // $ret_value记录最后返回的数字</span><br><span class=\"line\">       $ret_value = 0;</span><br><span class=\"line\">       // 记录开始循环查找的起点</span><br><span class=\"line\">       $start = 0;</span><br><span class=\"line\">       // 初始化数组</span><br><span class=\"line\">       for ($i = 0; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">           $tmp_array[$i] = $i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $array_length = count($tmp_array);</span><br><span class=\"line\">       while ($left_over != 1) &#123;</span><br><span class=\"line\">           for ($j = 1; $j &lt;= $m; $j++) &#123;</span><br><span class=\"line\">               $start++;</span><br><span class=\"line\">               // $tmp_array[$start] == 0检测数组越界</span><br><span class=\"line\">               if ($start != $array_length &amp;&amp; $tmp_array[$start] == 0) &#123;</span><br><span class=\"line\">                   for ($k = $start; $k &lt; $array_length; $k++) &#123;</span><br><span class=\"line\">                       if ($tmp_array[$k] == 0) &#123;</span><br><span class=\"line\">                           $start++;</span><br><span class=\"line\">                       &#125; elseif ($tmp_array[$k] &gt; 0) &#123;</span><br><span class=\"line\">                           break;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               // 循环到头，重新开始</span><br><span class=\"line\">               if ($start == $array_length) &#123;</span><br><span class=\"line\">                   $start = 0;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               if ($tmp_array[$start] == 0) &#123;</span><br><span class=\"line\">                   for ($k = $start; $k &lt; $array_length; $k++) &#123;</span><br><span class=\"line\">                       if ($tmp_array[$k] == 0) &#123;</span><br><span class=\"line\">                           $start++;</span><br><span class=\"line\">                       &#125; elseif ($tmp_array[$k] &gt; 0) &#123;</span><br><span class=\"line\">                           break;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           $tmp_array[$start] = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">           // 循环遍历，记录数组中不为0的元素的个数</span><br><span class=\"line\">           $left_over = 0;</span><br><span class=\"line\">           foreach ($tmp_array as $key =&gt; $value) &#123;</span><br><span class=\"line\">               if ($value != 0) &#123;</span><br><span class=\"line\">                   $left_over++;</span><br><span class=\"line\">                   $ret_value = $value;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return $ret_value;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归方法\"><a href=\"#递归方法\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 递归方法</span><br><span class=\"line\">    * @param $tmp_array</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @param int $current</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Recursive($tmp_array, $m, $current = 0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $array_length = count($tmp_array);</span><br><span class=\"line\">       $num = 1;</span><br><span class=\"line\">       if (count($tmp_array) == 1) &#123;</span><br><span class=\"line\">           return $tmp_array[0];</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           while ($num++ &lt; $m) &#123;</span><br><span class=\"line\">               $current++;</span><br><span class=\"line\">               $current = $current % $array_length;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           array_splice($tmp_array, $current, 1);</span><br><span class=\"line\">           // 如果需要返回数据，这里必须加上return，否则不会返回结果</span><br><span class=\"line\">           return $this-&gt;ExJosephRing_Recursive($tmp_array, $m, $current);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线性表法\"><a href=\"#线性表法\" class=\"headerlink\" title=\"线性表法\"></a>线性表法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 线性表法</span><br><span class=\"line\">    * @param $n</span><br><span class=\"line\">    * @param $m</span><br><span class=\"line\">    * @return int</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public function ExJosephRing_Linear($n, $m)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       $r = 0;</span><br><span class=\"line\">       for ($i = 2; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">           $r = ($r + $m) % $i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return $r + 1;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>对于线性表法的解释：每个人出列后，剩下的人又组成了另一个子问题。只是他们的编号变化了。第一个出列的人肯定是a[1] = m(mod)n（m/n的余数），他除去后剩下的人编号是a[1]+1、a[1]+2、…、n、1、2、…a[1]-2、a[1]-1，对应的新编号是1，2，3…n-1。设此时某个人的新编号是i，他原来的编号就是(i+a[1])%n。于是，这便形成了一个递归问题。假如知道了这个子问题（n-1个人）的解是x，那么原问题（n个人）的解便是：(x+m%n)%n = (x+m)%n。问题的起始条件：如果n=1,那么结果就是1。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://9iphp.com/web/php/1112.html\" target=\"_blank\" rel=\"noopener\">用PHP解决“约瑟夫环”的几种方法</a></p>\n</blockquote>\n"},{"title":"Python:计算密集型任务和I/O密集型任务","date":"2017-07-15T08:00:40.000Z","_content":"\n### I/O密集型任务 VS 计算密集型任务\n\n所谓 I/O 密集型任务，是指磁盘 I/O、网络 I/O 占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用 sleep 达到 I/O 密集型任务的目的。\n\n所谓计算密集型任务，是指 CPU 计算占主要的任务，CPU 一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n### 多线程 VS 多进程\n\nPython中比较常见的并发方式主要有两种：多线程和多进程。\n\n#### GIL\n\nGIL 的全称是 Global Interpreter Lock (全局解释器锁)，来源是 python 设计之初的考虑，为了数据安全所做的决定。在Python多线程下，每个线程的执行方式：\n\n- 获取GIL ；\n- 执行代码直到sleep或者是python虚拟机将其挂起；\n- 释放GIL。\n\n可见，某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是“通行证”，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入 CPU 执行。\n\n**注意：**多核多线程不一定比单核多线程更好。原因是单核下多线程，每次释放 GIL，唤醒的那个线程都能获取到 GIL 锁，所以能够无缝执行，但多核下，CPU0 释放 GIL 后，其他 CPU 上的线程都会进行竞争，但 GIL 可能会马上又被 CPU0 拿到，导致其他几个 CPU 上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸，导致效率更低。\n\n#### 多线程\n\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于 Python 中使用了全局解释锁 GIL 的概念，导致 Python 中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![2017-7-15 160518](/images/2017-7-15 160518.png)\n\n所以 Python 中的多线程适合 I/O 密集型任务，而不适合计算密集型任务。\n\nPython 提供两组多线程接口，一是 thread 模块 _thread，提供低等级接口。二是 threading 模块，提供更容易使用的基于对象的接口，可以继承 Thread 对象来实现线程，此外其还提供了其它线程相关的对象，例如 Timer，Lock 等。\n\n#### 多进程\n\n由于 Python 中 GIL 的原因，对于计算密集型任务，Python 下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU 资源。当然同一时间执行的进程数量取决你电脑的 CPU 核心数。\n\n![2017-7-15 160641](/images/2017-7-15 160641.png)\n\nPython 中的进程模块为 mutliprocess 模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python 还提供了进程池 Pool 对象，可以方便的管理和控制线程。\n\n### Example\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。\n\n首先定义一个队列，并定义初始化队列的函数：\n\n```\n# 定义全局变量Queue，与Queue.Queue()的不同之处在于，multiprocessing.Queue()支持跨进程使用\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        g_queue.get()\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n\n然后定义 I/O 密集型任务和计算密集型任务，分别从队列中获取任务数据：\n\n```\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as ex:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(ex)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\n\ng_search_list = list(range(10000))\n\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3 * 2, 3 * 2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n\n```\n\n准备完上述代码之后，进行试验：\n\n```\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(4)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(4)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n```\n\n结果如下：\n\n```\n========== 直接执行IO密集型任务 ==========\n结束： 10.041141033172607 \n========== 多线程执行IO密集型任务 ==========\n结束： 5.073023557662964 \n========== 多进程执行IO密集型任务 ==========\n结束： 1.1165637969970703 \n\n========== 直接执行计算密集型任务 ==========\n结束： 36.41951608657837 \n========== 多线程执行计算密集型任务 ==========\n结束： 47.48710823059082 \n========== 多进程执行计算密集型任务 ==========\n结束： 0.82016921043396 \n```\n\n在执行计算密集型任务时，多进程的方式明显比多线程更好。\n\n\n\n> 参考文章：\n>\n> [Python进阶：聊聊IO密集型任务、计算密集型任务，以及多线程、多进程](https://zhuanlan.zhihu.com/p/24283040)  [为什么在python里推荐使用多进程而不是多线程？--转同事的一篇文章](http://blog.chinaunix.net/uid-12014716-id-5691776.html)  [Python编程（二）：Python进程、线程那点事儿](https://zhuanlan.zhihu.com/p/20167077?columnSlug=auxten)  ","source":"_posts/jsmjiomj.md","raw":"---\ntitle: Python:计算密集型任务和I/O密集型任务\ndate: 2017-07-15 16:00:40\ntags:\n - 计算密集型任务\n - I/O密集型任务\n - Python\ncategories:\n - 进程/线程\n---\n\n### I/O密集型任务 VS 计算密集型任务\n\n所谓 I/O 密集型任务，是指磁盘 I/O、网络 I/O 占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用 sleep 达到 I/O 密集型任务的目的。\n\n所谓计算密集型任务，是指 CPU 计算占主要的任务，CPU 一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。\n\n### 多线程 VS 多进程\n\nPython中比较常见的并发方式主要有两种：多线程和多进程。\n\n#### GIL\n\nGIL 的全称是 Global Interpreter Lock (全局解释器锁)，来源是 python 设计之初的考虑，为了数据安全所做的决定。在Python多线程下，每个线程的执行方式：\n\n- 获取GIL ；\n- 执行代码直到sleep或者是python虚拟机将其挂起；\n- 释放GIL。\n\n可见，某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是“通行证”，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入 CPU 执行。\n\n**注意：**多核多线程不一定比单核多线程更好。原因是单核下多线程，每次释放 GIL，唤醒的那个线程都能获取到 GIL 锁，所以能够无缝执行，但多核下，CPU0 释放 GIL 后，其他 CPU 上的线程都会进行竞争，但 GIL 可能会马上又被 CPU0 拿到，导致其他几个 CPU 上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸，导致效率更低。\n\n#### 多线程\n\n多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于 Python 中使用了全局解释锁 GIL 的概念，导致 Python 中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）\n\n![2017-7-15 160518](/images/2017-7-15 160518.png)\n\n所以 Python 中的多线程适合 I/O 密集型任务，而不适合计算密集型任务。\n\nPython 提供两组多线程接口，一是 thread 模块 _thread，提供低等级接口。二是 threading 模块，提供更容易使用的基于对象的接口，可以继承 Thread 对象来实现线程，此外其还提供了其它线程相关的对象，例如 Timer，Lock 等。\n\n#### 多进程\n\n由于 Python 中 GIL 的原因，对于计算密集型任务，Python 下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU 资源。当然同一时间执行的进程数量取决你电脑的 CPU 核心数。\n\n![2017-7-15 160641](/images/2017-7-15 160641.png)\n\nPython 中的进程模块为 mutliprocess 模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python 还提供了进程池 Pool 对象，可以方便的管理和控制线程。\n\n### Example\n\n这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。\n\n首先定义一个队列，并定义初始化队列的函数：\n\n```\n# 定义全局变量Queue，与Queue.Queue()的不同之处在于，multiprocessing.Queue()支持跨进程使用\ng_queue = multiprocessing.Queue()\n\ndef init_queue():\n    print(\"init g_queue start\")\n    while not g_queue.empty():\n        g_queue.get()\n    for _index in range(10):\n        g_queue.put(_index)\n    print(\"init g_queue end\")\n    return\n```\n\n然后定义 I/O 密集型任务和计算密集型任务，分别从队列中获取任务数据：\n\n```\n# 定义一个IO密集型任务：利用time.sleep()\ndef task_io(task_id):\n    print(\"IOTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        time.sleep(1)\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"IOTask[%s] get data: %s\" % (task_id, data))\n        except Exception as ex:\n            print(\"IOTask[%s] error: %s\" % (task_id, str(ex)))\n    print(\"IOTask[%s] end\" % task_id)\n    return\n\n\ng_search_list = list(range(10000))\n\n\n# 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等\ndef task_cpu(task_id):\n    print(\"CPUTask[%s] start\" % task_id)\n    while not g_queue.empty():\n        count = 0\n        for i in range(10000):\n            count += pow(3 * 2, 3 * 2) if i in g_search_list else 0\n        try:\n            data = g_queue.get(block=True, timeout=1)\n            print(\"CPUTask[%s] get data: %s\" % (task_id, data))\n        except Exception as excep:\n            print(\"CPUTask[%s] error: %s\" % (task_id, str(excep)))\n    print(\"CPUTask[%s] end\" % task_id)\n    return task_id\n\n```\n\n准备完上述代码之后，进行试验：\n\n```\nif __name__ == '__main__':\n    print(\"cpu count:\", multiprocessing.cpu_count(), \"\\n\")\n\n    print(\"========== 直接执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_io(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(4)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行IO密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 直接执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    task_cpu(0)\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多线程执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(4)]\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        if t.is_alive():\n            t.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n\n    print(\"========== 多进程执行计算密集型任务 ==========\")\n    init_queue()\n    time_0 = time.time()\n    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]\n    for p in process_list:\n        p.start()\n    for p in process_list:\n        if p.is_alive():\n            p.join()\n    print(\"结束：\", time.time() - time_0, \"\\n\")\n```\n\n结果如下：\n\n```\n========== 直接执行IO密集型任务 ==========\n结束： 10.041141033172607 \n========== 多线程执行IO密集型任务 ==========\n结束： 5.073023557662964 \n========== 多进程执行IO密集型任务 ==========\n结束： 1.1165637969970703 \n\n========== 直接执行计算密集型任务 ==========\n结束： 36.41951608657837 \n========== 多线程执行计算密集型任务 ==========\n结束： 47.48710823059082 \n========== 多进程执行计算密集型任务 ==========\n结束： 0.82016921043396 \n```\n\n在执行计算密集型任务时，多进程的方式明显比多线程更好。\n\n\n\n> 参考文章：\n>\n> [Python进阶：聊聊IO密集型任务、计算密集型任务，以及多线程、多进程](https://zhuanlan.zhihu.com/p/24283040)  [为什么在python里推荐使用多进程而不是多线程？--转同事的一篇文章](http://blog.chinaunix.net/uid-12014716-id-5691776.html)  [Python编程（二）：Python进程、线程那点事儿](https://zhuanlan.zhihu.com/p/20167077?columnSlug=auxten)  ","slug":"jsmjiomj","published":1,"updated":"2020-10-25T06:43:32.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepsu0017molcrc1whq2x","content":"<h3 id=\"I-O密集型任务-VS-计算密集型任务\"><a href=\"#I-O密集型任务-VS-计算密集型任务\" class=\"headerlink\" title=\"I/O密集型任务 VS 计算密集型任务\"></a>I/O密集型任务 VS 计算密集型任务</h3><p>所谓 I/O 密集型任务，是指磁盘 I/O、网络 I/O 占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用 sleep 达到 I/O 密集型任务的目的。</p>\n<p>所谓计算密集型任务，是指 CPU 计算占主要的任务，CPU 一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n<h3 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h3><p>Python中比较常见的并发方式主要有两种：多线程和多进程。</p>\n<h4 id=\"GIL\"><a href=\"#GIL\" class=\"headerlink\" title=\"GIL\"></a>GIL</h4><p>GIL 的全称是 Global Interpreter Lock (全局解释器锁)，来源是 python 设计之初的考虑，为了数据安全所做的决定。在Python多线程下，每个线程的执行方式：</p>\n<ul>\n<li>获取GIL ；</li>\n<li>执行代码直到sleep或者是python虚拟机将其挂起；</li>\n<li>释放GIL。</li>\n</ul>\n<p>可见，某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是“通行证”，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入 CPU 执行。</p>\n<p><strong>注意：</strong>多核多线程不一定比单核多线程更好。原因是单核下多线程，每次释放 GIL，唤醒的那个线程都能获取到 GIL 锁，所以能够无缝执行，但多核下，CPU0 释放 GIL 后，其他 CPU 上的线程都会进行竞争，但 GIL 可能会马上又被 CPU0 拿到，导致其他几个 CPU 上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸，导致效率更低。</p>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于 Python 中使用了全局解释锁 GIL 的概念，导致 Python 中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"/images/2017-7-15 160518.png\" alt=\"2017-7-15 160518\"></p>\n<p>所以 Python 中的多线程适合 I/O 密集型任务，而不适合计算密集型任务。</p>\n<p>Python 提供两组多线程接口，一是 thread 模块 _thread，提供低等级接口。二是 threading 模块，提供更容易使用的基于对象的接口，可以继承 Thread 对象来实现线程，此外其还提供了其它线程相关的对象，例如 Timer，Lock 等。</p>\n<h4 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h4><p>由于 Python 中 GIL 的原因，对于计算密集型任务，Python 下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU 资源。当然同一时间执行的进程数量取决你电脑的 CPU 核心数。</p>\n<p><img src=\"/images/2017-7-15 160641.png\" alt=\"2017-7-15 160641\"></p>\n<p>Python 中的进程模块为 mutliprocess 模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python 还提供了进程池 Pool 对象，可以方便的管理和控制线程。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。</p>\n<p>首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义全局变量Queue，与Queue.Queue()的不同之处在于，multiprocessing.Queue()支持跨进程使用</span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">def init_queue():</span><br><span class=\"line\">    print(&quot;init g_queue start&quot;)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        g_queue.get()</span><br><span class=\"line\">    for _index in range(10):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(&quot;init g_queue end&quot;)</span><br><span class=\"line\">    return</span><br></pre></td></tr></table></figure>\n<p>然后定义 I/O 密集型任务和计算密集型任务，分别从队列中获取任务数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义一个IO密集型任务：利用time.sleep()</span><br><span class=\"line\">def task_io(task_id):</span><br><span class=\"line\">    print(&quot;IOTask[%s] start&quot; % task_id)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            data = g_queue.get(block=True, timeout=1)</span><br><span class=\"line\">            print(&quot;IOTask[%s] get data: %s&quot; % (task_id, data))</span><br><span class=\"line\">        except Exception as ex:</span><br><span class=\"line\">            print(&quot;IOTask[%s] error: %s&quot; % (task_id, str(ex)))</span><br><span class=\"line\">    print(&quot;IOTask[%s] end&quot; % task_id)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(10000))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span><br><span class=\"line\">def task_cpu(task_id):</span><br><span class=\"line\">    print(&quot;CPUTask[%s] start&quot; % task_id)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        for i in range(10000):</span><br><span class=\"line\">            count += pow(3 * 2, 3 * 2) if i in g_search_list else 0</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            data = g_queue.get(block=True, timeout=1)</span><br><span class=\"line\">            print(&quot;CPUTask[%s] get data: %s&quot; % (task_id, data))</span><br><span class=\"line\">        except Exception as excep:</span><br><span class=\"line\">            print(&quot;CPUTask[%s] error: %s&quot; % (task_id, str(excep)))</span><br><span class=\"line\">    print(&quot;CPUTask[%s] end&quot; % task_id)</span><br><span class=\"line\">    return task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    print(&quot;cpu count:&quot;, multiprocessing.cpu_count(), &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 直接执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(0)</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多线程执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(4)]</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        if t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多进程执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        if p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 直接执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(0)</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多线程执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(4)]</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        if t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多进程执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        if p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========== 直接执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 10.041141033172607 </span><br><span class=\"line\">========== 多线程执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 5.073023557662964 </span><br><span class=\"line\">========== 多进程执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 1.1165637969970703 </span><br><span class=\"line\"></span><br><span class=\"line\">========== 直接执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 36.41951608657837 </span><br><span class=\"line\">========== 多线程执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 47.48710823059082 </span><br><span class=\"line\">========== 多进程执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 0.82016921043396</span><br></pre></td></tr></table></figure>\n<p>在执行计算密集型任务时，多进程的方式明显比多线程更好。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">Python进阶：聊聊IO密集型任务、计算密集型任务，以及多线程、多进程</a>  <a href=\"http://blog.chinaunix.net/uid-12014716-id-5691776.html\" target=\"_blank\" rel=\"noopener\">为什么在python里推荐使用多进程而不是多线程？–转同事的一篇文章</a>  <a href=\"https://zhuanlan.zhihu.com/p/20167077?columnSlug=auxten\" target=\"_blank\" rel=\"noopener\">Python编程（二）：Python进程、线程那点事儿</a>  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"I-O密集型任务-VS-计算密集型任务\"><a href=\"#I-O密集型任务-VS-计算密集型任务\" class=\"headerlink\" title=\"I/O密集型任务 VS 计算密集型任务\"></a>I/O密集型任务 VS 计算密集型任务</h3><p>所谓 I/O 密集型任务，是指磁盘 I/O、网络 I/O 占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用 sleep 达到 I/O 密集型任务的目的。</p>\n<p>所谓计算密集型任务，是指 CPU 计算占主要的任务，CPU 一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等。</p>\n<h3 id=\"多线程-VS-多进程\"><a href=\"#多线程-VS-多进程\" class=\"headerlink\" title=\"多线程 VS 多进程\"></a>多线程 VS 多进程</h3><p>Python中比较常见的并发方式主要有两种：多线程和多进程。</p>\n<h4 id=\"GIL\"><a href=\"#GIL\" class=\"headerlink\" title=\"GIL\"></a>GIL</h4><p>GIL 的全称是 Global Interpreter Lock (全局解释器锁)，来源是 python 设计之初的考虑，为了数据安全所做的决定。在Python多线程下，每个线程的执行方式：</p>\n<ul>\n<li>获取GIL ；</li>\n<li>执行代码直到sleep或者是python虚拟机将其挂起；</li>\n<li>释放GIL。</li>\n</ul>\n<p>可见，某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是“通行证”，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入 CPU 执行。</p>\n<p><strong>注意：</strong>多核多线程不一定比单核多线程更好。原因是单核下多线程，每次释放 GIL，唤醒的那个线程都能获取到 GIL 锁，所以能够无缝执行，但多核下，CPU0 释放 GIL 后，其他 CPU 上的线程都会进行竞争，但 GIL 可能会马上又被 CPU0 拿到，导致其他几个 CPU 上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸，导致效率更低。</p>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><p>多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于 Python 中使用了全局解释锁 GIL 的概念，导致 Python 中的多线程并不是并行执行，而是“交替执行”。类似于下图：（图片转自网络，侵删）</p>\n<p><img src=\"/images/2017-7-15 160518.png\" alt=\"2017-7-15 160518\"></p>\n<p>所以 Python 中的多线程适合 I/O 密集型任务，而不适合计算密集型任务。</p>\n<p>Python 提供两组多线程接口，一是 thread 模块 _thread，提供低等级接口。二是 threading 模块，提供更容易使用的基于对象的接口，可以继承 Thread 对象来实现线程，此外其还提供了其它线程相关的对象，例如 Timer，Lock 等。</p>\n<h4 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h4><p>由于 Python 中 GIL 的原因，对于计算密集型任务，Python 下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU 资源。当然同一时间执行的进程数量取决你电脑的 CPU 核心数。</p>\n<p><img src=\"/images/2017-7-15 160641.png\" alt=\"2017-7-15 160641\"></p>\n<p>Python 中的进程模块为 mutliprocess 模块，提供了很多容易使用的基于对象的接口。另外它提供了封装好的管道和队列，可以方便的在进程间传递消息。Python 还提供了进程池 Pool 对象，可以方便的管理和控制线程。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>这里通过一个实例，说明多线程适合IO密集型任务，多进程适合计算密集型任务。</p>\n<p>首先定义一个队列，并定义初始化队列的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义全局变量Queue，与Queue.Queue()的不同之处在于，multiprocessing.Queue()支持跨进程使用</span><br><span class=\"line\">g_queue = multiprocessing.Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">def init_queue():</span><br><span class=\"line\">    print(&quot;init g_queue start&quot;)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        g_queue.get()</span><br><span class=\"line\">    for _index in range(10):</span><br><span class=\"line\">        g_queue.put(_index)</span><br><span class=\"line\">    print(&quot;init g_queue end&quot;)</span><br><span class=\"line\">    return</span><br></pre></td></tr></table></figure>\n<p>然后定义 I/O 密集型任务和计算密集型任务，分别从队列中获取任务数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义一个IO密集型任务：利用time.sleep()</span><br><span class=\"line\">def task_io(task_id):</span><br><span class=\"line\">    print(&quot;IOTask[%s] start&quot; % task_id)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            data = g_queue.get(block=True, timeout=1)</span><br><span class=\"line\">            print(&quot;IOTask[%s] get data: %s&quot; % (task_id, data))</span><br><span class=\"line\">        except Exception as ex:</span><br><span class=\"line\">            print(&quot;IOTask[%s] error: %s&quot; % (task_id, str(ex)))</span><br><span class=\"line\">    print(&quot;IOTask[%s] end&quot; % task_id)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">g_search_list = list(range(10000))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 定义一个计算密集型任务：利用一些复杂加减乘除、列表查找等</span><br><span class=\"line\">def task_cpu(task_id):</span><br><span class=\"line\">    print(&quot;CPUTask[%s] start&quot; % task_id)</span><br><span class=\"line\">    while not g_queue.empty():</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        for i in range(10000):</span><br><span class=\"line\">            count += pow(3 * 2, 3 * 2) if i in g_search_list else 0</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            data = g_queue.get(block=True, timeout=1)</span><br><span class=\"line\">            print(&quot;CPUTask[%s] get data: %s&quot; % (task_id, data))</span><br><span class=\"line\">        except Exception as excep:</span><br><span class=\"line\">            print(&quot;CPUTask[%s] error: %s&quot; % (task_id, str(excep)))</span><br><span class=\"line\">    print(&quot;CPUTask[%s] end&quot; % task_id)</span><br><span class=\"line\">    return task_id</span><br></pre></td></tr></table></figure>\n<p>准备完上述代码之后，进行试验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    print(&quot;cpu count:&quot;, multiprocessing.cpu_count(), &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 直接执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_io(0)</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多线程执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_io, args=(i,)) for i in range(4)]</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        if t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多进程执行IO密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_io, args=(i,)) for i in range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        if p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 直接执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    task_cpu(0)</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多线程执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    thread_list = [threading.Thread(target=task_cpu, args=(i,)) for i in range(4)]</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    for t in thread_list:</span><br><span class=\"line\">        if t.is_alive():</span><br><span class=\"line\">            t.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;========== 多进程执行计算密集型任务 ==========&quot;)</span><br><span class=\"line\">    init_queue()</span><br><span class=\"line\">    time_0 = time.time()</span><br><span class=\"line\">    process_list = [multiprocessing.Process(target=task_cpu, args=(i,)) for i in range(multiprocessing.cpu_count())]</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    for p in process_list:</span><br><span class=\"line\">        if p.is_alive():</span><br><span class=\"line\">            p.join()</span><br><span class=\"line\">    print(&quot;结束：&quot;, time.time() - time_0, &quot;\\n&quot;)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========== 直接执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 10.041141033172607 </span><br><span class=\"line\">========== 多线程执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 5.073023557662964 </span><br><span class=\"line\">========== 多进程执行IO密集型任务 ==========</span><br><span class=\"line\">结束： 1.1165637969970703 </span><br><span class=\"line\"></span><br><span class=\"line\">========== 直接执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 36.41951608657837 </span><br><span class=\"line\">========== 多线程执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 47.48710823059082 </span><br><span class=\"line\">========== 多进程执行计算密集型任务 ==========</span><br><span class=\"line\">结束： 0.82016921043396</span><br></pre></td></tr></table></figure>\n<p>在执行计算密集型任务时，多进程的方式明显比多线程更好。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24283040\" target=\"_blank\" rel=\"noopener\">Python进阶：聊聊IO密集型任务、计算密集型任务，以及多线程、多进程</a>  <a href=\"http://blog.chinaunix.net/uid-12014716-id-5691776.html\" target=\"_blank\" rel=\"noopener\">为什么在python里推荐使用多进程而不是多线程？–转同事的一篇文章</a>  <a href=\"https://zhuanlan.zhihu.com/p/20167077?columnSlug=auxten\" target=\"_blank\" rel=\"noopener\">Python编程（二）：Python进程、线程那点事儿</a>  </p>\n</blockquote>\n"},{"title":"GF-CLI学习系列","date":"2020-10-27T07:13:50.000Z","_content":"\n#### gen\n\n该命令用以自动化从数据库直接生成模型文件。\n\n该命令将会根据数据表名（注意：所以要先在数据里建好表）生成对应的目录，该目录名称即数据表包名。\n\n目录下自动生成3个文件：\n\n- 数据表名.go 自定义文件，开发者可以自由定义填充的代码文件，仅会生成一次，每一次模型生成不会覆盖\n- 数据表名\\_entity.go 表结构文件，根据数据表结构生成的结构体定义文件，包含字段注释。数据表在外部变更后，可使用gen命令重复生成更新该文件\n- 数据表名\\_model.go 表模型文件，为数据表提供了许多便捷的CURD操作方法，并可直接查询返回该表的结构体对象。数据表在外部变更后，可使用gen命令重复生成更新该文件\n\n使用方式：`gf gen model ./app/model -c config/config.toml -p sys_ -t sys_users`\n\n命令说明：\n\n- ./app/model：在model生成的路径\n- -c config/config.toml：在这个配置里找database数据库连接配置 需要写好mysql的配置信息\n- -p sys_：去除生成文件目录的sys前缀 如果不加这个参数就会按数据库名生成目录和文件名 如：sys_users\n- -t sys_users：要生成model的数据表文件名","source":"_posts/gf-cli-series-0-md.md","raw":"---\ntitle: GF-CLI学习系列\ndate: 2020-10-27 15:13:50\ntags:\n - gf\n - gf-cli\ncategories:\n - gf-cli\n---\n\n#### gen\n\n该命令用以自动化从数据库直接生成模型文件。\n\n该命令将会根据数据表名（注意：所以要先在数据里建好表）生成对应的目录，该目录名称即数据表包名。\n\n目录下自动生成3个文件：\n\n- 数据表名.go 自定义文件，开发者可以自由定义填充的代码文件，仅会生成一次，每一次模型生成不会覆盖\n- 数据表名\\_entity.go 表结构文件，根据数据表结构生成的结构体定义文件，包含字段注释。数据表在外部变更后，可使用gen命令重复生成更新该文件\n- 数据表名\\_model.go 表模型文件，为数据表提供了许多便捷的CURD操作方法，并可直接查询返回该表的结构体对象。数据表在外部变更后，可使用gen命令重复生成更新该文件\n\n使用方式：`gf gen model ./app/model -c config/config.toml -p sys_ -t sys_users`\n\n命令说明：\n\n- ./app/model：在model生成的路径\n- -c config/config.toml：在这个配置里找database数据库连接配置 需要写好mysql的配置信息\n- -p sys_：去除生成文件目录的sys前缀 如果不加这个参数就会按数据库名生成目录和文件名 如：sys_users\n- -t sys_users：要生成model的数据表文件名","slug":"gf-cli-series-0-md","published":1,"updated":"2020-10-27T10:44:03.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepsx0019molc8ed9xk9l","content":"<h4 id=\"gen\"><a href=\"#gen\" class=\"headerlink\" title=\"gen\"></a>gen</h4><p>该命令用以自动化从数据库直接生成模型文件。</p>\n<p>该命令将会根据数据表名（注意：所以要先在数据里建好表）生成对应的目录，该目录名称即数据表包名。</p>\n<p>目录下自动生成3个文件：</p>\n<ul>\n<li>数据表名.go 自定义文件，开发者可以自由定义填充的代码文件，仅会生成一次，每一次模型生成不会覆盖</li>\n<li>数据表名_entity.go 表结构文件，根据数据表结构生成的结构体定义文件，包含字段注释。数据表在外部变更后，可使用gen命令重复生成更新该文件</li>\n<li>数据表名_model.go 表模型文件，为数据表提供了许多便捷的CURD操作方法，并可直接查询返回该表的结构体对象。数据表在外部变更后，可使用gen命令重复生成更新该文件</li>\n</ul>\n<p>使用方式：<code>gf gen model ./app/model -c config/config.toml -p sys_ -t sys_users</code></p>\n<p>命令说明：</p>\n<ul>\n<li>./app/model：在model生成的路径</li>\n<li>-c config/config.toml：在这个配置里找database数据库连接配置 需要写好mysql的配置信息</li>\n<li>-p sys_：去除生成文件目录的sys前缀 如果不加这个参数就会按数据库名生成目录和文件名 如：sys_users</li>\n<li>-t sys_users：要生成model的数据表文件名</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"gen\"><a href=\"#gen\" class=\"headerlink\" title=\"gen\"></a>gen</h4><p>该命令用以自动化从数据库直接生成模型文件。</p>\n<p>该命令将会根据数据表名（注意：所以要先在数据里建好表）生成对应的目录，该目录名称即数据表包名。</p>\n<p>目录下自动生成3个文件：</p>\n<ul>\n<li>数据表名.go 自定义文件，开发者可以自由定义填充的代码文件，仅会生成一次，每一次模型生成不会覆盖</li>\n<li>数据表名_entity.go 表结构文件，根据数据表结构生成的结构体定义文件，包含字段注释。数据表在外部变更后，可使用gen命令重复生成更新该文件</li>\n<li>数据表名_model.go 表模型文件，为数据表提供了许多便捷的CURD操作方法，并可直接查询返回该表的结构体对象。数据表在外部变更后，可使用gen命令重复生成更新该文件</li>\n</ul>\n<p>使用方式：<code>gf gen model ./app/model -c config/config.toml -p sys_ -t sys_users</code></p>\n<p>命令说明：</p>\n<ul>\n<li>./app/model：在model生成的路径</li>\n<li>-c config/config.toml：在这个配置里找database数据库连接配置 需要写好mysql的配置信息</li>\n<li>-p sys_：去除生成文件目录的sys前缀 如果不加这个参数就会按数据库名生成目录和文件名 如：sys_users</li>\n<li>-t sys_users：要生成model的数据表文件名</li>\n</ul>\n"},{"title":"Linux命令-cd","date":"2018-04-14T23:48:17.000Z","_content":"\nLinux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 `home` 目录。\n\n另外，\"~\" 也表示为 `home` 目录的意思，\".\" 则是表示当前所在的目录，\"..\" 则表示目前目录位置的上一层目录。\n\n#### 命令格式\n\n```\ncd [dir](dir表示要切换的目录)\n```\n\n#### 命令功能\n\n切换当前目录至dir。\n\n#### 命令参数\n\n暂无\n\n#### 使用示例\n\n- `cd / | cd //`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd /\n[root@hcdn-others-worker-dev100-bjlt /]# pwd\n/\n```\n\n进入系统根目录\n\n- `cd ..`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd ..\n[root@hcdn-others-worker-dev100-bjlt usr]# pwd\n/root/usr\n```\n\n切换到父目录\n\n- `cd -`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd -\n/root/usr\n[root@hcdn-others-worker-dev100-bjlt usr]# cd\n[root@hcdn-others-worker-dev100-bjlt ~]# cd -\n/root/usr\n```\n\n切换到上次使用的目录\n\n- `cd`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd\n[root@hcdn-others-worker-dev100-bjlt ~]# pwd\n/root\n```\n\n切换到当前用户主目录\n\n- `cd ~`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# cd ~\n[root@hcdn-others-worker-dev100-bjlt ~]# pwd\n/root\n```\n\n切换到当前用户主目录\n\n- `cd /root/usr/local/`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n```\n\n切换到指定目录\n\n- `cd !$`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# cd -\n/root\n[root@hcdn-others-worker-dev100-bjlt ~]# cd !$\ncd -\n/root/usr/local\n```\n\n将上一命令得参数作为 `cd` 参数使用\n\n\n\nRead More: \n\n> [每天一个linux命令(2)：cd命令](http://www.cnblogs.com/peida/archive/2012/10/24/2736501.html) [Linux cd命令](http://www.runoob.com/linux/linux-comm-cd.html) ","source":"_posts/linuxcd.md","raw":"---\ntitle: Linux命令-cd\ndate: 2018-04-15 07:48:17\ntags:\n - 命令\n - Linux\n - cd\ncategories:\n - Linux/Unix\n---\n\nLinux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 `home` 目录。\n\n另外，\"~\" 也表示为 `home` 目录的意思，\".\" 则是表示当前所在的目录，\"..\" 则表示目前目录位置的上一层目录。\n\n#### 命令格式\n\n```\ncd [dir](dir表示要切换的目录)\n```\n\n#### 命令功能\n\n切换当前目录至dir。\n\n#### 命令参数\n\n暂无\n\n#### 使用示例\n\n- `cd / | cd //`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd /\n[root@hcdn-others-worker-dev100-bjlt /]# pwd\n/\n```\n\n进入系统根目录\n\n- `cd ..`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd ..\n[root@hcdn-others-worker-dev100-bjlt usr]# pwd\n/root/usr\n```\n\n切换到父目录\n\n- `cd -`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd -\n/root/usr\n[root@hcdn-others-worker-dev100-bjlt usr]# cd\n[root@hcdn-others-worker-dev100-bjlt ~]# cd -\n/root/usr\n```\n\n切换到上次使用的目录\n\n- `cd`\n\n```\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n[root@hcdn-others-worker-dev100-bjlt local]# cd\n[root@hcdn-others-worker-dev100-bjlt ~]# pwd\n/root\n```\n\n切换到当前用户主目录\n\n- `cd ~`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# cd ~\n[root@hcdn-others-worker-dev100-bjlt ~]# pwd\n/root\n```\n\n切换到当前用户主目录\n\n- `cd /root/usr/local/`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# pwd\n/root/usr/local\n```\n\n切换到指定目录\n\n- `cd !$`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/\n[root@hcdn-others-worker-dev100-bjlt local]# cd -\n/root\n[root@hcdn-others-worker-dev100-bjlt ~]# cd !$\ncd -\n/root/usr/local\n```\n\n将上一命令得参数作为 `cd` 参数使用\n\n\n\nRead More: \n\n> [每天一个linux命令(2)：cd命令](http://www.cnblogs.com/peida/archive/2012/10/24/2736501.html) [Linux cd命令](http://www.runoob.com/linux/linux-comm-cd.html) ","slug":"linuxcd","published":1,"updated":"2020-10-25T06:43:32.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruept1001dmolcnyg1xvz0","content":"<p>Linux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 <code>home</code> 目录。</p>\n<p>另外，”~” 也表示为 <code>home</code> 目录的意思，”.” 则是表示当前所在的目录，”..” 则表示目前目录位置的上一层目录。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [dir](dir表示要切换的目录)</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>切换当前目录至dir。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><p>暂无</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li><code>cd / | cd //</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd /</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt /]# pwd</span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n<p>进入系统根目录</p>\n<ul>\n<li><code>cd ..</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd ..</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt usr]# pwd</span><br><span class=\"line\">/root/usr</span><br></pre></td></tr></table></figure>\n<p>切换到父目录</p>\n<ul>\n<li><code>cd -</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd -</span><br><span class=\"line\">/root/usr</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt usr]# cd</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd -</span><br><span class=\"line\">/root/usr</span><br></pre></td></tr></table></figure>\n<p>切换到上次使用的目录</p>\n<ul>\n<li><code>cd</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<p>切换到当前用户主目录</p>\n<ul>\n<li><code>cd ~</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd ~</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<p>切换到当前用户主目录</p>\n<ul>\n<li><code>cd /root/usr/local/</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br></pre></td></tr></table></figure>\n<p>切换到指定目录</p>\n<ul>\n<li><code>cd !$</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd -</span><br><span class=\"line\">/root</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd !$</span><br><span class=\"line\">cd -</span><br><span class=\"line\">/root/usr/local</span><br></pre></td></tr></table></figure>\n<p>将上一命令得参数作为 <code>cd</code> 参数使用</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/24/2736501.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令(2)：cd命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-cd.html\" target=\"_blank\" rel=\"noopener\">Linux cd命令</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 <code>home</code> 目录。</p>\n<p>另外，”~” 也表示为 <code>home</code> 目录的意思，”.” 则是表示当前所在的目录，”..” 则表示目前目录位置的上一层目录。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [dir](dir表示要切换的目录)</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>切换当前目录至dir。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><p>暂无</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li><code>cd / | cd //</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd /</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt /]# pwd</span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n<p>进入系统根目录</p>\n<ul>\n<li><code>cd ..</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd ..</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt usr]# pwd</span><br><span class=\"line\">/root/usr</span><br></pre></td></tr></table></figure>\n<p>切换到父目录</p>\n<ul>\n<li><code>cd -</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd -</span><br><span class=\"line\">/root/usr</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt usr]# cd</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd -</span><br><span class=\"line\">/root/usr</span><br></pre></td></tr></table></figure>\n<p>切换到上次使用的目录</p>\n<ul>\n<li><code>cd</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<p>切换到当前用户主目录</p>\n<ul>\n<li><code>cd ~</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd ~</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<p>切换到当前用户主目录</p>\n<ul>\n<li><code>cd /root/usr/local/</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# pwd</span><br><span class=\"line\">/root/usr/local</span><br></pre></td></tr></table></figure>\n<p>切换到指定目录</p>\n<ul>\n<li><code>cd !$</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt local]# cd -</span><br><span class=\"line\">/root</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# cd !$</span><br><span class=\"line\">cd -</span><br><span class=\"line\">/root/usr/local</span><br></pre></td></tr></table></figure>\n<p>将上一命令得参数作为 <code>cd</code> 参数使用</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/24/2736501.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令(2)：cd命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-cd.html\" target=\"_blank\" rel=\"noopener\">Linux cd命令</a> </p>\n</blockquote>\n"},{"title":"Linux命令-cp","date":"2018-01-04T14:11:57.000Z","_content":"\nLinux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 \n\n#### 命令格式\n\n```\ncp [options] source dest\ncp [options] source... directory\n```\n\n#### 命令功能\n\n将源文件复制至目标文件，或将多个源文件复制至目标目录。\n\n#### 命令参数\n\n| 参数      | 说明                                   |\n| ------- | ------------------------------------ |\n| -a      | 此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容 |\n| -b      | 为每个已存在的目标文件创建备份                      |\n| -d      | 复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式    |\n| -f      | 覆盖已经存在的目标文件而不给出提示                    |\n| -i      | 与-f选项相反，在覆盖目标文件之前给出提示                |\n| -H      | 跟随源文件中的命令行符号链接                       |\n| -l      | 不复制文件，只是生成链接文件                       |\n| -L      | 总是跟随符号链接                             |\n| -n      | 不要覆盖已存在的文件                           |\n| -P      | 不跟随源文件中的符号链接                         |\n| -p      | 除复制文件的内容外，还把修改时间和访问权限也复制到新文件中        |\n| -R / -r | 若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件    |\n| -s      | 复制时创建新的链接，类似于Windows系统中的快捷方式         |\n\n#### 使用示例\n\n- cp cplog.log test1/\n\n```\n复制前：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 12\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:00 test1\ndrwxr-xr-x 2 root root 4096 Jan  3 20:00 test2\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 0\n\n复制后：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log\n```\n\n在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  \n\n- cp cplog.log test1/\n\n```\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/\ncp: overwrite `test1/cplog.log'? y\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n```\n\n在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。\n\n- cp -a test1 test2\n\n```\n目的目录存在：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 12\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2\ntotal 4\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\n\n目的目录不存在：\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 16\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test3\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n```\n\n注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。\n\n- cp -s cplog.log cplog-1.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log \n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 16\nlrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -> cplog.log\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test3\n```\n\ncplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。\n\n\n\nRead More: \n\n> [每天一个linux命令（8）：cp 命令](http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html) [Linux cp命令](http://www.runoob.com/linux/linux-comm-cp.html) ","source":"_posts/linuxcp.md","raw":"---\ntitle: Linux命令-cp\ndate: 2018-01-04 22:11:57\ntags:\n - Linux\n - 命令\n - cp\ncategories:\n - Linux/Unix\n---\n\nLinux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 \n\n#### 命令格式\n\n```\ncp [options] source dest\ncp [options] source... directory\n```\n\n#### 命令功能\n\n将源文件复制至目标文件，或将多个源文件复制至目标目录。\n\n#### 命令参数\n\n| 参数      | 说明                                   |\n| ------- | ------------------------------------ |\n| -a      | 此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容 |\n| -b      | 为每个已存在的目标文件创建备份                      |\n| -d      | 复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式    |\n| -f      | 覆盖已经存在的目标文件而不给出提示                    |\n| -i      | 与-f选项相反，在覆盖目标文件之前给出提示                |\n| -H      | 跟随源文件中的命令行符号链接                       |\n| -l      | 不复制文件，只是生成链接文件                       |\n| -L      | 总是跟随符号链接                             |\n| -n      | 不要覆盖已存在的文件                           |\n| -P      | 不跟随源文件中的符号链接                         |\n| -p      | 除复制文件的内容外，还把修改时间和访问权限也复制到新文件中        |\n| -R / -r | 若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件    |\n| -s      | 复制时创建新的链接，类似于Windows系统中的快捷方式         |\n\n#### 使用示例\n\n- cp cplog.log test1/\n\n```\n复制前：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 12\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:00 test1\ndrwxr-xr-x 2 root root 4096 Jan  3 20:00 test2\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 0\n\n复制后：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log\n```\n\n在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  \n\n- cp cplog.log test1/\n\n```\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/\ncp: overwrite `test1/cplog.log'? y\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n```\n\n在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。\n\n- cp -a test1 test2\n\n```\n目的目录存在：\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 12\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2\ntotal 4\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\n\n目的目录不存在：\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 16\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test3\n[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/\ntotal 4\n-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log\n```\n\n注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。\n\n- cp -s cplog.log cplog-1.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log \n[root@hcdn-others-worker-dev100-bjlt testcp]# ll\ntotal 16\nlrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -> cplog.log\n-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test1\ndrwxr-xr-x 3 root root 4096 Jan  3 20:06 test2\ndrwxr-xr-x 2 root root 4096 Jan  3 20:01 test3\n```\n\ncplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。\n\n\n\nRead More: \n\n> [每天一个linux命令（8）：cp 命令](http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html) [Linux cp命令](http://www.runoob.com/linux/linux-comm-cp.html) ","slug":"linuxcp","published":1,"updated":"2020-10-25T06:43:32.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruept4001gmolc95gj14nq","content":"<p>Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 </p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [options] source dest</span><br><span class=\"line\">cp [options] source... directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>为每个已存在的目标文件创建备份</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>覆盖已经存在的目标文件而不给出提示</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>与-f选项相反，在覆盖目标文件之前给出提示</td>\n</tr>\n<tr>\n<td>-H</td>\n<td>跟随源文件中的命令行符号链接</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>不复制文件，只是生成链接文件</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>总是跟随符号链接</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>不要覆盖已存在的文件</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>不跟随源文件中的符号链接</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td>\n</tr>\n<tr>\n<td>-R / -r</td>\n<td>若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>复制时创建新的链接，类似于Windows系统中的快捷方式</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>cp cplog.log test1/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制前：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test1</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 0</span><br><span class=\"line\"></span><br><span class=\"line\">复制后：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log</span><br></pre></td></tr></table></figure>\n<p>在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  </p>\n<ul>\n<li>cp cplog.log test1/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/</span><br><span class=\"line\">cp: overwrite `test1/cplog.log&apos;? y</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br></pre></td></tr></table></figure>\n<p>在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。</p>\n<ul>\n<li>cp -a test1 test2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目的目录存在：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2</span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\"></span><br><span class=\"line\">目的目录不存在：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br></pre></td></tr></table></figure>\n<p>注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</p>\n<ul>\n<li>cp -s cplog.log cplog-1.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</span><br></pre></td></tr></table></figure>\n<p>cplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（8）：cp 命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-cp.html\" target=\"_blank\" rel=\"noopener\">Linux cp命令</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 </p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [options] source dest</span><br><span class=\"line\">cp [options] source... directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>为每个已存在的目标文件创建备份</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>覆盖已经存在的目标文件而不给出提示</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>与-f选项相反，在覆盖目标文件之前给出提示</td>\n</tr>\n<tr>\n<td>-H</td>\n<td>跟随源文件中的命令行符号链接</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>不复制文件，只是生成链接文件</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>总是跟随符号链接</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>不要覆盖已存在的文件</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>不跟随源文件中的符号链接</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td>\n</tr>\n<tr>\n<td>-R / -r</td>\n<td>若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>复制时创建新的链接，类似于Windows系统中的快捷方式</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>cp cplog.log test1/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制前：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test1</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 0</span><br><span class=\"line\"></span><br><span class=\"line\">复制后：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log</span><br></pre></td></tr></table></figure>\n<p>在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  </p>\n<ul>\n<li>cp cplog.log test1/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/</span><br><span class=\"line\">cp: overwrite `test1/cplog.log&apos;? y</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br></pre></td></tr></table></figure>\n<p>在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。</p>\n<ul>\n<li>cp -a test1 test2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目的目录存在：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2</span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\"></span><br><span class=\"line\">目的目录不存在：</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</span><br></pre></td></tr></table></figure>\n<p>注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</p>\n<ul>\n<li>cp -s cplog.log cplog-1.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</span><br></pre></td></tr></table></figure>\n<p>cplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（8）：cp 命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-cp.html\" target=\"_blank\" rel=\"noopener\">Linux cp命令</a> </p>\n</blockquote>\n"},{"title":"Linux命令-ln","date":"2018-01-04T14:14:10.000Z","_content":"\nLinux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。\n\n#### 命令格式\n\n```\nln [参数] [源文件或目录] [目标文件或目录]\n```\n\n#### 命令功能\n\nLinux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。\n\n不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。\n\n软链接\n\n- 软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式\n- 软链接可以 跨文件系统 ，硬链接不可以\n- 软链接可以对一个不存在的文件名进行链接\n- 软链接可以对目录进行链接\n\n硬链接\n\n- 硬链接，以文件副本的形式存在。但不占用实际空间\n- 不允许给目录创建硬链接\n- 硬链接只有在同一个文件系统中才能创建\n\n注意\n\n- ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；\n- ln的链接又分软链接和硬链接两种，软链接就是`ln –s 源文件 目标文件`，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接` ln 源文件 目标文件`，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；\n- ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。\n\n#### 命令参数\n\n| 参数        | 说明                                    |\n| --------- | ------------------------------------- |\n| -b        | 删除，覆盖以前建立的链接                          |\n| -d        | 允许超级用户制作目录的硬链接                        |\n| -f        | 强制执行                                  |\n| -i        | 交互模式，文件存在则提示用户是否覆盖                    |\n| -n        | 把符号链接视为一般目录                           |\n| -s        | 软链接(符号链接)                             |\n| -v        | 显示详细的处理过程                             |\n| -S        | \"-S<字尾备份字符串> \"或 \"--suffix=<字尾备份字符串>\"  |\n| -V        | \"-V<备份方式>\"或\"--version-control=<备份方式>\" |\n| --help    | 显示帮助信息                                |\n| --version | 显示版本信息                                |\n\n#### 使用示例\n\n- ln -s cplog.log cplog-link.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 4\nlrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log\n```\n\n为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。\n\n- ln cplog.log cplog-hard.log \n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 8\n-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log\nlrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log\n```\n\n为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。\n\n- ln cplog.log test/\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/\n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 12\n-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log\nlrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:31 test\n[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 12\n-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log\nlrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:31 test\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test/\ntotal 4\n-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log\n```\n\n将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。\n\n- ln -sv /root/testln/test /root/testln/test2\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test/\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2\n`test2/test' -> `test'\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\nlrwxrwxrwx 1 root root 4 Jan  3 20:38 test -> test\n[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test \n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2\n`/root/testln/test2/test' -> `/root/testln/test'\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\nlrwxrwxrwx 1 root root 17 Jan  3 20:39 test -> /root/testln/test\n```\n\n创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。\n\n目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。\n\n\n\nRead More: \n\n> [每天一个linux命令（35）：ln 命令](http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html) [Linux ln命令](http://www.runoob.com/linux/linux-comm-ln.html) ","source":"_posts/linuxln.md","raw":"---\ntitle: Linux命令-ln\ndate: 2018-01-04 22:14:10\ntags:\n - Linux\n - 命令\n - ln\ncategories:\n - Linux/Unix\n---\n\nLinux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。\n\n#### 命令格式\n\n```\nln [参数] [源文件或目录] [目标文件或目录]\n```\n\n#### 命令功能\n\nLinux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。\n\n不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。\n\n软链接\n\n- 软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式\n- 软链接可以 跨文件系统 ，硬链接不可以\n- 软链接可以对一个不存在的文件名进行链接\n- 软链接可以对目录进行链接\n\n硬链接\n\n- 硬链接，以文件副本的形式存在。但不占用实际空间\n- 不允许给目录创建硬链接\n- 硬链接只有在同一个文件系统中才能创建\n\n注意\n\n- ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；\n- ln的链接又分软链接和硬链接两种，软链接就是`ln –s 源文件 目标文件`，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接` ln 源文件 目标文件`，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；\n- ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。\n\n#### 命令参数\n\n| 参数        | 说明                                    |\n| --------- | ------------------------------------- |\n| -b        | 删除，覆盖以前建立的链接                          |\n| -d        | 允许超级用户制作目录的硬链接                        |\n| -f        | 强制执行                                  |\n| -i        | 交互模式，文件存在则提示用户是否覆盖                    |\n| -n        | 把符号链接视为一般目录                           |\n| -s        | 软链接(符号链接)                             |\n| -v        | 显示详细的处理过程                             |\n| -S        | \"-S<字尾备份字符串> \"或 \"--suffix=<字尾备份字符串>\"  |\n| -V        | \"-V<备份方式>\"或\"--version-control=<备份方式>\" |\n| --help    | 显示帮助信息                                |\n| --version | 显示版本信息                                |\n\n#### 使用示例\n\n- ln -s cplog.log cplog-link.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 4\nlrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log\n```\n\n为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。\n\n- ln cplog.log cplog-hard.log \n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 8\n-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log\nlrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log\n```\n\n为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。\n\n- ln cplog.log test/\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/\n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 12\n-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log\nlrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:31 test\n[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log \n[root@hcdn-others-worker-dev100-bjlt testln]# ll\ntotal 12\n-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log\nlrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -> cplog.log\n-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log\ndrwxr-xr-x 2 root root 4096 Jan  3 20:31 test\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test/\ntotal 4\n-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log\n```\n\n将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。\n\n- ln -sv /root/testln/test /root/testln/test2\n\n```\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test/\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2\n`test2/test' -> `test'\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\nlrwxrwxrwx 1 root root 4 Jan  3 20:38 test -> test\n[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test \n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\n[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2\n`/root/testln/test2/test' -> `/root/testln/test'\n[root@hcdn-others-worker-dev100-bjlt testln]# ll test2\ntotal 0\nlrwxrwxrwx 1 root root 17 Jan  3 20:39 test -> /root/testln/test\n```\n\n创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。\n\n目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。\n\n\n\nRead More: \n\n> [每天一个linux命令（35）：ln 命令](http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html) [Linux ln命令](http://www.runoob.com/linux/linux-comm-ln.html) ","slug":"linuxln","published":1,"updated":"2020-10-25T06:43:32.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruept9001lmolc6sse1mu4","content":"<p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln [参数] [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>Linux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p>\n<p>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。</p>\n<p>软链接</p>\n<ul>\n<li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li>\n<li>软链接可以 跨文件系统 ，硬链接不可以</li>\n<li>软链接可以对一个不存在的文件名进行链接</li>\n<li>软链接可以对目录进行链接</li>\n</ul>\n<p>硬链接</p>\n<ul>\n<li>硬链接，以文件副本的形式存在。但不占用实际空间</li>\n<li>不允许给目录创建硬链接</li>\n<li>硬链接只有在同一个文件系统中才能创建</li>\n</ul>\n<p>注意</p>\n<ul>\n<li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li>\n<li>ln的链接又分软链接和硬链接两种，软链接就是<code>ln –s 源文件 目标文件</code>，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接<code>ln 源文件 目标文件</code>，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；</li>\n<li>ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li>\n</ul>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b</td>\n<td>删除，覆盖以前建立的链接</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>允许超级用户制作目录的硬链接</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互模式，文件存在则提示用户是否覆盖</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>把符号链接视为一般目录</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>软链接(符号链接)</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示详细的处理过程</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>“-S&lt;字尾备份字符串&gt; “或 “–suffix=&lt;字尾备份字符串&gt;”</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>“-V&lt;备份方式&gt;”或”–version-control=&lt;备份方式&gt;”</td>\n</tr>\n<tr>\n<td>–help</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ln -s cplog.log cplog-link.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 4</span><br><span class=\"line\">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log</span><br></pre></td></tr></table></figure>\n<p>为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。</p>\n<ul>\n<li>ln cplog.log cplog-hard.log </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log</span><br></pre></td></tr></table></figure>\n<p>为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。</p>\n<ul>\n<li>ln cplog.log test/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log</span><br></pre></td></tr></table></figure>\n<p>将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。</p>\n<ul>\n<li>ln -sv /root/testln/test /root/testln/test2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2</span><br><span class=\"line\">`test2/test&apos; -&gt; `test&apos;</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 Jan  3 20:38 test -&gt; test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2</span><br><span class=\"line\">`/root/testln/test2/test&apos; -&gt; `/root/testln/test&apos;</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Jan  3 20:39 test -&gt; /root/testln/test</span><br></pre></td></tr></table></figure>\n<p>创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。</p>\n<p>目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（35）：ln 命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ln.html\" target=\"_blank\" rel=\"noopener\">Linux ln命令</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln [参数] [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>Linux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p>\n<p>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。</p>\n<p>软链接</p>\n<ul>\n<li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li>\n<li>软链接可以 跨文件系统 ，硬链接不可以</li>\n<li>软链接可以对一个不存在的文件名进行链接</li>\n<li>软链接可以对目录进行链接</li>\n</ul>\n<p>硬链接</p>\n<ul>\n<li>硬链接，以文件副本的形式存在。但不占用实际空间</li>\n<li>不允许给目录创建硬链接</li>\n<li>硬链接只有在同一个文件系统中才能创建</li>\n</ul>\n<p>注意</p>\n<ul>\n<li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li>\n<li>ln的链接又分软链接和硬链接两种，软链接就是<code>ln –s 源文件 目标文件</code>，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接<code>ln 源文件 目标文件</code>，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；</li>\n<li>ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li>\n</ul>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b</td>\n<td>删除，覆盖以前建立的链接</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>允许超级用户制作目录的硬链接</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互模式，文件存在则提示用户是否覆盖</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>把符号链接视为一般目录</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>软链接(符号链接)</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示详细的处理过程</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>“-S&lt;字尾备份字符串&gt; “或 “–suffix=&lt;字尾备份字符串&gt;”</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>“-V&lt;备份方式&gt;”或”–version-control=&lt;备份方式&gt;”</td>\n</tr>\n<tr>\n<td>–help</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ln -s cplog.log cplog-link.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 4</span><br><span class=\"line\">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log</span><br></pre></td></tr></table></figure>\n<p>为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。</p>\n<ul>\n<li>ln cplog.log cplog-hard.log </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log</span><br></pre></td></tr></table></figure>\n<p>为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。</p>\n<ul>\n<li>ln cplog.log test/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log</span><br><span class=\"line\">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</span><br><span class=\"line\">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log</span><br></pre></td></tr></table></figure>\n<p>将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。</p>\n<ul>\n<li>ln -sv /root/testln/test /root/testln/test2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2</span><br><span class=\"line\">`test2/test&apos; -&gt; `test&apos;</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 4 Jan  3 20:38 test -&gt; test</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2</span><br><span class=\"line\">`/root/testln/test2/test&apos; -&gt; `/root/testln/test&apos;</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 17 Jan  3 20:39 test -&gt; /root/testln/test</span><br></pre></td></tr></table></figure>\n<p>创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。</p>\n<p>目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（35）：ln 命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ln.html\" target=\"_blank\" rel=\"noopener\">Linux ln命令</a> </p>\n</blockquote>\n"},{"title":"Linux命令-ping","date":"2018-01-02T14:45:06.000Z","_content":"\n#### 命令格式\n\n```\nping [参数] [主机名称或IP地址]\n```\n\n#### 命令功能\n\nping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\nping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。\n\n#### 命令参数\n\n| 参数         | 说明                               |\n| ---------- | -------------------------------- |\n| -d         | 使用Socket的SO_DEBUG功能              |\n| -c <完成次数>  | 设置完成要求回应的次数                      |\n| -f         | 极限检测                             |\n| -i <间隔秒数>  | 指定收发信息的间隔时间                      |\n| -l <网络界面>  | 使用指定的网络界面送出数据包                   |\n| -l <前置载入>  | 设置在送出要求信息之前，先行发出的数据包             |\n| -n         | 只输出数值                            |\n| -p         | 设置填满数据包的范本样式                     |\n| -q         | 不显示指令执行过程，开头和结尾的相关信息除外           |\n| -r         | 忽略普通的Routing Table，直接将数据包送到远端主机上 |\n| -R         | 记录路由过程                           |\n| -s <数据包大小> | 设置数据包的大小                         |\n| -t <存活时间>  | 设置存活数值TTL的大小                     |\n| -v         | 详细显示指令的执行过程                      |\n\n#### 使用示例\n\n- ping 10.3.14.6\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms\n^C\n--- 10.3.14.62 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4990ms\nrtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms\n\n需要手动Ctrl+c终止\n```\n\nping通主机\n\n- ping 10.3.14.6\n\n```\nPING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.\nFrom 10.13.41.63 icmp_seq=1 Destination Host Unreachable\nFrom 10.13.41.634 icmp_seq=2 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=3 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=4 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=5 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=6 Destination Host Unreachable\n\n--- 10.3.14.6 ping statistics ---\n8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms\n, pipe 4\n```\n\nping不通主机\n\n- ping -c 10 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms\n64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms\n64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms\n64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms\n64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms\n64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms\n\n--- 10.3.14.62 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 9005ms\nrtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms\n```\n\nping指定次数\n\n- ping -c 10 -i 0.5 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms\n64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms\n64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms\n64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms\n64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms\n64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms\n\n--- 10.3.14.62 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 4506ms\nrtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms\n```\n\nping指定次数和时间间隔\n\n- ping -c 5 www.zhihu.com\n\n```\nPING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.\n64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms\n64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms\n64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms\n64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms\n64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms\n\n--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms\n```\n\n通过域名ping公网地址\n\n- ping -i 3 -s 1024 -t 255 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.\n1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms\n1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms\n1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms\n1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms\n1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms\n1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms\n1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms\n1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms\n1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms\n^C\n--- 10.3.14.62 ping statistics ---\n17 packets transmitted, 17 received, 0% packet loss, time 48798ms\nrtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms\n```\n\nping多参数使用\n\n\n\nRead More：\n\n> [每天一个linux命令（54）：ping命令](http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html) [Linux ping命令](http://www.runoob.com/linux/linux-comm-ping.html) ","source":"_posts/linuxping.md","raw":"---\ntitle: Linux命令-ping\ndate: 2018-01-02 22:45:06\ntags:\n - Linux\n - 命令\n - ping\ncategories:\n - Linux/Unix\n---\n\n#### 命令格式\n\n```\nping [参数] [主机名称或IP地址]\n```\n\n#### 命令功能\n\nping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\nping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。\n\n#### 命令参数\n\n| 参数         | 说明                               |\n| ---------- | -------------------------------- |\n| -d         | 使用Socket的SO_DEBUG功能              |\n| -c <完成次数>  | 设置完成要求回应的次数                      |\n| -f         | 极限检测                             |\n| -i <间隔秒数>  | 指定收发信息的间隔时间                      |\n| -l <网络界面>  | 使用指定的网络界面送出数据包                   |\n| -l <前置载入>  | 设置在送出要求信息之前，先行发出的数据包             |\n| -n         | 只输出数值                            |\n| -p         | 设置填满数据包的范本样式                     |\n| -q         | 不显示指令执行过程，开头和结尾的相关信息除外           |\n| -r         | 忽略普通的Routing Table，直接将数据包送到远端主机上 |\n| -R         | 记录路由过程                           |\n| -s <数据包大小> | 设置数据包的大小                         |\n| -t <存活时间>  | 设置存活数值TTL的大小                     |\n| -v         | 详细显示指令的执行过程                      |\n\n#### 使用示例\n\n- ping 10.3.14.6\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms\n^C\n--- 10.3.14.62 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4990ms\nrtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms\n\n需要手动Ctrl+c终止\n```\n\nping通主机\n\n- ping 10.3.14.6\n\n```\nPING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.\nFrom 10.13.41.63 icmp_seq=1 Destination Host Unreachable\nFrom 10.13.41.634 icmp_seq=2 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=3 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=4 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=5 Destination Host Unreachable\nFrom 10.13.41.63 icmp_seq=6 Destination Host Unreachable\n\n--- 10.3.14.6 ping statistics ---\n8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms\n, pipe 4\n```\n\nping不通主机\n\n- ping -c 10 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms\n64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms\n64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms\n64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms\n64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms\n64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms\n\n--- 10.3.14.62 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 9005ms\nrtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms\n```\n\nping指定次数\n\n- ping -c 10 -i 0.5 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.\n64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms\n64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms\n64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms\n64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms\n64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms\n64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms\n64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms\n64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms\n64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms\n64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms\n\n--- 10.3.14.62 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 4506ms\nrtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms\n```\n\nping指定次数和时间间隔\n\n- ping -c 5 www.zhihu.com\n\n```\nPING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.\n64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms\n64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms\n64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms\n64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms\n64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms\n\n--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms\n```\n\n通过域名ping公网地址\n\n- ping -i 3 -s 1024 -t 255 10.3.14.62\n\n```\nPING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.\n1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms\n1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms\n1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms\n1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms\n1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms\n1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms\n1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms\n1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms\n1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms\n1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms\n1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms\n^C\n--- 10.3.14.62 ping statistics ---\n17 packets transmitted, 17 received, 0% packet loss, time 48798ms\nrtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms\n```\n\nping多参数使用\n\n\n\nRead More：\n\n> [每天一个linux命令（54）：ping命令](http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html) [Linux ping命令](http://www.runoob.com/linux/linux-comm-ping.html) ","slug":"linuxping","published":1,"updated":"2020-10-25T06:43:32.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueptc001mmolc9i6byde4","content":"<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping [参数] [主机名称或IP地址]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p>\n<p>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>使用Socket的SO_DEBUG功能</td>\n</tr>\n<tr>\n<td>-c &lt;完成次数&gt;</td>\n<td>设置完成要求回应的次数</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>极限检测</td>\n</tr>\n<tr>\n<td>-i &lt;间隔秒数&gt;</td>\n<td>指定收发信息的间隔时间</td>\n</tr>\n<tr>\n<td>-l &lt;网络界面&gt;</td>\n<td>使用指定的网络界面送出数据包</td>\n</tr>\n<tr>\n<td>-l &lt;前置载入&gt;</td>\n<td>设置在送出要求信息之前，先行发出的数据包</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>只输出数值</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>设置填满数据包的范本样式</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>不显示指令执行过程，开头和结尾的相关信息除外</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>忽略普通的Routing Table，直接将数据包送到远端主机上</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>记录路由过程</td>\n</tr>\n<tr>\n<td>-s &lt;数据包大小&gt;</td>\n<td>设置数据包的大小</td>\n</tr>\n<tr>\n<td>-t &lt;存活时间&gt;</td>\n<td>设置存活数值TTL的大小</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示指令的执行过程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ping 10.3.14.6</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, time 4990ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms</span><br><span class=\"line\"></span><br><span class=\"line\">需要手动Ctrl+c终止</span><br></pre></td></tr></table></figure>\n<p>ping通主机</p>\n<ul>\n<li>ping 10.3.14.6</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=1 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.634 icmp_seq=2 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=3 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=4 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=5 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=6 Destination Host Unreachable</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.6 ping statistics ---</span><br><span class=\"line\">8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms</span><br><span class=\"line\">, pipe 4</span><br></pre></td></tr></table></figure>\n<p>ping不通主机</p>\n<ul>\n<li>ping -c 10 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 received, 0% packet loss, time 9005ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms</span><br></pre></td></tr></table></figure>\n<p>ping指定次数</p>\n<ul>\n<li>ping -c 10 -i 0.5 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 received, 0% packet loss, time 4506ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms</span><br></pre></td></tr></table></figure>\n<p>ping指定次数和时间间隔</p>\n<ul>\n<li>ping -c 5 <a href=\"http://www.zhihu.com\" target=\"_blank\" rel=\"noopener\">www.zhihu.com</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, time 4006ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms</span><br></pre></td></tr></table></figure>\n<p>通过域名ping公网地址</p>\n<ul>\n<li>ping -i 3 -s 1024 -t 255 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">17 packets transmitted, 17 received, 0% packet loss, time 48798ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms</span><br></pre></td></tr></table></figure>\n<p>ping多参数使用</p>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（54）：ping命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ping.html\" target=\"_blank\" rel=\"noopener\">Linux ping命令</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping [参数] [主机名称或IP地址]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p>\n<p>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>使用Socket的SO_DEBUG功能</td>\n</tr>\n<tr>\n<td>-c &lt;完成次数&gt;</td>\n<td>设置完成要求回应的次数</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>极限检测</td>\n</tr>\n<tr>\n<td>-i &lt;间隔秒数&gt;</td>\n<td>指定收发信息的间隔时间</td>\n</tr>\n<tr>\n<td>-l &lt;网络界面&gt;</td>\n<td>使用指定的网络界面送出数据包</td>\n</tr>\n<tr>\n<td>-l &lt;前置载入&gt;</td>\n<td>设置在送出要求信息之前，先行发出的数据包</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>只输出数值</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>设置填满数据包的范本样式</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>不显示指令执行过程，开头和结尾的相关信息除外</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>忽略普通的Routing Table，直接将数据包送到远端主机上</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>记录路由过程</td>\n</tr>\n<tr>\n<td>-s &lt;数据包大小&gt;</td>\n<td>设置数据包的大小</td>\n</tr>\n<tr>\n<td>-t &lt;存活时间&gt;</td>\n<td>设置存活数值TTL的大小</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示指令的执行过程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ping 10.3.14.6</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, time 4990ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms</span><br><span class=\"line\"></span><br><span class=\"line\">需要手动Ctrl+c终止</span><br></pre></td></tr></table></figure>\n<p>ping通主机</p>\n<ul>\n<li>ping 10.3.14.6</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=1 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.634 icmp_seq=2 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=3 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=4 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=5 Destination Host Unreachable</span><br><span class=\"line\">From 10.13.41.63 icmp_seq=6 Destination Host Unreachable</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.6 ping statistics ---</span><br><span class=\"line\">8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms</span><br><span class=\"line\">, pipe 4</span><br></pre></td></tr></table></figure>\n<p>ping不通主机</p>\n<ul>\n<li>ping -c 10 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 received, 0% packet loss, time 9005ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms</span><br></pre></td></tr></table></figure>\n<p>ping指定次数</p>\n<ul>\n<li>ping -c 10 -i 0.5 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms</span><br><span class=\"line\">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 received, 0% packet loss, time 4506ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms</span><br></pre></td></tr></table></figure>\n<p>ping指定次数和时间间隔</p>\n<ul>\n<li>ping -c 5 <a href=\"http://www.zhihu.com\" target=\"_blank\" rel=\"noopener\">www.zhihu.com</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms</span><br><span class=\"line\">64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, time 4006ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms</span><br></pre></td></tr></table></figure>\n<p>通过域名ping公网地址</p>\n<ul>\n<li>ping -i 3 -s 1024 -t 255 10.3.14.62</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms</span><br><span class=\"line\">1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 10.3.14.62 ping statistics ---</span><br><span class=\"line\">17 packets transmitted, 17 received, 0% packet loss, time 48798ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms</span><br></pre></td></tr></table></figure>\n<p>ping多参数使用</p>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（54）：ping命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ping.html\" target=\"_blank\" rel=\"noopener\">Linux ping命令</a> </p>\n</blockquote>\n"},{"title":"Linux的用户态和内核态","date":"2017-07-16T07:18:39.000Z","_content":"\n**内核态**:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。\n\n**用户态**：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取。\n\n### Unix/Linux的体系架构\n\n![2017-7-16 152145](/images/2017-7-16 152145.png)\n\n如上图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。\n\n**内核从本质上看是一种软件—控制计算机的硬件资源，并提供上层应用程序运行的环境**。\n\n用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、I/O 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。\n\n**系统调用是操作系统的最小功能单位**，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如 Linux 的不同版本提供了 240-260 个系统调用，FreeBSD 大约提供了 320 个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。\n\nShell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。\n\n用户态的应用程序可以通过三种方式来访问内核态的资源：\n\n- 系统调用；\n- 库函数；\n- Shell 脚本。\n\n下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。\n\n主要表现为：\n\n- 向下控制硬件资源；\n- 向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理；\n- 向上则向应用程序提供系统调用的接口。\n\n从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。\n\n![2017-7-16 152540](/images/2017-7-16 152540.jpg)\n\n### 用户态和内核态的切换\n\n因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。\n\nIntel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高，Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。\n\n用户态到内核态的切换方式：\n\n- 系统调用；\n- 异常事件： 当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。\n- 外围设备的中断：当外围设备完成用户的请求操作后，会像 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。\n\n**注意**：系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如 Linux int 80h 中断。所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。\n\n\n\n\n\n> 参考文章：\n>\n> [内核态(Kernel Mode)与用户态(User Mode)](http://www.cnblogs.com/zemliu/p/3695503.html)\n>\n> [Linux探秘之用户态与内核态](http://www.cnblogs.com/bakari/p/5520860.html)\n\n","source":"_posts/linuxyhtnht.md","raw":"---\ntitle: Linux的用户态和内核态\ndate: 2017-07-16 15:18:39\ntags:\n - Linux\n - 用户态\n - 内核态\ncategories:\n - Linux/Unix\n---\n\n**内核态**:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。\n\n**用户态**：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取。\n\n### Unix/Linux的体系架构\n\n![2017-7-16 152145](/images/2017-7-16 152145.png)\n\n如上图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。\n\n**内核从本质上看是一种软件—控制计算机的硬件资源，并提供上层应用程序运行的环境**。\n\n用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、I/O 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。\n\n**系统调用是操作系统的最小功能单位**，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如 Linux 的不同版本提供了 240-260 个系统调用，FreeBSD 大约提供了 320 个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。\n\nShell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。\n\n用户态的应用程序可以通过三种方式来访问内核态的资源：\n\n- 系统调用；\n- 库函数；\n- Shell 脚本。\n\n下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。\n\n主要表现为：\n\n- 向下控制硬件资源；\n- 向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理；\n- 向上则向应用程序提供系统调用的接口。\n\n从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。\n\n![2017-7-16 152540](/images/2017-7-16 152540.jpg)\n\n### 用户态和内核态的切换\n\n因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。\n\nIntel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高，Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。\n\n用户态到内核态的切换方式：\n\n- 系统调用；\n- 异常事件： 当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。\n- 外围设备的中断：当外围设备完成用户的请求操作后，会像 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。\n\n**注意**：系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如 Linux int 80h 中断。所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。\n\n\n\n\n\n> 参考文章：\n>\n> [内核态(Kernel Mode)与用户态(User Mode)](http://www.cnblogs.com/zemliu/p/3695503.html)\n>\n> [Linux探秘之用户态与内核态](http://www.cnblogs.com/bakari/p/5520860.html)\n\n","slug":"linuxyhtnht","published":1,"updated":"2020-10-25T06:43:32.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueptf001pmolccqwg4scf","content":"<p><strong>内核态</strong>:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。</p>\n<p><strong>用户态</strong>：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取。</p>\n<h3 id=\"Unix-Linux的体系架构\"><a href=\"#Unix-Linux的体系架构\" class=\"headerlink\" title=\"Unix/Linux的体系架构\"></a>Unix/Linux的体系架构</h3><p><img src=\"/images/2017-7-16 152145.png\" alt=\"2017-7-16 152145\"></p>\n<p>如上图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。</p>\n<p><strong>内核从本质上看是一种软件—控制计算机的硬件资源，并提供上层应用程序运行的环境</strong>。</p>\n<p>用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、I/O 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。</p>\n<p><strong>系统调用是操作系统的最小功能单位</strong>，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如 Linux 的不同版本提供了 240-260 个系统调用，FreeBSD 大约提供了 320 个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。</p>\n<p>Shell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。</p>\n<p>用户态的应用程序可以通过三种方式来访问内核态的资源：</p>\n<ul>\n<li>系统调用；</li>\n<li>库函数；</li>\n<li>Shell 脚本。</li>\n</ul>\n<p>下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。</p>\n<p>主要表现为：</p>\n<ul>\n<li>向下控制硬件资源；</li>\n<li>向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理；</li>\n<li>向上则向应用程序提供系统调用的接口。</li>\n</ul>\n<p>从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。</p>\n<p><img src=\"/images/2017-7-16 152540.jpg\" alt=\"2017-7-16 152540\"></p>\n<h3 id=\"用户态和内核态的切换\"><a href=\"#用户态和内核态的切换\" class=\"headerlink\" title=\"用户态和内核态的切换\"></a>用户态和内核态的切换</h3><p>因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。</p>\n<p>Intel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高，Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。</p>\n<p>用户态到内核态的切换方式：</p>\n<ul>\n<li>系统调用；</li>\n<li>异常事件： 当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。</li>\n<li>外围设备的中断：当外围设备完成用户的请求操作后，会像 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。</li>\n</ul>\n<p><strong>注意</strong>：系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如 Linux int 80h 中断。所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/zemliu/p/3695503.html\" target=\"_blank\" rel=\"noopener\">内核态(Kernel Mode)与用户态(User Mode)</a></p>\n<p><a href=\"http://www.cnblogs.com/bakari/p/5520860.html\" target=\"_blank\" rel=\"noopener\">Linux探秘之用户态与内核态</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>内核态</strong>:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。</p>\n<p><strong>用户态</strong>：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取。</p>\n<h3 id=\"Unix-Linux的体系架构\"><a href=\"#Unix-Linux的体系架构\" class=\"headerlink\" title=\"Unix/Linux的体系架构\"></a>Unix/Linux的体系架构</h3><p><img src=\"/images/2017-7-16 152145.png\" alt=\"2017-7-16 152145\"></p>\n<p>如上图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。</p>\n<p><strong>内核从本质上看是一种软件—控制计算机的硬件资源，并提供上层应用程序运行的环境</strong>。</p>\n<p>用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、I/O 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。</p>\n<p><strong>系统调用是操作系统的最小功能单位</strong>，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如 Linux 的不同版本提供了 240-260 个系统调用，FreeBSD 大约提供了 320 个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。</p>\n<p>Shell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。</p>\n<p>用户态的应用程序可以通过三种方式来访问内核态的资源：</p>\n<ul>\n<li>系统调用；</li>\n<li>库函数；</li>\n<li>Shell 脚本。</li>\n</ul>\n<p>下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。</p>\n<p>主要表现为：</p>\n<ul>\n<li>向下控制硬件资源；</li>\n<li>向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理；</li>\n<li>向上则向应用程序提供系统调用的接口。</li>\n</ul>\n<p>从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。</p>\n<p><img src=\"/images/2017-7-16 152540.jpg\" alt=\"2017-7-16 152540\"></p>\n<h3 id=\"用户态和内核态的切换\"><a href=\"#用户态和内核态的切换\" class=\"headerlink\" title=\"用户态和内核态的切换\"></a>用户态和内核态的切换</h3><p>因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。</p>\n<p>Intel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高，Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。</p>\n<p>用户态到内核态的切换方式：</p>\n<ul>\n<li>系统调用；</li>\n<li>异常事件： 当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。</li>\n<li>外围设备的中断：当外围设备完成用户的请求操作后，会像 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。</li>\n</ul>\n<p><strong>注意</strong>：系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如 Linux int 80h 中断。所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/zemliu/p/3695503.html\" target=\"_blank\" rel=\"noopener\">内核态(Kernel Mode)与用户态(User Mode)</a></p>\n<p><a href=\"http://www.cnblogs.com/bakari/p/5520860.html\" target=\"_blank\" rel=\"noopener\">Linux探秘之用户态与内核态</a></p>\n</blockquote>\n"},{"title":"MySQL存储引擎InnoDB与MyISAM的区别","date":"2017-07-15T11:29:44.000Z","_content":"\n### 存储结构\n\nMyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为 .MYD  (MYData)。索引文件的扩展名是 .MYI  (MYIndex)；\n\nInnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。\n\n### 存储空间\n\nMyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表；\n\nInnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。\n\n### 事务支持\n\nMyISAM：强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持；\n\nInnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务、回滚和崩溃修复能力的事务安全型表。\n\n### CURD操作\n\nMyISAM：如果执行大量的 SELECT，MyISAM 是更好的选择。(因为没有支持行级锁)，在增删的时候需要锁定整个表格，效率会低一些。相关的是 InnoDB 支持行级锁，删除插入的时候只需要锁定该行就行，效率较高；\n\nInnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用`truncate table ` 这个命令。\n\n### 外键\n\nMyISAM：不支持；InnoDB：支持。\n\n### 锁机制\n\nInnoDB 支持数据行锁定，MyISAM 不支持行锁定，只支持锁定整个表。即 MyISAM 同一个表上的读锁和写锁是互斥的，\n\nMyISAM 并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以 MyISAM 不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为 MyISAM 是锁表，所以某项读操作比较耗时会使其他写进程饿死。\n\n### 索引\n\nInnoDB 从5.6.4才开始支持全文索引，而 MyISAM 一直支持。全文索引是指对 char、varchar 和 text 中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实很简单，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。\n\n### 其他\n\nMyISAM 支持 GIS 数据，InnoDB 不支持。即 MyISAM 支持以下空间数据对象：Point，Line，Polygon，Surface等。\n\n对于AUTO_INCREMENT 类型的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM 表中，可以和其他字段一起建立联合索引。\n\nInnoDB 中不保存表的具体行数，也就是说，执行 `select count(*) from table` 时，InnoDB 要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 ` count(*)` 语句包含 where 条件时，两种表的操作是一样的。\n\nInnoDB 表的行锁也不是绝对的，假如在执行一个 SQL 语句时 MySQL 不能确定要扫描的范围，InnoDB 表同样会锁全表，例如 `update table set num=1 where name like '%aaa%' ` \n\n","source":"_posts/myisaminnodb.md","raw":"---\ntitle: MySQL存储引擎InnoDB与MyISAM的区别\ndate: 2017-07-15 19:29:44\ntags:\n - MySQL\n - InnoDB\n - MyISAM\ncategories:\n - MySQL\n---\n\n### 存储结构\n\nMyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为 .MYD  (MYData)。索引文件的扩展名是 .MYI  (MYIndex)；\n\nInnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。\n\n### 存储空间\n\nMyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表；\n\nInnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。\n\n### 事务支持\n\nMyISAM：强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持；\n\nInnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务、回滚和崩溃修复能力的事务安全型表。\n\n### CURD操作\n\nMyISAM：如果执行大量的 SELECT，MyISAM 是更好的选择。(因为没有支持行级锁)，在增删的时候需要锁定整个表格，效率会低一些。相关的是 InnoDB 支持行级锁，删除插入的时候只需要锁定该行就行，效率较高；\n\nInnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用`truncate table ` 这个命令。\n\n### 外键\n\nMyISAM：不支持；InnoDB：支持。\n\n### 锁机制\n\nInnoDB 支持数据行锁定，MyISAM 不支持行锁定，只支持锁定整个表。即 MyISAM 同一个表上的读锁和写锁是互斥的，\n\nMyISAM 并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以 MyISAM 不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为 MyISAM 是锁表，所以某项读操作比较耗时会使其他写进程饿死。\n\n### 索引\n\nInnoDB 从5.6.4才开始支持全文索引，而 MyISAM 一直支持。全文索引是指对 char、varchar 和 text 中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实很简单，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。\n\n### 其他\n\nMyISAM 支持 GIS 数据，InnoDB 不支持。即 MyISAM 支持以下空间数据对象：Point，Line，Polygon，Surface等。\n\n对于AUTO_INCREMENT 类型的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM 表中，可以和其他字段一起建立联合索引。\n\nInnoDB 中不保存表的具体行数，也就是说，执行 `select count(*) from table` 时，InnoDB 要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 ` count(*)` 语句包含 where 条件时，两种表的操作是一样的。\n\nInnoDB 表的行锁也不是绝对的，假如在执行一个 SQL 语句时 MySQL 不能确定要扫描的范围，InnoDB 表同样会锁全表，例如 `update table set num=1 where name like '%aaa%' ` \n\n","slug":"myisaminnodb","published":1,"updated":"2020-10-25T06:43:32.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueptk001tmolcabq8djvr","content":"<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><p>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为 .MYD  (MYData)。索引文件的扩展名是 .MYI  (MYIndex)；</p>\n<p>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p>\n<h3 id=\"存储空间\"><a href=\"#存储空间\" class=\"headerlink\" title=\"存储空间\"></a>存储空间</h3><p>MyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表；</p>\n<p>InnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。</p>\n<h3 id=\"事务支持\"><a href=\"#事务支持\" class=\"headerlink\" title=\"事务支持\"></a>事务支持</h3><p>MyISAM：强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持；</p>\n<p>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务、回滚和崩溃修复能力的事务安全型表。</p>\n<h3 id=\"CURD操作\"><a href=\"#CURD操作\" class=\"headerlink\" title=\"CURD操作\"></a>CURD操作</h3><p>MyISAM：如果执行大量的 SELECT，MyISAM 是更好的选择。(因为没有支持行级锁)，在增删的时候需要锁定整个表格，效率会低一些。相关的是 InnoDB 支持行级锁，删除插入的时候只需要锁定该行就行，效率较高；</p>\n<p>InnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用<code>truncate table</code> 这个命令。</p>\n<h3 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h3><p>MyISAM：不支持；InnoDB：支持。</p>\n<h3 id=\"锁机制\"><a href=\"#锁机制\" class=\"headerlink\" title=\"锁机制\"></a>锁机制</h3><p>InnoDB 支持数据行锁定，MyISAM 不支持行锁定，只支持锁定整个表。即 MyISAM 同一个表上的读锁和写锁是互斥的，</p>\n<p>MyISAM 并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以 MyISAM 不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为 MyISAM 是锁表，所以某项读操作比较耗时会使其他写进程饿死。</p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>InnoDB 从5.6.4才开始支持全文索引，而 MyISAM 一直支持。全文索引是指对 char、varchar 和 text 中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实很简单，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>MyISAM 支持 GIS 数据，InnoDB 不支持。即 MyISAM 支持以下空间数据对象：Point，Line，Polygon，Surface等。</p>\n<p>对于AUTO_INCREMENT 类型的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM 表中，可以和其他字段一起建立联合索引。</p>\n<p>InnoDB 中不保存表的具体行数，也就是说，执行 <code>select count(*) from table</code> 时，InnoDB 要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 <code>count(*)</code> 语句包含 where 条件时，两种表的操作是一样的。</p>\n<p>InnoDB 表的行锁也不是绝对的，假如在执行一个 SQL 语句时 MySQL 不能确定要扫描的范围，InnoDB 表同样会锁全表，例如 <code>update table set num=1 where name like &#39;%aaa%&#39;</code> </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><p>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为 .MYD  (MYData)。索引文件的扩展名是 .MYI  (MYIndex)；</p>\n<p>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p>\n<h3 id=\"存储空间\"><a href=\"#存储空间\" class=\"headerlink\" title=\"存储空间\"></a>存储空间</h3><p>MyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表；</p>\n<p>InnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。</p>\n<h3 id=\"事务支持\"><a href=\"#事务支持\" class=\"headerlink\" title=\"事务支持\"></a>事务支持</h3><p>MyISAM：强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持；</p>\n<p>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务、回滚和崩溃修复能力的事务安全型表。</p>\n<h3 id=\"CURD操作\"><a href=\"#CURD操作\" class=\"headerlink\" title=\"CURD操作\"></a>CURD操作</h3><p>MyISAM：如果执行大量的 SELECT，MyISAM 是更好的选择。(因为没有支持行级锁)，在增删的时候需要锁定整个表格，效率会低一些。相关的是 InnoDB 支持行级锁，删除插入的时候只需要锁定该行就行，效率较高；</p>\n<p>InnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用<code>truncate table</code> 这个命令。</p>\n<h3 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h3><p>MyISAM：不支持；InnoDB：支持。</p>\n<h3 id=\"锁机制\"><a href=\"#锁机制\" class=\"headerlink\" title=\"锁机制\"></a>锁机制</h3><p>InnoDB 支持数据行锁定，MyISAM 不支持行锁定，只支持锁定整个表。即 MyISAM 同一个表上的读锁和写锁是互斥的，</p>\n<p>MyISAM 并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以 MyISAM 不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为 MyISAM 是锁表，所以某项读操作比较耗时会使其他写进程饿死。</p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>InnoDB 从5.6.4才开始支持全文索引，而 MyISAM 一直支持。全文索引是指对 char、varchar 和 text 中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实很简单，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>MyISAM 支持 GIS 数据，InnoDB 不支持。即 MyISAM 支持以下空间数据对象：Point，Line，Polygon，Surface等。</p>\n<p>对于AUTO_INCREMENT 类型的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM 表中，可以和其他字段一起建立联合索引。</p>\n<p>InnoDB 中不保存表的具体行数，也就是说，执行 <code>select count(*) from table</code> 时，InnoDB 要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 <code>count(*)</code> 语句包含 where 条件时，两种表的操作是一样的。</p>\n<p>InnoDB 表的行锁也不是绝对的，假如在执行一个 SQL 语句时 MySQL 不能确定要扫描的范围，InnoDB 表同样会锁全表，例如 <code>update table set num=1 where name like &#39;%aaa%&#39;</code> </p>\n"},{"title":"Nginx 开机启动","date":"2017-09-03T08:18:37.000Z","_content":"\nNginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。\n\n首先，在 Linux 系统的 ` /etc/init.d/` 目录下创建 nginx 文件，使用如下命令：\n\n```\nvim /etc/init.d/nginx\n```\n\n在脚本中添加如下命令：\n\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.0.0.2 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n#              It has a lot of features, but it's not for everyone.\n# processname: nginx\n# pidfile: /var/run/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n# 启动 nginx 需要执行的命令\nnginxd=/usr/local/nginx/sbin/nginx\n# nginx 的配置文件路径\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/var/run/nginx.pid\nRETVAL=0\nprog=\"nginx\"\n# Source function library.\n. /etc/rc.d/init.d/functions\n# Source networking configuration.\n. /etc/sysconfig/network\n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n# Start nginx daemons functions.\nstart() {\nif [ -e $nginx_pid ];then\n   echo \"nginx already running....\"\n   exit 1\nfi\n   echo -n $\"Starting $prog: \"\n   daemon $nginxd -c ${nginx_config}\n   RETVAL=$?\n   echo\n   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx\n   return $RETVAL\n}\n# Stop nginx daemons functions.\nstop() {\n        echo -n $\"Stopping $prog: \"\n        killproc $nginxd\n        RETVAL=$?\n        echo\n        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid\n}\n# reload nginx service functions.\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n# See how we were called.\ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nreload)\n        reload\n        ;;\nrestart)\n        stop\n        start\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\nexit $RETVAL\n```\n\n以下是根据 nginx 具体安装路径填写的：\n\n```\n# 启动 nginx 需要执行的命令\nnginxd=/usr/local/nginx/sbin/nginx\n# nginx 的配置文件路径\nnginx_config=/usr/local/nginx/conf/nginx.conf\n```\n\n保存脚本文件后设置文件的执行权限：\n\n```\nchmod a+x /etc/init.d/nginx\n```\n\n然后，就可以通过该脚本对 nginx 服务进行管理了：\n\n```\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n\n上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。\n\n> chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。\n\n先将 nginx 服务加入 chkconfig 管理列表：\n\n```\nchkconfig --add /etc/init.d/nginx\n```\n\n加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：\n\n```\nservice nginx start\nservice nginx stop\n```\n\n设置终端模式开机启动：\n\n```\nchkconfig nginx on\n```","source":"_posts/nginxstartpoweron.md","raw":"---\ntitle: Nginx 开机启动\ndate: 2017-09-03 16:18:37\ntags:\n - Nginx\ncategories:\n - Nginx\n---\n\nNginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。\n\n首先，在 Linux 系统的 ` /etc/init.d/` 目录下创建 nginx 文件，使用如下命令：\n\n```\nvim /etc/init.d/nginx\n```\n\n在脚本中添加如下命令：\n\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.0.0.2 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n#              It has a lot of features, but it's not for everyone.\n# processname: nginx\n# pidfile: /var/run/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n# 启动 nginx 需要执行的命令\nnginxd=/usr/local/nginx/sbin/nginx\n# nginx 的配置文件路径\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/var/run/nginx.pid\nRETVAL=0\nprog=\"nginx\"\n# Source function library.\n. /etc/rc.d/init.d/functions\n# Source networking configuration.\n. /etc/sysconfig/network\n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n# Start nginx daemons functions.\nstart() {\nif [ -e $nginx_pid ];then\n   echo \"nginx already running....\"\n   exit 1\nfi\n   echo -n $\"Starting $prog: \"\n   daemon $nginxd -c ${nginx_config}\n   RETVAL=$?\n   echo\n   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx\n   return $RETVAL\n}\n# Stop nginx daemons functions.\nstop() {\n        echo -n $\"Stopping $prog: \"\n        killproc $nginxd\n        RETVAL=$?\n        echo\n        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid\n}\n# reload nginx service functions.\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n# See how we were called.\ncase \"$1\" in\nstart)\n        start\n        ;;\nstop)\n        stop\n        ;;\nreload)\n        reload\n        ;;\nrestart)\n        stop\n        start\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\nexit $RETVAL\n```\n\n以下是根据 nginx 具体安装路径填写的：\n\n```\n# 启动 nginx 需要执行的命令\nnginxd=/usr/local/nginx/sbin/nginx\n# nginx 的配置文件路径\nnginx_config=/usr/local/nginx/conf/nginx.conf\n```\n\n保存脚本文件后设置文件的执行权限：\n\n```\nchmod a+x /etc/init.d/nginx\n```\n\n然后，就可以通过该脚本对 nginx 服务进行管理了：\n\n```\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n\n上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。\n\n> chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。\n\n先将 nginx 服务加入 chkconfig 管理列表：\n\n```\nchkconfig --add /etc/init.d/nginx\n```\n\n加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：\n\n```\nservice nginx start\nservice nginx stop\n```\n\n设置终端模式开机启动：\n\n```\nchkconfig nginx on\n```","slug":"nginxstartpoweron","published":1,"updated":"2020-10-25T06:43:32.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepto001wmolcwgylk56g","content":"<p>Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。</p>\n<p>首先，在 Linux 系统的 <code>/etc/init.d/</code> 目录下创建 nginx 文件，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>在脚本中添加如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.0.0.2 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\">#              It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"># pidfile: /var/run/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"># 启动 nginx 需要执行的命令</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"># nginx 的配置文件路径</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/var/run/nginx.pid</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">if [ -e $nginx_pid ];then</span><br><span class=\"line\">   echo &quot;nginx already running....&quot;</span><br><span class=\"line\">   exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">   echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">   daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">   RETVAL=$?</span><br><span class=\"line\">   echo</span><br><span class=\"line\">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</span><br><span class=\"line\">   return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">        killproc $nginxd</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># reload nginx service functions.</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit $RETVAL</span><br></pre></td></tr></table></figure>\n<p>以下是根据 nginx 具体安装路径填写的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动 nginx 需要执行的命令</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"># nginx 的配置文件路径</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>保存脚本文件后设置文件的执行权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>然后，就可以通过该脚本对 nginx 服务进行管理了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/nginx start</span><br><span class=\"line\">/etc/init.d/nginx stop</span><br></pre></td></tr></table></figure>\n<p>上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。</p>\n<blockquote>\n<p>chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>\n</blockquote>\n<p>先将 nginx 服务加入 chkconfig 管理列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br><span class=\"line\">service nginx stop</span><br></pre></td></tr></table></figure>\n<p>设置终端模式开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。</p>\n<p>首先，在 Linux 系统的 <code>/etc/init.d/</code> 目录下创建 nginx 文件，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>在脚本中添加如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.0.0.2 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\">#              It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"># pidfile: /var/run/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"># 启动 nginx 需要执行的命令</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"># nginx 的配置文件路径</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/var/run/nginx.pid</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">if [ -e $nginx_pid ];then</span><br><span class=\"line\">   echo &quot;nginx already running....&quot;</span><br><span class=\"line\">   exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">   echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">   daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">   RETVAL=$?</span><br><span class=\"line\">   echo</span><br><span class=\"line\">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</span><br><span class=\"line\">   return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">        killproc $nginxd</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># reload nginx service functions.</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit $RETVAL</span><br></pre></td></tr></table></figure>\n<p>以下是根据 nginx 具体安装路径填写的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动 nginx 需要执行的命令</span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"># nginx 的配置文件路径</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>保存脚本文件后设置文件的执行权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>然后，就可以通过该脚本对 nginx 服务进行管理了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/nginx start</span><br><span class=\"line\">/etc/init.d/nginx stop</span><br></pre></td></tr></table></figure>\n<p>上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。</p>\n<blockquote>\n<p>chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>\n</blockquote>\n<p>先将 nginx 服务加入 chkconfig 管理列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n<p>加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br><span class=\"line\">service nginx stop</span><br></pre></td></tr></table></figure>\n<p>设置终端模式开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>"},{"title":"PHP基础知识 - $_SERVER","date":"2017-06-26T12:00:30.000Z","_content":"\n| 参数                               | 说明                                       |\n| -------------------------------- | ---------------------------------------- |\n| $_SERVER['PHP_SELF']             | 当前执行脚本的文件名，与 document root 有关            |\n| $_SERVER['argv']                 | 传递给该脚本的参数的数组                             |\n| $_SERVER['argc']                 | 包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)        |\n| $_SERVER[' GATEWAY_INTERFACE     | 服务器使用的 CGI 规范的版本                         |\n| $_SERVER[' SERVER_ADDR']         | 当前运行脚本所在的服务器的 IP 地址                      |\n| $_SERVER[' SERVER_NAME']         | 当前运行脚本所在的服务器的主机名                         |\n| $_SERVER['SERVER_SOFTWARE']      | 服务器标识字符串，在响应请求时的头信息中给出                   |\n| $_SERVER['SERVER_PROTOCOL']      | 请求页面时通信协议的名称和版本                          |\n| $_SERVER['REQUEST_METHOD']       | 访问页面使用的请求方法。 例如，“*GET*”、“*HEAD*”、“*POST*”、“*PUT*” |\n| $_SERVER['REQUEST_TIME']         | 请求开始时的时间戳                                |\n| $_SERVER['REQUEST_TIME_FLOAT']   | 请求开始时的时间戳，微秒级别的精准度                       |\n| $_SERVER['QUERY_STRING']         | 查询字符串，如果有的话，通过它进行页面访问                    |\n| $_SERVER['DOCUMENT_ROOT']        | 当前运行脚本所在的文档根目录                           |\n| $_SERVER['HTTP_ACCEPT']          | 当前请求头中 *Accept:* 项的内容                    |\n| $_SERVER['HTTP_ACCEPT_CHARSET']  | 当前请求头中 *Accept-Charset:* 项的内容            |\n| $_SERVER['HTTP_ACCEPT_ENCODING'] | 当前请求头中 *Accept-Encoding:* 项的内容           |\n| $_SERVER['HTTP_ACCEPT_LANGUAGE'] | 当前请求头中 *Accept-Language:* 项的内容           |\n| $_SERVER['HTTP_CONNECTION']      | 当前请求头中 *Connection:* 项的内容                |\n| $_SERVER['HTTP_HOST']            | 当前请求头中 *Host:* 项的内容                      |\n| $_SERVER['HTTP_REFERER']         | 引导用户代理到当前页的前一页的地址                        |\n| $_SERVER['HTTP_USER_AGENT']      | 当前请求头中 *User-Agent:* 项的内容， 该字符串表明了访问该页面的用户代理的信息 |\n| $_SERVER['HTTPS']                | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值           |\n| $_SERVER['REMOTE_ADDR']          | 浏览当前页面的用户的 IP 地址                         |\n| $_SERVER['REMOTE_HOST']          | 浏览当前页面的用户的主机名                            |\n| $_SERVER['REMOTE_PORT']          | 用户机器上连接到 Web 服务器所使用的端口号                  |\n| $_SERVER['REMOTE_USER']          | 经验证的用户                                   |\n| $_SERVER['REDIRECT_REMOTE_USER'] | 验证的用户，如果请求已在内部重定向                        |\n| $_SERVER['SCRIPT_FILENAME']      | 当前执行脚本的绝对路径                              |\n| $_SERVER['SERVER_ADMIN']         | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数   |\n| $_SERVER['SERVER_PORT']          | Web 服务器使用的端口                             |\n| $_SERVER['SERVER_SIGNATURE']     | 包含了服务器版本和虚拟主机名的字符串                       |\n| $_SERVER['PATH_TRANSLATED']      | 当前脚本所在文件系统（非文档根目录）的基本路径                  |\n| $_SERVER['SCRIPT_NAME']          | 包含当前脚本的路径                                |\n| $_SERVER['REQUEST_URI']          | URI 用来指定要访问的页面                           |\n| $_SERVER['PHP_AUTH_DIGEST']      | 当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容 |\n| $_SERVER['PHP_AUTH_USER']        | 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名 |\n| $_SERVER['PHP_AUTH_PW']          | 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码 |\n| $_SERVER['AUTH_TYPE']            | 当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型 |\n| $_SERVER[' PATH_INFO']           | 包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息 |\n| $_SERVER['ORIG_PATH_INFO']       | 在被 PHP 处理之前，“PATH_INFO” 的原始版本            |\n\n","source":"_posts/php-server.md","raw":"---\ntitle: PHP基础知识 - $_SERVER\ndate: 2017-06-26 20:00:30\ntags:\n - PHP\n - $_SERVER\ncategories:\n - PHP\n---\n\n| 参数                               | 说明                                       |\n| -------------------------------- | ---------------------------------------- |\n| $_SERVER['PHP_SELF']             | 当前执行脚本的文件名，与 document root 有关            |\n| $_SERVER['argv']                 | 传递给该脚本的参数的数组                             |\n| $_SERVER['argc']                 | 包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)        |\n| $_SERVER[' GATEWAY_INTERFACE     | 服务器使用的 CGI 规范的版本                         |\n| $_SERVER[' SERVER_ADDR']         | 当前运行脚本所在的服务器的 IP 地址                      |\n| $_SERVER[' SERVER_NAME']         | 当前运行脚本所在的服务器的主机名                         |\n| $_SERVER['SERVER_SOFTWARE']      | 服务器标识字符串，在响应请求时的头信息中给出                   |\n| $_SERVER['SERVER_PROTOCOL']      | 请求页面时通信协议的名称和版本                          |\n| $_SERVER['REQUEST_METHOD']       | 访问页面使用的请求方法。 例如，“*GET*”、“*HEAD*”、“*POST*”、“*PUT*” |\n| $_SERVER['REQUEST_TIME']         | 请求开始时的时间戳                                |\n| $_SERVER['REQUEST_TIME_FLOAT']   | 请求开始时的时间戳，微秒级别的精准度                       |\n| $_SERVER['QUERY_STRING']         | 查询字符串，如果有的话，通过它进行页面访问                    |\n| $_SERVER['DOCUMENT_ROOT']        | 当前运行脚本所在的文档根目录                           |\n| $_SERVER['HTTP_ACCEPT']          | 当前请求头中 *Accept:* 项的内容                    |\n| $_SERVER['HTTP_ACCEPT_CHARSET']  | 当前请求头中 *Accept-Charset:* 项的内容            |\n| $_SERVER['HTTP_ACCEPT_ENCODING'] | 当前请求头中 *Accept-Encoding:* 项的内容           |\n| $_SERVER['HTTP_ACCEPT_LANGUAGE'] | 当前请求头中 *Accept-Language:* 项的内容           |\n| $_SERVER['HTTP_CONNECTION']      | 当前请求头中 *Connection:* 项的内容                |\n| $_SERVER['HTTP_HOST']            | 当前请求头中 *Host:* 项的内容                      |\n| $_SERVER['HTTP_REFERER']         | 引导用户代理到当前页的前一页的地址                        |\n| $_SERVER['HTTP_USER_AGENT']      | 当前请求头中 *User-Agent:* 项的内容， 该字符串表明了访问该页面的用户代理的信息 |\n| $_SERVER['HTTPS']                | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值           |\n| $_SERVER['REMOTE_ADDR']          | 浏览当前页面的用户的 IP 地址                         |\n| $_SERVER['REMOTE_HOST']          | 浏览当前页面的用户的主机名                            |\n| $_SERVER['REMOTE_PORT']          | 用户机器上连接到 Web 服务器所使用的端口号                  |\n| $_SERVER['REMOTE_USER']          | 经验证的用户                                   |\n| $_SERVER['REDIRECT_REMOTE_USER'] | 验证的用户，如果请求已在内部重定向                        |\n| $_SERVER['SCRIPT_FILENAME']      | 当前执行脚本的绝对路径                              |\n| $_SERVER['SERVER_ADMIN']         | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数   |\n| $_SERVER['SERVER_PORT']          | Web 服务器使用的端口                             |\n| $_SERVER['SERVER_SIGNATURE']     | 包含了服务器版本和虚拟主机名的字符串                       |\n| $_SERVER['PATH_TRANSLATED']      | 当前脚本所在文件系统（非文档根目录）的基本路径                  |\n| $_SERVER['SCRIPT_NAME']          | 包含当前脚本的路径                                |\n| $_SERVER['REQUEST_URI']          | URI 用来指定要访问的页面                           |\n| $_SERVER['PHP_AUTH_DIGEST']      | 当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容 |\n| $_SERVER['PHP_AUTH_USER']        | 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名 |\n| $_SERVER['PHP_AUTH_PW']          | 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码 |\n| $_SERVER['AUTH_TYPE']            | 当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型 |\n| $_SERVER[' PATH_INFO']           | 包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息 |\n| $_SERVER['ORIG_PATH_INFO']       | 在被 PHP 处理之前，“PATH_INFO” 的原始版本            |\n\n","slug":"php-server","published":1,"updated":"2020-10-25T06:43:32.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepts0020molcprxfryl7","content":"<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$_SERVER[‘PHP_SELF’]</td>\n<td>当前执行脚本的文件名，与 document root 有关</td>\n</tr>\n<tr>\n<td>$_SERVER[‘argv’]</td>\n<td>传递给该脚本的参数的数组</td>\n</tr>\n<tr>\n<td>$_SERVER[‘argc’]</td>\n<td>包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ GATEWAY_INTERFACE</td>\n<td>服务器使用的 CGI 规范的版本</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ SERVER_ADDR’]</td>\n<td>当前运行脚本所在的服务器的 IP 地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ SERVER_NAME’]</td>\n<td>当前运行脚本所在的服务器的主机名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SOFTWARE’]</td>\n<td>服务器标识字符串，在响应请求时的头信息中给出</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PROTOCOL’]</td>\n<td>请求页面时通信协议的名称和版本</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_METHOD’]</td>\n<td>访问页面使用的请求方法。 例如，“<em>GET</em>”、“<em>HEAD</em>”、“<em>POST</em>”、“<em>PUT</em>”</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME’]</td>\n<td>请求开始时的时间戳</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME_FLOAT’]</td>\n<td>请求开始时的时间戳，微秒级别的精准度</td>\n</tr>\n<tr>\n<td>$_SERVER[‘QUERY_STRING’]</td>\n<td>查询字符串，如果有的话，通过它进行页面访问</td>\n</tr>\n<tr>\n<td>$_SERVER[‘DOCUMENT_ROOT’]</td>\n<td>当前运行脚本所在的文档根目录</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT’]</td>\n<td>当前请求头中 <em>Accept:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>\n<td>当前请求头中 <em>Accept-Charset:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_ENCODING’]</td>\n<td>当前请求头中 <em>Accept-Encoding:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_LANGUAGE’]</td>\n<td>当前请求头中 <em>Accept-Language:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_CONNECTION’]</td>\n<td>当前请求头中 <em>Connection:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_HOST’]</td>\n<td>当前请求头中 <em>Host:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_REFERER’]</td>\n<td>引导用户代理到当前页的前一页的地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_USER_AGENT’]</td>\n<td>当前请求头中 <em>User-Agent:</em> 项的内容， 该字符串表明了访问该页面的用户代理的信息</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTPS’]</td>\n<td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_ADDR’]</td>\n<td>浏览当前页面的用户的 IP 地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_HOST’]</td>\n<td>浏览当前页面的用户的主机名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_PORT’]</td>\n<td>用户机器上连接到 Web 服务器所使用的端口号</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_USER’]</td>\n<td>经验证的用户</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REDIRECT_REMOTE_USER’]</td>\n<td>验证的用户，如果请求已在内部重定向</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_FILENAME’]</td>\n<td>当前执行脚本的绝对路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADMIN’]</td>\n<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PORT’]</td>\n<td>Web 服务器使用的端口</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SIGNATURE’]</td>\n<td>包含了服务器版本和虚拟主机名的字符串</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PATH_TRANSLATED’]</td>\n<td>当前脚本所在文件系统（非文档根目录）的基本路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_NAME’]</td>\n<td>包含当前脚本的路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_URI’]</td>\n<td>URI 用来指定要访问的页面</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_DIGEST’]</td>\n<td>当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_USER’]</td>\n<td>当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_PW’]</td>\n<td>当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码</td>\n</tr>\n<tr>\n<td>$_SERVER[‘AUTH_TYPE’]</td>\n<td>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ PATH_INFO’]</td>\n<td>包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ORIG_PATH_INFO’]</td>\n<td>在被 PHP 处理之前，“PATH_INFO” 的原始版本</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$_SERVER[‘PHP_SELF’]</td>\n<td>当前执行脚本的文件名，与 document root 有关</td>\n</tr>\n<tr>\n<td>$_SERVER[‘argv’]</td>\n<td>传递给该脚本的参数的数组</td>\n</tr>\n<tr>\n<td>$_SERVER[‘argc’]</td>\n<td>包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ GATEWAY_INTERFACE</td>\n<td>服务器使用的 CGI 规范的版本</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ SERVER_ADDR’]</td>\n<td>当前运行脚本所在的服务器的 IP 地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ SERVER_NAME’]</td>\n<td>当前运行脚本所在的服务器的主机名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SOFTWARE’]</td>\n<td>服务器标识字符串，在响应请求时的头信息中给出</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PROTOCOL’]</td>\n<td>请求页面时通信协议的名称和版本</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_METHOD’]</td>\n<td>访问页面使用的请求方法。 例如，“<em>GET</em>”、“<em>HEAD</em>”、“<em>POST</em>”、“<em>PUT</em>”</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME’]</td>\n<td>请求开始时的时间戳</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME_FLOAT’]</td>\n<td>请求开始时的时间戳，微秒级别的精准度</td>\n</tr>\n<tr>\n<td>$_SERVER[‘QUERY_STRING’]</td>\n<td>查询字符串，如果有的话，通过它进行页面访问</td>\n</tr>\n<tr>\n<td>$_SERVER[‘DOCUMENT_ROOT’]</td>\n<td>当前运行脚本所在的文档根目录</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT’]</td>\n<td>当前请求头中 <em>Accept:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>\n<td>当前请求头中 <em>Accept-Charset:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_ENCODING’]</td>\n<td>当前请求头中 <em>Accept-Encoding:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_LANGUAGE’]</td>\n<td>当前请求头中 <em>Accept-Language:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_CONNECTION’]</td>\n<td>当前请求头中 <em>Connection:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_HOST’]</td>\n<td>当前请求头中 <em>Host:</em> 项的内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_REFERER’]</td>\n<td>引导用户代理到当前页的前一页的地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_USER_AGENT’]</td>\n<td>当前请求头中 <em>User-Agent:</em> 项的内容， 该字符串表明了访问该页面的用户代理的信息</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTPS’]</td>\n<td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_ADDR’]</td>\n<td>浏览当前页面的用户的 IP 地址</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_HOST’]</td>\n<td>浏览当前页面的用户的主机名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_PORT’]</td>\n<td>用户机器上连接到 Web 服务器所使用的端口号</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_USER’]</td>\n<td>经验证的用户</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REDIRECT_REMOTE_USER’]</td>\n<td>验证的用户，如果请求已在内部重定向</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_FILENAME’]</td>\n<td>当前执行脚本的绝对路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADMIN’]</td>\n<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PORT’]</td>\n<td>Web 服务器使用的端口</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SIGNATURE’]</td>\n<td>包含了服务器版本和虚拟主机名的字符串</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PATH_TRANSLATED’]</td>\n<td>当前脚本所在文件系统（非文档根目录）的基本路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_NAME’]</td>\n<td>包含当前脚本的路径</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_URI’]</td>\n<td>URI 用来指定要访问的页面</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_DIGEST’]</td>\n<td>当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization” HTTP 头内容</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_USER’]</td>\n<td>当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PHP_AUTH_PW’]</td>\n<td>当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码</td>\n</tr>\n<tr>\n<td>$_SERVER[‘AUTH_TYPE’]</td>\n<td>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ PATH_INFO’]</td>\n<td>包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息</td>\n</tr>\n<tr>\n<td>$_SERVER[‘ORIG_PATH_INFO’]</td>\n<td>在被 PHP 处理之前，“PATH_INFO” 的原始版本</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"PHP内核探索：变量的内部存储（值和类型）","date":"2017-04-15T04:24:10.000Z","_content":"\n在翻看  [PHP手册](http://php.net/docs.php)  的时候，看到了  [垃圾回收机制](http://php.net/manual/zh/features.gc.php)  ，介绍了PHP 5.3新的垃圾回收机制（GC）的特点，里面涉及到了PHP变量内部存储的知识，如果你想对PHP变量存储结构有一个了解或想对PHP变量加深理解的话，本文是适合你的，比较深入的去看源代码吧。\n\nPHP是一种**弱类型**的脚本语言，弱类型不表示PHP的变量没有类型区分，PHP变量有8种原始类型。\n\n四种标量类型：\n\n- Boolean（布尔型）\n- Integer（整型）\n- Float（浮点型）\n- String（字符串）\n\n两种复合类型：\n\n- Array（数组）\n- Object（对象）\n\n两种特殊类型：\n\n- Resource（资源）\n- NULL\n\n我们都知道，在PHP程序运行中，可以将变量从一种类型转换为另一种类型，那么PHP是怎么实现这个过程的呢？\n\n在PHP引擎（Zend）内部，变量都是用如下的结构体来表示的：\n\n```\nstruct _zval_struct {  \n    /* Variable information */  \n    zvalue_value value;     /* value */  \n    zend_uint refcount__gc;  \n    zend_uchar type;    \t/* active type */  \n    zend_uchar is_ref__gc;  \n};\n```\n\n其中：\n\nvalue：存储变量的值；\n\nrefcount__gc：引用计数；\n\ntype：变量的动态类型；\n\nis_ref__gc：是否为引用。\n\ntype的各种类型都被定义成了宏：\n\n```\n#define IS_NULL     0  \n#define IS_LONG     1  \n#define IS_DOUBLE   2  \n#define IS_BOOL     3  \n#define IS_ARRAY    4  \n#define IS_OBJECT   5  \n#define IS_STRING   6  \n#define IS_RESOURCE 7  \n#define IS_CONSTANT 8  \n#define IS_CONSTANT_ARRAY   9  \n```\n\nzvalue_value 是真正保存数据的关键部分，定义为一个联合：\n\n```\ntypedef union _zvalue_value {  \n    long lval;                  /* long value */  \n    double dval;                /* double value */  \n    struct {  \n        char *val;  \n        int len;  \n    } str;  \n    HashTable *ht;              /* hash table value */  \n    zend_object_value obj;  \n} zvalue_value;  \n```\n\nPHP根据 zval 中的 type 字段来储存一个变量的真正类型，然后根据 type 来选择如何获取 zvalue_value 的值，比如对于整型和bool值：\n\n```\nzval.type = IS_LONG;\t//整型\nzval.type = IS_BOOL;\t//布尔型\n```\n\n就去取 zval.value.lval，对于 bool 值来说 lval∈(0|1)；如果是双精度，或者 float 则会去取 zval.value 的 dval。而如果是字符串，那么：\n\n```\nzval.type = IS_STRING\t//字符串\n```\n\n这个时候，就会取 zval.value.str 而这个也是个结构，存有C类型的字符串和字符串的长度。\n\n而对于数组和对象，则type分别对应IS_ARRAY、 IS_OBJECT,，相对应的则分别取 zval.value.ht 和 obj。\n\n比较特别的是资源，在PHP中，资源是个很特别的变量，任何不属于PHP内建的变量类型的变量，都会被看作成资源来进行保存，比如，数据库句柄、打开的文件句柄等等。 对于资源：\n\n```\n type = IS_RESOURCE\t\t//资源\n```\n\n这个时候，会去取 zval.value.lval， 此时的 lval 是个整型的指示器， 然后 PHP 会再根据这个指示器在 PHP 内建的一个资源列表中查询相对应的资源，此时的 lval 就好像是对应于资源链表的偏移值。\n\n```\nZEND_FETCH_RESOURCE(con, type, zval *, default, resource_name, resource_type);\n```\n\n借用这样的机制，PHP就实现了弱类型，因为对于ZE（Zend）的来说，它所面对的永远都是同一种类型，那就是 zval。\n\n在了解了 PHP 变量的内部存储后，新的问题就来了，ZE是如何把用户自定义变量和内部结构 zval 联系起来的呢？\n\n```\n<?php\n  $var = \"laruence\";\n  echo $var;\n?>\n```\n\nPHP内部都是使用 zval 来表示变量的，但是对于上面的脚本，我们的变量是有名字的\\$var。而 zval 中并没有相应的字段来体现变量名。在PHP中，所有的变量都会存储在一个数组中（确切的说是hash table）。\n\n当你创建一个变量的时候，PHP会为这个变量分配一个 zval，填入相应的变量值，然后将这个变量的名字、和指向这个zval的指针填入一个数组中。然后，当你获取这个变量的时候，PHP会通过查找这个数组，获得对应的 zval。\n\n查看_zend_executor_globals结构（这个结构在PHP的执行器保存一些执行相关的上下文信息）：\n\n```\nstruct _zend_executor_globals {\n     ....\n    HashTable *active_symbol_table;\t/*活动符号表*/\n    HashTable symbol_table;     \t/*全局符号表*/\n \n    HashTable included_files;   \n \n    jmp_buf *bailout;\n    int error_reporting;\n     .....\n}\n```\n\n以上只是对PHP变量内部存储的简单介绍，如果想深入了解，建议研究PHP的源码。\n\n\n\n> 参考文章：\n>\n> [深入PHP变量存储结构](http://blog.csdn.net/wenzhou1219/article/details/16832067)  [变量的内部存储：值和类型](http://blog.csdn.net/phpkernel/article/details/5718003)\n\n","source":"_posts/phpvarinternstore1.md","raw":"---\ntitle: PHP内核探索：变量的内部存储（值和类型）\ndate: 2017-04-15 12:24:10\ntags:\n - PHP\n - 变量的内部存储\ncategories:\n - PHP\n---\n\n在翻看  [PHP手册](http://php.net/docs.php)  的时候，看到了  [垃圾回收机制](http://php.net/manual/zh/features.gc.php)  ，介绍了PHP 5.3新的垃圾回收机制（GC）的特点，里面涉及到了PHP变量内部存储的知识，如果你想对PHP变量存储结构有一个了解或想对PHP变量加深理解的话，本文是适合你的，比较深入的去看源代码吧。\n\nPHP是一种**弱类型**的脚本语言，弱类型不表示PHP的变量没有类型区分，PHP变量有8种原始类型。\n\n四种标量类型：\n\n- Boolean（布尔型）\n- Integer（整型）\n- Float（浮点型）\n- String（字符串）\n\n两种复合类型：\n\n- Array（数组）\n- Object（对象）\n\n两种特殊类型：\n\n- Resource（资源）\n- NULL\n\n我们都知道，在PHP程序运行中，可以将变量从一种类型转换为另一种类型，那么PHP是怎么实现这个过程的呢？\n\n在PHP引擎（Zend）内部，变量都是用如下的结构体来表示的：\n\n```\nstruct _zval_struct {  \n    /* Variable information */  \n    zvalue_value value;     /* value */  \n    zend_uint refcount__gc;  \n    zend_uchar type;    \t/* active type */  \n    zend_uchar is_ref__gc;  \n};\n```\n\n其中：\n\nvalue：存储变量的值；\n\nrefcount__gc：引用计数；\n\ntype：变量的动态类型；\n\nis_ref__gc：是否为引用。\n\ntype的各种类型都被定义成了宏：\n\n```\n#define IS_NULL     0  \n#define IS_LONG     1  \n#define IS_DOUBLE   2  \n#define IS_BOOL     3  \n#define IS_ARRAY    4  \n#define IS_OBJECT   5  \n#define IS_STRING   6  \n#define IS_RESOURCE 7  \n#define IS_CONSTANT 8  \n#define IS_CONSTANT_ARRAY   9  \n```\n\nzvalue_value 是真正保存数据的关键部分，定义为一个联合：\n\n```\ntypedef union _zvalue_value {  \n    long lval;                  /* long value */  \n    double dval;                /* double value */  \n    struct {  \n        char *val;  \n        int len;  \n    } str;  \n    HashTable *ht;              /* hash table value */  \n    zend_object_value obj;  \n} zvalue_value;  \n```\n\nPHP根据 zval 中的 type 字段来储存一个变量的真正类型，然后根据 type 来选择如何获取 zvalue_value 的值，比如对于整型和bool值：\n\n```\nzval.type = IS_LONG;\t//整型\nzval.type = IS_BOOL;\t//布尔型\n```\n\n就去取 zval.value.lval，对于 bool 值来说 lval∈(0|1)；如果是双精度，或者 float 则会去取 zval.value 的 dval。而如果是字符串，那么：\n\n```\nzval.type = IS_STRING\t//字符串\n```\n\n这个时候，就会取 zval.value.str 而这个也是个结构，存有C类型的字符串和字符串的长度。\n\n而对于数组和对象，则type分别对应IS_ARRAY、 IS_OBJECT,，相对应的则分别取 zval.value.ht 和 obj。\n\n比较特别的是资源，在PHP中，资源是个很特别的变量，任何不属于PHP内建的变量类型的变量，都会被看作成资源来进行保存，比如，数据库句柄、打开的文件句柄等等。 对于资源：\n\n```\n type = IS_RESOURCE\t\t//资源\n```\n\n这个时候，会去取 zval.value.lval， 此时的 lval 是个整型的指示器， 然后 PHP 会再根据这个指示器在 PHP 内建的一个资源列表中查询相对应的资源，此时的 lval 就好像是对应于资源链表的偏移值。\n\n```\nZEND_FETCH_RESOURCE(con, type, zval *, default, resource_name, resource_type);\n```\n\n借用这样的机制，PHP就实现了弱类型，因为对于ZE（Zend）的来说，它所面对的永远都是同一种类型，那就是 zval。\n\n在了解了 PHP 变量的内部存储后，新的问题就来了，ZE是如何把用户自定义变量和内部结构 zval 联系起来的呢？\n\n```\n<?php\n  $var = \"laruence\";\n  echo $var;\n?>\n```\n\nPHP内部都是使用 zval 来表示变量的，但是对于上面的脚本，我们的变量是有名字的\\$var。而 zval 中并没有相应的字段来体现变量名。在PHP中，所有的变量都会存储在一个数组中（确切的说是hash table）。\n\n当你创建一个变量的时候，PHP会为这个变量分配一个 zval，填入相应的变量值，然后将这个变量的名字、和指向这个zval的指针填入一个数组中。然后，当你获取这个变量的时候，PHP会通过查找这个数组，获得对应的 zval。\n\n查看_zend_executor_globals结构（这个结构在PHP的执行器保存一些执行相关的上下文信息）：\n\n```\nstruct _zend_executor_globals {\n     ....\n    HashTable *active_symbol_table;\t/*活动符号表*/\n    HashTable symbol_table;     \t/*全局符号表*/\n \n    HashTable included_files;   \n \n    jmp_buf *bailout;\n    int error_reporting;\n     .....\n}\n```\n\n以上只是对PHP变量内部存储的简单介绍，如果想深入了解，建议研究PHP的源码。\n\n\n\n> 参考文章：\n>\n> [深入PHP变量存储结构](http://blog.csdn.net/wenzhou1219/article/details/16832067)  [变量的内部存储：值和类型](http://blog.csdn.net/phpkernel/article/details/5718003)\n\n","slug":"phpvarinternstore1","published":1,"updated":"2020-10-25T06:43:32.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueptv0022molcw4tjhw8c","content":"<p>在翻看  <a href=\"http://php.net/docs.php\" target=\"_blank\" rel=\"noopener\">PHP手册</a>  的时候，看到了  <a href=\"http://php.net/manual/zh/features.gc.php\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>  ，介绍了PHP 5.3新的垃圾回收机制（GC）的特点，里面涉及到了PHP变量内部存储的知识，如果你想对PHP变量存储结构有一个了解或想对PHP变量加深理解的话，本文是适合你的，比较深入的去看源代码吧。</p>\n<p>PHP是一种<strong>弱类型</strong>的脚本语言，弱类型不表示PHP的变量没有类型区分，PHP变量有8种原始类型。</p>\n<p>四种标量类型：</p>\n<ul>\n<li>Boolean（布尔型）</li>\n<li>Integer（整型）</li>\n<li>Float（浮点型）</li>\n<li>String（字符串）</li>\n</ul>\n<p>两种复合类型：</p>\n<ul>\n<li>Array（数组）</li>\n<li>Object（对象）</li>\n</ul>\n<p>两种特殊类型：</p>\n<ul>\n<li>Resource（资源）</li>\n<li>NULL</li>\n</ul>\n<p>我们都知道，在PHP程序运行中，可以将变量从一种类型转换为另一种类型，那么PHP是怎么实现这个过程的呢？</p>\n<p>在PHP引擎（Zend）内部，变量都是用如下的结构体来表示的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _zval_struct &#123;  </span><br><span class=\"line\">    /* Variable information */  </span><br><span class=\"line\">    zvalue_value value;     /* value */  </span><br><span class=\"line\">    zend_uint refcount__gc;  </span><br><span class=\"line\">    zend_uchar type;    \t/* active type */  </span><br><span class=\"line\">    zend_uchar is_ref__gc;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<p>value：存储变量的值；</p>\n<p>refcount__gc：引用计数；</p>\n<p>type：变量的动态类型；</p>\n<p>is_ref__gc：是否为引用。</p>\n<p>type的各种类型都被定义成了宏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define IS_NULL     0  </span><br><span class=\"line\">#define IS_LONG     1  </span><br><span class=\"line\">#define IS_DOUBLE   2  </span><br><span class=\"line\">#define IS_BOOL     3  </span><br><span class=\"line\">#define IS_ARRAY    4  </span><br><span class=\"line\">#define IS_OBJECT   5  </span><br><span class=\"line\">#define IS_STRING   6  </span><br><span class=\"line\">#define IS_RESOURCE 7  </span><br><span class=\"line\">#define IS_CONSTANT 8  </span><br><span class=\"line\">#define IS_CONSTANT_ARRAY   9</span><br></pre></td></tr></table></figure>\n<p>zvalue_value 是真正保存数据的关键部分，定义为一个联合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef union _zvalue_value &#123;  </span><br><span class=\"line\">    long lval;                  /* long value */  </span><br><span class=\"line\">    double dval;                /* double value */  </span><br><span class=\"line\">    struct &#123;  </span><br><span class=\"line\">        char *val;  </span><br><span class=\"line\">        int len;  </span><br><span class=\"line\">    &#125; str;  </span><br><span class=\"line\">    HashTable *ht;              /* hash table value */  </span><br><span class=\"line\">    zend_object_value obj;  </span><br><span class=\"line\">&#125; zvalue_value;</span><br></pre></td></tr></table></figure>\n<p>PHP根据 zval 中的 type 字段来储存一个变量的真正类型，然后根据 type 来选择如何获取 zvalue_value 的值，比如对于整型和bool值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zval.type = IS_LONG;\t//整型</span><br><span class=\"line\">zval.type = IS_BOOL;\t//布尔型</span><br></pre></td></tr></table></figure>\n<p>就去取 zval.value.lval，对于 bool 值来说 lval∈(0|1)；如果是双精度，或者 float 则会去取 zval.value 的 dval。而如果是字符串，那么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zval.type = IS_STRING\t//字符串</span><br></pre></td></tr></table></figure>\n<p>这个时候，就会取 zval.value.str 而这个也是个结构，存有C类型的字符串和字符串的长度。</p>\n<p>而对于数组和对象，则type分别对应IS_ARRAY、 IS_OBJECT,，相对应的则分别取 zval.value.ht 和 obj。</p>\n<p>比较特别的是资源，在PHP中，资源是个很特别的变量，任何不属于PHP内建的变量类型的变量，都会被看作成资源来进行保存，比如，数据库句柄、打开的文件句柄等等。 对于资源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type = IS_RESOURCE\t\t//资源</span><br></pre></td></tr></table></figure>\n<p>这个时候，会去取 zval.value.lval， 此时的 lval 是个整型的指示器， 然后 PHP 会再根据这个指示器在 PHP 内建的一个资源列表中查询相对应的资源，此时的 lval 就好像是对应于资源链表的偏移值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_FETCH_RESOURCE(con, type, zval *, default, resource_name, resource_type);</span><br></pre></td></tr></table></figure>\n<p>借用这样的机制，PHP就实现了弱类型，因为对于ZE（Zend）的来说，它所面对的永远都是同一种类型，那就是 zval。</p>\n<p>在了解了 PHP 变量的内部存储后，新的问题就来了，ZE是如何把用户自定义变量和内部结构 zval 联系起来的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  $var = &quot;laruence&quot;;</span><br><span class=\"line\">  echo $var;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>PHP内部都是使用 zval 来表示变量的，但是对于上面的脚本，我们的变量是有名字的\\$var。而 zval 中并没有相应的字段来体现变量名。在PHP中，所有的变量都会存储在一个数组中（确切的说是hash table）。</p>\n<p>当你创建一个变量的时候，PHP会为这个变量分配一个 zval，填入相应的变量值，然后将这个变量的名字、和指向这个zval的指针填入一个数组中。然后，当你获取这个变量的时候，PHP会通过查找这个数组，获得对应的 zval。</p>\n<p>查看_zend_executor_globals结构（这个结构在PHP的执行器保存一些执行相关的上下文信息）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _zend_executor_globals &#123;</span><br><span class=\"line\">     ....</span><br><span class=\"line\">    HashTable *active_symbol_table;\t/*活动符号表*/</span><br><span class=\"line\">    HashTable symbol_table;     \t/*全局符号表*/</span><br><span class=\"line\"> </span><br><span class=\"line\">    HashTable included_files;   </span><br><span class=\"line\"> </span><br><span class=\"line\">    jmp_buf *bailout;</span><br><span class=\"line\">    int error_reporting;</span><br><span class=\"line\">     .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上只是对PHP变量内部存储的简单介绍，如果想深入了解，建议研究PHP的源码。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/wenzhou1219/article/details/16832067\" target=\"_blank\" rel=\"noopener\">深入PHP变量存储结构</a>  <a href=\"http://blog.csdn.net/phpkernel/article/details/5718003\" target=\"_blank\" rel=\"noopener\">变量的内部存储：值和类型</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在翻看  <a href=\"http://php.net/docs.php\" target=\"_blank\" rel=\"noopener\">PHP手册</a>  的时候，看到了  <a href=\"http://php.net/manual/zh/features.gc.php\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>  ，介绍了PHP 5.3新的垃圾回收机制（GC）的特点，里面涉及到了PHP变量内部存储的知识，如果你想对PHP变量存储结构有一个了解或想对PHP变量加深理解的话，本文是适合你的，比较深入的去看源代码吧。</p>\n<p>PHP是一种<strong>弱类型</strong>的脚本语言，弱类型不表示PHP的变量没有类型区分，PHP变量有8种原始类型。</p>\n<p>四种标量类型：</p>\n<ul>\n<li>Boolean（布尔型）</li>\n<li>Integer（整型）</li>\n<li>Float（浮点型）</li>\n<li>String（字符串）</li>\n</ul>\n<p>两种复合类型：</p>\n<ul>\n<li>Array（数组）</li>\n<li>Object（对象）</li>\n</ul>\n<p>两种特殊类型：</p>\n<ul>\n<li>Resource（资源）</li>\n<li>NULL</li>\n</ul>\n<p>我们都知道，在PHP程序运行中，可以将变量从一种类型转换为另一种类型，那么PHP是怎么实现这个过程的呢？</p>\n<p>在PHP引擎（Zend）内部，变量都是用如下的结构体来表示的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _zval_struct &#123;  </span><br><span class=\"line\">    /* Variable information */  </span><br><span class=\"line\">    zvalue_value value;     /* value */  </span><br><span class=\"line\">    zend_uint refcount__gc;  </span><br><span class=\"line\">    zend_uchar type;    \t/* active type */  </span><br><span class=\"line\">    zend_uchar is_ref__gc;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<p>value：存储变量的值；</p>\n<p>refcount__gc：引用计数；</p>\n<p>type：变量的动态类型；</p>\n<p>is_ref__gc：是否为引用。</p>\n<p>type的各种类型都被定义成了宏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define IS_NULL     0  </span><br><span class=\"line\">#define IS_LONG     1  </span><br><span class=\"line\">#define IS_DOUBLE   2  </span><br><span class=\"line\">#define IS_BOOL     3  </span><br><span class=\"line\">#define IS_ARRAY    4  </span><br><span class=\"line\">#define IS_OBJECT   5  </span><br><span class=\"line\">#define IS_STRING   6  </span><br><span class=\"line\">#define IS_RESOURCE 7  </span><br><span class=\"line\">#define IS_CONSTANT 8  </span><br><span class=\"line\">#define IS_CONSTANT_ARRAY   9</span><br></pre></td></tr></table></figure>\n<p>zvalue_value 是真正保存数据的关键部分，定义为一个联合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef union _zvalue_value &#123;  </span><br><span class=\"line\">    long lval;                  /* long value */  </span><br><span class=\"line\">    double dval;                /* double value */  </span><br><span class=\"line\">    struct &#123;  </span><br><span class=\"line\">        char *val;  </span><br><span class=\"line\">        int len;  </span><br><span class=\"line\">    &#125; str;  </span><br><span class=\"line\">    HashTable *ht;              /* hash table value */  </span><br><span class=\"line\">    zend_object_value obj;  </span><br><span class=\"line\">&#125; zvalue_value;</span><br></pre></td></tr></table></figure>\n<p>PHP根据 zval 中的 type 字段来储存一个变量的真正类型，然后根据 type 来选择如何获取 zvalue_value 的值，比如对于整型和bool值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zval.type = IS_LONG;\t//整型</span><br><span class=\"line\">zval.type = IS_BOOL;\t//布尔型</span><br></pre></td></tr></table></figure>\n<p>就去取 zval.value.lval，对于 bool 值来说 lval∈(0|1)；如果是双精度，或者 float 则会去取 zval.value 的 dval。而如果是字符串，那么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zval.type = IS_STRING\t//字符串</span><br></pre></td></tr></table></figure>\n<p>这个时候，就会取 zval.value.str 而这个也是个结构，存有C类型的字符串和字符串的长度。</p>\n<p>而对于数组和对象，则type分别对应IS_ARRAY、 IS_OBJECT,，相对应的则分别取 zval.value.ht 和 obj。</p>\n<p>比较特别的是资源，在PHP中，资源是个很特别的变量，任何不属于PHP内建的变量类型的变量，都会被看作成资源来进行保存，比如，数据库句柄、打开的文件句柄等等。 对于资源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type = IS_RESOURCE\t\t//资源</span><br></pre></td></tr></table></figure>\n<p>这个时候，会去取 zval.value.lval， 此时的 lval 是个整型的指示器， 然后 PHP 会再根据这个指示器在 PHP 内建的一个资源列表中查询相对应的资源，此时的 lval 就好像是对应于资源链表的偏移值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZEND_FETCH_RESOURCE(con, type, zval *, default, resource_name, resource_type);</span><br></pre></td></tr></table></figure>\n<p>借用这样的机制，PHP就实现了弱类型，因为对于ZE（Zend）的来说，它所面对的永远都是同一种类型，那就是 zval。</p>\n<p>在了解了 PHP 变量的内部存储后，新的问题就来了，ZE是如何把用户自定义变量和内部结构 zval 联系起来的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  $var = &quot;laruence&quot;;</span><br><span class=\"line\">  echo $var;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>PHP内部都是使用 zval 来表示变量的，但是对于上面的脚本，我们的变量是有名字的\\$var。而 zval 中并没有相应的字段来体现变量名。在PHP中，所有的变量都会存储在一个数组中（确切的说是hash table）。</p>\n<p>当你创建一个变量的时候，PHP会为这个变量分配一个 zval，填入相应的变量值，然后将这个变量的名字、和指向这个zval的指针填入一个数组中。然后，当你获取这个变量的时候，PHP会通过查找这个数组，获得对应的 zval。</p>\n<p>查看_zend_executor_globals结构（这个结构在PHP的执行器保存一些执行相关的上下文信息）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _zend_executor_globals &#123;</span><br><span class=\"line\">     ....</span><br><span class=\"line\">    HashTable *active_symbol_table;\t/*活动符号表*/</span><br><span class=\"line\">    HashTable symbol_table;     \t/*全局符号表*/</span><br><span class=\"line\"> </span><br><span class=\"line\">    HashTable included_files;   </span><br><span class=\"line\"> </span><br><span class=\"line\">    jmp_buf *bailout;</span><br><span class=\"line\">    int error_reporting;</span><br><span class=\"line\">     .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上只是对PHP变量内部存储的简单介绍，如果想深入了解，建议研究PHP的源码。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/wenzhou1219/article/details/16832067\" target=\"_blank\" rel=\"noopener\">深入PHP变量存储结构</a>  <a href=\"http://blog.csdn.net/phpkernel/article/details/5718003\" target=\"_blank\" rel=\"noopener\">变量的内部存储：值和类型</a></p>\n</blockquote>\n"},{"title":"操作系统中的进程调度算法","date":"2017-04-02T07:17:52.000Z","_content":"\n无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数、这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。\n\n### 处理机\n\n高级、中级和低级调度作业从提交开始直到完成，往往要经历下述三级调度：\n高级调度：又称为作业调度，它决定把后备作业调入内存运行；\n低级调度：又称为进程调度，它决定把就绪队列的某进程获得CPU；\n中级调度：又称为在虚拟存储器中引入，在内、外存对换区进行进程对换。\n\n### 占用CPU的方式\n\n#### 非剥夺方式\n\n分派程序一旦把处理机分配给某进程后便让它一直运行下去，直到进程完成或某事件而阻塞时，才把处理机分配给另一个进程。\n\n即使在就绪队列存在有优先级高于当前执行进程时，当前进程仍将占用处理机直到该进程自己因调用原语操作或等待I/O而进入阻塞、睡眠状态，或时间片用完时才重新发生调度让出处理机。\n\n#### 剥夺方式\n\n当一个进程正在运行时，系统可以基于某种原则，剥夺已分配给它的处理机，将之分配给其它进程。\n\n剥夺原则有：优先权原则、短进程优先原则、时间片原则。\n\n### 引起进程调度的原因\n\n* 正在执行的进程执行完毕。这时，如果不选择新的就绪进程执行，将浪费处理机资源；\n* 执行中进程自己调用阻塞原语将自己阻塞起来进入睡眠等状态；\n* 执行中进程调用了P原语操作，从而因资源不足而被阻塞；或调用了v原语操作激活了等待资源的进程队列；\n* 执行中进程提出I/O请求后被阻塞；\n* 在分时系统中时间片已经用完；\n* 在执行完系统调用等系统程序后返回用户进程时，这时可看作系统进程执行完毕，从而可调度选择一新的用户进程执行；\n* 就绪队列中的某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。\n\n### 进程调度算法\n\n#### 先来先服务调度算法(FCFS)\n\n根据进程到达的先后顺序执行进程，不考虑等待时间和执行时间，会产生饥饿现象。属于非抢占式调度，优点是公平，实现简单；缺点是不利于短作业。\n\n#### 短进程优先调度算法(SPF)\n\n就是优先调度并处理短作业，所谓短是指作业的运行时间短。而在作业未投入运行时，并不能知道它实际的运行时间的长短，因此需要用户在提交作业时同时提交作业运行时间的估计值。\n\n#### 时间片轮转调度算法(RR)\n\n前两种算法主要用于批处理系统中，不能作为分时系统中的主调度算法，在分时系统中，都采用时间片轮转法。\n简单轮转法：系统将所有就绪进程按FIFO规则排队，按一定的时间间隔把处理机分配给队列中的进程。这样，就绪队列中所有进程均可获得一个时间片的处理机而运行。多级队列方法：将系统中所有进程分成若干类，每类为一级。\n\n具体调度过程是：内核从Ready队列中选取第一个进程，将CPU资源分配给它，并且设置一个定时器在一个时间片后中断该进程，调度Ready队列中的下一进程。\n\n很明显，RR调度算法是抢占式的，并且在该算法的调度下，没有一个进程能够连续占用CPU超过一个时间片，从而达到了分时的目的。\n\n给每个进程固定的执行时间，根据进程到达的先后顺序让进程在单位时间片内执行，执行完成后便调度下一个进程执行，时间片轮转调度不考虑进程等待时间和执行时间，属于抢占式调度。优点是兼顾长短作业；缺点是平均等待时间较长，上下文切换较费时。适用于分时系统。\n\n#### 优先级调度算法(HPF)\n\n在优先级调度算法中，每个进程都关联一个优先级，内核将CPU分配给最高优先级的进程。具有相同优先级的进程，按照先来先服务的原则进行调度。\n\n#### 高响应比优先调度算法(HRN)\n\n根据  **响应比 = （进程执行时间 + 进程等待时间） / 进程执行时间**  这个公式得到的响应比来进行调度。高响应比优先算法在等待时间相同的情况下，作业执行的时间越短，响应比越高，满足段任务优先，同时响应比会随着等待时间增加而变大，优先级会提高，能够避免饥饿现象。优点是兼顾长短作业，缺点是计算响应比开销大，适用于批处理系统。\n\n#### 多级反馈队列\n\n多级反馈队列方式是在系统中设置多个就绪队列，并赋予各队列以不同的优先权。\n\n### 进程(数据库也适用)死锁\n\n#### 产生死锁的原因\n\n- 系统资源不足；\n- 资源分配不当；\n- 进程运行推进顺序不合适。\n\n#### 产生进程死锁的必要条件\n\n1. 互斥条件：线程在某一时间内独占资源；\n2. 不剥夺条件：线程已获得资源，在末使用完之前，不能强行剥夺；\n3. 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；\n4. 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。\n\n#### 避免死锁\n\n加锁顺序：确保所有的进程都是按照相同的顺序获得锁；\n\n加锁限时：在尝试获取锁的时候加一个超时时间，若超过了这个时限该进程则放弃对该锁请求；\n\n银行家算法，每次在分配资源之前，先判断资源分配后，系统是否会进入不安全的状态，会则不分配，不会则分配；\n\n死锁检测：检测如果发生死锁，通过外边破坏产生死锁的四个必要条件，打破死锁。\n\n#### 死锁预防\n\n- 破坏互斥条件；\n- 破坏不剥夺条件；\n- 破坏请求和保持条件；\n- 破坏循环等待条件。\n\n### 饥饿进程\n\n当进程的等待时间过长，给进程推进和响应带来明显影响时，称发生了进程“饥饿”。当“饥饿”到一定程度的进程被赋予的任务即使完成也不再具有实际意义时称该进程被“饿死”。\n\n#### 饥饿产生的原因\n\n进程所请求的资源（可以是CPU资源）长时间得不到满足，从而长时间处于阻塞或就绪状态。\n\n#### 饥饿与死锁的区别\n\n1. 进入饥饿的进程可以只有一个，而死锁的进程至少有两个；\n2. 饥饿状态的进程可以是就绪状态和阻塞状态，而处于死锁的进程一定是阻塞状态。","source":"_posts/processscheduling.md","raw":"---\ntitle: 操作系统中的进程调度算法\ndate: 2017-04-02 15:17:52\ntags:\n - 操作系统\n - 进程调度\ncategories:\n - 进程/线程\n---\n\n无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数、这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。\n\n### 处理机\n\n高级、中级和低级调度作业从提交开始直到完成，往往要经历下述三级调度：\n高级调度：又称为作业调度，它决定把后备作业调入内存运行；\n低级调度：又称为进程调度，它决定把就绪队列的某进程获得CPU；\n中级调度：又称为在虚拟存储器中引入，在内、外存对换区进行进程对换。\n\n### 占用CPU的方式\n\n#### 非剥夺方式\n\n分派程序一旦把处理机分配给某进程后便让它一直运行下去，直到进程完成或某事件而阻塞时，才把处理机分配给另一个进程。\n\n即使在就绪队列存在有优先级高于当前执行进程时，当前进程仍将占用处理机直到该进程自己因调用原语操作或等待I/O而进入阻塞、睡眠状态，或时间片用完时才重新发生调度让出处理机。\n\n#### 剥夺方式\n\n当一个进程正在运行时，系统可以基于某种原则，剥夺已分配给它的处理机，将之分配给其它进程。\n\n剥夺原则有：优先权原则、短进程优先原则、时间片原则。\n\n### 引起进程调度的原因\n\n* 正在执行的进程执行完毕。这时，如果不选择新的就绪进程执行，将浪费处理机资源；\n* 执行中进程自己调用阻塞原语将自己阻塞起来进入睡眠等状态；\n* 执行中进程调用了P原语操作，从而因资源不足而被阻塞；或调用了v原语操作激活了等待资源的进程队列；\n* 执行中进程提出I/O请求后被阻塞；\n* 在分时系统中时间片已经用完；\n* 在执行完系统调用等系统程序后返回用户进程时，这时可看作系统进程执行完毕，从而可调度选择一新的用户进程执行；\n* 就绪队列中的某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。\n\n### 进程调度算法\n\n#### 先来先服务调度算法(FCFS)\n\n根据进程到达的先后顺序执行进程，不考虑等待时间和执行时间，会产生饥饿现象。属于非抢占式调度，优点是公平，实现简单；缺点是不利于短作业。\n\n#### 短进程优先调度算法(SPF)\n\n就是优先调度并处理短作业，所谓短是指作业的运行时间短。而在作业未投入运行时，并不能知道它实际的运行时间的长短，因此需要用户在提交作业时同时提交作业运行时间的估计值。\n\n#### 时间片轮转调度算法(RR)\n\n前两种算法主要用于批处理系统中，不能作为分时系统中的主调度算法，在分时系统中，都采用时间片轮转法。\n简单轮转法：系统将所有就绪进程按FIFO规则排队，按一定的时间间隔把处理机分配给队列中的进程。这样，就绪队列中所有进程均可获得一个时间片的处理机而运行。多级队列方法：将系统中所有进程分成若干类，每类为一级。\n\n具体调度过程是：内核从Ready队列中选取第一个进程，将CPU资源分配给它，并且设置一个定时器在一个时间片后中断该进程，调度Ready队列中的下一进程。\n\n很明显，RR调度算法是抢占式的，并且在该算法的调度下，没有一个进程能够连续占用CPU超过一个时间片，从而达到了分时的目的。\n\n给每个进程固定的执行时间，根据进程到达的先后顺序让进程在单位时间片内执行，执行完成后便调度下一个进程执行，时间片轮转调度不考虑进程等待时间和执行时间，属于抢占式调度。优点是兼顾长短作业；缺点是平均等待时间较长，上下文切换较费时。适用于分时系统。\n\n#### 优先级调度算法(HPF)\n\n在优先级调度算法中，每个进程都关联一个优先级，内核将CPU分配给最高优先级的进程。具有相同优先级的进程，按照先来先服务的原则进行调度。\n\n#### 高响应比优先调度算法(HRN)\n\n根据  **响应比 = （进程执行时间 + 进程等待时间） / 进程执行时间**  这个公式得到的响应比来进行调度。高响应比优先算法在等待时间相同的情况下，作业执行的时间越短，响应比越高，满足段任务优先，同时响应比会随着等待时间增加而变大，优先级会提高，能够避免饥饿现象。优点是兼顾长短作业，缺点是计算响应比开销大，适用于批处理系统。\n\n#### 多级反馈队列\n\n多级反馈队列方式是在系统中设置多个就绪队列，并赋予各队列以不同的优先权。\n\n### 进程(数据库也适用)死锁\n\n#### 产生死锁的原因\n\n- 系统资源不足；\n- 资源分配不当；\n- 进程运行推进顺序不合适。\n\n#### 产生进程死锁的必要条件\n\n1. 互斥条件：线程在某一时间内独占资源；\n2. 不剥夺条件：线程已获得资源，在末使用完之前，不能强行剥夺；\n3. 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；\n4. 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。\n\n#### 避免死锁\n\n加锁顺序：确保所有的进程都是按照相同的顺序获得锁；\n\n加锁限时：在尝试获取锁的时候加一个超时时间，若超过了这个时限该进程则放弃对该锁请求；\n\n银行家算法，每次在分配资源之前，先判断资源分配后，系统是否会进入不安全的状态，会则不分配，不会则分配；\n\n死锁检测：检测如果发生死锁，通过外边破坏产生死锁的四个必要条件，打破死锁。\n\n#### 死锁预防\n\n- 破坏互斥条件；\n- 破坏不剥夺条件；\n- 破坏请求和保持条件；\n- 破坏循环等待条件。\n\n### 饥饿进程\n\n当进程的等待时间过长，给进程推进和响应带来明显影响时，称发生了进程“饥饿”。当“饥饿”到一定程度的进程被赋予的任务即使完成也不再具有实际意义时称该进程被“饿死”。\n\n#### 饥饿产生的原因\n\n进程所请求的资源（可以是CPU资源）长时间得不到满足，从而长时间处于阻塞或就绪状态。\n\n#### 饥饿与死锁的区别\n\n1. 进入饥饿的进程可以只有一个，而死锁的进程至少有两个；\n2. 饥饿状态的进程可以是就绪状态和阻塞状态，而处于死锁的进程一定是阻塞状态。","slug":"processscheduling","published":1,"updated":"2020-10-25T06:43:32.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepu00027molcfvtuhkzq","content":"<p>无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数、这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。</p>\n<h3 id=\"处理机\"><a href=\"#处理机\" class=\"headerlink\" title=\"处理机\"></a>处理机</h3><p>高级、中级和低级调度作业从提交开始直到完成，往往要经历下述三级调度：<br>高级调度：又称为作业调度，它决定把后备作业调入内存运行；<br>低级调度：又称为进程调度，它决定把就绪队列的某进程获得CPU；<br>中级调度：又称为在虚拟存储器中引入，在内、外存对换区进行进程对换。</p>\n<h3 id=\"占用CPU的方式\"><a href=\"#占用CPU的方式\" class=\"headerlink\" title=\"占用CPU的方式\"></a>占用CPU的方式</h3><h4 id=\"非剥夺方式\"><a href=\"#非剥夺方式\" class=\"headerlink\" title=\"非剥夺方式\"></a>非剥夺方式</h4><p>分派程序一旦把处理机分配给某进程后便让它一直运行下去，直到进程完成或某事件而阻塞时，才把处理机分配给另一个进程。</p>\n<p>即使在就绪队列存在有优先级高于当前执行进程时，当前进程仍将占用处理机直到该进程自己因调用原语操作或等待I/O而进入阻塞、睡眠状态，或时间片用完时才重新发生调度让出处理机。</p>\n<h4 id=\"剥夺方式\"><a href=\"#剥夺方式\" class=\"headerlink\" title=\"剥夺方式\"></a>剥夺方式</h4><p>当一个进程正在运行时，系统可以基于某种原则，剥夺已分配给它的处理机，将之分配给其它进程。</p>\n<p>剥夺原则有：优先权原则、短进程优先原则、时间片原则。</p>\n<h3 id=\"引起进程调度的原因\"><a href=\"#引起进程调度的原因\" class=\"headerlink\" title=\"引起进程调度的原因\"></a>引起进程调度的原因</h3><ul>\n<li>正在执行的进程执行完毕。这时，如果不选择新的就绪进程执行，将浪费处理机资源；</li>\n<li>执行中进程自己调用阻塞原语将自己阻塞起来进入睡眠等状态；</li>\n<li>执行中进程调用了P原语操作，从而因资源不足而被阻塞；或调用了v原语操作激活了等待资源的进程队列；</li>\n<li>执行中进程提出I/O请求后被阻塞；</li>\n<li>在分时系统中时间片已经用完；</li>\n<li>在执行完系统调用等系统程序后返回用户进程时，这时可看作系统进程执行完毕，从而可调度选择一新的用户进程执行；</li>\n<li>就绪队列中的某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。</li>\n</ul>\n<h3 id=\"进程调度算法\"><a href=\"#进程调度算法\" class=\"headerlink\" title=\"进程调度算法\"></a>进程调度算法</h3><h4 id=\"先来先服务调度算法-FCFS\"><a href=\"#先来先服务调度算法-FCFS\" class=\"headerlink\" title=\"先来先服务调度算法(FCFS)\"></a>先来先服务调度算法(FCFS)</h4><p>根据进程到达的先后顺序执行进程，不考虑等待时间和执行时间，会产生饥饿现象。属于非抢占式调度，优点是公平，实现简单；缺点是不利于短作业。</p>\n<h4 id=\"短进程优先调度算法-SPF\"><a href=\"#短进程优先调度算法-SPF\" class=\"headerlink\" title=\"短进程优先调度算法(SPF)\"></a>短进程优先调度算法(SPF)</h4><p>就是优先调度并处理短作业，所谓短是指作业的运行时间短。而在作业未投入运行时，并不能知道它实际的运行时间的长短，因此需要用户在提交作业时同时提交作业运行时间的估计值。</p>\n<h4 id=\"时间片轮转调度算法-RR\"><a href=\"#时间片轮转调度算法-RR\" class=\"headerlink\" title=\"时间片轮转调度算法(RR)\"></a>时间片轮转调度算法(RR)</h4><p>前两种算法主要用于批处理系统中，不能作为分时系统中的主调度算法，在分时系统中，都采用时间片轮转法。<br>简单轮转法：系统将所有就绪进程按FIFO规则排队，按一定的时间间隔把处理机分配给队列中的进程。这样，就绪队列中所有进程均可获得一个时间片的处理机而运行。多级队列方法：将系统中所有进程分成若干类，每类为一级。</p>\n<p>具体调度过程是：内核从Ready队列中选取第一个进程，将CPU资源分配给它，并且设置一个定时器在一个时间片后中断该进程，调度Ready队列中的下一进程。</p>\n<p>很明显，RR调度算法是抢占式的，并且在该算法的调度下，没有一个进程能够连续占用CPU超过一个时间片，从而达到了分时的目的。</p>\n<p>给每个进程固定的执行时间，根据进程到达的先后顺序让进程在单位时间片内执行，执行完成后便调度下一个进程执行，时间片轮转调度不考虑进程等待时间和执行时间，属于抢占式调度。优点是兼顾长短作业；缺点是平均等待时间较长，上下文切换较费时。适用于分时系统。</p>\n<h4 id=\"优先级调度算法-HPF\"><a href=\"#优先级调度算法-HPF\" class=\"headerlink\" title=\"优先级调度算法(HPF)\"></a>优先级调度算法(HPF)</h4><p>在优先级调度算法中，每个进程都关联一个优先级，内核将CPU分配给最高优先级的进程。具有相同优先级的进程，按照先来先服务的原则进行调度。</p>\n<h4 id=\"高响应比优先调度算法-HRN\"><a href=\"#高响应比优先调度算法-HRN\" class=\"headerlink\" title=\"高响应比优先调度算法(HRN)\"></a>高响应比优先调度算法(HRN)</h4><p>根据  <strong>响应比 = （进程执行时间 + 进程等待时间） / 进程执行时间</strong>  这个公式得到的响应比来进行调度。高响应比优先算法在等待时间相同的情况下，作业执行的时间越短，响应比越高，满足段任务优先，同时响应比会随着等待时间增加而变大，优先级会提高，能够避免饥饿现象。优点是兼顾长短作业，缺点是计算响应比开销大，适用于批处理系统。</p>\n<h4 id=\"多级反馈队列\"><a href=\"#多级反馈队列\" class=\"headerlink\" title=\"多级反馈队列\"></a>多级反馈队列</h4><p>多级反馈队列方式是在系统中设置多个就绪队列，并赋予各队列以不同的优先权。</p>\n<h3 id=\"进程-数据库也适用-死锁\"><a href=\"#进程-数据库也适用-死锁\" class=\"headerlink\" title=\"进程(数据库也适用)死锁\"></a>进程(数据库也适用)死锁</h3><h4 id=\"产生死锁的原因\"><a href=\"#产生死锁的原因\" class=\"headerlink\" title=\"产生死锁的原因\"></a>产生死锁的原因</h4><ul>\n<li>系统资源不足；</li>\n<li>资源分配不当；</li>\n<li>进程运行推进顺序不合适。</li>\n</ul>\n<h4 id=\"产生进程死锁的必要条件\"><a href=\"#产生进程死锁的必要条件\" class=\"headerlink\" title=\"产生进程死锁的必要条件\"></a>产生进程死锁的必要条件</h4><ol>\n<li>互斥条件：线程在某一时间内独占资源；</li>\n<li>不剥夺条件：线程已获得资源，在末使用完之前，不能强行剥夺；</li>\n<li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</li>\n<li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h4 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h4><p>加锁顺序：确保所有的进程都是按照相同的顺序获得锁；</p>\n<p>加锁限时：在尝试获取锁的时候加一个超时时间，若超过了这个时限该进程则放弃对该锁请求；</p>\n<p>银行家算法，每次在分配资源之前，先判断资源分配后，系统是否会进入不安全的状态，会则不分配，不会则分配；</p>\n<p>死锁检测：检测如果发生死锁，通过外边破坏产生死锁的四个必要条件，打破死锁。</p>\n<h4 id=\"死锁预防\"><a href=\"#死锁预防\" class=\"headerlink\" title=\"死锁预防\"></a>死锁预防</h4><ul>\n<li>破坏互斥条件；</li>\n<li>破坏不剥夺条件；</li>\n<li>破坏请求和保持条件；</li>\n<li>破坏循环等待条件。</li>\n</ul>\n<h3 id=\"饥饿进程\"><a href=\"#饥饿进程\" class=\"headerlink\" title=\"饥饿进程\"></a>饥饿进程</h3><p>当进程的等待时间过长，给进程推进和响应带来明显影响时，称发生了进程“饥饿”。当“饥饿”到一定程度的进程被赋予的任务即使完成也不再具有实际意义时称该进程被“饿死”。</p>\n<h4 id=\"饥饿产生的原因\"><a href=\"#饥饿产生的原因\" class=\"headerlink\" title=\"饥饿产生的原因\"></a>饥饿产生的原因</h4><p>进程所请求的资源（可以是CPU资源）长时间得不到满足，从而长时间处于阻塞或就绪状态。</p>\n<h4 id=\"饥饿与死锁的区别\"><a href=\"#饥饿与死锁的区别\" class=\"headerlink\" title=\"饥饿与死锁的区别\"></a>饥饿与死锁的区别</h4><ol>\n<li>进入饥饿的进程可以只有一个，而死锁的进程至少有两个；</li>\n<li>饥饿状态的进程可以是就绪状态和阻塞状态，而处于死锁的进程一定是阻塞状态。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数、这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。</p>\n<h3 id=\"处理机\"><a href=\"#处理机\" class=\"headerlink\" title=\"处理机\"></a>处理机</h3><p>高级、中级和低级调度作业从提交开始直到完成，往往要经历下述三级调度：<br>高级调度：又称为作业调度，它决定把后备作业调入内存运行；<br>低级调度：又称为进程调度，它决定把就绪队列的某进程获得CPU；<br>中级调度：又称为在虚拟存储器中引入，在内、外存对换区进行进程对换。</p>\n<h3 id=\"占用CPU的方式\"><a href=\"#占用CPU的方式\" class=\"headerlink\" title=\"占用CPU的方式\"></a>占用CPU的方式</h3><h4 id=\"非剥夺方式\"><a href=\"#非剥夺方式\" class=\"headerlink\" title=\"非剥夺方式\"></a>非剥夺方式</h4><p>分派程序一旦把处理机分配给某进程后便让它一直运行下去，直到进程完成或某事件而阻塞时，才把处理机分配给另一个进程。</p>\n<p>即使在就绪队列存在有优先级高于当前执行进程时，当前进程仍将占用处理机直到该进程自己因调用原语操作或等待I/O而进入阻塞、睡眠状态，或时间片用完时才重新发生调度让出处理机。</p>\n<h4 id=\"剥夺方式\"><a href=\"#剥夺方式\" class=\"headerlink\" title=\"剥夺方式\"></a>剥夺方式</h4><p>当一个进程正在运行时，系统可以基于某种原则，剥夺已分配给它的处理机，将之分配给其它进程。</p>\n<p>剥夺原则有：优先权原则、短进程优先原则、时间片原则。</p>\n<h3 id=\"引起进程调度的原因\"><a href=\"#引起进程调度的原因\" class=\"headerlink\" title=\"引起进程调度的原因\"></a>引起进程调度的原因</h3><ul>\n<li>正在执行的进程执行完毕。这时，如果不选择新的就绪进程执行，将浪费处理机资源；</li>\n<li>执行中进程自己调用阻塞原语将自己阻塞起来进入睡眠等状态；</li>\n<li>执行中进程调用了P原语操作，从而因资源不足而被阻塞；或调用了v原语操作激活了等待资源的进程队列；</li>\n<li>执行中进程提出I/O请求后被阻塞；</li>\n<li>在分时系统中时间片已经用完；</li>\n<li>在执行完系统调用等系统程序后返回用户进程时，这时可看作系统进程执行完毕，从而可调度选择一新的用户进程执行；</li>\n<li>就绪队列中的某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。</li>\n</ul>\n<h3 id=\"进程调度算法\"><a href=\"#进程调度算法\" class=\"headerlink\" title=\"进程调度算法\"></a>进程调度算法</h3><h4 id=\"先来先服务调度算法-FCFS\"><a href=\"#先来先服务调度算法-FCFS\" class=\"headerlink\" title=\"先来先服务调度算法(FCFS)\"></a>先来先服务调度算法(FCFS)</h4><p>根据进程到达的先后顺序执行进程，不考虑等待时间和执行时间，会产生饥饿现象。属于非抢占式调度，优点是公平，实现简单；缺点是不利于短作业。</p>\n<h4 id=\"短进程优先调度算法-SPF\"><a href=\"#短进程优先调度算法-SPF\" class=\"headerlink\" title=\"短进程优先调度算法(SPF)\"></a>短进程优先调度算法(SPF)</h4><p>就是优先调度并处理短作业，所谓短是指作业的运行时间短。而在作业未投入运行时，并不能知道它实际的运行时间的长短，因此需要用户在提交作业时同时提交作业运行时间的估计值。</p>\n<h4 id=\"时间片轮转调度算法-RR\"><a href=\"#时间片轮转调度算法-RR\" class=\"headerlink\" title=\"时间片轮转调度算法(RR)\"></a>时间片轮转调度算法(RR)</h4><p>前两种算法主要用于批处理系统中，不能作为分时系统中的主调度算法，在分时系统中，都采用时间片轮转法。<br>简单轮转法：系统将所有就绪进程按FIFO规则排队，按一定的时间间隔把处理机分配给队列中的进程。这样，就绪队列中所有进程均可获得一个时间片的处理机而运行。多级队列方法：将系统中所有进程分成若干类，每类为一级。</p>\n<p>具体调度过程是：内核从Ready队列中选取第一个进程，将CPU资源分配给它，并且设置一个定时器在一个时间片后中断该进程，调度Ready队列中的下一进程。</p>\n<p>很明显，RR调度算法是抢占式的，并且在该算法的调度下，没有一个进程能够连续占用CPU超过一个时间片，从而达到了分时的目的。</p>\n<p>给每个进程固定的执行时间，根据进程到达的先后顺序让进程在单位时间片内执行，执行完成后便调度下一个进程执行，时间片轮转调度不考虑进程等待时间和执行时间，属于抢占式调度。优点是兼顾长短作业；缺点是平均等待时间较长，上下文切换较费时。适用于分时系统。</p>\n<h4 id=\"优先级调度算法-HPF\"><a href=\"#优先级调度算法-HPF\" class=\"headerlink\" title=\"优先级调度算法(HPF)\"></a>优先级调度算法(HPF)</h4><p>在优先级调度算法中，每个进程都关联一个优先级，内核将CPU分配给最高优先级的进程。具有相同优先级的进程，按照先来先服务的原则进行调度。</p>\n<h4 id=\"高响应比优先调度算法-HRN\"><a href=\"#高响应比优先调度算法-HRN\" class=\"headerlink\" title=\"高响应比优先调度算法(HRN)\"></a>高响应比优先调度算法(HRN)</h4><p>根据  <strong>响应比 = （进程执行时间 + 进程等待时间） / 进程执行时间</strong>  这个公式得到的响应比来进行调度。高响应比优先算法在等待时间相同的情况下，作业执行的时间越短，响应比越高，满足段任务优先，同时响应比会随着等待时间增加而变大，优先级会提高，能够避免饥饿现象。优点是兼顾长短作业，缺点是计算响应比开销大，适用于批处理系统。</p>\n<h4 id=\"多级反馈队列\"><a href=\"#多级反馈队列\" class=\"headerlink\" title=\"多级反馈队列\"></a>多级反馈队列</h4><p>多级反馈队列方式是在系统中设置多个就绪队列，并赋予各队列以不同的优先权。</p>\n<h3 id=\"进程-数据库也适用-死锁\"><a href=\"#进程-数据库也适用-死锁\" class=\"headerlink\" title=\"进程(数据库也适用)死锁\"></a>进程(数据库也适用)死锁</h3><h4 id=\"产生死锁的原因\"><a href=\"#产生死锁的原因\" class=\"headerlink\" title=\"产生死锁的原因\"></a>产生死锁的原因</h4><ul>\n<li>系统资源不足；</li>\n<li>资源分配不当；</li>\n<li>进程运行推进顺序不合适。</li>\n</ul>\n<h4 id=\"产生进程死锁的必要条件\"><a href=\"#产生进程死锁的必要条件\" class=\"headerlink\" title=\"产生进程死锁的必要条件\"></a>产生进程死锁的必要条件</h4><ol>\n<li>互斥条件：线程在某一时间内独占资源；</li>\n<li>不剥夺条件：线程已获得资源，在末使用完之前，不能强行剥夺；</li>\n<li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</li>\n<li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h4 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h4><p>加锁顺序：确保所有的进程都是按照相同的顺序获得锁；</p>\n<p>加锁限时：在尝试获取锁的时候加一个超时时间，若超过了这个时限该进程则放弃对该锁请求；</p>\n<p>银行家算法，每次在分配资源之前，先判断资源分配后，系统是否会进入不安全的状态，会则不分配，不会则分配；</p>\n<p>死锁检测：检测如果发生死锁，通过外边破坏产生死锁的四个必要条件，打破死锁。</p>\n<h4 id=\"死锁预防\"><a href=\"#死锁预防\" class=\"headerlink\" title=\"死锁预防\"></a>死锁预防</h4><ul>\n<li>破坏互斥条件；</li>\n<li>破坏不剥夺条件；</li>\n<li>破坏请求和保持条件；</li>\n<li>破坏循环等待条件。</li>\n</ul>\n<h3 id=\"饥饿进程\"><a href=\"#饥饿进程\" class=\"headerlink\" title=\"饥饿进程\"></a>饥饿进程</h3><p>当进程的等待时间过长，给进程推进和响应带来明显影响时，称发生了进程“饥饿”。当“饥饿”到一定程度的进程被赋予的任务即使完成也不再具有实际意义时称该进程被“饿死”。</p>\n<h4 id=\"饥饿产生的原因\"><a href=\"#饥饿产生的原因\" class=\"headerlink\" title=\"饥饿产生的原因\"></a>饥饿产生的原因</h4><p>进程所请求的资源（可以是CPU资源）长时间得不到满足，从而长时间处于阻塞或就绪状态。</p>\n<h4 id=\"饥饿与死锁的区别\"><a href=\"#饥饿与死锁的区别\" class=\"headerlink\" title=\"饥饿与死锁的区别\"></a>饥饿与死锁的区别</h4><ol>\n<li>进入饥饿的进程可以只有一个，而死锁的进程至少有两个；</li>\n<li>饥饿状态的进程可以是就绪状态和阻塞状态，而处于死锁的进程一定是阻塞状态。</li>\n</ol>\n"},{"title":"Python上下文管理器","date":"2018-01-02T14:54:29.000Z","_content":"\n#### 何为上下文管理器\n\n上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。\n\n例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。\n\n#### 需求的产生\n\n在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。\n\n在没有接触到上下文管理器之前，我们可以用\"try/finally\"语句来解决这样的问题。或许在有些人看来，\"try/finally\"语句显得有些繁琐。上下文管理器就是被设计用来简化\"try/finally\"语句的，这样可以让程序更加简洁。\n\n#### 上下文管理协议\n\n那么在Python中怎么实现一个上下文管理器呢？主要依靠`__enter__`、`__exit__`这两个\"魔术方法\"。\n\n> `__enter__(self)` \n>\n> Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of _\\_enter__ is bound to the target of the with statement, or the name after the as.\n>\n> `__exit__(self, exception_type, exception_value, traceback)` \n>\n> Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception_value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure _\\_exit__ returns True after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.\n\n也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现`__enter__`和`__exit__`方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。\n\n#### with语句\n\n在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行\\_\\_enter\\_\\_方法），并在代码块结束后退出该上下文（执行\\_\\_exit\\_\\_方法）。\n\nwith语句的语法如下：\n\n```\nwith context_expr [as var]:\n    with_suite\n```\n\n- context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境\n- as var: 可选部分，通过变量方式保存上下文管理器对象\n- with_suite: 需要放在上下文环境中执行的语句块\n\n在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。\n\n```\nwith File('demo.txt', 'w') as opened_file:\n    opened_file.write('Hola!')\n```\n\n with语句先暂存了File类的`__exit__()`方法，然后它调用File类的`__enter__()`方方法，`__enter__`方法打开文件并返回给with语句，打开的文件句柄被传递给`opened_file`参数，然后使用`.write()`来写文件，with语句调用之前暂存的`__exit__`方法关闭了文件。\n\n#### 自定义上下文管理器\n\n了解上下文管理器的执行流程和方法后，我们可以通过实现`__enter__()`、`__exit__()`函数来自定义上下文管理器，如下：\n\n```\nfilename = 'my_file.txt'\nmode = 'w' # Mode that allows to write to the file\nwriter = open(filename, mode)\n\nclass PypixOpen(object):\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n\n    def __enter__(self):\n        self.openedFile = open(self.filename, self.mode)\n        return self.openedFile\n\n    def __exit__(self, *unused):\n        self.openedFile.close()\n\n# Script starts from here\n\nwith PypixOpen(filename, mode) as writer:\n    writer.write(\"Hello World from our new Context Manager!\")\n```\n\n#### 异常处理\n\n上下文管理器根据`__exit__()` 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。\n\n`__exit__ ()`接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常\n\n下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: \n\n```\nclass Open:\n    def __init__(self, file, mode):\n        self.open_file = open(file, mode)\n    def __enter__(self):\n        return self.open_file\n    def __exit__(self, type, value, tb):\n        self.open_file.close()\n        if type is AttributeError:\n            print('handing some exception')\n            return True\n            \nwith Open('aaa', 'w') as f:\n    f.writeee('aaaa')\n    \n    \n>>> handing some exception\n```\n\n#### contextmanager\n\n由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。\n\n有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，`yield` 语句前面的部分被认为是` __enter__()` 方法的代码，后面的部分被认为是 `__exit__() `方法的代码。\n\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef file(path, mode):\n    open_file = open(path, mode)\n    yield open_file\n    open_file.close()\n```\n\nPython解释器遇到了`yield`关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（`file`）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给`file`函数，我们实际上是在调用GeneratorContextManager对象。\n\n\n\nRead More: \n\n> [上下文管理器(Context managers)](https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/) [Python上下文管理器与with语句](http://kuanghy.github.io/2015/08/08/python-with) [Python上下文管理器](http://www.cnblogs.com/wilber2013/p/4638967.html) [Python - 上下文管理](https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/) ","source":"_posts/pythoncontextmanager.md","raw":"---\ntitle: Python上下文管理器\ndate: 2018-01-02 22:54:29\ntags:\n - Python\n - 上下文管理器\ncategories:\n - Python\n---\n\n#### 何为上下文管理器\n\n上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。\n\n例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。\n\n#### 需求的产生\n\n在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。\n\n在没有接触到上下文管理器之前，我们可以用\"try/finally\"语句来解决这样的问题。或许在有些人看来，\"try/finally\"语句显得有些繁琐。上下文管理器就是被设计用来简化\"try/finally\"语句的，这样可以让程序更加简洁。\n\n#### 上下文管理协议\n\n那么在Python中怎么实现一个上下文管理器呢？主要依靠`__enter__`、`__exit__`这两个\"魔术方法\"。\n\n> `__enter__(self)` \n>\n> Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of _\\_enter__ is bound to the target of the with statement, or the name after the as.\n>\n> `__exit__(self, exception_type, exception_value, traceback)` \n>\n> Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception_value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure _\\_exit__ returns True after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.\n\n也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现`__enter__`和`__exit__`方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。\n\n#### with语句\n\n在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行\\_\\_enter\\_\\_方法），并在代码块结束后退出该上下文（执行\\_\\_exit\\_\\_方法）。\n\nwith语句的语法如下：\n\n```\nwith context_expr [as var]:\n    with_suite\n```\n\n- context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境\n- as var: 可选部分，通过变量方式保存上下文管理器对象\n- with_suite: 需要放在上下文环境中执行的语句块\n\n在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。\n\n```\nwith File('demo.txt', 'w') as opened_file:\n    opened_file.write('Hola!')\n```\n\n with语句先暂存了File类的`__exit__()`方法，然后它调用File类的`__enter__()`方方法，`__enter__`方法打开文件并返回给with语句，打开的文件句柄被传递给`opened_file`参数，然后使用`.write()`来写文件，with语句调用之前暂存的`__exit__`方法关闭了文件。\n\n#### 自定义上下文管理器\n\n了解上下文管理器的执行流程和方法后，我们可以通过实现`__enter__()`、`__exit__()`函数来自定义上下文管理器，如下：\n\n```\nfilename = 'my_file.txt'\nmode = 'w' # Mode that allows to write to the file\nwriter = open(filename, mode)\n\nclass PypixOpen(object):\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n\n    def __enter__(self):\n        self.openedFile = open(self.filename, self.mode)\n        return self.openedFile\n\n    def __exit__(self, *unused):\n        self.openedFile.close()\n\n# Script starts from here\n\nwith PypixOpen(filename, mode) as writer:\n    writer.write(\"Hello World from our new Context Manager!\")\n```\n\n#### 异常处理\n\n上下文管理器根据`__exit__()` 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。\n\n`__exit__ ()`接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常\n\n下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: \n\n```\nclass Open:\n    def __init__(self, file, mode):\n        self.open_file = open(file, mode)\n    def __enter__(self):\n        return self.open_file\n    def __exit__(self, type, value, tb):\n        self.open_file.close()\n        if type is AttributeError:\n            print('handing some exception')\n            return True\n            \nwith Open('aaa', 'w') as f:\n    f.writeee('aaaa')\n    \n    \n>>> handing some exception\n```\n\n#### contextmanager\n\n由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。\n\n有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，`yield` 语句前面的部分被认为是` __enter__()` 方法的代码，后面的部分被认为是 `__exit__() `方法的代码。\n\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef file(path, mode):\n    open_file = open(path, mode)\n    yield open_file\n    open_file.close()\n```\n\nPython解释器遇到了`yield`关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（`file`）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给`file`函数，我们实际上是在调用GeneratorContextManager对象。\n\n\n\nRead More: \n\n> [上下文管理器(Context managers)](https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/) [Python上下文管理器与with语句](http://kuanghy.github.io/2015/08/08/python-with) [Python上下文管理器](http://www.cnblogs.com/wilber2013/p/4638967.html) [Python - 上下文管理](https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/) ","slug":"pythoncontextmanager","published":1,"updated":"2020-10-25T06:43:32.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepu4002amolcc9ivyy2l","content":"<h4 id=\"何为上下文管理器\"><a href=\"#何为上下文管理器\" class=\"headerlink\" title=\"何为上下文管理器\"></a>何为上下文管理器</h4><p>上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。</p>\n<p>例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。</p>\n<h4 id=\"需求的产生\"><a href=\"#需求的产生\" class=\"headerlink\" title=\"需求的产生\"></a>需求的产生</h4><p>在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。</p>\n<p>在没有接触到上下文管理器之前，我们可以用”try/finally”语句来解决这样的问题。或许在有些人看来，”try/finally”语句显得有些繁琐。上下文管理器就是被设计用来简化”try/finally”语句的，这样可以让程序更加简洁。</p>\n<h4 id=\"上下文管理协议\"><a href=\"#上下文管理协议\" class=\"headerlink\" title=\"上下文管理协议\"></a>上下文管理协议</h4><p>那么在Python中怎么实现一个上下文管理器呢？主要依靠<code>__enter__</code>、<code>__exit__</code>这两个”魔术方法”。</p>\n<blockquote>\n<p><code>__enter__(self)</code> </p>\n<p>Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of __enter__ is bound to the target of the with statement, or the name after the as.</p>\n<p><code>__exit__(self, exception_type, exception_value, traceback)</code> </p>\n<p>Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception_value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure __exit__ returns True after all is said and done. If you don’t want the exception to be handled by the context manager, just let it happen.</p>\n</blockquote>\n<p>也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现<code>__enter__</code>和<code>__exit__</code>方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。</p>\n<h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行__enter__方法），并在代码块结束后退出该上下文（执行__exit__方法）。</p>\n<p>with语句的语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with context_expr [as var]:</span><br><span class=\"line\">    with_suite</span><br></pre></td></tr></table></figure>\n<ul>\n<li>context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境</li>\n<li>as var: 可选部分，通过变量方式保存上下文管理器对象</li>\n<li>with_suite: 需要放在上下文环境中执行的语句块</li>\n</ul>\n<p>在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with File(&apos;demo.txt&apos;, &apos;w&apos;) as opened_file:</span><br><span class=\"line\">    opened_file.write(&apos;Hola!&apos;)</span><br></pre></td></tr></table></figure>\n<p> with语句先暂存了File类的<code>__exit__()</code>方法，然后它调用File类的<code>__enter__()</code>方方法，<code>__enter__</code>方法打开文件并返回给with语句，打开的文件句柄被传递给<code>opened_file</code>参数，然后使用<code>.write()</code>来写文件，with语句调用之前暂存的<code>__exit__</code>方法关闭了文件。</p>\n<h4 id=\"自定义上下文管理器\"><a href=\"#自定义上下文管理器\" class=\"headerlink\" title=\"自定义上下文管理器\"></a>自定义上下文管理器</h4><p>了解上下文管理器的执行流程和方法后，我们可以通过实现<code>__enter__()</code>、<code>__exit__()</code>函数来自定义上下文管理器，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = &apos;my_file.txt&apos;</span><br><span class=\"line\">mode = &apos;w&apos; # Mode that allows to write to the file</span><br><span class=\"line\">writer = open(filename, mode)</span><br><span class=\"line\"></span><br><span class=\"line\">class PypixOpen(object):</span><br><span class=\"line\">    def __init__(self, filename, mode):</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.openedFile = open(self.filename, self.mode)</span><br><span class=\"line\">        return self.openedFile</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, *unused):</span><br><span class=\"line\">        self.openedFile.close()</span><br><span class=\"line\"></span><br><span class=\"line\"># Script starts from here</span><br><span class=\"line\"></span><br><span class=\"line\">with PypixOpen(filename, mode) as writer:</span><br><span class=\"line\">    writer.write(&quot;Hello World from our new Context Manager!&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>上下文管理器根据<code>__exit__()</code> 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。</p>\n<p><code>__exit__ ()</code>接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常</p>\n<p>下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Open:</span><br><span class=\"line\">    def __init__(self, file, mode):</span><br><span class=\"line\">        self.open_file = open(file, mode)</span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        return self.open_file</span><br><span class=\"line\">    def __exit__(self, type, value, tb):</span><br><span class=\"line\">        self.open_file.close()</span><br><span class=\"line\">        if type is AttributeError:</span><br><span class=\"line\">            print(&apos;handing some exception&apos;)</span><br><span class=\"line\">            return True</span><br><span class=\"line\">            </span><br><span class=\"line\">with Open(&apos;aaa&apos;, &apos;w&apos;) as f:</span><br><span class=\"line\">    f.writeee(&apos;aaaa&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt; handing some exception</span><br></pre></td></tr></table></figure>\n<h4 id=\"contextmanager\"><a href=\"#contextmanager\" class=\"headerlink\" title=\"contextmanager\"></a>contextmanager</h4><p>由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。</p>\n<p>有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，<code>yield</code> 语句前面的部分被认为是<code>__enter__()</code> 方法的代码，后面的部分被认为是 <code>__exit__()</code>方法的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def file(path, mode):</span><br><span class=\"line\">    open_file = open(path, mode)</span><br><span class=\"line\">    yield open_file</span><br><span class=\"line\">    open_file.close()</span><br></pre></td></tr></table></figure>\n<p>Python解释器遇到了<code>yield</code>关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（<code>file</code>）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给<code>file</code>函数，我们实际上是在调用GeneratorContextManager对象。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/\" target=\"_blank\" rel=\"noopener\">上下文管理器(Context managers)</a> <a href=\"http://kuanghy.github.io/2015/08/08/python-with\" target=\"_blank\" rel=\"noopener\">Python上下文管理器与with语句</a> <a href=\"http://www.cnblogs.com/wilber2013/p/4638967.html\" target=\"_blank\" rel=\"noopener\">Python上下文管理器</a> <a href=\"https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/\" target=\"_blank\" rel=\"noopener\">Python - 上下文管理</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"何为上下文管理器\"><a href=\"#何为上下文管理器\" class=\"headerlink\" title=\"何为上下文管理器\"></a>何为上下文管理器</h4><p>上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。</p>\n<p>例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。</p>\n<h4 id=\"需求的产生\"><a href=\"#需求的产生\" class=\"headerlink\" title=\"需求的产生\"></a>需求的产生</h4><p>在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。</p>\n<p>在没有接触到上下文管理器之前，我们可以用”try/finally”语句来解决这样的问题。或许在有些人看来，”try/finally”语句显得有些繁琐。上下文管理器就是被设计用来简化”try/finally”语句的，这样可以让程序更加简洁。</p>\n<h4 id=\"上下文管理协议\"><a href=\"#上下文管理协议\" class=\"headerlink\" title=\"上下文管理协议\"></a>上下文管理协议</h4><p>那么在Python中怎么实现一个上下文管理器呢？主要依靠<code>__enter__</code>、<code>__exit__</code>这两个”魔术方法”。</p>\n<blockquote>\n<p><code>__enter__(self)</code> </p>\n<p>Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of __enter__ is bound to the target of the with statement, or the name after the as.</p>\n<p><code>__exit__(self, exception_type, exception_value, traceback)</code> </p>\n<p>Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception_value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure __exit__ returns True after all is said and done. If you don’t want the exception to be handled by the context manager, just let it happen.</p>\n</blockquote>\n<p>也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现<code>__enter__</code>和<code>__exit__</code>方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。</p>\n<h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行__enter__方法），并在代码块结束后退出该上下文（执行__exit__方法）。</p>\n<p>with语句的语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with context_expr [as var]:</span><br><span class=\"line\">    with_suite</span><br></pre></td></tr></table></figure>\n<ul>\n<li>context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境</li>\n<li>as var: 可选部分，通过变量方式保存上下文管理器对象</li>\n<li>with_suite: 需要放在上下文环境中执行的语句块</li>\n</ul>\n<p>在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with File(&apos;demo.txt&apos;, &apos;w&apos;) as opened_file:</span><br><span class=\"line\">    opened_file.write(&apos;Hola!&apos;)</span><br></pre></td></tr></table></figure>\n<p> with语句先暂存了File类的<code>__exit__()</code>方法，然后它调用File类的<code>__enter__()</code>方方法，<code>__enter__</code>方法打开文件并返回给with语句，打开的文件句柄被传递给<code>opened_file</code>参数，然后使用<code>.write()</code>来写文件，with语句调用之前暂存的<code>__exit__</code>方法关闭了文件。</p>\n<h4 id=\"自定义上下文管理器\"><a href=\"#自定义上下文管理器\" class=\"headerlink\" title=\"自定义上下文管理器\"></a>自定义上下文管理器</h4><p>了解上下文管理器的执行流程和方法后，我们可以通过实现<code>__enter__()</code>、<code>__exit__()</code>函数来自定义上下文管理器，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = &apos;my_file.txt&apos;</span><br><span class=\"line\">mode = &apos;w&apos; # Mode that allows to write to the file</span><br><span class=\"line\">writer = open(filename, mode)</span><br><span class=\"line\"></span><br><span class=\"line\">class PypixOpen(object):</span><br><span class=\"line\">    def __init__(self, filename, mode):</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.openedFile = open(self.filename, self.mode)</span><br><span class=\"line\">        return self.openedFile</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, *unused):</span><br><span class=\"line\">        self.openedFile.close()</span><br><span class=\"line\"></span><br><span class=\"line\"># Script starts from here</span><br><span class=\"line\"></span><br><span class=\"line\">with PypixOpen(filename, mode) as writer:</span><br><span class=\"line\">    writer.write(&quot;Hello World from our new Context Manager!&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>上下文管理器根据<code>__exit__()</code> 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。</p>\n<p><code>__exit__ ()</code>接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常</p>\n<p>下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Open:</span><br><span class=\"line\">    def __init__(self, file, mode):</span><br><span class=\"line\">        self.open_file = open(file, mode)</span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        return self.open_file</span><br><span class=\"line\">    def __exit__(self, type, value, tb):</span><br><span class=\"line\">        self.open_file.close()</span><br><span class=\"line\">        if type is AttributeError:</span><br><span class=\"line\">            print(&apos;handing some exception&apos;)</span><br><span class=\"line\">            return True</span><br><span class=\"line\">            </span><br><span class=\"line\">with Open(&apos;aaa&apos;, &apos;w&apos;) as f:</span><br><span class=\"line\">    f.writeee(&apos;aaaa&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt; handing some exception</span><br></pre></td></tr></table></figure>\n<h4 id=\"contextmanager\"><a href=\"#contextmanager\" class=\"headerlink\" title=\"contextmanager\"></a>contextmanager</h4><p>由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。</p>\n<p>有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，<code>yield</code> 语句前面的部分被认为是<code>__enter__()</code> 方法的代码，后面的部分被认为是 <code>__exit__()</code>方法的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def file(path, mode):</span><br><span class=\"line\">    open_file = open(path, mode)</span><br><span class=\"line\">    yield open_file</span><br><span class=\"line\">    open_file.close()</span><br></pre></td></tr></table></figure>\n<p>Python解释器遇到了<code>yield</code>关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（<code>file</code>）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给<code>file</code>函数，我们实际上是在调用GeneratorContextManager对象。</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/\" target=\"_blank\" rel=\"noopener\">上下文管理器(Context managers)</a> <a href=\"http://kuanghy.github.io/2015/08/08/python-with\" target=\"_blank\" rel=\"noopener\">Python上下文管理器与with语句</a> <a href=\"http://www.cnblogs.com/wilber2013/p/4638967.html\" target=\"_blank\" rel=\"noopener\">Python上下文管理器</a> <a href=\"https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/\" target=\"_blank\" rel=\"noopener\">Python - 上下文管理</a> </p>\n</blockquote>\n"},{"title":"浅析Python的垃圾回收机制","date":"2017-07-16T06:33:22.000Z","_content":"\n之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。\n\n### 引用计数\n\nPython 语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早 George E. Collins 在1960的时候首次提出，50 年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个 ob_refcnt 字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数 ob_refcnt  加1，每当该对象的引用失效时计数 ob_refcnt 减 1，一旦对象的引用计数为 0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如 Java 并没有采用该算法做来垃圾的收集机制。\n\npython里每一个东西都是对象，它们的核心就是一个结构体：PyObject\n\n```\ntypedef struct_object {\n\tint ob_refcnt;\n \tstruct_typeobject *ob_type;\n}PyObject;\n```\n\n什么是循环引用？A 和 B 相互引用而再没有外部引用 A 与 B 中的任何一个，它们的引用计数虽然都为 1，但显然应该被回收，例子：\n\n```\na = { }     #对象A的引用计数为 1 \nb = { }     #对象B的引用计数为 1 \na['b'] = b  #B的引用计数增1 \nb['a'] = a  #A的引用计数增1 \ndel a       #A的引用减 1，最后A对象的引用为 1 \ndel b       #B的引用减 1, 最后B对象的引用为 1 \n```\n\n![2017-7-16 143933](/images/2017-7-16 143933.jpg)\n\n在这个例子中程序执行完 del 语句后，A、B 对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对 GC 来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到 0。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏(内存空间在使用完毕后未释放)。为了解决对象的循环引用问题，Python 引入了标记-清除和分代回收两种 GC 机制。\n\n### 标记清除\n\n『标记清除 Mark—Sweep 』算法是一种基于追踪回技术实现的垃圾回收算法。它分为两个阶段：\n\n第一阶段是标记阶段，GC 会把所有的『活动对象』打上标记;\n\n第二阶段是把那些没有标记的对象『非活动对象』进行回收。\n\n那么 GC 又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用(指针)连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象(root object)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![2017-7-16 144138](/images/2017-7-16 144138.jpg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为 root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而 4 和 5 不可达，那么 1、2、3 就是活动对象，4 和 5 是非活动对象会被 GC 回收。\n\n标记清除算法作为 Python 的辅助垃圾收集技术主要处理的是一些容器对象，比如 list、dict、tuple，instance 等，因为对于字符串、数值对象是不可能造成循环引用问题。Python 使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n### 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python 将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代。\n\n```\n#define NUM_GENERATIONS 3\n#define GEN_HEAD(n) (&generations[n].head)\n\n/* linked lists of container objects */\nstatic struct gc_generation generations[NUM_GENERATIONS] = {\n    /* PyGC_Head,               threshold,  count */\n    {{{GEN_HEAD(0), GEN_HEAD(0), 0}},   700,    0},\n    {{{GEN_HEAD(1), GEN_HEAD(1), 0}},   10,     0},\n    {{{GEN_HEAD(2), GEN_HEAD(2), 0}},   10,     0},\n};\n```\n\nPython 将内存分为了3 代，分别为年轻代(第0代)、中年代(第1代)、老年代(第2代)，他们对应的是 3 个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python 垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为 Python 的辅助垃圾收集技术处理那些容器对象。\n\n\n\n\n\n> 参考文章：\n>\n> [Python垃圾回收机制](http://hbprotoss.github.io/posts/pythonla-ji-hui-shou-ji-zhi.html)  \n>\n> [Python中的垃圾回收机制](http://developer.51cto.com/art/201706/542251.htm)  ","source":"_posts/pythongc.md","raw":"---\ntitle: 浅析Python的垃圾回收机制\ndate: 2017-07-16 14:33:22\ntags:\n - Python\n - 垃圾回收\ncategories:\n - Python\n---\n\n之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。\n\n### 引用计数\n\nPython 语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早 George E. Collins 在1960的时候首次提出，50 年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个 ob_refcnt 字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数 ob_refcnt  加1，每当该对象的引用失效时计数 ob_refcnt 减 1，一旦对象的引用计数为 0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如 Java 并没有采用该算法做来垃圾的收集机制。\n\npython里每一个东西都是对象，它们的核心就是一个结构体：PyObject\n\n```\ntypedef struct_object {\n\tint ob_refcnt;\n \tstruct_typeobject *ob_type;\n}PyObject;\n```\n\n什么是循环引用？A 和 B 相互引用而再没有外部引用 A 与 B 中的任何一个，它们的引用计数虽然都为 1，但显然应该被回收，例子：\n\n```\na = { }     #对象A的引用计数为 1 \nb = { }     #对象B的引用计数为 1 \na['b'] = b  #B的引用计数增1 \nb['a'] = a  #A的引用计数增1 \ndel a       #A的引用减 1，最后A对象的引用为 1 \ndel b       #B的引用减 1, 最后B对象的引用为 1 \n```\n\n![2017-7-16 143933](/images/2017-7-16 143933.jpg)\n\n在这个例子中程序执行完 del 语句后，A、B 对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对 GC 来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到 0。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏(内存空间在使用完毕后未释放)。为了解决对象的循环引用问题，Python 引入了标记-清除和分代回收两种 GC 机制。\n\n### 标记清除\n\n『标记清除 Mark—Sweep 』算法是一种基于追踪回技术实现的垃圾回收算法。它分为两个阶段：\n\n第一阶段是标记阶段，GC 会把所有的『活动对象』打上标记;\n\n第二阶段是把那些没有标记的对象『非活动对象』进行回收。\n\n那么 GC 又是如何判断哪些是活动对象哪些是非活动对象的呢？\n\n对象之间通过引用(指针)连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象(root object)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n\n![2017-7-16 144138](/images/2017-7-16 144138.jpg)\n\n在上图中，我们把小黑圈视为全局变量，也就是把它作为 root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而 4 和 5 不可达，那么 1、2、3 就是活动对象，4 和 5 是非活动对象会被 GC 回收。\n\n标记清除算法作为 Python 的辅助垃圾收集技术主要处理的是一些容器对象，比如 list、dict、tuple，instance 等，因为对于字符串、数值对象是不可能造成循环引用问题。Python 使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n\n### 分代回收\n\n分代回收是一种以空间换时间的操作方式，Python 将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代。\n\n```\n#define NUM_GENERATIONS 3\n#define GEN_HEAD(n) (&generations[n].head)\n\n/* linked lists of container objects */\nstatic struct gc_generation generations[NUM_GENERATIONS] = {\n    /* PyGC_Head,               threshold,  count */\n    {{{GEN_HEAD(0), GEN_HEAD(0), 0}},   700,    0},\n    {{{GEN_HEAD(1), GEN_HEAD(1), 0}},   10,     0},\n    {{{GEN_HEAD(2), GEN_HEAD(2), 0}},   10,     0},\n};\n```\n\nPython 将内存分为了3 代，分别为年轻代(第0代)、中年代(第1代)、老年代(第2代)，他们对应的是 3 个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python 垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为 Python 的辅助垃圾收集技术处理那些容器对象。\n\n\n\n\n\n> 参考文章：\n>\n> [Python垃圾回收机制](http://hbprotoss.github.io/posts/pythonla-ji-hui-shou-ji-zhi.html)  \n>\n> [Python中的垃圾回收机制](http://developer.51cto.com/art/201706/542251.htm)  ","slug":"pythongc","published":1,"updated":"2020-10-25T06:43:32.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepu8002emolcovbgbsw2","content":"<p>之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>Python 语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早 George E. Collins 在1960的时候首次提出，50 年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个 ob_refcnt 字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数 ob_refcnt  加1，每当该对象的引用失效时计数 ob_refcnt 减 1，一旦对象的引用计数为 0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如 Java 并没有采用该算法做来垃圾的收集机制。</p>\n<p>python里每一个东西都是对象，它们的核心就是一个结构体：PyObject</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct_object &#123;</span><br><span class=\"line\">\tint ob_refcnt;</span><br><span class=\"line\"> \tstruct_typeobject *ob_type;</span><br><span class=\"line\">&#125;PyObject;</span><br></pre></td></tr></table></figure>\n<p>什么是循环引用？A 和 B 相互引用而再没有外部引用 A 与 B 中的任何一个，它们的引用计数虽然都为 1，但显然应该被回收，例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123; &#125;     #对象A的引用计数为 1 </span><br><span class=\"line\">b = &#123; &#125;     #对象B的引用计数为 1 </span><br><span class=\"line\">a[&apos;b&apos;] = b  #B的引用计数增1 </span><br><span class=\"line\">b[&apos;a&apos;] = a  #A的引用计数增1 </span><br><span class=\"line\">del a       #A的引用减 1，最后A对象的引用为 1 </span><br><span class=\"line\">del b       #B的引用减 1, 最后B对象的引用为 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-7-16 143933.jpg\" alt=\"2017-7-16 143933\"></p>\n<p>在这个例子中程序执行完 del 语句后，A、B 对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对 GC 来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到 0。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏(内存空间在使用完毕后未释放)。为了解决对象的循环引用问题，Python 引入了标记-清除和分代回收两种 GC 机制。</p>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>『标记清除 Mark—Sweep 』算法是一种基于追踪回技术实现的垃圾回收算法。它分为两个阶段：</p>\n<p>第一阶段是标记阶段，GC 会把所有的『活动对象』打上标记;</p>\n<p>第二阶段是把那些没有标记的对象『非活动对象』进行回收。</p>\n<p>那么 GC 又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用(指针)连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象(root object)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"/images/2017-7-16 144138.jpg\" alt=\"2017-7-16 144138\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为 root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而 4 和 5 不可达，那么 1、2、3 就是活动对象，4 和 5 是非活动对象会被 GC 回收。</p>\n<p>标记清除算法作为 Python 的辅助垃圾收集技术主要处理的是一些容器对象，比如 list、dict、tuple，instance 等，因为对于字符串、数值对象是不可能造成循环引用问题。Python 使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h3 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h3><p>分代回收是一种以空间换时间的操作方式，Python 将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define NUM_GENERATIONS 3</span><br><span class=\"line\">#define GEN_HEAD(n) (&amp;generations[n].head)</span><br><span class=\"line\"></span><br><span class=\"line\">/* linked lists of container objects */</span><br><span class=\"line\">static struct gc_generation generations[NUM_GENERATIONS] = &#123;</span><br><span class=\"line\">    /* PyGC_Head,               threshold,  count */</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(0), GEN_HEAD(0), 0&#125;&#125;,   700,    0&#125;,</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(1), GEN_HEAD(1), 0&#125;&#125;,   10,     0&#125;,</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(2), GEN_HEAD(2), 0&#125;&#125;,   10,     0&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Python 将内存分为了3 代，分别为年轻代(第0代)、中年代(第1代)、老年代(第2代)，他们对应的是 3 个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python 垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为 Python 的辅助垃圾收集技术处理那些容器对象。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://hbprotoss.github.io/posts/pythonla-ji-hui-shou-ji-zhi.html\" target=\"_blank\" rel=\"noopener\">Python垃圾回收机制</a>  </p>\n<p><a href=\"http://developer.51cto.com/art/201706/542251.htm\" target=\"_blank\" rel=\"noopener\">Python中的垃圾回收机制</a>  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>Python 语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早 George E. Collins 在1960的时候首次提出，50 年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个 ob_refcnt 字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数 ob_refcnt  加1，每当该对象的引用失效时计数 ob_refcnt 减 1，一旦对象的引用计数为 0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如 Java 并没有采用该算法做来垃圾的收集机制。</p>\n<p>python里每一个东西都是对象，它们的核心就是一个结构体：PyObject</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct_object &#123;</span><br><span class=\"line\">\tint ob_refcnt;</span><br><span class=\"line\"> \tstruct_typeobject *ob_type;</span><br><span class=\"line\">&#125;PyObject;</span><br></pre></td></tr></table></figure>\n<p>什么是循环引用？A 和 B 相互引用而再没有外部引用 A 与 B 中的任何一个，它们的引用计数虽然都为 1，但显然应该被回收，例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123; &#125;     #对象A的引用计数为 1 </span><br><span class=\"line\">b = &#123; &#125;     #对象B的引用计数为 1 </span><br><span class=\"line\">a[&apos;b&apos;] = b  #B的引用计数增1 </span><br><span class=\"line\">b[&apos;a&apos;] = a  #A的引用计数增1 </span><br><span class=\"line\">del a       #A的引用减 1，最后A对象的引用为 1 </span><br><span class=\"line\">del b       #B的引用减 1, 最后B对象的引用为 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-7-16 143933.jpg\" alt=\"2017-7-16 143933\"></p>\n<p>在这个例子中程序执行完 del 语句后，A、B 对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对 GC 来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到 0。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏(内存空间在使用完毕后未释放)。为了解决对象的循环引用问题，Python 引入了标记-清除和分代回收两种 GC 机制。</p>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>『标记清除 Mark—Sweep 』算法是一种基于追踪回技术实现的垃圾回收算法。它分为两个阶段：</p>\n<p>第一阶段是标记阶段，GC 会把所有的『活动对象』打上标记;</p>\n<p>第二阶段是把那些没有标记的对象『非活动对象』进行回收。</p>\n<p>那么 GC 又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>\n<p>对象之间通过引用(指针)连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象(root object)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>\n<p><img src=\"/images/2017-7-16 144138.jpg\" alt=\"2017-7-16 144138\"></p>\n<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为 root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而 4 和 5 不可达，那么 1、2、3 就是活动对象，4 和 5 是非活动对象会被 GC 回收。</p>\n<p>标记清除算法作为 Python 的辅助垃圾收集技术主要处理的是一些容器对象，比如 list、dict、tuple，instance 等，因为对于字符串、数值对象是不可能造成循环引用问题。Python 使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>\n<h3 id=\"分代回收\"><a href=\"#分代回收\" class=\"headerlink\" title=\"分代回收\"></a>分代回收</h3><p>分代回收是一种以空间换时间的操作方式，Python 将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define NUM_GENERATIONS 3</span><br><span class=\"line\">#define GEN_HEAD(n) (&amp;generations[n].head)</span><br><span class=\"line\"></span><br><span class=\"line\">/* linked lists of container objects */</span><br><span class=\"line\">static struct gc_generation generations[NUM_GENERATIONS] = &#123;</span><br><span class=\"line\">    /* PyGC_Head,               threshold,  count */</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(0), GEN_HEAD(0), 0&#125;&#125;,   700,    0&#125;,</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(1), GEN_HEAD(1), 0&#125;&#125;,   10,     0&#125;,</span><br><span class=\"line\">    &#123;&#123;&#123;GEN_HEAD(2), GEN_HEAD(2), 0&#125;&#125;,   10,     0&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Python 将内存分为了3 代，分别为年轻代(第0代)、中年代(第1代)、老年代(第2代)，他们对应的是 3 个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python 垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为 Python 的辅助垃圾收集技术处理那些容器对象。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://hbprotoss.github.io/posts/pythonla-ji-hui-shou-ji-zhi.html\" target=\"_blank\" rel=\"noopener\">Python垃圾回收机制</a>  </p>\n<p><a href=\"http://developer.51cto.com/art/201706/542251.htm\" target=\"_blank\" rel=\"noopener\">Python中的垃圾回收机制</a>  </p>\n</blockquote>\n"},{"title":"Requests库 - 会话对象","date":"2018-06-10T14:01:44.000Z","_content":"\n### 问题背景\n\n一个简单的需求是，向一个 host 地址+端口定时 post 一定量数据，程序使用 [requests](http://www.python-requests.org/en/master/) 的 post 方式，傻瓜式同步执行，因为没有时间限制。但是在执行后出现：\n\n```\nTimeoutError: [Errno 110] Connection timed out\n```\n\n显示连接超时了，程序每次运行 post 了大概500条数据，而这个错误只会出现一次，猜测可能是 HTTP 短连接的问题。\n\n### 解决方案\n\n其实对于\t 向同一主机发送多个请求 这种场景，使用 HTTP 的长连接效率会更高，复用底层的 TCP 连接。Requests 库同样提供了这样的方式，即会话对象 - [Session](http://www.python-requests.org/en/master/user/advanced/#session-objects) ，使用方式如下：\n\n```\ns = requests.Session()\nr = s.get('http://www.baidu.com')\nprint(r.text)\n```\n\n[源码](http://docs.python-requests.org/en/master/_modules/requests/adapters/?highlight=HTTPAdapter)如下：\n\n```\nclass Session(SessionRedirectMixin):\n \n    def __init__(self):\n        ...\n        self.max_redirects = DEFAULT_REDIRECT_LIMIT\n        self.cookies = cookiejar_from_dict({})\n        self.adapters = OrderedDict()\n        self.mount('https://', HTTPAdapter())\n        self.mount('http://', HTTPAdapter())\n        self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)\n \nclass HTTPAdapter(BaseAdapter):\n \n    def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n                 pool_block=DEFAULT_POOLBLOCK):\n        if max_retries == DEFAULT_RETRIES:\n            self.max_retries = Retry(0, read=False)\n        else:\n            self.max_retries = Retry.from_int(max_retries)\n        self.config = {}\n        self.proxy_manager = {}\n \n        super(HTTPAdapter, self).__init__()\n \n        self._pool_connections = pool_connections\n        self._pool_maxsize = pool_maxsize\n        self._pool_block = pool_block\n        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block) \n \nDEFAULT_POOLBLOCK = False  #是否阻塞连接池\nDEFAULT_POOLSIZE = 10  # 默认连接池\nDEFAULT_RETRIES = 0   # 默认重试次数\nDEFAULT_POOL_TIMEOUT = None  # 超时时间\n```\n\n默认情况下，Session 连接池大小为10，请求失败重试次数为0，但是一般情况下我们会需要稍大容量的连接池，从源码中可以看到，session 绑定了 `HTTPAdapter` 对象，所以我们可以自定义一个符合预期参数的 `HTTPAdapter` 对象。\n\n```\ndef get_http_session(self, pool_connections, pool_maxsize, max_retries):\n    session = requests.Session()\n    # 创建一个适配器，连接池的数量pool_connections, 最大数量pool_maxsize, 失败重试的次数max_retries\n    adapter = requests.adapters.HTTPAdapter(pool_connections = pool_connections,\n            pool_maxsize = pool_maxsize, max_retries = max_retries)\n    # 告诉requests，http协议和https协议都使用这个适配器\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    return session\n```\n\n然后就可以使用 session 的各个功能了。So Easy!\n\n\n\nRead More:\n\n> [Advanced Usage](http://www.python-requests.org/en/master/user/advanced/#session-objects) ","source":"_posts/requests-session.md","raw":"---\ntitle: Requests库 - 会话对象\ndate: 2018-06-10 22:01:44\ntags:\n - requests\n - session\n - 会话对象\ncategories:\n - requests\n---\n\n### 问题背景\n\n一个简单的需求是，向一个 host 地址+端口定时 post 一定量数据，程序使用 [requests](http://www.python-requests.org/en/master/) 的 post 方式，傻瓜式同步执行，因为没有时间限制。但是在执行后出现：\n\n```\nTimeoutError: [Errno 110] Connection timed out\n```\n\n显示连接超时了，程序每次运行 post 了大概500条数据，而这个错误只会出现一次，猜测可能是 HTTP 短连接的问题。\n\n### 解决方案\n\n其实对于\t 向同一主机发送多个请求 这种场景，使用 HTTP 的长连接效率会更高，复用底层的 TCP 连接。Requests 库同样提供了这样的方式，即会话对象 - [Session](http://www.python-requests.org/en/master/user/advanced/#session-objects) ，使用方式如下：\n\n```\ns = requests.Session()\nr = s.get('http://www.baidu.com')\nprint(r.text)\n```\n\n[源码](http://docs.python-requests.org/en/master/_modules/requests/adapters/?highlight=HTTPAdapter)如下：\n\n```\nclass Session(SessionRedirectMixin):\n \n    def __init__(self):\n        ...\n        self.max_redirects = DEFAULT_REDIRECT_LIMIT\n        self.cookies = cookiejar_from_dict({})\n        self.adapters = OrderedDict()\n        self.mount('https://', HTTPAdapter())\n        self.mount('http://', HTTPAdapter())\n        self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)\n \nclass HTTPAdapter(BaseAdapter):\n \n    def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n                 pool_block=DEFAULT_POOLBLOCK):\n        if max_retries == DEFAULT_RETRIES:\n            self.max_retries = Retry(0, read=False)\n        else:\n            self.max_retries = Retry.from_int(max_retries)\n        self.config = {}\n        self.proxy_manager = {}\n \n        super(HTTPAdapter, self).__init__()\n \n        self._pool_connections = pool_connections\n        self._pool_maxsize = pool_maxsize\n        self._pool_block = pool_block\n        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block) \n \nDEFAULT_POOLBLOCK = False  #是否阻塞连接池\nDEFAULT_POOLSIZE = 10  # 默认连接池\nDEFAULT_RETRIES = 0   # 默认重试次数\nDEFAULT_POOL_TIMEOUT = None  # 超时时间\n```\n\n默认情况下，Session 连接池大小为10，请求失败重试次数为0，但是一般情况下我们会需要稍大容量的连接池，从源码中可以看到，session 绑定了 `HTTPAdapter` 对象，所以我们可以自定义一个符合预期参数的 `HTTPAdapter` 对象。\n\n```\ndef get_http_session(self, pool_connections, pool_maxsize, max_retries):\n    session = requests.Session()\n    # 创建一个适配器，连接池的数量pool_connections, 最大数量pool_maxsize, 失败重试的次数max_retries\n    adapter = requests.adapters.HTTPAdapter(pool_connections = pool_connections,\n            pool_maxsize = pool_maxsize, max_retries = max_retries)\n    # 告诉requests，http协议和https协议都使用这个适配器\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n    return session\n```\n\n然后就可以使用 session 的各个功能了。So Easy!\n\n\n\nRead More:\n\n> [Advanced Usage](http://www.python-requests.org/en/master/user/advanced/#session-objects) ","slug":"requests-session","published":1,"updated":"2020-10-25T06:43:32.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepub002gmolcu2ibv0rq","content":"<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>一个简单的需求是，向一个 host 地址+端口定时 post 一定量数据，程序使用 <a href=\"http://www.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">requests</a> 的 post 方式，傻瓜式同步执行，因为没有时间限制。但是在执行后出现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeoutError: [Errno 110] Connection timed out</span><br></pre></td></tr></table></figure>\n<p>显示连接超时了，程序每次运行 post 了大概500条数据，而这个错误只会出现一次，猜测可能是 HTTP 短连接的问题。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>其实对于     向同一主机发送多个请求 这种场景，使用 HTTP 的长连接效率会更高，复用底层的 TCP 连接。Requests 库同样提供了这样的方式，即会话对象 - <a href=\"http://www.python-requests.org/en/master/user/advanced/#session-objects\" target=\"_blank\" rel=\"noopener\">Session</a> ，使用方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = requests.Session()</span><br><span class=\"line\">r = s.get(&apos;http://www.baidu.com&apos;)</span><br><span class=\"line\">print(r.text)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://docs.python-requests.org/en/master/_modules/requests/adapters/?highlight=HTTPAdapter\" target=\"_blank\" rel=\"noopener\">源码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Session(SessionRedirectMixin):</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        self.max_redirects = DEFAULT_REDIRECT_LIMIT</span><br><span class=\"line\">        self.cookies = cookiejar_from_dict(&#123;&#125;)</span><br><span class=\"line\">        self.adapters = OrderedDict()</span><br><span class=\"line\">        self.mount(&apos;https://&apos;, HTTPAdapter())</span><br><span class=\"line\">        self.mount(&apos;http://&apos;, HTTPAdapter())</span><br><span class=\"line\">        self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)</span><br><span class=\"line\"> </span><br><span class=\"line\">class HTTPAdapter(BaseAdapter):</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __init__(self, pool_connections=DEFAULT_POOLSIZE,</span><br><span class=\"line\">                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,</span><br><span class=\"line\">                 pool_block=DEFAULT_POOLBLOCK):</span><br><span class=\"line\">        if max_retries == DEFAULT_RETRIES:</span><br><span class=\"line\">            self.max_retries = Retry(0, read=False)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.max_retries = Retry.from_int(max_retries)</span><br><span class=\"line\">        self.config = &#123;&#125;</span><br><span class=\"line\">        self.proxy_manager = &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        super(HTTPAdapter, self).__init__()</span><br><span class=\"line\"> </span><br><span class=\"line\">        self._pool_connections = pool_connections</span><br><span class=\"line\">        self._pool_maxsize = pool_maxsize</span><br><span class=\"line\">        self._pool_block = pool_block</span><br><span class=\"line\">        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block) </span><br><span class=\"line\"> </span><br><span class=\"line\">DEFAULT_POOLBLOCK = False  #是否阻塞连接池</span><br><span class=\"line\">DEFAULT_POOLSIZE = 10  # 默认连接池</span><br><span class=\"line\">DEFAULT_RETRIES = 0   # 默认重试次数</span><br><span class=\"line\">DEFAULT_POOL_TIMEOUT = None  # 超时时间</span><br></pre></td></tr></table></figure>\n<p>默认情况下，Session 连接池大小为10，请求失败重试次数为0，但是一般情况下我们会需要稍大容量的连接池，从源码中可以看到，session 绑定了 <code>HTTPAdapter</code> 对象，所以我们可以自定义一个符合预期参数的 <code>HTTPAdapter</code> 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_http_session(self, pool_connections, pool_maxsize, max_retries):</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    # 创建一个适配器，连接池的数量pool_connections, 最大数量pool_maxsize, 失败重试的次数max_retries</span><br><span class=\"line\">    adapter = requests.adapters.HTTPAdapter(pool_connections = pool_connections,</span><br><span class=\"line\">            pool_maxsize = pool_maxsize, max_retries = max_retries)</span><br><span class=\"line\">    # 告诉requests，http协议和https协议都使用这个适配器</span><br><span class=\"line\">    session.mount(&apos;http://&apos;, adapter)</span><br><span class=\"line\">    session.mount(&apos;https://&apos;, adapter)</span><br><span class=\"line\">    return session</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用 session 的各个功能了。So Easy!</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.python-requests.org/en/master/user/advanced/#session-objects\" target=\"_blank\" rel=\"noopener\">Advanced Usage</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>一个简单的需求是，向一个 host 地址+端口定时 post 一定量数据，程序使用 <a href=\"http://www.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">requests</a> 的 post 方式，傻瓜式同步执行，因为没有时间限制。但是在执行后出现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeoutError: [Errno 110] Connection timed out</span><br></pre></td></tr></table></figure>\n<p>显示连接超时了，程序每次运行 post 了大概500条数据，而这个错误只会出现一次，猜测可能是 HTTP 短连接的问题。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>其实对于     向同一主机发送多个请求 这种场景，使用 HTTP 的长连接效率会更高，复用底层的 TCP 连接。Requests 库同样提供了这样的方式，即会话对象 - <a href=\"http://www.python-requests.org/en/master/user/advanced/#session-objects\" target=\"_blank\" rel=\"noopener\">Session</a> ，使用方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = requests.Session()</span><br><span class=\"line\">r = s.get(&apos;http://www.baidu.com&apos;)</span><br><span class=\"line\">print(r.text)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://docs.python-requests.org/en/master/_modules/requests/adapters/?highlight=HTTPAdapter\" target=\"_blank\" rel=\"noopener\">源码</a>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Session(SessionRedirectMixin):</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        self.max_redirects = DEFAULT_REDIRECT_LIMIT</span><br><span class=\"line\">        self.cookies = cookiejar_from_dict(&#123;&#125;)</span><br><span class=\"line\">        self.adapters = OrderedDict()</span><br><span class=\"line\">        self.mount(&apos;https://&apos;, HTTPAdapter())</span><br><span class=\"line\">        self.mount(&apos;http://&apos;, HTTPAdapter())</span><br><span class=\"line\">        self.redirect_cache = RecentlyUsedContainer(REDIRECT_CACHE_SIZE)</span><br><span class=\"line\"> </span><br><span class=\"line\">class HTTPAdapter(BaseAdapter):</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __init__(self, pool_connections=DEFAULT_POOLSIZE,</span><br><span class=\"line\">                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,</span><br><span class=\"line\">                 pool_block=DEFAULT_POOLBLOCK):</span><br><span class=\"line\">        if max_retries == DEFAULT_RETRIES:</span><br><span class=\"line\">            self.max_retries = Retry(0, read=False)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.max_retries = Retry.from_int(max_retries)</span><br><span class=\"line\">        self.config = &#123;&#125;</span><br><span class=\"line\">        self.proxy_manager = &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        super(HTTPAdapter, self).__init__()</span><br><span class=\"line\"> </span><br><span class=\"line\">        self._pool_connections = pool_connections</span><br><span class=\"line\">        self._pool_maxsize = pool_maxsize</span><br><span class=\"line\">        self._pool_block = pool_block</span><br><span class=\"line\">        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block) </span><br><span class=\"line\"> </span><br><span class=\"line\">DEFAULT_POOLBLOCK = False  #是否阻塞连接池</span><br><span class=\"line\">DEFAULT_POOLSIZE = 10  # 默认连接池</span><br><span class=\"line\">DEFAULT_RETRIES = 0   # 默认重试次数</span><br><span class=\"line\">DEFAULT_POOL_TIMEOUT = None  # 超时时间</span><br></pre></td></tr></table></figure>\n<p>默认情况下，Session 连接池大小为10，请求失败重试次数为0，但是一般情况下我们会需要稍大容量的连接池，从源码中可以看到，session 绑定了 <code>HTTPAdapter</code> 对象，所以我们可以自定义一个符合预期参数的 <code>HTTPAdapter</code> 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_http_session(self, pool_connections, pool_maxsize, max_retries):</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    # 创建一个适配器，连接池的数量pool_connections, 最大数量pool_maxsize, 失败重试的次数max_retries</span><br><span class=\"line\">    adapter = requests.adapters.HTTPAdapter(pool_connections = pool_connections,</span><br><span class=\"line\">            pool_maxsize = pool_maxsize, max_retries = max_retries)</span><br><span class=\"line\">    # 告诉requests，http协议和https协议都使用这个适配器</span><br><span class=\"line\">    session.mount(&apos;http://&apos;, adapter)</span><br><span class=\"line\">    session.mount(&apos;https://&apos;, adapter)</span><br><span class=\"line\">    return session</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用 session 的各个功能了。So Easy!</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.python-requests.org/en/master/user/advanced/#session-objects\" target=\"_blank\" rel=\"noopener\">Advanced Usage</a> </p>\n</blockquote>\n"},{"title":"跨服务器Session共享","date":"2017-06-07T06:31:42.000Z","_content":"\n默认情况下，PHP 的 session 文件是保存在磁盘文件中。在php.ini配置文件中的配置项如下：\n\n```\nsession.save_handler = files\nsession.save_path = \"N;/path\"\n```\n\n第一个配置项是指定使用 files(文件形式) 存储session数据。\n\n第二个参数指定保存的路径。N 表示生成多少级目录(不放到一个目录下，分散到多个磁盘目录中去)\n\n所以我们可以知道，session 的数据默认是保存在磁盘文件中。\n\n### 问题背景\n\n伴随网站业务规模和访问量的逐步发展，原本由单台服务器、单个域名的迷你网站架构已经无法满足发展需要。\n\n此时我们可能会购买更多服务器，并且启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上；或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。\n\nOK，头脑中我们已经构思了这样的解决方案，不过进入深入开发后新的技术问题又随之而来：\n\n我们把网站程序分布部署到多台服务器上，而且独立为几个二级域名，由于 session 受实现原理的局限（PHP中session默认以文件的形式保存在本地服务器的硬盘），使得我们的网站用户不得不经常在几个频道间来回输入用户名、密码登入，导致用户体验大打折扣；另外，原本程序可以直接从用户 session 变量中读取的资料（如：昵称、积分、登入时间等），因为无法跨服务器同步更新 session 变量，迫使开发人员必须实时读写数据库，从而增加了数据库的负担。\n\n于是，解决网站跨服务器之间的Session共享方案需求变得迫切起来。\n\n### 解决方案\n\n#### 基于 Cookie 的 Session 共享\n\n这个方案我们可能比较陌生，但它在大型网站中还是比较普遍被使用。原理是将全站用户的 session 信息加密、序列化后以cookie的方式，统一种植在根域名下（如：.host.com），利用浏览器访问该根域名下的所有二级域名站点时，会传递与之域名对应的所有 cookie 内容的特性，从而实现用户的 cookie 化 session 在多服务间的共享访问。\n\n这个方案的优点无需额外的服务器资源；缺点是由于受 HTTP 协议头信心长度的限制，仅能够存储小部分的用户信息，同时cookie 化的 session 内容需要进行安全加解密（如：采用DES、RSA等进行明文加解密；再由MD5、SHA-1等算法进行防伪认证），另外它也会占用一定的带宽资源，因为浏览器会在请求当前域名下任何资源时将本地 cookie 附加在 HTTP 头中传递到服务器。\n\n#### 基于数据库的 Session 共享\n\n采用一台 MySQL 服务器做共享服务器，把所有的 session 的数据保存到 MySQL 服务器上，所有 web服务器都来这台MySQL 服务器来获取 session 数据，并且建议使用内存表Heap，提高session操作的读写效率。这个方案的实用性比较强，相信大家普遍在使用，它的缺点在于 session 的并发读写能力取决于 MySQL 数据库的性能，同时需要自己实现 session 淘汰逻辑，以便定时从数据表中更新、删除 session 记录，当并发过高时容易出现表锁，虽然我们可以选择行级锁的表引擎，但不得不否认使用数据库存储 session 还是有些杀鸡用牛刀的架势。\n\n#### 基于 NFS 的 Session 共享\n\n这种方法和使用数据库类似，采用一台公共的 NFS 服务器做共享服务器，所有的 web服务器都把 session 数据写到共享存储介质上，也都要来这台服务器获取 session 数据，通过这样的方式来实现 session 数据的共享。这个方案实现最为简单，无需做过多的二次开发，仅需将共享目录服务器 mount 到各频道服务器的本地 session 目录即可，缺点是 NFS 依托于复杂的安全机制和文件系统，因此并发效率不高，尤其对于 session 这类高并发读写的小文件，会由于共享目录服务器的 io-wait过高，最终拖累前端 web 应用程序的执行效率。\n\n#### 基于缓存数据库的 Session 共享\n\n这种方式可能是目前互联网中比较流行的一种用法。所有 web服务器都把 session 写入到 MemCache/Redis ，也都从MemCache/Redis 来获取。MemCache/Redis 本身就是一个分布式缓存，便于扩展。网络开销较小，几乎没有IO。性能也更好。缺点，受制于 MemCache/Redis 的容量，如果用户量突然增多， cache 由于容量的限制会将一些数据挤出缓存，另外 MemCache/Redis 故障或重启 session 会完全丢失掉。\n\n#### 利用组播实现 Session 共享\n\n通过组播的方式进行集群间的共享，比如 tomcat 目前就具备这样的功能，优点是 web 容器自身支持，配置简单，适合小型网站。缺点是当一台机器的上的 session 变更后会将变更的数据以组播的形式分发给集群间的所有节点，对网络和所有的web 容器都是存在开销。集群越大浪费越严重。不能做到线性的扩展。\n\n\n\n\n\n> 参考文章：\n>\n> [如何在多台web服务器上共享session？](http://blog.csdn.net/lamp_yang_3533/article/details/51984201)  [多服务器之间Session共享](http://www.cnblogs.com/imhaiyang/articles/4949459.html)  [如何解决 cluster 中应用中 session 共享问题？都有那些方案，各有什么优缺点？](https://www.zhihu.com/question/19651970/answer/12534778)","source":"_posts/sharesession.md","raw":"---\ntitle: 跨服务器Session共享\ndate: 2017-06-07 14:31:42\ntags:\n - session共享\n - 网络编程\n - HTTP\ncategories:\n - 网络编程\n---\n\n默认情况下，PHP 的 session 文件是保存在磁盘文件中。在php.ini配置文件中的配置项如下：\n\n```\nsession.save_handler = files\nsession.save_path = \"N;/path\"\n```\n\n第一个配置项是指定使用 files(文件形式) 存储session数据。\n\n第二个参数指定保存的路径。N 表示生成多少级目录(不放到一个目录下，分散到多个磁盘目录中去)\n\n所以我们可以知道，session 的数据默认是保存在磁盘文件中。\n\n### 问题背景\n\n伴随网站业务规模和访问量的逐步发展，原本由单台服务器、单个域名的迷你网站架构已经无法满足发展需要。\n\n此时我们可能会购买更多服务器，并且启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上；或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。\n\nOK，头脑中我们已经构思了这样的解决方案，不过进入深入开发后新的技术问题又随之而来：\n\n我们把网站程序分布部署到多台服务器上，而且独立为几个二级域名，由于 session 受实现原理的局限（PHP中session默认以文件的形式保存在本地服务器的硬盘），使得我们的网站用户不得不经常在几个频道间来回输入用户名、密码登入，导致用户体验大打折扣；另外，原本程序可以直接从用户 session 变量中读取的资料（如：昵称、积分、登入时间等），因为无法跨服务器同步更新 session 变量，迫使开发人员必须实时读写数据库，从而增加了数据库的负担。\n\n于是，解决网站跨服务器之间的Session共享方案需求变得迫切起来。\n\n### 解决方案\n\n#### 基于 Cookie 的 Session 共享\n\n这个方案我们可能比较陌生，但它在大型网站中还是比较普遍被使用。原理是将全站用户的 session 信息加密、序列化后以cookie的方式，统一种植在根域名下（如：.host.com），利用浏览器访问该根域名下的所有二级域名站点时，会传递与之域名对应的所有 cookie 内容的特性，从而实现用户的 cookie 化 session 在多服务间的共享访问。\n\n这个方案的优点无需额外的服务器资源；缺点是由于受 HTTP 协议头信心长度的限制，仅能够存储小部分的用户信息，同时cookie 化的 session 内容需要进行安全加解密（如：采用DES、RSA等进行明文加解密；再由MD5、SHA-1等算法进行防伪认证），另外它也会占用一定的带宽资源，因为浏览器会在请求当前域名下任何资源时将本地 cookie 附加在 HTTP 头中传递到服务器。\n\n#### 基于数据库的 Session 共享\n\n采用一台 MySQL 服务器做共享服务器，把所有的 session 的数据保存到 MySQL 服务器上，所有 web服务器都来这台MySQL 服务器来获取 session 数据，并且建议使用内存表Heap，提高session操作的读写效率。这个方案的实用性比较强，相信大家普遍在使用，它的缺点在于 session 的并发读写能力取决于 MySQL 数据库的性能，同时需要自己实现 session 淘汰逻辑，以便定时从数据表中更新、删除 session 记录，当并发过高时容易出现表锁，虽然我们可以选择行级锁的表引擎，但不得不否认使用数据库存储 session 还是有些杀鸡用牛刀的架势。\n\n#### 基于 NFS 的 Session 共享\n\n这种方法和使用数据库类似，采用一台公共的 NFS 服务器做共享服务器，所有的 web服务器都把 session 数据写到共享存储介质上，也都要来这台服务器获取 session 数据，通过这样的方式来实现 session 数据的共享。这个方案实现最为简单，无需做过多的二次开发，仅需将共享目录服务器 mount 到各频道服务器的本地 session 目录即可，缺点是 NFS 依托于复杂的安全机制和文件系统，因此并发效率不高，尤其对于 session 这类高并发读写的小文件，会由于共享目录服务器的 io-wait过高，最终拖累前端 web 应用程序的执行效率。\n\n#### 基于缓存数据库的 Session 共享\n\n这种方式可能是目前互联网中比较流行的一种用法。所有 web服务器都把 session 写入到 MemCache/Redis ，也都从MemCache/Redis 来获取。MemCache/Redis 本身就是一个分布式缓存，便于扩展。网络开销较小，几乎没有IO。性能也更好。缺点，受制于 MemCache/Redis 的容量，如果用户量突然增多， cache 由于容量的限制会将一些数据挤出缓存，另外 MemCache/Redis 故障或重启 session 会完全丢失掉。\n\n#### 利用组播实现 Session 共享\n\n通过组播的方式进行集群间的共享，比如 tomcat 目前就具备这样的功能，优点是 web 容器自身支持，配置简单，适合小型网站。缺点是当一台机器的上的 session 变更后会将变更的数据以组播的形式分发给集群间的所有节点，对网络和所有的web 容器都是存在开销。集群越大浪费越严重。不能做到线性的扩展。\n\n\n\n\n\n> 参考文章：\n>\n> [如何在多台web服务器上共享session？](http://blog.csdn.net/lamp_yang_3533/article/details/51984201)  [多服务器之间Session共享](http://www.cnblogs.com/imhaiyang/articles/4949459.html)  [如何解决 cluster 中应用中 session 共享问题？都有那些方案，各有什么优缺点？](https://www.zhihu.com/question/19651970/answer/12534778)","slug":"sharesession","published":1,"updated":"2020-10-25T06:43:32.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepug002kmolchfuinfgv","content":"<p>默认情况下，PHP 的 session 文件是保存在磁盘文件中。在php.ini配置文件中的配置项如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.save_handler = files</span><br><span class=\"line\">session.save_path = &quot;N;/path&quot;</span><br></pre></td></tr></table></figure>\n<p>第一个配置项是指定使用 files(文件形式) 存储session数据。</p>\n<p>第二个参数指定保存的路径。N 表示生成多少级目录(不放到一个目录下，分散到多个磁盘目录中去)</p>\n<p>所以我们可以知道，session 的数据默认是保存在磁盘文件中。</p>\n<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>伴随网站业务规模和访问量的逐步发展，原本由单台服务器、单个域名的迷你网站架构已经无法满足发展需要。</p>\n<p>此时我们可能会购买更多服务器，并且启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上；或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。</p>\n<p>OK，头脑中我们已经构思了这样的解决方案，不过进入深入开发后新的技术问题又随之而来：</p>\n<p>我们把网站程序分布部署到多台服务器上，而且独立为几个二级域名，由于 session 受实现原理的局限（PHP中session默认以文件的形式保存在本地服务器的硬盘），使得我们的网站用户不得不经常在几个频道间来回输入用户名、密码登入，导致用户体验大打折扣；另外，原本程序可以直接从用户 session 变量中读取的资料（如：昵称、积分、登入时间等），因为无法跨服务器同步更新 session 变量，迫使开发人员必须实时读写数据库，从而增加了数据库的负担。</p>\n<p>于是，解决网站跨服务器之间的Session共享方案需求变得迫切起来。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于-Cookie-的-Session-共享\"><a href=\"#基于-Cookie-的-Session-共享\" class=\"headerlink\" title=\"基于 Cookie 的 Session 共享\"></a>基于 Cookie 的 Session 共享</h4><p>这个方案我们可能比较陌生，但它在大型网站中还是比较普遍被使用。原理是将全站用户的 session 信息加密、序列化后以cookie的方式，统一种植在根域名下（如：.host.com），利用浏览器访问该根域名下的所有二级域名站点时，会传递与之域名对应的所有 cookie 内容的特性，从而实现用户的 cookie 化 session 在多服务间的共享访问。</p>\n<p>这个方案的优点无需额外的服务器资源；缺点是由于受 HTTP 协议头信心长度的限制，仅能够存储小部分的用户信息，同时cookie 化的 session 内容需要进行安全加解密（如：采用DES、RSA等进行明文加解密；再由MD5、SHA-1等算法进行防伪认证），另外它也会占用一定的带宽资源，因为浏览器会在请求当前域名下任何资源时将本地 cookie 附加在 HTTP 头中传递到服务器。</p>\n<h4 id=\"基于数据库的-Session-共享\"><a href=\"#基于数据库的-Session-共享\" class=\"headerlink\" title=\"基于数据库的 Session 共享\"></a>基于数据库的 Session 共享</h4><p>采用一台 MySQL 服务器做共享服务器，把所有的 session 的数据保存到 MySQL 服务器上，所有 web服务器都来这台MySQL 服务器来获取 session 数据，并且建议使用内存表Heap，提高session操作的读写效率。这个方案的实用性比较强，相信大家普遍在使用，它的缺点在于 session 的并发读写能力取决于 MySQL 数据库的性能，同时需要自己实现 session 淘汰逻辑，以便定时从数据表中更新、删除 session 记录，当并发过高时容易出现表锁，虽然我们可以选择行级锁的表引擎，但不得不否认使用数据库存储 session 还是有些杀鸡用牛刀的架势。</p>\n<h4 id=\"基于-NFS-的-Session-共享\"><a href=\"#基于-NFS-的-Session-共享\" class=\"headerlink\" title=\"基于 NFS 的 Session 共享\"></a>基于 NFS 的 Session 共享</h4><p>这种方法和使用数据库类似，采用一台公共的 NFS 服务器做共享服务器，所有的 web服务器都把 session 数据写到共享存储介质上，也都要来这台服务器获取 session 数据，通过这样的方式来实现 session 数据的共享。这个方案实现最为简单，无需做过多的二次开发，仅需将共享目录服务器 mount 到各频道服务器的本地 session 目录即可，缺点是 NFS 依托于复杂的安全机制和文件系统，因此并发效率不高，尤其对于 session 这类高并发读写的小文件，会由于共享目录服务器的 io-wait过高，最终拖累前端 web 应用程序的执行效率。</p>\n<h4 id=\"基于缓存数据库的-Session-共享\"><a href=\"#基于缓存数据库的-Session-共享\" class=\"headerlink\" title=\"基于缓存数据库的 Session 共享\"></a>基于缓存数据库的 Session 共享</h4><p>这种方式可能是目前互联网中比较流行的一种用法。所有 web服务器都把 session 写入到 MemCache/Redis ，也都从MemCache/Redis 来获取。MemCache/Redis 本身就是一个分布式缓存，便于扩展。网络开销较小，几乎没有IO。性能也更好。缺点，受制于 MemCache/Redis 的容量，如果用户量突然增多， cache 由于容量的限制会将一些数据挤出缓存，另外 MemCache/Redis 故障或重启 session 会完全丢失掉。</p>\n<h4 id=\"利用组播实现-Session-共享\"><a href=\"#利用组播实现-Session-共享\" class=\"headerlink\" title=\"利用组播实现 Session 共享\"></a>利用组播实现 Session 共享</h4><p>通过组播的方式进行集群间的共享，比如 tomcat 目前就具备这样的功能，优点是 web 容器自身支持，配置简单，适合小型网站。缺点是当一台机器的上的 session 变更后会将变更的数据以组播的形式分发给集群间的所有节点，对网络和所有的web 容器都是存在开销。集群越大浪费越严重。不能做到线性的扩展。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/lamp_yang_3533/article/details/51984201\" target=\"_blank\" rel=\"noopener\">如何在多台web服务器上共享session？</a>  <a href=\"http://www.cnblogs.com/imhaiyang/articles/4949459.html\" target=\"_blank\" rel=\"noopener\">多服务器之间Session共享</a>  <a href=\"https://www.zhihu.com/question/19651970/answer/12534778\" target=\"_blank\" rel=\"noopener\">如何解决 cluster 中应用中 session 共享问题？都有那些方案，各有什么优缺点？</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>默认情况下，PHP 的 session 文件是保存在磁盘文件中。在php.ini配置文件中的配置项如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.save_handler = files</span><br><span class=\"line\">session.save_path = &quot;N;/path&quot;</span><br></pre></td></tr></table></figure>\n<p>第一个配置项是指定使用 files(文件形式) 存储session数据。</p>\n<p>第二个参数指定保存的路径。N 表示生成多少级目录(不放到一个目录下，分散到多个磁盘目录中去)</p>\n<p>所以我们可以知道，session 的数据默认是保存在磁盘文件中。</p>\n<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>伴随网站业务规模和访问量的逐步发展，原本由单台服务器、单个域名的迷你网站架构已经无法满足发展需要。</p>\n<p>此时我们可能会购买更多服务器，并且启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上；或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。</p>\n<p>OK，头脑中我们已经构思了这样的解决方案，不过进入深入开发后新的技术问题又随之而来：</p>\n<p>我们把网站程序分布部署到多台服务器上，而且独立为几个二级域名，由于 session 受实现原理的局限（PHP中session默认以文件的形式保存在本地服务器的硬盘），使得我们的网站用户不得不经常在几个频道间来回输入用户名、密码登入，导致用户体验大打折扣；另外，原本程序可以直接从用户 session 变量中读取的资料（如：昵称、积分、登入时间等），因为无法跨服务器同步更新 session 变量，迫使开发人员必须实时读写数据库，从而增加了数据库的负担。</p>\n<p>于是，解决网站跨服务器之间的Session共享方案需求变得迫切起来。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于-Cookie-的-Session-共享\"><a href=\"#基于-Cookie-的-Session-共享\" class=\"headerlink\" title=\"基于 Cookie 的 Session 共享\"></a>基于 Cookie 的 Session 共享</h4><p>这个方案我们可能比较陌生，但它在大型网站中还是比较普遍被使用。原理是将全站用户的 session 信息加密、序列化后以cookie的方式，统一种植在根域名下（如：.host.com），利用浏览器访问该根域名下的所有二级域名站点时，会传递与之域名对应的所有 cookie 内容的特性，从而实现用户的 cookie 化 session 在多服务间的共享访问。</p>\n<p>这个方案的优点无需额外的服务器资源；缺点是由于受 HTTP 协议头信心长度的限制，仅能够存储小部分的用户信息，同时cookie 化的 session 内容需要进行安全加解密（如：采用DES、RSA等进行明文加解密；再由MD5、SHA-1等算法进行防伪认证），另外它也会占用一定的带宽资源，因为浏览器会在请求当前域名下任何资源时将本地 cookie 附加在 HTTP 头中传递到服务器。</p>\n<h4 id=\"基于数据库的-Session-共享\"><a href=\"#基于数据库的-Session-共享\" class=\"headerlink\" title=\"基于数据库的 Session 共享\"></a>基于数据库的 Session 共享</h4><p>采用一台 MySQL 服务器做共享服务器，把所有的 session 的数据保存到 MySQL 服务器上，所有 web服务器都来这台MySQL 服务器来获取 session 数据，并且建议使用内存表Heap，提高session操作的读写效率。这个方案的实用性比较强，相信大家普遍在使用，它的缺点在于 session 的并发读写能力取决于 MySQL 数据库的性能，同时需要自己实现 session 淘汰逻辑，以便定时从数据表中更新、删除 session 记录，当并发过高时容易出现表锁，虽然我们可以选择行级锁的表引擎，但不得不否认使用数据库存储 session 还是有些杀鸡用牛刀的架势。</p>\n<h4 id=\"基于-NFS-的-Session-共享\"><a href=\"#基于-NFS-的-Session-共享\" class=\"headerlink\" title=\"基于 NFS 的 Session 共享\"></a>基于 NFS 的 Session 共享</h4><p>这种方法和使用数据库类似，采用一台公共的 NFS 服务器做共享服务器，所有的 web服务器都把 session 数据写到共享存储介质上，也都要来这台服务器获取 session 数据，通过这样的方式来实现 session 数据的共享。这个方案实现最为简单，无需做过多的二次开发，仅需将共享目录服务器 mount 到各频道服务器的本地 session 目录即可，缺点是 NFS 依托于复杂的安全机制和文件系统，因此并发效率不高，尤其对于 session 这类高并发读写的小文件，会由于共享目录服务器的 io-wait过高，最终拖累前端 web 应用程序的执行效率。</p>\n<h4 id=\"基于缓存数据库的-Session-共享\"><a href=\"#基于缓存数据库的-Session-共享\" class=\"headerlink\" title=\"基于缓存数据库的 Session 共享\"></a>基于缓存数据库的 Session 共享</h4><p>这种方式可能是目前互联网中比较流行的一种用法。所有 web服务器都把 session 写入到 MemCache/Redis ，也都从MemCache/Redis 来获取。MemCache/Redis 本身就是一个分布式缓存，便于扩展。网络开销较小，几乎没有IO。性能也更好。缺点，受制于 MemCache/Redis 的容量，如果用户量突然增多， cache 由于容量的限制会将一些数据挤出缓存，另外 MemCache/Redis 故障或重启 session 会完全丢失掉。</p>\n<h4 id=\"利用组播实现-Session-共享\"><a href=\"#利用组播实现-Session-共享\" class=\"headerlink\" title=\"利用组播实现 Session 共享\"></a>利用组播实现 Session 共享</h4><p>通过组播的方式进行集群间的共享，比如 tomcat 目前就具备这样的功能，优点是 web 容器自身支持，配置简单，适合小型网站。缺点是当一台机器的上的 session 变更后会将变更的数据以组播的形式分发给集群间的所有节点，对网络和所有的web 容器都是存在开销。集群越大浪费越严重。不能做到线性的扩展。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/lamp_yang_3533/article/details/51984201\" target=\"_blank\" rel=\"noopener\">如何在多台web服务器上共享session？</a>  <a href=\"http://www.cnblogs.com/imhaiyang/articles/4949459.html\" target=\"_blank\" rel=\"noopener\">多服务器之间Session共享</a>  <a href=\"https://www.zhihu.com/question/19651970/answer/12534778\" target=\"_blank\" rel=\"noopener\">如何解决 cluster 中应用中 session 共享问题？都有那些方案，各有什么优缺点？</a></p>\n</blockquote>\n"},{"title":"新浪2014校园招聘 PHP 开发工程师","date":"2017-04-09T06:13:44.000Z","_content":"\n#### PHP中的%\n\n在PHP中，正数%正数为正数，正数%负数为正数，负数%正数为负数，Example：\n\n```\necho 24 % 5;\t// 输出 4\necho 24 % (-5);\t// 输出 4\necho -24 % 5;\t// 输出 -4\n```\n\n#### 析构函数\n\n在PHP5中，如果需要类 C 的实例销毁时自动完成默写逻辑，**定义析构函数_­­__destruct**\n\n#### shell命令\n\n**top**：用于实时显示进程的动态。\n\n**ps**：用于显示当前进程的状态。\n\n**mv**：用来为文件或目录改名、或将文件或目录移入其它位置。\n\n**find**：用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。\n\n**df**：用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。\n\n**cat**：用于连接文件并打印到标准输出设备上。\n\n**chmod**：Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。其实就是修改读写文件权限。\n\n**chgrp**：用于变更文件或目录的所属群组。\n\n**grep**：用于查找文件里符合条件的字符串。\n\n**wc**：用于计算字数。利用 wc 指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为\"-\"，则 wc 指令会从标准输入设备读取数据。\n\n#### 文本传输协议\n\nFTP：文本传输协议。用于 Internet 上的控制文件的双向传输。TCP/IP 协议中，FTP 标准命令 TCP 端口号为21，Port 方式数据端口为20。FTP 的任务是从一台计算机将文件传送到另一台计算机，不受操作系统的限制。\n\nSSH：安全外壳协议。专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。有基于口令的安全验证和基于秘钥的安全验证两种方式。默认运行端口是22。\n\nHTTP：超文本传输协议。是客户端和服务器端请求和应答的标准。默认端口是80。\n\nTelnet：是Internet远程登陆服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力，Telnet是常用的远程控制Web服务器的方法，默认端口是23。\n\nHTTPS：以安全为目标的HTTP通道，简单讲是HTTP的安全版。HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。默认端口是443。\n\n#### http与https的区别\n\n超文本传输协议 HTTP 协议被用于在 Web 浏览器和网站服务器之间传递信息。HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此 HTTP 协议不适合传输一些敏感信息，比如信用卡号、密码等。\n\n为了解决 HTTP 协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全， HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n\nHTTPS和HTTP的区别主要为以下四点：\n\n1. https 协议需要到 ca 申请证书，一般免费证书很少，需要交费。\n2. http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 SSL 加密传输协议。\n3. http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n4. http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比http 协议安全。\n\n#### SSH与Telnet的区别\n\n1. Telnet 是明文传送，SSH是加密的且支持压缩；\n2. SSH 服务一般都提供 sftp 支持，支持文件传送。telnet一般只能通过zmodem等协议传送文件;\n3. SSH 还可以借助 SSH 连接建立 TCP 通道，映射远端或本地的端口，以及转发X到本地X Server等；\n4. 在使用SSH 的时候，一个数字证书将认证客户端(你的工作站)和服务器(你的网络设备)之间的连接，并加密受保护的口令。SSH1 使用 RSA 加密密钥，SSH2 使用数字签名算法(DSA)密钥保护连接和认证。加密算法包括Blowfish，数据加密标准(DES)，以及三重 DES(3DES)。SSH 保护并且有助于防止欺骗，“中间人”攻击，以及数据包监听。\n\n#### 单例设计模式\n\n设计模式考察：请用单态设计模式方法设计类满足如下要求：请用PHP5代码编写类实现在每次对数据库连接的访问中都只能获取唯一的一个数据库连接，具体拦截数据库的详细代码忽略，请写出主要逻辑代码。\n\n```\nclass Database{\n    static public $_instance;\n    private function __construct(){\n        // 连接数据库\n    }\n\n    static function getInstance(){\n        if (!self::$_instance) self::$_instance = new self();\n        return self::$_instance;\n    }\n\n    private function __clone() {\n        // 私有化clone方法\n    }\n\n    public function query($sql) {\n        // 查询\n    }\n}\n```\n\n#### Session和Cookie的区别\n\n1. Cookie 数据存放在客户的浏览器上，需要客户端支持Cookie，Session 数据放在服务器上;\n2. Cookie 不是很安全，别人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗，考虑到安全应当使用session；\n3. Session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用 Cookie ；\n4. 单个 Cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个Cookie；\n5. Session 中存储的是对象引用，Cookie 中存放的是字符串；\n6. Session  不能区分路径，同一个用户在访问一个网站期间，所有的Session 在任何一个地方都可以访问到。而Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的Cookie 互相是访问不到的。\n\n#### include和require的区别\n\n1. include() 在执行文件时每次都要进行读取和评估；require() 文件只处理一次(实际上文件内容替换了require()语句)；\n2. require() 通常放在 PHP 脚本程序的最前面 include() 的使用和 require() 不一样，一般放在流程控制的处理区段中，PHP脚本文件读到 include() 语句时，才将它包含的文件读进来，这种方式,可以把程序执行时的流程简单化；\n3. require() 和 include() 语句是语言结构，不是真正的函数，可以像PHP的其他语言结构一样；\n4. require() 包含文件失败，停止执行，给出错误(致命的)；\n5. include() 常用于动态包含，通常是自动加载的文件，即使加载出错,整个程序还是继续执行一个页面声明，另一个页面调用包函文件失败，继续向下执行，返回一条警告；\n6. include_once() 和 require_once() 语句也是在脚本执行期间包括并运行指定文件，与 include() require() 唯一的区别是如果文件中的代码已经被包括了，则不会再次包括。\n\n#### PHP处理上传文件的流程\n\n**流程**\n\n首先用户在浏览器端选择上传的文件；\n提交后，通过post方式上传到Apache服务器；\n然后由 PHP 引擎处理判断文件是否能够上传到 PHP 配置文件中指定的临时目录；\n之后获取文件后缀名判断文件是否是允许上传的文件格式；\n如果没问题，则按照随机数+时间的方式生成文件的名字+后缀；\n最后将文件从临时目录转移至Apache服务器目录。\n\n**限制上传文件大小**\n\n在 PHP 配置文件中 有一个 upload_max_filesize 设置其值的大小就可以限制上传文件大小；\n\n在处理上传的 PHP 代码中限制，$_FILES\\['name']['size']。","source":"_posts/sina2014php.md","raw":"---\ntitle: 新浪2014校园招聘 PHP 开发工程师\ndate: 2017-04-09 14:13:44\ntags:\n - PHP\n - 知识点\ncategories:\n - PHP\n---\n\n#### PHP中的%\n\n在PHP中，正数%正数为正数，正数%负数为正数，负数%正数为负数，Example：\n\n```\necho 24 % 5;\t// 输出 4\necho 24 % (-5);\t// 输出 4\necho -24 % 5;\t// 输出 -4\n```\n\n#### 析构函数\n\n在PHP5中，如果需要类 C 的实例销毁时自动完成默写逻辑，**定义析构函数_­­__destruct**\n\n#### shell命令\n\n**top**：用于实时显示进程的动态。\n\n**ps**：用于显示当前进程的状态。\n\n**mv**：用来为文件或目录改名、或将文件或目录移入其它位置。\n\n**find**：用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。\n\n**df**：用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。\n\n**cat**：用于连接文件并打印到标准输出设备上。\n\n**chmod**：Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。其实就是修改读写文件权限。\n\n**chgrp**：用于变更文件或目录的所属群组。\n\n**grep**：用于查找文件里符合条件的字符串。\n\n**wc**：用于计算字数。利用 wc 指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为\"-\"，则 wc 指令会从标准输入设备读取数据。\n\n#### 文本传输协议\n\nFTP：文本传输协议。用于 Internet 上的控制文件的双向传输。TCP/IP 协议中，FTP 标准命令 TCP 端口号为21，Port 方式数据端口为20。FTP 的任务是从一台计算机将文件传送到另一台计算机，不受操作系统的限制。\n\nSSH：安全外壳协议。专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。有基于口令的安全验证和基于秘钥的安全验证两种方式。默认运行端口是22。\n\nHTTP：超文本传输协议。是客户端和服务器端请求和应答的标准。默认端口是80。\n\nTelnet：是Internet远程登陆服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力，Telnet是常用的远程控制Web服务器的方法，默认端口是23。\n\nHTTPS：以安全为目标的HTTP通道，简单讲是HTTP的安全版。HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。默认端口是443。\n\n#### http与https的区别\n\n超文本传输协议 HTTP 协议被用于在 Web 浏览器和网站服务器之间传递信息。HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此 HTTP 协议不适合传输一些敏感信息，比如信用卡号、密码等。\n\n为了解决 HTTP 协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全， HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n\nHTTPS和HTTP的区别主要为以下四点：\n\n1. https 协议需要到 ca 申请证书，一般免费证书很少，需要交费。\n2. http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 SSL 加密传输协议。\n3. http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n4. http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比http 协议安全。\n\n#### SSH与Telnet的区别\n\n1. Telnet 是明文传送，SSH是加密的且支持压缩；\n2. SSH 服务一般都提供 sftp 支持，支持文件传送。telnet一般只能通过zmodem等协议传送文件;\n3. SSH 还可以借助 SSH 连接建立 TCP 通道，映射远端或本地的端口，以及转发X到本地X Server等；\n4. 在使用SSH 的时候，一个数字证书将认证客户端(你的工作站)和服务器(你的网络设备)之间的连接，并加密受保护的口令。SSH1 使用 RSA 加密密钥，SSH2 使用数字签名算法(DSA)密钥保护连接和认证。加密算法包括Blowfish，数据加密标准(DES)，以及三重 DES(3DES)。SSH 保护并且有助于防止欺骗，“中间人”攻击，以及数据包监听。\n\n#### 单例设计模式\n\n设计模式考察：请用单态设计模式方法设计类满足如下要求：请用PHP5代码编写类实现在每次对数据库连接的访问中都只能获取唯一的一个数据库连接，具体拦截数据库的详细代码忽略，请写出主要逻辑代码。\n\n```\nclass Database{\n    static public $_instance;\n    private function __construct(){\n        // 连接数据库\n    }\n\n    static function getInstance(){\n        if (!self::$_instance) self::$_instance = new self();\n        return self::$_instance;\n    }\n\n    private function __clone() {\n        // 私有化clone方法\n    }\n\n    public function query($sql) {\n        // 查询\n    }\n}\n```\n\n#### Session和Cookie的区别\n\n1. Cookie 数据存放在客户的浏览器上，需要客户端支持Cookie，Session 数据放在服务器上;\n2. Cookie 不是很安全，别人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗，考虑到安全应当使用session；\n3. Session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用 Cookie ；\n4. 单个 Cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个Cookie；\n5. Session 中存储的是对象引用，Cookie 中存放的是字符串；\n6. Session  不能区分路径，同一个用户在访问一个网站期间，所有的Session 在任何一个地方都可以访问到。而Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的Cookie 互相是访问不到的。\n\n#### include和require的区别\n\n1. include() 在执行文件时每次都要进行读取和评估；require() 文件只处理一次(实际上文件内容替换了require()语句)；\n2. require() 通常放在 PHP 脚本程序的最前面 include() 的使用和 require() 不一样，一般放在流程控制的处理区段中，PHP脚本文件读到 include() 语句时，才将它包含的文件读进来，这种方式,可以把程序执行时的流程简单化；\n3. require() 和 include() 语句是语言结构，不是真正的函数，可以像PHP的其他语言结构一样；\n4. require() 包含文件失败，停止执行，给出错误(致命的)；\n5. include() 常用于动态包含，通常是自动加载的文件，即使加载出错,整个程序还是继续执行一个页面声明，另一个页面调用包函文件失败，继续向下执行，返回一条警告；\n6. include_once() 和 require_once() 语句也是在脚本执行期间包括并运行指定文件，与 include() require() 唯一的区别是如果文件中的代码已经被包括了，则不会再次包括。\n\n#### PHP处理上传文件的流程\n\n**流程**\n\n首先用户在浏览器端选择上传的文件；\n提交后，通过post方式上传到Apache服务器；\n然后由 PHP 引擎处理判断文件是否能够上传到 PHP 配置文件中指定的临时目录；\n之后获取文件后缀名判断文件是否是允许上传的文件格式；\n如果没问题，则按照随机数+时间的方式生成文件的名字+后缀；\n最后将文件从临时目录转移至Apache服务器目录。\n\n**限制上传文件大小**\n\n在 PHP 配置文件中 有一个 upload_max_filesize 设置其值的大小就可以限制上传文件大小；\n\n在处理上传的 PHP 代码中限制，$_FILES\\['name']['size']。","slug":"sina2014php","published":1,"updated":"2020-10-25T06:43:32.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepuj002nmolciqb2wxui","content":"<h4 id=\"PHP中的\"><a href=\"#PHP中的\" class=\"headerlink\" title=\"PHP中的%\"></a>PHP中的%</h4><p>在PHP中，正数%正数为正数，正数%负数为正数，负数%正数为负数，Example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 24 % 5;\t// 输出 4</span><br><span class=\"line\">echo 24 % (-5);\t// 输出 4</span><br><span class=\"line\">echo -24 % 5;\t// 输出 -4</span><br></pre></td></tr></table></figure>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>在PHP5中，如果需要类 C 的实例销毁时自动完成默写逻辑，<strong>定义析构函数_­­__destruct</strong></p>\n<h4 id=\"shell命令\"><a href=\"#shell命令\" class=\"headerlink\" title=\"shell命令\"></a>shell命令</h4><p><strong>top</strong>：用于实时显示进程的动态。</p>\n<p><strong>ps</strong>：用于显示当前进程的状态。</p>\n<p><strong>mv</strong>：用来为文件或目录改名、或将文件或目录移入其它位置。</p>\n<p><strong>find</strong>：用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>\n<p><strong>df</strong>：用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p>\n<p><strong>cat</strong>：用于连接文件并打印到标准输出设备上。</p>\n<p><strong>chmod</strong>：Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。其实就是修改读写文件权限。</p>\n<p><strong>chgrp</strong>：用于变更文件或目录的所属群组。</p>\n<p><strong>grep</strong>：用于查找文件里符合条件的字符串。</p>\n<p><strong>wc</strong>：用于计算字数。利用 wc 指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则 wc 指令会从标准输入设备读取数据。</p>\n<h4 id=\"文本传输协议\"><a href=\"#文本传输协议\" class=\"headerlink\" title=\"文本传输协议\"></a>文本传输协议</h4><p>FTP：文本传输协议。用于 Internet 上的控制文件的双向传输。TCP/IP 协议中，FTP 标准命令 TCP 端口号为21，Port 方式数据端口为20。FTP 的任务是从一台计算机将文件传送到另一台计算机，不受操作系统的限制。</p>\n<p>SSH：安全外壳协议。专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。有基于口令的安全验证和基于秘钥的安全验证两种方式。默认运行端口是22。</p>\n<p>HTTP：超文本传输协议。是客户端和服务器端请求和应答的标准。默认端口是80。</p>\n<p>Telnet：是Internet远程登陆服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力，Telnet是常用的远程控制Web服务器的方法，默认端口是23。</p>\n<p>HTTPS：以安全为目标的HTTP通道，简单讲是HTTP的安全版。HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。默认端口是443。</p>\n<h4 id=\"http与https的区别\"><a href=\"#http与https的区别\" class=\"headerlink\" title=\"http与https的区别\"></a>http与https的区别</h4><p>超文本传输协议 HTTP 协议被用于在 Web 浏览器和网站服务器之间传递信息。HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此 HTTP 协议不适合传输一些敏感信息，比如信用卡号、密码等。</p>\n<p>为了解决 HTTP 协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全， HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>\n<p>HTTPS和HTTP的区别主要为以下四点：</p>\n<ol>\n<li>https 协议需要到 ca 申请证书，一般免费证书很少，需要交费。</li>\n<li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 SSL 加密传输协议。</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>\n<li>http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比http 协议安全。</li>\n</ol>\n<h4 id=\"SSH与Telnet的区别\"><a href=\"#SSH与Telnet的区别\" class=\"headerlink\" title=\"SSH与Telnet的区别\"></a>SSH与Telnet的区别</h4><ol>\n<li>Telnet 是明文传送，SSH是加密的且支持压缩；</li>\n<li>SSH 服务一般都提供 sftp 支持，支持文件传送。telnet一般只能通过zmodem等协议传送文件;</li>\n<li>SSH 还可以借助 SSH 连接建立 TCP 通道，映射远端或本地的端口，以及转发X到本地X Server等；</li>\n<li>在使用SSH 的时候，一个数字证书将认证客户端(你的工作站)和服务器(你的网络设备)之间的连接，并加密受保护的口令。SSH1 使用 RSA 加密密钥，SSH2 使用数字签名算法(DSA)密钥保护连接和认证。加密算法包括Blowfish，数据加密标准(DES)，以及三重 DES(3DES)。SSH 保护并且有助于防止欺骗，“中间人”攻击，以及数据包监听。</li>\n</ol>\n<h4 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h4><p>设计模式考察：请用单态设计模式方法设计类满足如下要求：请用PHP5代码编写类实现在每次对数据库连接的访问中都只能获取唯一的一个数据库连接，具体拦截数据库的详细代码忽略，请写出主要逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Database&#123;</span><br><span class=\"line\">    static public $_instance;</span><br><span class=\"line\">    private function __construct()&#123;</span><br><span class=\"line\">        // 连接数据库</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function getInstance()&#123;</span><br><span class=\"line\">        if (!self::$_instance) self::$_instance = new self();</span><br><span class=\"line\">        return self::$_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private function __clone() &#123;</span><br><span class=\"line\">        // 私有化clone方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function query($sql) &#123;</span><br><span class=\"line\">        // 查询</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session和Cookie的区别\"><a href=\"#Session和Cookie的区别\" class=\"headerlink\" title=\"Session和Cookie的区别\"></a>Session和Cookie的区别</h4><ol>\n<li>Cookie 数据存放在客户的浏览器上，需要客户端支持Cookie，Session 数据放在服务器上;</li>\n<li>Cookie 不是很安全，别人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗，考虑到安全应当使用session；</li>\n<li>Session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用 Cookie ；</li>\n<li>单个 Cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个Cookie；</li>\n<li>Session 中存储的是对象引用，Cookie 中存放的是字符串；</li>\n<li>Session  不能区分路径，同一个用户在访问一个网站期间，所有的Session 在任何一个地方都可以访问到。而Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的Cookie 互相是访问不到的。</li>\n</ol>\n<h4 id=\"include和require的区别\"><a href=\"#include和require的区别\" class=\"headerlink\" title=\"include和require的区别\"></a>include和require的区别</h4><ol>\n<li>include() 在执行文件时每次都要进行读取和评估；require() 文件只处理一次(实际上文件内容替换了require()语句)；</li>\n<li>require() 通常放在 PHP 脚本程序的最前面 include() 的使用和 require() 不一样，一般放在流程控制的处理区段中，PHP脚本文件读到 include() 语句时，才将它包含的文件读进来，这种方式,可以把程序执行时的流程简单化；</li>\n<li>require() 和 include() 语句是语言结构，不是真正的函数，可以像PHP的其他语言结构一样；</li>\n<li>require() 包含文件失败，停止执行，给出错误(致命的)；</li>\n<li>include() 常用于动态包含，通常是自动加载的文件，即使加载出错,整个程序还是继续执行一个页面声明，另一个页面调用包函文件失败，继续向下执行，返回一条警告；</li>\n<li>include_once() 和 require_once() 语句也是在脚本执行期间包括并运行指定文件，与 include() require() 唯一的区别是如果文件中的代码已经被包括了，则不会再次包括。</li>\n</ol>\n<h4 id=\"PHP处理上传文件的流程\"><a href=\"#PHP处理上传文件的流程\" class=\"headerlink\" title=\"PHP处理上传文件的流程\"></a>PHP处理上传文件的流程</h4><p><strong>流程</strong></p>\n<p>首先用户在浏览器端选择上传的文件；<br>提交后，通过post方式上传到Apache服务器；<br>然后由 PHP 引擎处理判断文件是否能够上传到 PHP 配置文件中指定的临时目录；<br>之后获取文件后缀名判断文件是否是允许上传的文件格式；<br>如果没问题，则按照随机数+时间的方式生成文件的名字+后缀；<br>最后将文件从临时目录转移至Apache服务器目录。</p>\n<p><strong>限制上传文件大小</strong></p>\n<p>在 PHP 配置文件中 有一个 upload_max_filesize 设置其值的大小就可以限制上传文件大小；</p>\n<p>在处理上传的 PHP 代码中限制，$_FILES[‘name’][‘size’]。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"PHP中的\"><a href=\"#PHP中的\" class=\"headerlink\" title=\"PHP中的%\"></a>PHP中的%</h4><p>在PHP中，正数%正数为正数，正数%负数为正数，负数%正数为负数，Example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 24 % 5;\t// 输出 4</span><br><span class=\"line\">echo 24 % (-5);\t// 输出 4</span><br><span class=\"line\">echo -24 % 5;\t// 输出 -4</span><br></pre></td></tr></table></figure>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>在PHP5中，如果需要类 C 的实例销毁时自动完成默写逻辑，<strong>定义析构函数_­­__destruct</strong></p>\n<h4 id=\"shell命令\"><a href=\"#shell命令\" class=\"headerlink\" title=\"shell命令\"></a>shell命令</h4><p><strong>top</strong>：用于实时显示进程的动态。</p>\n<p><strong>ps</strong>：用于显示当前进程的状态。</p>\n<p><strong>mv</strong>：用来为文件或目录改名、或将文件或目录移入其它位置。</p>\n<p><strong>find</strong>：用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>\n<p><strong>df</strong>：用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p>\n<p><strong>cat</strong>：用于连接文件并打印到标准输出设备上。</p>\n<p><strong>chmod</strong>：Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。其实就是修改读写文件权限。</p>\n<p><strong>chgrp</strong>：用于变更文件或目录的所属群组。</p>\n<p><strong>grep</strong>：用于查找文件里符合条件的字符串。</p>\n<p><strong>wc</strong>：用于计算字数。利用 wc 指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则 wc 指令会从标准输入设备读取数据。</p>\n<h4 id=\"文本传输协议\"><a href=\"#文本传输协议\" class=\"headerlink\" title=\"文本传输协议\"></a>文本传输协议</h4><p>FTP：文本传输协议。用于 Internet 上的控制文件的双向传输。TCP/IP 协议中，FTP 标准命令 TCP 端口号为21，Port 方式数据端口为20。FTP 的任务是从一台计算机将文件传送到另一台计算机，不受操作系统的限制。</p>\n<p>SSH：安全外壳协议。专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。有基于口令的安全验证和基于秘钥的安全验证两种方式。默认运行端口是22。</p>\n<p>HTTP：超文本传输协议。是客户端和服务器端请求和应答的标准。默认端口是80。</p>\n<p>Telnet：是Internet远程登陆服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力，Telnet是常用的远程控制Web服务器的方法，默认端口是23。</p>\n<p>HTTPS：以安全为目标的HTTP通道，简单讲是HTTP的安全版。HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。默认端口是443。</p>\n<h4 id=\"http与https的区别\"><a href=\"#http与https的区别\" class=\"headerlink\" title=\"http与https的区别\"></a>http与https的区别</h4><p>超文本传输协议 HTTP 协议被用于在 Web 浏览器和网站服务器之间传递信息。HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此 HTTP 协议不适合传输一些敏感信息，比如信用卡号、密码等。</p>\n<p>为了解决 HTTP 协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全， HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>\n<p>HTTPS和HTTP的区别主要为以下四点：</p>\n<ol>\n<li>https 协议需要到 ca 申请证书，一般免费证书很少，需要交费。</li>\n<li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 SSL 加密传输协议。</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>\n<li>http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比http 协议安全。</li>\n</ol>\n<h4 id=\"SSH与Telnet的区别\"><a href=\"#SSH与Telnet的区别\" class=\"headerlink\" title=\"SSH与Telnet的区别\"></a>SSH与Telnet的区别</h4><ol>\n<li>Telnet 是明文传送，SSH是加密的且支持压缩；</li>\n<li>SSH 服务一般都提供 sftp 支持，支持文件传送。telnet一般只能通过zmodem等协议传送文件;</li>\n<li>SSH 还可以借助 SSH 连接建立 TCP 通道，映射远端或本地的端口，以及转发X到本地X Server等；</li>\n<li>在使用SSH 的时候，一个数字证书将认证客户端(你的工作站)和服务器(你的网络设备)之间的连接，并加密受保护的口令。SSH1 使用 RSA 加密密钥，SSH2 使用数字签名算法(DSA)密钥保护连接和认证。加密算法包括Blowfish，数据加密标准(DES)，以及三重 DES(3DES)。SSH 保护并且有助于防止欺骗，“中间人”攻击，以及数据包监听。</li>\n</ol>\n<h4 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h4><p>设计模式考察：请用单态设计模式方法设计类满足如下要求：请用PHP5代码编写类实现在每次对数据库连接的访问中都只能获取唯一的一个数据库连接，具体拦截数据库的详细代码忽略，请写出主要逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Database&#123;</span><br><span class=\"line\">    static public $_instance;</span><br><span class=\"line\">    private function __construct()&#123;</span><br><span class=\"line\">        // 连接数据库</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function getInstance()&#123;</span><br><span class=\"line\">        if (!self::$_instance) self::$_instance = new self();</span><br><span class=\"line\">        return self::$_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private function __clone() &#123;</span><br><span class=\"line\">        // 私有化clone方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function query($sql) &#123;</span><br><span class=\"line\">        // 查询</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session和Cookie的区别\"><a href=\"#Session和Cookie的区别\" class=\"headerlink\" title=\"Session和Cookie的区别\"></a>Session和Cookie的区别</h4><ol>\n<li>Cookie 数据存放在客户的浏览器上，需要客户端支持Cookie，Session 数据放在服务器上;</li>\n<li>Cookie 不是很安全，别人可以分析存放在本地的 Cookie 并进行 Cookie 欺骗，考虑到安全应当使用session；</li>\n<li>Session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用 Cookie ；</li>\n<li>单个 Cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个Cookie；</li>\n<li>Session 中存储的是对象引用，Cookie 中存放的是字符串；</li>\n<li>Session  不能区分路径，同一个用户在访问一个网站期间，所有的Session 在任何一个地方都可以访问到。而Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的Cookie 互相是访问不到的。</li>\n</ol>\n<h4 id=\"include和require的区别\"><a href=\"#include和require的区别\" class=\"headerlink\" title=\"include和require的区别\"></a>include和require的区别</h4><ol>\n<li>include() 在执行文件时每次都要进行读取和评估；require() 文件只处理一次(实际上文件内容替换了require()语句)；</li>\n<li>require() 通常放在 PHP 脚本程序的最前面 include() 的使用和 require() 不一样，一般放在流程控制的处理区段中，PHP脚本文件读到 include() 语句时，才将它包含的文件读进来，这种方式,可以把程序执行时的流程简单化；</li>\n<li>require() 和 include() 语句是语言结构，不是真正的函数，可以像PHP的其他语言结构一样；</li>\n<li>require() 包含文件失败，停止执行，给出错误(致命的)；</li>\n<li>include() 常用于动态包含，通常是自动加载的文件，即使加载出错,整个程序还是继续执行一个页面声明，另一个页面调用包函文件失败，继续向下执行，返回一条警告；</li>\n<li>include_once() 和 require_once() 语句也是在脚本执行期间包括并运行指定文件，与 include() require() 唯一的区别是如果文件中的代码已经被包括了，则不会再次包括。</li>\n</ol>\n<h4 id=\"PHP处理上传文件的流程\"><a href=\"#PHP处理上传文件的流程\" class=\"headerlink\" title=\"PHP处理上传文件的流程\"></a>PHP处理上传文件的流程</h4><p><strong>流程</strong></p>\n<p>首先用户在浏览器端选择上传的文件；<br>提交后，通过post方式上传到Apache服务器；<br>然后由 PHP 引擎处理判断文件是否能够上传到 PHP 配置文件中指定的临时目录；<br>之后获取文件后缀名判断文件是否是允许上传的文件格式；<br>如果没问题，则按照随机数+时间的方式生成文件的名字+后缀；<br>最后将文件从临时目录转移至Apache服务器目录。</p>\n<p><strong>限制上传文件大小</strong></p>\n<p>在 PHP 配置文件中 有一个 upload_max_filesize 设置其值的大小就可以限制上传文件大小；</p>\n<p>在处理上传的 PHP 代码中限制，$_FILES[‘name’][‘size’]。</p>\n"},{"title":"单例模式","date":"2017-08-27T04:43:23.000Z","_content":"\n\n\n单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n特点：\n\n- 单例类只能有一个实例；\n- 单例类必须自己创建自己的唯一实例；\n- 单例类必须给所有其他对象提供这一实例。\n\n使用场景：\n\n- Python 的 logger 就是一个单例模式，用以日志记录；\n- Windows 的资源管理器是一个单例模式；\n- 线程池，数据库连接池等资源池一般也用单例模式；\n- 网站计数器。\n\n优点：\n\n- 在内存中只有一个对象，节省内存空间；\n- 避免频繁地创建销毁对象，可以提高性能；\n- 避免对共享资源的多重占用；\n- 可以全局访问。\n\n### 非线程安全\n\n维护类中的共享变量的方式：\n\n```\nclass Singleton(object):\n    _instance = None\n   \n    # 这里不能使用__init__，因为__init__是在instance已经生成以后才去调用的\n    # __new__负责创建新的实例并返回新的实例，__init__负责新创建实例的初始化工作无返回\n    \n    def __new__(cls, *args, **kwargs):  \n        if cls.__instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    \n    pass\n```\n\n创建实例时把所有实例的`__dict__`指向同一个字典，这样它们具有相同的属性和方法：\n\n```\nclass Singleton(object):\n    _state = {}\n    def __new__(cls, *args, **kw):\n        ob = super(Singleton, cls).__new__(cls, *args, **kw)\n        ob.__dict__ = cls._state\n        return ob\n    \n    pass\n```\n\nPython的装饰器方式，每次执行类中方法时，都会先执行装饰器方法，获取类实例：\n\n```\ndef singleton(cls, *args, **kw):\n    instances = {}\n    def getinstance():\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return getinstance\n\n@singleton\nclass MyClass:\n  ...\n```\n\n以上都是非线程安全的方法，一般我们在使用时已经足够。但是在多线程程序中，可能出现多个线程同时访问造成单例失败，我们可以引入锁机制来解决这个问题。\n\n### 线程安全\n\n方式一：\n\n```\nimport threading\n\nclass Singleton(object):\n\n    _instance = None\n\n    lock = threading.RLock()\n\n    def __new__(cls):\n        cls.lock.acquire()\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        cls.lock.release()\n        return cls._instance\n    \n    pass\n```\n\n方式二：\n\n```\nimport threading\ntry:\n    from synchronize import make_synchronized\nexcept ImportError:\n    def make_synchronized(func):\n        import threading\n        func.__lock__ = threading.Lock()\n\n        def synced_func(*args, **kws):\n            with func.__lock__:\n                return func(*args, **kws)\n\n        return synced_func\n\nclass Singleton(object):\n    instance = None\n\n    @make_synchronized\n    def __new__(cls, *args, **kwargs):\n        if cls.instance is None:\n            cls.instance = object.__new__(cls, *args, **kwargs)\n        return cls.instance\n\n    def __init__(self):\n        pass\n        \n    pass\n```\n\n### 设计模式的分类\n\n| 类型   | 设计模式                                     |\n| ---- | ---------------------------------------- |\n| 创建型  | 工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式            |\n| 结构型  | 适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式     |\n| 行为型  | 策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式 |\n\n### 设计模式的六大原则：\n\n**总原则**：开闭原则\n\n开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。\n\n**单一职责原则**\n\n不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 \n\n**里氏替换原则**\n\n里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n**依赖倒转原则**\n\n这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。\n\n**接口隔离原则**\n\n这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。\n\n**迪米特法则（最少知道原则）**\n\n就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。\n\n最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。\n\n**合成复用原则**\n\n原则是尽量首先使用合成/聚合的方式，而不是使用继承。\n","source":"_posts/singleinstancepython.md","raw":"---\ntitle: 单例模式\ndate: 2017-08-27 12:43:23\ntags:\n - 设计模式\n - 单例模式\ncategories:\n - 设计模式\n---\n\n\n\n单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n特点：\n\n- 单例类只能有一个实例；\n- 单例类必须自己创建自己的唯一实例；\n- 单例类必须给所有其他对象提供这一实例。\n\n使用场景：\n\n- Python 的 logger 就是一个单例模式，用以日志记录；\n- Windows 的资源管理器是一个单例模式；\n- 线程池，数据库连接池等资源池一般也用单例模式；\n- 网站计数器。\n\n优点：\n\n- 在内存中只有一个对象，节省内存空间；\n- 避免频繁地创建销毁对象，可以提高性能；\n- 避免对共享资源的多重占用；\n- 可以全局访问。\n\n### 非线程安全\n\n维护类中的共享变量的方式：\n\n```\nclass Singleton(object):\n    _instance = None\n   \n    # 这里不能使用__init__，因为__init__是在instance已经生成以后才去调用的\n    # __new__负责创建新的实例并返回新的实例，__init__负责新创建实例的初始化工作无返回\n    \n    def __new__(cls, *args, **kwargs):  \n        if cls.__instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    \n    pass\n```\n\n创建实例时把所有实例的`__dict__`指向同一个字典，这样它们具有相同的属性和方法：\n\n```\nclass Singleton(object):\n    _state = {}\n    def __new__(cls, *args, **kw):\n        ob = super(Singleton, cls).__new__(cls, *args, **kw)\n        ob.__dict__ = cls._state\n        return ob\n    \n    pass\n```\n\nPython的装饰器方式，每次执行类中方法时，都会先执行装饰器方法，获取类实例：\n\n```\ndef singleton(cls, *args, **kw):\n    instances = {}\n    def getinstance():\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return getinstance\n\n@singleton\nclass MyClass:\n  ...\n```\n\n以上都是非线程安全的方法，一般我们在使用时已经足够。但是在多线程程序中，可能出现多个线程同时访问造成单例失败，我们可以引入锁机制来解决这个问题。\n\n### 线程安全\n\n方式一：\n\n```\nimport threading\n\nclass Singleton(object):\n\n    _instance = None\n\n    lock = threading.RLock()\n\n    def __new__(cls):\n        cls.lock.acquire()\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        cls.lock.release()\n        return cls._instance\n    \n    pass\n```\n\n方式二：\n\n```\nimport threading\ntry:\n    from synchronize import make_synchronized\nexcept ImportError:\n    def make_synchronized(func):\n        import threading\n        func.__lock__ = threading.Lock()\n\n        def synced_func(*args, **kws):\n            with func.__lock__:\n                return func(*args, **kws)\n\n        return synced_func\n\nclass Singleton(object):\n    instance = None\n\n    @make_synchronized\n    def __new__(cls, *args, **kwargs):\n        if cls.instance is None:\n            cls.instance = object.__new__(cls, *args, **kwargs)\n        return cls.instance\n\n    def __init__(self):\n        pass\n        \n    pass\n```\n\n### 设计模式的分类\n\n| 类型   | 设计模式                                     |\n| ---- | ---------------------------------------- |\n| 创建型  | 工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式            |\n| 结构型  | 适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式     |\n| 行为型  | 策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式 |\n\n### 设计模式的六大原则：\n\n**总原则**：开闭原则\n\n开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。\n\n**单一职责原则**\n\n不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 \n\n**里氏替换原则**\n\n里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n**依赖倒转原则**\n\n这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。\n\n**接口隔离原则**\n\n这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。\n\n**迪米特法则（最少知道原则）**\n\n就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。\n\n最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。\n\n**合成复用原则**\n\n原则是尽量首先使用合成/聚合的方式，而不是使用继承。\n","slug":"singleinstancepython","published":1,"updated":"2020-10-25T06:43:32.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepuo002smolc7gz5q3h1","content":"<p>单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>特点：</p>\n<ul>\n<li>单例类只能有一个实例；</li>\n<li>单例类必须自己创建自己的唯一实例；</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>Python 的 logger 就是一个单例模式，用以日志记录；</li>\n<li>Windows 的资源管理器是一个单例模式；</li>\n<li>线程池，数据库连接池等资源池一般也用单例模式；</li>\n<li>网站计数器。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>在内存中只有一个对象，节省内存空间；</li>\n<li>避免频繁地创建销毁对象，可以提高性能；</li>\n<li>避免对共享资源的多重占用；</li>\n<li>可以全局访问。</li>\n</ul>\n<h3 id=\"非线程安全\"><a href=\"#非线程安全\" class=\"headerlink\" title=\"非线程安全\"></a>非线程安全</h3><p>维护类中的共享变量的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\">   </span><br><span class=\"line\">    # 这里不能使用__init__，因为__init__是在instance已经生成以后才去调用的</span><br><span class=\"line\">    # __new__负责创建新的实例并返回新的实例，__init__负责新创建实例的初始化工作无返回</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):  </span><br><span class=\"line\">        if cls.__instance is None:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典，这样它们具有相同的属性和方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _state = &#123;&#125;</span><br><span class=\"line\">    def __new__(cls, *args, **kw):</span><br><span class=\"line\">        ob = super(Singleton, cls).__new__(cls, *args, **kw)</span><br><span class=\"line\">        ob.__dict__ = cls._state</span><br><span class=\"line\">        return ob</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>Python的装饰器方式，每次执行类中方法时，都会先执行装饰器方法，获取类实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def singleton(cls, *args, **kw):</span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    def getinstance():</span><br><span class=\"line\">        if cls not in instances:</span><br><span class=\"line\">            instances[cls] = cls(*args, **kw)</span><br><span class=\"line\">        return instances[cls]</span><br><span class=\"line\">    return getinstance</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>以上都是非线程安全的方法，一般我们在使用时已经足够。但是在多线程程序中，可能出现多个线程同时访问造成单例失败，我们可以引入锁机制来解决这个问题。</p>\n<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>方式一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    lock = threading.RLock()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        cls.lock.acquire()</span><br><span class=\"line\">        if cls._instance is None:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls)</span><br><span class=\"line\">        cls.lock.release()</span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>方式二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">try:</span><br><span class=\"line\">    from synchronize import make_synchronized</span><br><span class=\"line\">except ImportError:</span><br><span class=\"line\">    def make_synchronized(func):</span><br><span class=\"line\">        import threading</span><br><span class=\"line\">        func.__lock__ = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">        def synced_func(*args, **kws):</span><br><span class=\"line\">            with func.__lock__:</span><br><span class=\"line\">                return func(*args, **kws)</span><br><span class=\"line\"></span><br><span class=\"line\">        return synced_func</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    @make_synchronized</span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        if cls.instance is None:</span><br><span class=\"line\">            cls.instance = object.__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        return cls.instance</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        pass</span><br><span class=\"line\">        </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<h3 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>设计模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建型</td>\n<td>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</td>\n</tr>\n<tr>\n<td>结构型</td>\n<td>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</td>\n</tr>\n<tr>\n<td>行为型</td>\n<td>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"设计模式的六大原则：\"><a href=\"#设计模式的六大原则：\" class=\"headerlink\" title=\"设计模式的六大原则：\"></a>设计模式的六大原则：</h3><p><strong>总原则</strong>：开闭原则</p>\n<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p>\n<p><strong>单一职责原则</strong></p>\n<p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 </p>\n<p><strong>里氏替换原则</strong></p>\n<p>里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<p><strong>依赖倒转原则</strong></p>\n<p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<p><strong>接口隔离原则</strong></p>\n<p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>\n<p><strong>迪米特法则（最少知道原则）</strong></p>\n<p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p>\n<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<p><strong>合成复用原则</strong></p>\n<p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>特点：</p>\n<ul>\n<li>单例类只能有一个实例；</li>\n<li>单例类必须自己创建自己的唯一实例；</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>Python 的 logger 就是一个单例模式，用以日志记录；</li>\n<li>Windows 的资源管理器是一个单例模式；</li>\n<li>线程池，数据库连接池等资源池一般也用单例模式；</li>\n<li>网站计数器。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>在内存中只有一个对象，节省内存空间；</li>\n<li>避免频繁地创建销毁对象，可以提高性能；</li>\n<li>避免对共享资源的多重占用；</li>\n<li>可以全局访问。</li>\n</ul>\n<h3 id=\"非线程安全\"><a href=\"#非线程安全\" class=\"headerlink\" title=\"非线程安全\"></a>非线程安全</h3><p>维护类中的共享变量的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\">   </span><br><span class=\"line\">    # 这里不能使用__init__，因为__init__是在instance已经生成以后才去调用的</span><br><span class=\"line\">    # __new__负责创建新的实例并返回新的实例，__init__负责新创建实例的初始化工作无返回</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):  </span><br><span class=\"line\">        if cls.__instance is None:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典，这样它们具有相同的属性和方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    _state = &#123;&#125;</span><br><span class=\"line\">    def __new__(cls, *args, **kw):</span><br><span class=\"line\">        ob = super(Singleton, cls).__new__(cls, *args, **kw)</span><br><span class=\"line\">        ob.__dict__ = cls._state</span><br><span class=\"line\">        return ob</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>Python的装饰器方式，每次执行类中方法时，都会先执行装饰器方法，获取类实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def singleton(cls, *args, **kw):</span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    def getinstance():</span><br><span class=\"line\">        if cls not in instances:</span><br><span class=\"line\">            instances[cls] = cls(*args, **kw)</span><br><span class=\"line\">        return instances[cls]</span><br><span class=\"line\">    return getinstance</span><br><span class=\"line\"></span><br><span class=\"line\">@singleton</span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>以上都是非线程安全的方法，一般我们在使用时已经足够。但是在多线程程序中，可能出现多个线程同时访问造成单例失败，我们可以引入锁机制来解决这个问题。</p>\n<h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>方式一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    lock = threading.RLock()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        cls.lock.acquire()</span><br><span class=\"line\">        if cls._instance is None:</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls)</span><br><span class=\"line\">        cls.lock.release()</span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\">    </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>方式二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">try:</span><br><span class=\"line\">    from synchronize import make_synchronized</span><br><span class=\"line\">except ImportError:</span><br><span class=\"line\">    def make_synchronized(func):</span><br><span class=\"line\">        import threading</span><br><span class=\"line\">        func.__lock__ = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">        def synced_func(*args, **kws):</span><br><span class=\"line\">            with func.__lock__:</span><br><span class=\"line\">                return func(*args, **kws)</span><br><span class=\"line\"></span><br><span class=\"line\">        return synced_func</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    instance = None</span><br><span class=\"line\"></span><br><span class=\"line\">    @make_synchronized</span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        if cls.instance is None:</span><br><span class=\"line\">            cls.instance = object.__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        return cls.instance</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        pass</span><br><span class=\"line\">        </span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<h3 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>设计模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建型</td>\n<td>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</td>\n</tr>\n<tr>\n<td>结构型</td>\n<td>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</td>\n</tr>\n<tr>\n<td>行为型</td>\n<td>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"设计模式的六大原则：\"><a href=\"#设计模式的六大原则：\" class=\"headerlink\" title=\"设计模式的六大原则：\"></a>设计模式的六大原则：</h3><p><strong>总原则</strong>：开闭原则</p>\n<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p>\n<p><strong>单一职责原则</strong></p>\n<p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 </p>\n<p><strong>里氏替换原则</strong></p>\n<p>里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<p><strong>依赖倒转原则</strong></p>\n<p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<p><strong>接口隔离原则</strong></p>\n<p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>\n<p><strong>迪米特法则（最少知道原则）</strong></p>\n<p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p>\n<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<p><strong>合成复用原则</strong></p>\n<p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p>\n"},{"title":"SQLAlchemy bug系列(一)","date":"2018-05-13T07:13:50.000Z","_content":"\n项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：\n\n```\ndef query(self, filters, orders=''):\n    try:\n        if not isinstance(filters, str) or not isinstance(orders, str):\n            return False\n        if not len(orders):\n            return self.s.query(Node).filter(filters).first()\n        else:\n            r = self.s.query(Node).filter(filters).order_by(orders).all()\n            if len(r):\n                return r[0]\n            return None\n    except Exception as e:\n        self.logger.error(traceback.format_exc())\n        return None\n    finally:\n        Session.remove()\n```\n\n但是在跑了一段时间后出现了如下问题：\n\n> (sqlalchemy.exc.InvalidRequestError) Can't reconnect until invalid transaction is rolled back\n\n错误中很明显是数据库的连接由于事务某些错误出现了问题，SQLAlchemy 在尝试重新连接时失败了。\n\n几经翻找资料后，问题产生原因如下：\n\n从数据库连接池（pool）中获取的 `connection` 没有以 `session.commit()` 或 `session.rollback()` 或 `session.close()` 的某一种放回 pool 中。这时 `connection` 的事务（`transaction` ）没有完结，而在后续与数据库交互中，由于某些原因（如死锁、超时）数据库连接池中的 `connection` 又死掉了，当获取到这个连接时，SQLAlchemy 尝试重新连接。但由于 `transaction` 还没完结，无法重连。就抛出了上述错误。\n\n解决办法：\n\n1. 显示调用事务结束\n\n   使用 `try...except...` 代码块，`except` 中捕获到异常时，调用 `session.rollback()` 回滚事务。\n\n2. 打开 `autocommit`\n\n   使用 SQLAlchemy 的初始化方式为：\n\n   ```\n   Base = declarative_base()\n   engine = create_engine(\n       \"mysql+pymysql://{}:{}@{}:{}/{}\".format(\n           mysql_config['default']['user'],\n           mysql_config['default']['password'],\n           mysql_config['default']['host'],\n           mysql_config['default']['port'],\n           mysql_config['default']['name'],\n       ),\n       encoding=\"utf-8\",\n       echo=False,\n       pool_recycle=mysql_config['connect_pool']['pool_recycle'],\n       pool_size=mysql_config['connect_pool']['pool_size']\n   )\n   Session = scoped_session(sessionmaker(bind=engine))\n   ```\n\n   默认是使用事务操作，我们可以在初始化语句中加上 `autocommit=true` 关闭事务：\n\n   ```\n   engine = create_engine(\n       \"mysql+pymysql://{}:{}@{}:{}/{}?autocommit=true\".format(\n           mysql_config['default']['user'],\n           mysql_config['default']['password'],\n           mysql_config['default']['host'],\n           mysql_config['default']['port'],\n           mysql_config['default']['name'],\n       ),\n       encoding=\"utf-8\",\n       echo=False,\n       pool_recycle=mysql_config['connect_pool']['pool_recycle'],\n       pool_size=mysql_config['connect_pool']['pool_size']\n   )\n   ```\n\n   这样生成的查询语句就会立即执行。**注意：**个人感觉这并不是一个好方法，还是老老实实捕获异常吧。","source":"_posts/sqlalchemybug1.md","raw":"---\ntitle: SQLAlchemy bug系列(一)\ndate: 2018-05-13 15:13:50\ntags:\n - SQLAlchemy\n - bug\ncategories:\n - SQLAlchemy\n---\n\n项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：\n\n```\ndef query(self, filters, orders=''):\n    try:\n        if not isinstance(filters, str) or not isinstance(orders, str):\n            return False\n        if not len(orders):\n            return self.s.query(Node).filter(filters).first()\n        else:\n            r = self.s.query(Node).filter(filters).order_by(orders).all()\n            if len(r):\n                return r[0]\n            return None\n    except Exception as e:\n        self.logger.error(traceback.format_exc())\n        return None\n    finally:\n        Session.remove()\n```\n\n但是在跑了一段时间后出现了如下问题：\n\n> (sqlalchemy.exc.InvalidRequestError) Can't reconnect until invalid transaction is rolled back\n\n错误中很明显是数据库的连接由于事务某些错误出现了问题，SQLAlchemy 在尝试重新连接时失败了。\n\n几经翻找资料后，问题产生原因如下：\n\n从数据库连接池（pool）中获取的 `connection` 没有以 `session.commit()` 或 `session.rollback()` 或 `session.close()` 的某一种放回 pool 中。这时 `connection` 的事务（`transaction` ）没有完结，而在后续与数据库交互中，由于某些原因（如死锁、超时）数据库连接池中的 `connection` 又死掉了，当获取到这个连接时，SQLAlchemy 尝试重新连接。但由于 `transaction` 还没完结，无法重连。就抛出了上述错误。\n\n解决办法：\n\n1. 显示调用事务结束\n\n   使用 `try...except...` 代码块，`except` 中捕获到异常时，调用 `session.rollback()` 回滚事务。\n\n2. 打开 `autocommit`\n\n   使用 SQLAlchemy 的初始化方式为：\n\n   ```\n   Base = declarative_base()\n   engine = create_engine(\n       \"mysql+pymysql://{}:{}@{}:{}/{}\".format(\n           mysql_config['default']['user'],\n           mysql_config['default']['password'],\n           mysql_config['default']['host'],\n           mysql_config['default']['port'],\n           mysql_config['default']['name'],\n       ),\n       encoding=\"utf-8\",\n       echo=False,\n       pool_recycle=mysql_config['connect_pool']['pool_recycle'],\n       pool_size=mysql_config['connect_pool']['pool_size']\n   )\n   Session = scoped_session(sessionmaker(bind=engine))\n   ```\n\n   默认是使用事务操作，我们可以在初始化语句中加上 `autocommit=true` 关闭事务：\n\n   ```\n   engine = create_engine(\n       \"mysql+pymysql://{}:{}@{}:{}/{}?autocommit=true\".format(\n           mysql_config['default']['user'],\n           mysql_config['default']['password'],\n           mysql_config['default']['host'],\n           mysql_config['default']['port'],\n           mysql_config['default']['name'],\n       ),\n       encoding=\"utf-8\",\n       echo=False,\n       pool_recycle=mysql_config['connect_pool']['pool_recycle'],\n       pool_size=mysql_config['connect_pool']['pool_size']\n   )\n   ```\n\n   这样生成的查询语句就会立即执行。**注意：**个人感觉这并不是一个好方法，还是老老实实捕获异常吧。","slug":"sqlalchemybug1","published":1,"updated":"2020-10-25T06:43:32.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepur002umolcap97n6l7","content":"<p>项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def query(self, filters, orders=&apos;&apos;):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if not isinstance(filters, str) or not isinstance(orders, str):</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        if not len(orders):</span><br><span class=\"line\">            return self.s.query(Node).filter(filters).first()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            r = self.s.query(Node).filter(filters).order_by(orders).all()</span><br><span class=\"line\">            if len(r):</span><br><span class=\"line\">                return r[0]</span><br><span class=\"line\">            return None</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        self.logger.error(traceback.format_exc())</span><br><span class=\"line\">        return None</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        Session.remove()</span><br></pre></td></tr></table></figure>\n<p>但是在跑了一段时间后出现了如下问题：</p>\n<blockquote>\n<p>(sqlalchemy.exc.InvalidRequestError) Can’t reconnect until invalid transaction is rolled back</p>\n</blockquote>\n<p>错误中很明显是数据库的连接由于事务某些错误出现了问题，SQLAlchemy 在尝试重新连接时失败了。</p>\n<p>几经翻找资料后，问题产生原因如下：</p>\n<p>从数据库连接池（pool）中获取的 <code>connection</code> 没有以 <code>session.commit()</code> 或 <code>session.rollback()</code> 或 <code>session.close()</code> 的某一种放回 pool 中。这时 <code>connection</code> 的事务（<code>transaction</code> ）没有完结，而在后续与数据库交互中，由于某些原因（如死锁、超时）数据库连接池中的 <code>connection</code> 又死掉了，当获取到这个连接时，SQLAlchemy 尝试重新连接。但由于 <code>transaction</code> 还没完结，无法重连。就抛出了上述错误。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>显示调用事务结束</p>\n<p>使用 <code>try...except...</code> 代码块，<code>except</code> 中捕获到异常时，调用 <code>session.rollback()</code> 回滚事务。</p>\n</li>\n<li><p>打开 <code>autocommit</code></p>\n<p>使用 SQLAlchemy 的初始化方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">engine = create_engine(</span><br><span class=\"line\">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;.format(</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;user&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;password&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;host&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;port&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;name&apos;],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    encoding=&quot;utf-8&quot;,</span><br><span class=\"line\">    echo=False,</span><br><span class=\"line\">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</span><br><span class=\"line\">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</span><br><span class=\"line\">)</span><br><span class=\"line\">Session = scoped_session(sessionmaker(bind=engine))</span><br></pre></td></tr></table></figure>\n<p>默认是使用事务操作，我们可以在初始化语句中加上 <code>autocommit=true</code> 关闭事务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">engine = create_engine(</span><br><span class=\"line\">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?autocommit=true&quot;.format(</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;user&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;password&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;host&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;port&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;name&apos;],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    encoding=&quot;utf-8&quot;,</span><br><span class=\"line\">    echo=False,</span><br><span class=\"line\">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</span><br><span class=\"line\">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这样生成的查询语句就会立即执行。<strong>注意：</strong>个人感觉这并不是一个好方法，还是老老实实捕获异常吧。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def query(self, filters, orders=&apos;&apos;):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if not isinstance(filters, str) or not isinstance(orders, str):</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        if not len(orders):</span><br><span class=\"line\">            return self.s.query(Node).filter(filters).first()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            r = self.s.query(Node).filter(filters).order_by(orders).all()</span><br><span class=\"line\">            if len(r):</span><br><span class=\"line\">                return r[0]</span><br><span class=\"line\">            return None</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        self.logger.error(traceback.format_exc())</span><br><span class=\"line\">        return None</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        Session.remove()</span><br></pre></td></tr></table></figure>\n<p>但是在跑了一段时间后出现了如下问题：</p>\n<blockquote>\n<p>(sqlalchemy.exc.InvalidRequestError) Can’t reconnect until invalid transaction is rolled back</p>\n</blockquote>\n<p>错误中很明显是数据库的连接由于事务某些错误出现了问题，SQLAlchemy 在尝试重新连接时失败了。</p>\n<p>几经翻找资料后，问题产生原因如下：</p>\n<p>从数据库连接池（pool）中获取的 <code>connection</code> 没有以 <code>session.commit()</code> 或 <code>session.rollback()</code> 或 <code>session.close()</code> 的某一种放回 pool 中。这时 <code>connection</code> 的事务（<code>transaction</code> ）没有完结，而在后续与数据库交互中，由于某些原因（如死锁、超时）数据库连接池中的 <code>connection</code> 又死掉了，当获取到这个连接时，SQLAlchemy 尝试重新连接。但由于 <code>transaction</code> 还没完结，无法重连。就抛出了上述错误。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>显示调用事务结束</p>\n<p>使用 <code>try...except...</code> 代码块，<code>except</code> 中捕获到异常时，调用 <code>session.rollback()</code> 回滚事务。</p>\n</li>\n<li><p>打开 <code>autocommit</code></p>\n<p>使用 SQLAlchemy 的初始化方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">engine = create_engine(</span><br><span class=\"line\">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;.format(</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;user&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;password&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;host&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;port&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;name&apos;],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    encoding=&quot;utf-8&quot;,</span><br><span class=\"line\">    echo=False,</span><br><span class=\"line\">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</span><br><span class=\"line\">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</span><br><span class=\"line\">)</span><br><span class=\"line\">Session = scoped_session(sessionmaker(bind=engine))</span><br></pre></td></tr></table></figure>\n<p>默认是使用事务操作，我们可以在初始化语句中加上 <code>autocommit=true</code> 关闭事务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">engine = create_engine(</span><br><span class=\"line\">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?autocommit=true&quot;.format(</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;user&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;password&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;host&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;port&apos;],</span><br><span class=\"line\">        mysql_config[&apos;default&apos;][&apos;name&apos;],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    encoding=&quot;utf-8&quot;,</span><br><span class=\"line\">    echo=False,</span><br><span class=\"line\">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</span><br><span class=\"line\">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这样生成的查询语句就会立即执行。<strong>注意：</strong>个人感觉这并不是一个好方法，还是老老实实捕获异常吧。</p>\n</li>\n</ol>\n"},{"title":"Sublime Text 3 添加右键菜单","date":"2017-10-11T11:38:35.000Z","_content":"\n每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。\n\n#### 方式1\n\n```\n[Version]\nSignature=\"$Windows NT$\"\n\n[DefaultInstall]\nAddReg=SublimeText3\n\n[SublimeText3]\nhkcr,\"*\\\\shell\\\\SublimeText3\",,,\"Edit with Sublime Text 3\"\nhkcr,\"*\\\\shell\\\\SublimeText3\\\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\" %%*\"\nhkcr,\"Directory\\shell\\SublimeText3\",,,\"Edit with Sublime Text 3\"\nhkcr,\"*\\\\shell\\\\SublimeText3\",\"Icon\",0x20000,\"%1%\\sublime_text.exe, 0\"\nhkcr,\"Directory\\shell\\SublimeText3\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\"\"\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。\n\n> 重命名文件之前，需要先在 工具->文件夹选项->查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。\n\n#### 方式2\n\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n@=\"Edit with Sublime Text 3\"\n\"Icon\"=\"D:\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command]\n@=\"D:\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n@=\"Edit with Sublime Text 3\"\n\"Icon\"=\"D:\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command]\n@=\"D:\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。\n\n> 需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。\n\n删除右键菜单脚本：\n\n```\nWindows Registry Editor Version 5.00\n[-HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n[-HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。\n\n\n\nRead More：\n\n> [将Sublime Text3添加到右键菜单中](https://my.oschina.net/adairs/blog/466777)","source":"_posts/sublimetext3rightclick.md","raw":"---\ntitle: Sublime Text 3 添加右键菜单\ndate: 2017-10-11 19:38:35\ntags:\n - Sublime Text 3\ncategories:\n - 辅助研发杂记\n---\n\n每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。\n\n#### 方式1\n\n```\n[Version]\nSignature=\"$Windows NT$\"\n\n[DefaultInstall]\nAddReg=SublimeText3\n\n[SublimeText3]\nhkcr,\"*\\\\shell\\\\SublimeText3\",,,\"Edit with Sublime Text 3\"\nhkcr,\"*\\\\shell\\\\SublimeText3\\\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\" %%*\"\nhkcr,\"Directory\\shell\\SublimeText3\",,,\"Edit with Sublime Text 3\"\nhkcr,\"*\\\\shell\\\\SublimeText3\",\"Icon\",0x20000,\"%1%\\sublime_text.exe, 0\"\nhkcr,\"Directory\\shell\\SublimeText3\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\"\"\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。\n\n> 重命名文件之前，需要先在 工具->文件夹选项->查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。\n\n#### 方式2\n\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n@=\"Edit with Sublime Text 3\"\n\"Icon\"=\"D:\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command]\n@=\"D:\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n@=\"Edit with Sublime Text 3\"\n\"Icon\"=\"D:\\\\Sublime Text 3\\\\sublime_text.exe,0\"\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command]\n@=\"D:\\\\Sublime Text 3\\\\sublime_text.exe %1\"\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。\n\n> 需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。\n\n删除右键菜单脚本：\n\n```\nWindows Registry Editor Version 5.00\n[-HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]\n[-HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]\n```\n\n把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。\n\n\n\nRead More：\n\n> [将Sublime Text3添加到右键菜单中](https://my.oschina.net/adairs/blog/466777)","slug":"sublimetext3rightclick","published":1,"updated":"2020-10-25T06:43:32.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepuu002wmolcyhcfki7u","content":"<p>每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。</p>\n<h4 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Version]</span><br><span class=\"line\">Signature=&quot;$Windows NT$&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultInstall]</span><br><span class=\"line\">AddReg=SublimeText3</span><br><span class=\"line\"></span><br><span class=\"line\">[SublimeText3]</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3\\\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\\sublime_text.exe, 0&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。</p>\n<blockquote>\n<p>重命名文件之前，需要先在 工具-&gt;文件夹选项-&gt;查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。</p>\n</blockquote>\n<h4 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]</span><br><span class=\"line\">@=&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">&quot;Icon&quot;=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe,0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command]</span><br><span class=\"line\">@=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe %1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]</span><br><span class=\"line\">@=&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">&quot;Icon&quot;=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe,0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command]</span><br><span class=\"line\">@=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe %1&quot;</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。</p>\n<blockquote>\n<p>需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。</p>\n</blockquote>\n<p>删除右键菜单脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[-HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]</span><br><span class=\"line\">[-HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。</p>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"https://my.oschina.net/adairs/blog/466777\" target=\"_blank\" rel=\"noopener\">将Sublime Text3添加到右键菜单中</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。</p>\n<h4 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Version]</span><br><span class=\"line\">Signature=&quot;$Windows NT$&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultInstall]</span><br><span class=\"line\">AddReg=SublimeText3</span><br><span class=\"line\"></span><br><span class=\"line\">[SublimeText3]</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3\\\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\\sublime_text.exe, 0&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。</p>\n<blockquote>\n<p>重命名文件之前，需要先在 工具-&gt;文件夹选项-&gt;查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。</p>\n</blockquote>\n<h4 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]</span><br><span class=\"line\">@=&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">&quot;Icon&quot;=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe,0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command]</span><br><span class=\"line\">@=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe %1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]</span><br><span class=\"line\">@=&quot;Edit with Sublime Text 3&quot;</span><br><span class=\"line\">&quot;Icon&quot;=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe,0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command]</span><br><span class=\"line\">@=&quot;D:\\\\Sublime Text 3\\\\sublime_text.exe %1&quot;</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。</p>\n<blockquote>\n<p>需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。</p>\n</blockquote>\n<p>删除右键菜单脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[-HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3]</span><br><span class=\"line\">[-HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3]</span><br></pre></td></tr></table></figure>\n<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。</p>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"https://my.oschina.net/adairs/blog/466777\" target=\"_blank\" rel=\"noopener\">将Sublime Text3添加到右键菜单中</a></p>\n</blockquote>\n"},{"title":"子进程和线程的区别","date":"2017-07-15T06:37:35.000Z","_content":"\n### 相同点\n\n- 二者都具有 ID ，一组寄存器，状态，优先级以及所要遵循的调度策略；\n- 每个进程都有一个进程控制块，线程也拥有一个线程控制块；\n- 线程和子进程共享父进程中的资源；线程和子进程独立于它们的父进程，竞争使用处理器资源；线程和子进程的创建者可以在线程和子进程上实行某些控制，比如，创建者可以取消、挂起、继续和修改线程和子进程的优先级；线程和子进程可以改变其属性并创建新的资源。\n\n### 不同点\n\n- 线程是进程的一部分, 一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的；\n- 启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间；\n- 系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。而一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便；\n- 与进程的控制表 PCB 相似，线程也有自己的控制表 TCB，但是 TCB 中所保存的线程状态比 PCB 表中少多了；\n- 进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。\n\n### 例子\n\n进程和线程的区别在于粒度不同，进程之间的变量(或者说是内存)是不能直接互相访问的，而线程可以。线程一定会依附在某一个进程上执行.我举个例子，你在 Windows 下开一个 IE 浏览器，这个 IE 浏览器是一个进程，你用浏览器去打开一个pdf，IE 就去调用 Acrobat 去打开，这时 Acrobat 是一个独立的进程，就是 IE 的子进程。而 IE 自己本身同时用同一个进程开了 2 个网页, 并且同时在跑两个网页上的脚本，这两个网页的执行就是 IE 自己通过两个线程实现的。值得注意的是，线程仍然是 IE 的内容，而子进程 Acrobat 严格来说就不属于 IE ，是另外一个程序。之所以是 IE 的子进程，只是受 IE 调用而启动的而已。\n子进程与父进程之间可以通过动态数据交换、OLE、管道、邮件槽等进行通信，使用内存映射文件是最便利的方法之一。\n\n\n\n\n\n> 参考文章：\n>\n> [子进程和线程的区别](http://blog.csdn.net/wangkehuai/article/details/7089323)","source":"_posts/threadsubprocess.md","raw":"---\ntitle: 子进程和线程的区别\ndate: 2017-07-15 14:37:35\ntags:\n - 子进程\n - 线程\ncategories:\n - 进程/线程\n---\n\n### 相同点\n\n- 二者都具有 ID ，一组寄存器，状态，优先级以及所要遵循的调度策略；\n- 每个进程都有一个进程控制块，线程也拥有一个线程控制块；\n- 线程和子进程共享父进程中的资源；线程和子进程独立于它们的父进程，竞争使用处理器资源；线程和子进程的创建者可以在线程和子进程上实行某些控制，比如，创建者可以取消、挂起、继续和修改线程和子进程的优先级；线程和子进程可以改变其属性并创建新的资源。\n\n### 不同点\n\n- 线程是进程的一部分, 一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的；\n- 启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间；\n- 系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。而一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便；\n- 与进程的控制表 PCB 相似，线程也有自己的控制表 TCB，但是 TCB 中所保存的线程状态比 PCB 表中少多了；\n- 进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。\n\n### 例子\n\n进程和线程的区别在于粒度不同，进程之间的变量(或者说是内存)是不能直接互相访问的，而线程可以。线程一定会依附在某一个进程上执行.我举个例子，你在 Windows 下开一个 IE 浏览器，这个 IE 浏览器是一个进程，你用浏览器去打开一个pdf，IE 就去调用 Acrobat 去打开，这时 Acrobat 是一个独立的进程，就是 IE 的子进程。而 IE 自己本身同时用同一个进程开了 2 个网页, 并且同时在跑两个网页上的脚本，这两个网页的执行就是 IE 自己通过两个线程实现的。值得注意的是，线程仍然是 IE 的内容，而子进程 Acrobat 严格来说就不属于 IE ，是另外一个程序。之所以是 IE 的子进程，只是受 IE 调用而启动的而已。\n子进程与父进程之间可以通过动态数据交换、OLE、管道、邮件槽等进行通信，使用内存映射文件是最便利的方法之一。\n\n\n\n\n\n> 参考文章：\n>\n> [子进程和线程的区别](http://blog.csdn.net/wangkehuai/article/details/7089323)","slug":"threadsubprocess","published":1,"updated":"2020-10-25T06:43:32.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepuy0030molckj485r1m","content":"<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ul>\n<li>二者都具有 ID ，一组寄存器，状态，优先级以及所要遵循的调度策略；</li>\n<li>每个进程都有一个进程控制块，线程也拥有一个线程控制块；</li>\n<li>线程和子进程共享父进程中的资源；线程和子进程独立于它们的父进程，竞争使用处理器资源；线程和子进程的创建者可以在线程和子进程上实行某些控制，比如，创建者可以取消、挂起、继续和修改线程和子进程的优先级；线程和子进程可以改变其属性并创建新的资源。</li>\n</ul>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>线程是进程的一部分, 一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的；</li>\n<li>启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间；</li>\n<li>系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。而一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便；</li>\n<li>与进程的控制表 PCB 相似，线程也有自己的控制表 TCB，但是 TCB 中所保存的线程状态比 PCB 表中少多了；</li>\n<li>进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>进程和线程的区别在于粒度不同，进程之间的变量(或者说是内存)是不能直接互相访问的，而线程可以。线程一定会依附在某一个进程上执行.我举个例子，你在 Windows 下开一个 IE 浏览器，这个 IE 浏览器是一个进程，你用浏览器去打开一个pdf，IE 就去调用 Acrobat 去打开，这时 Acrobat 是一个独立的进程，就是 IE 的子进程。而 IE 自己本身同时用同一个进程开了 2 个网页, 并且同时在跑两个网页上的脚本，这两个网页的执行就是 IE 自己通过两个线程实现的。值得注意的是，线程仍然是 IE 的内容，而子进程 Acrobat 严格来说就不属于 IE ，是另外一个程序。之所以是 IE 的子进程，只是受 IE 调用而启动的而已。<br>子进程与父进程之间可以通过动态数据交换、OLE、管道、邮件槽等进行通信，使用内存映射文件是最便利的方法之一。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/wangkehuai/article/details/7089323\" target=\"_blank\" rel=\"noopener\">子进程和线程的区别</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ul>\n<li>二者都具有 ID ，一组寄存器，状态，优先级以及所要遵循的调度策略；</li>\n<li>每个进程都有一个进程控制块，线程也拥有一个线程控制块；</li>\n<li>线程和子进程共享父进程中的资源；线程和子进程独立于它们的父进程，竞争使用处理器资源；线程和子进程的创建者可以在线程和子进程上实行某些控制，比如，创建者可以取消、挂起、继续和修改线程和子进程的优先级；线程和子进程可以改变其属性并创建新的资源。</li>\n</ul>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>线程是进程的一部分, 一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的；</li>\n<li>启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间；</li>\n<li>系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。而一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便；</li>\n<li>与进程的控制表 PCB 相似，线程也有自己的控制表 TCB，但是 TCB 中所保存的线程状态比 PCB 表中少多了；</li>\n<li>进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>进程和线程的区别在于粒度不同，进程之间的变量(或者说是内存)是不能直接互相访问的，而线程可以。线程一定会依附在某一个进程上执行.我举个例子，你在 Windows 下开一个 IE 浏览器，这个 IE 浏览器是一个进程，你用浏览器去打开一个pdf，IE 就去调用 Acrobat 去打开，这时 Acrobat 是一个独立的进程，就是 IE 的子进程。而 IE 自己本身同时用同一个进程开了 2 个网页, 并且同时在跑两个网页上的脚本，这两个网页的执行就是 IE 自己通过两个线程实现的。值得注意的是，线程仍然是 IE 的内容，而子进程 Acrobat 严格来说就不属于 IE ，是另外一个程序。之所以是 IE 的子进程，只是受 IE 调用而启动的而已。<br>子进程与父进程之间可以通过动态数据交换、OLE、管道、邮件槽等进行通信，使用内存映射文件是最便利的方法之一。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/wangkehuai/article/details/7089323\" target=\"_blank\" rel=\"noopener\">子进程和线程的区别</a></p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - 异步和非阻塞I/O","date":"2018-06-10T13:09:37.000Z","_content":"\n实时web功能需要为每个用户提供一个多数时间被闲置的长连接，在传统的同步 web 服务器中，这意味着要为每个用户提供一个线程，当然每个线程的开销都是很昂贵的。\n\n为了尽量减少并发连接造成的开销，Tornado 使用了一种单线程事件循环的方式。这就意味着所有的应用代码都应该是异步非阻塞的，因为在同一时间只有一个操作是有效的。\n\n异步和非阻塞是非常相关的并且这两个术语经常交换使用，但它们不是完全相同的事情。\n\n### 阻塞\n\n一个函数在等待某些事情返回值的时候会被阻塞，导致函数阻塞的原因有很多：网络 I/O，磁盘 I/O，互斥锁等。事实上每个函数在运行和使用 CPU 的时候都或多或少被阻塞(举个极端的例子来说明为什么对待 CPU 阻塞要和对待一般阻塞一样的严肃：比如密码哈希函数 [bcrypt](http://bcrypt.sourceforge.net/) ，需要消耗几百毫秒的 CPU 时间，这已 经远远超过了一般的网络或者磁盘请求时间了)。\n\n一个函数可以在某个方面被阻塞但在其他方面不被阻塞，在 Tornado 的上下文中，我们一般讨论网络 I/O 上下文的阻塞，尽管各种阻塞已经被最小化。\n\n### 异步\n\n异步函数在会在其完成之前返回，在应用中触发下一个动作之前通常会在后台执行一些工作(和正常的同步函数在返回前就执行完所有的事情不同)。这里列举了几种不同的异步接口：\n\n- 回调参数；\n- 返回一个占位符([`Future`]() [`Promise`]() [`Deferred`]())；\n- 传送给一个队列；\n- 回调注册表(POSIX 信号)。\n\n不论使用哪种类型的接口，按照定义，异步函数与他们的调用者都有着不同的交互方式；也没有什么对调用者透明的方式使得同步函数变得异步(类似 [gevent](http://www.gevent.org/) 使用轻量级线程的系统性能虽然堪比异步系统，但它们并没有真正的让事情异步)。\n\n### 例子\n\n这是一个简单的同步函数：\n\n```\nfrom tornado.httpclient import HTTPClient\n\ndef synchronous_fetch(url):\n    http_client = HTTPClient()\n    response = http_client.fetch(url)\n    return response.body\n```\n\n下面是使用回调参数重写的具有同样功能的异步函数：\n\n```\nfrom tornado.httpclient import AsyncHTTPClient\n\ndef asynchronous_fetch(url, callback):\n    http_client = AsyncHTTPClient()\n    def handle_response(response):\n        callback(response.body)\n    http_client.fetch(url, callback=handle_response)\n```\n\n使用 [`Future`]() 代替回调：\n\n```\nfrom tornado.concurrent import Future\nfrom tornado.httpclient import AsyncHTTPClient\n\ndef async_fetch_future(url):\n    http_client = AsyncHTTPClient()\n    my_future = Future()\n    fetch_future = http_client.fetch(url)\n    fetch_future.add_done_callback(\n        lambda f: my_future.set_result(f.result()))\n    return my_future\n```\n\n[`Future`]() 版本更加复杂，但是 [`Futures`]() 却是 Tornado 中推荐的写法，因为它有两个主要的优势：一是错误处理更加一致，[`Future.result`]() 方法可以简单的抛出异常(相较于常见的回调函数接口中需特别指定错误处理方式)，二是 [`Futures`]() 很适合与协程一起使用。我们稍后会更加深入的讨论协程，以下是例子的协程版本，类似原始的同步版本：\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    raise gen.Return(response.body)\n```\n\n`raise gen.Return(response.body)` 声明是在 Python 2 环境下人为执行的，因为生成器不允许有返回值，为了解决这个问题，Tornado 的协程抛出了一种称为 `Return` 的异常，协程捕获这个异常并将其作为返回值。在 Python 3.3+版本，使用 `return response.body` 可以得到相同的结果。\n\n\n\nRead More:\n\n> [Asynchronous and non-Blocking I/O](http://www.tornadoweb.org/en/stable/guide/async.html)","source":"_posts/tornado502-asnon.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - 异步和非阻塞I/O\ndate: 2018-06-10 21:09:37\ntags:\n - Tornado\n - 翻译文档\ncategories:\n - Tornado\n---\n\n实时web功能需要为每个用户提供一个多数时间被闲置的长连接，在传统的同步 web 服务器中，这意味着要为每个用户提供一个线程，当然每个线程的开销都是很昂贵的。\n\n为了尽量减少并发连接造成的开销，Tornado 使用了一种单线程事件循环的方式。这就意味着所有的应用代码都应该是异步非阻塞的，因为在同一时间只有一个操作是有效的。\n\n异步和非阻塞是非常相关的并且这两个术语经常交换使用，但它们不是完全相同的事情。\n\n### 阻塞\n\n一个函数在等待某些事情返回值的时候会被阻塞，导致函数阻塞的原因有很多：网络 I/O，磁盘 I/O，互斥锁等。事实上每个函数在运行和使用 CPU 的时候都或多或少被阻塞(举个极端的例子来说明为什么对待 CPU 阻塞要和对待一般阻塞一样的严肃：比如密码哈希函数 [bcrypt](http://bcrypt.sourceforge.net/) ，需要消耗几百毫秒的 CPU 时间，这已 经远远超过了一般的网络或者磁盘请求时间了)。\n\n一个函数可以在某个方面被阻塞但在其他方面不被阻塞，在 Tornado 的上下文中，我们一般讨论网络 I/O 上下文的阻塞，尽管各种阻塞已经被最小化。\n\n### 异步\n\n异步函数在会在其完成之前返回，在应用中触发下一个动作之前通常会在后台执行一些工作(和正常的同步函数在返回前就执行完所有的事情不同)。这里列举了几种不同的异步接口：\n\n- 回调参数；\n- 返回一个占位符([`Future`]() [`Promise`]() [`Deferred`]())；\n- 传送给一个队列；\n- 回调注册表(POSIX 信号)。\n\n不论使用哪种类型的接口，按照定义，异步函数与他们的调用者都有着不同的交互方式；也没有什么对调用者透明的方式使得同步函数变得异步(类似 [gevent](http://www.gevent.org/) 使用轻量级线程的系统性能虽然堪比异步系统，但它们并没有真正的让事情异步)。\n\n### 例子\n\n这是一个简单的同步函数：\n\n```\nfrom tornado.httpclient import HTTPClient\n\ndef synchronous_fetch(url):\n    http_client = HTTPClient()\n    response = http_client.fetch(url)\n    return response.body\n```\n\n下面是使用回调参数重写的具有同样功能的异步函数：\n\n```\nfrom tornado.httpclient import AsyncHTTPClient\n\ndef asynchronous_fetch(url, callback):\n    http_client = AsyncHTTPClient()\n    def handle_response(response):\n        callback(response.body)\n    http_client.fetch(url, callback=handle_response)\n```\n\n使用 [`Future`]() 代替回调：\n\n```\nfrom tornado.concurrent import Future\nfrom tornado.httpclient import AsyncHTTPClient\n\ndef async_fetch_future(url):\n    http_client = AsyncHTTPClient()\n    my_future = Future()\n    fetch_future = http_client.fetch(url)\n    fetch_future.add_done_callback(\n        lambda f: my_future.set_result(f.result()))\n    return my_future\n```\n\n[`Future`]() 版本更加复杂，但是 [`Futures`]() 却是 Tornado 中推荐的写法，因为它有两个主要的优势：一是错误处理更加一致，[`Future.result`]() 方法可以简单的抛出异常(相较于常见的回调函数接口中需特别指定错误处理方式)，二是 [`Futures`]() 很适合与协程一起使用。我们稍后会更加深入的讨论协程，以下是例子的协程版本，类似原始的同步版本：\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    raise gen.Return(response.body)\n```\n\n`raise gen.Return(response.body)` 声明是在 Python 2 环境下人为执行的，因为生成器不允许有返回值，为了解决这个问题，Tornado 的协程抛出了一种称为 `Return` 的异常，协程捕获这个异常并将其作为返回值。在 Python 3.3+版本，使用 `return response.body` 可以得到相同的结果。\n\n\n\nRead More:\n\n> [Asynchronous and non-Blocking I/O](http://www.tornadoweb.org/en/stable/guide/async.html)","slug":"tornado502-asnon","published":1,"updated":"2020-10-25T06:43:32.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepv00031molct438wz6p","content":"<p>实时web功能需要为每个用户提供一个多数时间被闲置的长连接，在传统的同步 web 服务器中，这意味着要为每个用户提供一个线程，当然每个线程的开销都是很昂贵的。</p>\n<p>为了尽量减少并发连接造成的开销，Tornado 使用了一种单线程事件循环的方式。这就意味着所有的应用代码都应该是异步非阻塞的，因为在同一时间只有一个操作是有效的。</p>\n<p>异步和非阻塞是非常相关的并且这两个术语经常交换使用，但它们不是完全相同的事情。</p>\n<h3 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h3><p>一个函数在等待某些事情返回值的时候会被阻塞，导致函数阻塞的原因有很多：网络 I/O，磁盘 I/O，互斥锁等。事实上每个函数在运行和使用 CPU 的时候都或多或少被阻塞(举个极端的例子来说明为什么对待 CPU 阻塞要和对待一般阻塞一样的严肃：比如密码哈希函数 <a href=\"http://bcrypt.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">bcrypt</a> ，需要消耗几百毫秒的 CPU 时间，这已 经远远超过了一般的网络或者磁盘请求时间了)。</p>\n<p>一个函数可以在某个方面被阻塞但在其他方面不被阻塞，在 Tornado 的上下文中，我们一般讨论网络 I/O 上下文的阻塞，尽管各种阻塞已经被最小化。</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>异步函数在会在其完成之前返回，在应用中触发下一个动作之前通常会在后台执行一些工作(和正常的同步函数在返回前就执行完所有的事情不同)。这里列举了几种不同的异步接口：</p>\n<ul>\n<li>回调参数；</li>\n<li>返回一个占位符(<a href><code>Future</code></a> <a href><code>Promise</code></a> <a href><code>Deferred</code></a>)；</li>\n<li>传送给一个队列；</li>\n<li>回调注册表(POSIX 信号)。</li>\n</ul>\n<p>不论使用哪种类型的接口，按照定义，异步函数与他们的调用者都有着不同的交互方式；也没有什么对调用者透明的方式使得同步函数变得异步(类似 <a href=\"http://www.gevent.org/\" target=\"_blank\" rel=\"noopener\">gevent</a> 使用轻量级线程的系统性能虽然堪比异步系统，但它们并没有真正的让事情异步)。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>这是一个简单的同步函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.httpclient import HTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def synchronous_fetch(url):</span><br><span class=\"line\">    http_client = HTTPClient()</span><br><span class=\"line\">    response = http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<p>下面是使用回调参数重写的具有同样功能的异步函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.httpclient import AsyncHTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def asynchronous_fetch(url, callback):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    def handle_response(response):</span><br><span class=\"line\">        callback(response.body)</span><br><span class=\"line\">    http_client.fetch(url, callback=handle_response)</span><br></pre></td></tr></table></figure>\n<p>使用 <a href><code>Future</code></a> 代替回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.concurrent import Future</span><br><span class=\"line\">from tornado.httpclient import AsyncHTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def async_fetch_future(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    my_future = Future()</span><br><span class=\"line\">    fetch_future = http_client.fetch(url)</span><br><span class=\"line\">    fetch_future.add_done_callback(</span><br><span class=\"line\">        lambda f: my_future.set_result(f.result()))</span><br><span class=\"line\">    return my_future</span><br></pre></td></tr></table></figure>\n<p><a href><code>Future</code></a> 版本更加复杂，但是 <a href><code>Futures</code></a> 却是 Tornado 中推荐的写法，因为它有两个主要的优势：一是错误处理更加一致，<a href><code>Future.result</code></a> 方法可以简单的抛出异常(相较于常见的回调函数接口中需特别指定错误处理方式)，二是 <a href><code>Futures</code></a> 很适合与协程一起使用。我们稍后会更加深入的讨论协程，以下是例子的协程版本，类似原始的同步版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    raise gen.Return(response.body)</span><br></pre></td></tr></table></figure>\n<p><code>raise gen.Return(response.body)</code> 声明是在 Python 2 环境下人为执行的，因为生成器不允许有返回值，为了解决这个问题，Tornado 的协程抛出了一种称为 <code>Return</code> 的异常，协程捕获这个异常并将其作为返回值。在 Python 3.3+版本，使用 <code>return response.body</code> 可以得到相同的结果。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/async.html\" target=\"_blank\" rel=\"noopener\">Asynchronous and non-Blocking I/O</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>实时web功能需要为每个用户提供一个多数时间被闲置的长连接，在传统的同步 web 服务器中，这意味着要为每个用户提供一个线程，当然每个线程的开销都是很昂贵的。</p>\n<p>为了尽量减少并发连接造成的开销，Tornado 使用了一种单线程事件循环的方式。这就意味着所有的应用代码都应该是异步非阻塞的，因为在同一时间只有一个操作是有效的。</p>\n<p>异步和非阻塞是非常相关的并且这两个术语经常交换使用，但它们不是完全相同的事情。</p>\n<h3 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h3><p>一个函数在等待某些事情返回值的时候会被阻塞，导致函数阻塞的原因有很多：网络 I/O，磁盘 I/O，互斥锁等。事实上每个函数在运行和使用 CPU 的时候都或多或少被阻塞(举个极端的例子来说明为什么对待 CPU 阻塞要和对待一般阻塞一样的严肃：比如密码哈希函数 <a href=\"http://bcrypt.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">bcrypt</a> ，需要消耗几百毫秒的 CPU 时间，这已 经远远超过了一般的网络或者磁盘请求时间了)。</p>\n<p>一个函数可以在某个方面被阻塞但在其他方面不被阻塞，在 Tornado 的上下文中，我们一般讨论网络 I/O 上下文的阻塞，尽管各种阻塞已经被最小化。</p>\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><p>异步函数在会在其完成之前返回，在应用中触发下一个动作之前通常会在后台执行一些工作(和正常的同步函数在返回前就执行完所有的事情不同)。这里列举了几种不同的异步接口：</p>\n<ul>\n<li>回调参数；</li>\n<li>返回一个占位符(<a href><code>Future</code></a> <a href><code>Promise</code></a> <a href><code>Deferred</code></a>)；</li>\n<li>传送给一个队列；</li>\n<li>回调注册表(POSIX 信号)。</li>\n</ul>\n<p>不论使用哪种类型的接口，按照定义，异步函数与他们的调用者都有着不同的交互方式；也没有什么对调用者透明的方式使得同步函数变得异步(类似 <a href=\"http://www.gevent.org/\" target=\"_blank\" rel=\"noopener\">gevent</a> 使用轻量级线程的系统性能虽然堪比异步系统，但它们并没有真正的让事情异步)。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>这是一个简单的同步函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.httpclient import HTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def synchronous_fetch(url):</span><br><span class=\"line\">    http_client = HTTPClient()</span><br><span class=\"line\">    response = http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<p>下面是使用回调参数重写的具有同样功能的异步函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.httpclient import AsyncHTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def asynchronous_fetch(url, callback):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    def handle_response(response):</span><br><span class=\"line\">        callback(response.body)</span><br><span class=\"line\">    http_client.fetch(url, callback=handle_response)</span><br></pre></td></tr></table></figure>\n<p>使用 <a href><code>Future</code></a> 代替回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado.concurrent import Future</span><br><span class=\"line\">from tornado.httpclient import AsyncHTTPClient</span><br><span class=\"line\"></span><br><span class=\"line\">def async_fetch_future(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    my_future = Future()</span><br><span class=\"line\">    fetch_future = http_client.fetch(url)</span><br><span class=\"line\">    fetch_future.add_done_callback(</span><br><span class=\"line\">        lambda f: my_future.set_result(f.result()))</span><br><span class=\"line\">    return my_future</span><br></pre></td></tr></table></figure>\n<p><a href><code>Future</code></a> 版本更加复杂，但是 <a href><code>Futures</code></a> 却是 Tornado 中推荐的写法，因为它有两个主要的优势：一是错误处理更加一致，<a href><code>Future.result</code></a> 方法可以简单的抛出异常(相较于常见的回调函数接口中需特别指定错误处理方式)，二是 <a href><code>Futures</code></a> 很适合与协程一起使用。我们稍后会更加深入的讨论协程，以下是例子的协程版本，类似原始的同步版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    raise gen.Return(response.body)</span><br></pre></td></tr></table></figure>\n<p><code>raise gen.Return(response.body)</code> 声明是在 Python 2 环境下人为执行的，因为生成器不允许有返回值，为了解决这个问题，Tornado 的协程抛出了一种称为 <code>Return</code> 的异常，协程捕获这个异常并将其作为返回值。在 Python 3.3+版本，使用 <code>return response.body</code> 可以得到相同的结果。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/async.html\" target=\"_blank\" rel=\"noopener\">Asynchronous and non-Blocking I/O</a></p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - Queue示例:一个并发网络爬虫","date":"2018-06-18T06:59:43.000Z","_content":"\nTornado的 [`tornado.queues`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#module-tornado.queues) 模块实现了异步生产者/消费者模式的协程，类似于通过Python 标准库的 [`queue`](https://docs.python.org/3.4/library/queue.html#module-queue) 实现线程模式。\n\n一个yields [`Queue.get`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.get) 的协程直到队列中有值的时候才会暂停。如果队列设置了最大长度，yields [`Queue.put`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put) 的协程直到队列中有空间才会暂停。\n\n一个 [`Queue`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue) 从0开始对未完成的任务进行计数， [`put`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put) 加计数； [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 减少计数。\n\n这里的网络爬虫的例子，队列开始的时候只包含 base_url。当一个 worker 抓取到一个页面它会解析链接并把它添加到队列中，然后调用 [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 减少计数一次。最后，当一个 worker 抓取到的页面 URL 都是之前抓取到过的并且队列中没有任务了。于是 worker 调用 [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 把计数减到0。等待 [`join`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.join) 的主协程取消暂停并且完成。\n\n```\n#!/usr/bin/env python\n\nimport time\nfrom datetime import timedelta\n\ntry:\n    from HTMLParser import HTMLParser\n    from urlparse import urljoin, urldefrag\nexcept ImportError:\n    from html.parser import HTMLParser\n    from urllib.parse import urljoin, urldefrag\n\nfrom tornado import httpclient, gen, ioloop, queues\n\nbase_url = 'http://www.tornadoweb.org/en/stable/'\nconcurrency = 10\n\n\n@gen.coroutine\ndef get_links_from_url(url):\n    \"\"\"Download the page at `url` and parse it for links.\n\n    Returned links have had the fragment after `#` removed, and have been made\n    absolute so, e.g. the URL 'gen.html#tornado.gen.coroutine' becomes\n    'http://www.tornadoweb.org/en/stable/gen.html'.\n    \"\"\"\n    try:\n        response = yield httpclient.AsyncHTTPClient().fetch(url)\n        print('fetched %s' % url)\n\n        html = response.body if isinstance(response.body, str) \\\n            else response.body.decode(errors='ignore')\n        urls = [urljoin(url, remove_fragment(new_url))\n                for new_url in get_links(html)]\n    except Exception as e:\n        print('Exception: %s %s' % (e, url))\n        raise gen.Return([])\n\n    raise gen.Return(urls)\n\n\ndef remove_fragment(url):\n    pure_url, frag = urldefrag(url)\n    return pure_url\n\n\ndef get_links(html):\n    class URLSeeker(HTMLParser):\n        def __init__(self):\n            HTMLParser.__init__(self)\n            self.urls = []\n\n        def handle_starttag(self, tag, attrs):\n            href = dict(attrs).get('href')\n            if href and tag == 'a':\n                self.urls.append(href)\n\n    url_seeker = URLSeeker()\n    url_seeker.feed(html)\n    return url_seeker.urls\n\n\n@gen.coroutine\ndef main():\n    q = queues.Queue()\n    start = time.time()\n    fetching, fetched = set(), set()\n\n    @gen.coroutine\n    def fetch_url():\n        current_url = yield q.get()\n        try:\n            if current_url in fetching:\n                return\n\n            print('fetching %s' % current_url)\n            fetching.add(current_url)\n            urls = yield get_links_from_url(current_url)\n            fetched.add(current_url)\n\n            for new_url in urls:\n                # Only follow links beneath the base URL\n                if new_url.startswith(base_url):\n                    yield q.put(new_url)\n\n        finally:\n            q.task_done()\n\n    @gen.coroutine\n    def worker():\n        while True:\n            yield fetch_url()\n\n    q.put(base_url)\n\n    # Start workers, then wait for the work queue to be empty.\n    for _ in range(concurrency):\n        worker()\n    yield q.join(timeout=timedelta(seconds=300))\n    assert fetching == fetched\n    print('Done in %d seconds, fetched %s URLs.' % (\n        time.time() - start, len(fetched)))\n\n\nif __name__ == '__main__':\n    io_loop = ioloop.IOLoop.current()\n    io_loop.run_sync(main)\n```\n\n\n\nRead More:\n\n> [`Queue` example - a concurrent web spider](http://www.tornadoweb.org/en/stable/guide/queues.html) \n\n\n\n\n\n","source":"_posts/tornado502-concurrentwebspider.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - Queue示例:一个并发网络爬虫\ndate: 2018-06-18 14:59:43\ntags:\n - Tornado\n - 翻译文档\n - 并发网络爬虫\ncategories:\n - Tornado\n---\n\nTornado的 [`tornado.queues`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#module-tornado.queues) 模块实现了异步生产者/消费者模式的协程，类似于通过Python 标准库的 [`queue`](https://docs.python.org/3.4/library/queue.html#module-queue) 实现线程模式。\n\n一个yields [`Queue.get`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.get) 的协程直到队列中有值的时候才会暂停。如果队列设置了最大长度，yields [`Queue.put`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put) 的协程直到队列中有空间才会暂停。\n\n一个 [`Queue`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue) 从0开始对未完成的任务进行计数， [`put`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put) 加计数； [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 减少计数。\n\n这里的网络爬虫的例子，队列开始的时候只包含 base_url。当一个 worker 抓取到一个页面它会解析链接并把它添加到队列中，然后调用 [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 减少计数一次。最后，当一个 worker 抓取到的页面 URL 都是之前抓取到过的并且队列中没有任务了。于是 worker 调用 [`task_done`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done) 把计数减到0。等待 [`join`](http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.join) 的主协程取消暂停并且完成。\n\n```\n#!/usr/bin/env python\n\nimport time\nfrom datetime import timedelta\n\ntry:\n    from HTMLParser import HTMLParser\n    from urlparse import urljoin, urldefrag\nexcept ImportError:\n    from html.parser import HTMLParser\n    from urllib.parse import urljoin, urldefrag\n\nfrom tornado import httpclient, gen, ioloop, queues\n\nbase_url = 'http://www.tornadoweb.org/en/stable/'\nconcurrency = 10\n\n\n@gen.coroutine\ndef get_links_from_url(url):\n    \"\"\"Download the page at `url` and parse it for links.\n\n    Returned links have had the fragment after `#` removed, and have been made\n    absolute so, e.g. the URL 'gen.html#tornado.gen.coroutine' becomes\n    'http://www.tornadoweb.org/en/stable/gen.html'.\n    \"\"\"\n    try:\n        response = yield httpclient.AsyncHTTPClient().fetch(url)\n        print('fetched %s' % url)\n\n        html = response.body if isinstance(response.body, str) \\\n            else response.body.decode(errors='ignore')\n        urls = [urljoin(url, remove_fragment(new_url))\n                for new_url in get_links(html)]\n    except Exception as e:\n        print('Exception: %s %s' % (e, url))\n        raise gen.Return([])\n\n    raise gen.Return(urls)\n\n\ndef remove_fragment(url):\n    pure_url, frag = urldefrag(url)\n    return pure_url\n\n\ndef get_links(html):\n    class URLSeeker(HTMLParser):\n        def __init__(self):\n            HTMLParser.__init__(self)\n            self.urls = []\n\n        def handle_starttag(self, tag, attrs):\n            href = dict(attrs).get('href')\n            if href and tag == 'a':\n                self.urls.append(href)\n\n    url_seeker = URLSeeker()\n    url_seeker.feed(html)\n    return url_seeker.urls\n\n\n@gen.coroutine\ndef main():\n    q = queues.Queue()\n    start = time.time()\n    fetching, fetched = set(), set()\n\n    @gen.coroutine\n    def fetch_url():\n        current_url = yield q.get()\n        try:\n            if current_url in fetching:\n                return\n\n            print('fetching %s' % current_url)\n            fetching.add(current_url)\n            urls = yield get_links_from_url(current_url)\n            fetched.add(current_url)\n\n            for new_url in urls:\n                # Only follow links beneath the base URL\n                if new_url.startswith(base_url):\n                    yield q.put(new_url)\n\n        finally:\n            q.task_done()\n\n    @gen.coroutine\n    def worker():\n        while True:\n            yield fetch_url()\n\n    q.put(base_url)\n\n    # Start workers, then wait for the work queue to be empty.\n    for _ in range(concurrency):\n        worker()\n    yield q.join(timeout=timedelta(seconds=300))\n    assert fetching == fetched\n    print('Done in %d seconds, fetched %s URLs.' % (\n        time.time() - start, len(fetched)))\n\n\nif __name__ == '__main__':\n    io_loop = ioloop.IOLoop.current()\n    io_loop.run_sync(main)\n```\n\n\n\nRead More:\n\n> [`Queue` example - a concurrent web spider](http://www.tornadoweb.org/en/stable/guide/queues.html) \n\n\n\n\n\n","slug":"tornado502-concurrentwebspider","published":1,"updated":"2020-10-25T06:43:32.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepv60035molcxynd5s2p","content":"<p>Tornado的 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#module-tornado.queues\" target=\"_blank\" rel=\"noopener\"><code>tornado.queues</code></a> 模块实现了异步生产者/消费者模式的协程，类似于通过Python 标准库的 <a href=\"https://docs.python.org/3.4/library/queue.html#module-queue\" target=\"_blank\" rel=\"noopener\"><code>queue</code></a> 实现线程模式。</p>\n<p>一个yields <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.get\" target=\"_blank\" rel=\"noopener\"><code>Queue.get</code></a> 的协程直到队列中有值的时候才会暂停。如果队列设置了最大长度，yields <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put\" target=\"_blank\" rel=\"noopener\"><code>Queue.put</code></a> 的协程直到队列中有空间才会暂停。</p>\n<p>一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue\" target=\"_blank\" rel=\"noopener\"><code>Queue</code></a> 从0开始对未完成的任务进行计数， <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put\" target=\"_blank\" rel=\"noopener\"><code>put</code></a> 加计数； <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 减少计数。</p>\n<p>这里的网络爬虫的例子，队列开始的时候只包含 base_url。当一个 worker 抓取到一个页面它会解析链接并把它添加到队列中，然后调用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 减少计数一次。最后，当一个 worker 抓取到的页面 URL 都是之前抓取到过的并且队列中没有任务了。于是 worker 调用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 把计数减到0。等待 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.join\" target=\"_blank\" rel=\"noopener\"><code>join</code></a> 的主协程取消暂停并且完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"></span><br><span class=\"line\">import time</span><br><span class=\"line\">from datetime import timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    from HTMLParser import HTMLParser</span><br><span class=\"line\">    from urlparse import urljoin, urldefrag</span><br><span class=\"line\">except ImportError:</span><br><span class=\"line\">    from html.parser import HTMLParser</span><br><span class=\"line\">    from urllib.parse import urljoin, urldefrag</span><br><span class=\"line\"></span><br><span class=\"line\">from tornado import httpclient, gen, ioloop, queues</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &apos;http://www.tornadoweb.org/en/stable/&apos;</span><br><span class=\"line\">concurrency = 10</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def get_links_from_url(url):</span><br><span class=\"line\">    &quot;&quot;&quot;Download the page at `url` and parse it for links.</span><br><span class=\"line\"></span><br><span class=\"line\">    Returned links have had the fragment after `#` removed, and have been made</span><br><span class=\"line\">    absolute so, e.g. the URL &apos;gen.html#tornado.gen.coroutine&apos; becomes</span><br><span class=\"line\">    &apos;http://www.tornadoweb.org/en/stable/gen.html&apos;.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        response = yield httpclient.AsyncHTTPClient().fetch(url)</span><br><span class=\"line\">        print(&apos;fetched %s&apos; % url)</span><br><span class=\"line\"></span><br><span class=\"line\">        html = response.body if isinstance(response.body, str) \\</span><br><span class=\"line\">            else response.body.decode(errors=&apos;ignore&apos;)</span><br><span class=\"line\">        urls = [urljoin(url, remove_fragment(new_url))</span><br><span class=\"line\">                for new_url in get_links(html)]</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;Exception: %s %s&apos; % (e, url))</span><br><span class=\"line\">        raise gen.Return([])</span><br><span class=\"line\"></span><br><span class=\"line\">    raise gen.Return(urls)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def remove_fragment(url):</span><br><span class=\"line\">    pure_url, frag = urldefrag(url)</span><br><span class=\"line\">    return pure_url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_links(html):</span><br><span class=\"line\">    class URLSeeker(HTMLParser):</span><br><span class=\"line\">        def __init__(self):</span><br><span class=\"line\">            HTMLParser.__init__(self)</span><br><span class=\"line\">            self.urls = []</span><br><span class=\"line\"></span><br><span class=\"line\">        def handle_starttag(self, tag, attrs):</span><br><span class=\"line\">            href = dict(attrs).get(&apos;href&apos;)</span><br><span class=\"line\">            if href and tag == &apos;a&apos;:</span><br><span class=\"line\">                self.urls.append(href)</span><br><span class=\"line\"></span><br><span class=\"line\">    url_seeker = URLSeeker()</span><br><span class=\"line\">    url_seeker.feed(html)</span><br><span class=\"line\">    return url_seeker.urls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    q = queues.Queue()</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    fetching, fetched = set(), set()</span><br><span class=\"line\"></span><br><span class=\"line\">    @gen.coroutine</span><br><span class=\"line\">    def fetch_url():</span><br><span class=\"line\">        current_url = yield q.get()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if current_url in fetching:</span><br><span class=\"line\">                return</span><br><span class=\"line\"></span><br><span class=\"line\">            print(&apos;fetching %s&apos; % current_url)</span><br><span class=\"line\">            fetching.add(current_url)</span><br><span class=\"line\">            urls = yield get_links_from_url(current_url)</span><br><span class=\"line\">            fetched.add(current_url)</span><br><span class=\"line\"></span><br><span class=\"line\">            for new_url in urls:</span><br><span class=\"line\">                # Only follow links beneath the base URL</span><br><span class=\"line\">                if new_url.startswith(base_url):</span><br><span class=\"line\">                    yield q.put(new_url)</span><br><span class=\"line\"></span><br><span class=\"line\">        finally:</span><br><span class=\"line\">            q.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\">    @gen.coroutine</span><br><span class=\"line\">    def worker():</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            yield fetch_url()</span><br><span class=\"line\"></span><br><span class=\"line\">    q.put(base_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Start workers, then wait for the work queue to be empty.</span><br><span class=\"line\">    for _ in range(concurrency):</span><br><span class=\"line\">        worker()</span><br><span class=\"line\">    yield q.join(timeout=timedelta(seconds=300))</span><br><span class=\"line\">    assert fetching == fetched</span><br><span class=\"line\">    print(&apos;Done in %d seconds, fetched %s URLs.&apos; % (</span><br><span class=\"line\">        time.time() - start, len(fetched)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    io_loop = ioloop.IOLoop.current()</span><br><span class=\"line\">    io_loop.run_sync(main)</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/queues.html\" target=\"_blank\" rel=\"noopener\"><code>Queue</code> example - a concurrent web spider</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Tornado的 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#module-tornado.queues\" target=\"_blank\" rel=\"noopener\"><code>tornado.queues</code></a> 模块实现了异步生产者/消费者模式的协程，类似于通过Python 标准库的 <a href=\"https://docs.python.org/3.4/library/queue.html#module-queue\" target=\"_blank\" rel=\"noopener\"><code>queue</code></a> 实现线程模式。</p>\n<p>一个yields <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.get\" target=\"_blank\" rel=\"noopener\"><code>Queue.get</code></a> 的协程直到队列中有值的时候才会暂停。如果队列设置了最大长度，yields <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put\" target=\"_blank\" rel=\"noopener\"><code>Queue.put</code></a> 的协程直到队列中有空间才会暂停。</p>\n<p>一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue\" target=\"_blank\" rel=\"noopener\"><code>Queue</code></a> 从0开始对未完成的任务进行计数， <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.put\" target=\"_blank\" rel=\"noopener\"><code>put</code></a> 加计数； <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 减少计数。</p>\n<p>这里的网络爬虫的例子，队列开始的时候只包含 base_url。当一个 worker 抓取到一个页面它会解析链接并把它添加到队列中，然后调用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 减少计数一次。最后，当一个 worker 抓取到的页面 URL 都是之前抓取到过的并且队列中没有任务了。于是 worker 调用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.task_done\" target=\"_blank\" rel=\"noopener\"><code>task_done</code></a> 把计数减到0。等待 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/queues.html#tornado.queues.Queue.join\" target=\"_blank\" rel=\"noopener\"><code>join</code></a> 的主协程取消暂停并且完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"></span><br><span class=\"line\">import time</span><br><span class=\"line\">from datetime import timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    from HTMLParser import HTMLParser</span><br><span class=\"line\">    from urlparse import urljoin, urldefrag</span><br><span class=\"line\">except ImportError:</span><br><span class=\"line\">    from html.parser import HTMLParser</span><br><span class=\"line\">    from urllib.parse import urljoin, urldefrag</span><br><span class=\"line\"></span><br><span class=\"line\">from tornado import httpclient, gen, ioloop, queues</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &apos;http://www.tornadoweb.org/en/stable/&apos;</span><br><span class=\"line\">concurrency = 10</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def get_links_from_url(url):</span><br><span class=\"line\">    &quot;&quot;&quot;Download the page at `url` and parse it for links.</span><br><span class=\"line\"></span><br><span class=\"line\">    Returned links have had the fragment after `#` removed, and have been made</span><br><span class=\"line\">    absolute so, e.g. the URL &apos;gen.html#tornado.gen.coroutine&apos; becomes</span><br><span class=\"line\">    &apos;http://www.tornadoweb.org/en/stable/gen.html&apos;.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        response = yield httpclient.AsyncHTTPClient().fetch(url)</span><br><span class=\"line\">        print(&apos;fetched %s&apos; % url)</span><br><span class=\"line\"></span><br><span class=\"line\">        html = response.body if isinstance(response.body, str) \\</span><br><span class=\"line\">            else response.body.decode(errors=&apos;ignore&apos;)</span><br><span class=\"line\">        urls = [urljoin(url, remove_fragment(new_url))</span><br><span class=\"line\">                for new_url in get_links(html)]</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(&apos;Exception: %s %s&apos; % (e, url))</span><br><span class=\"line\">        raise gen.Return([])</span><br><span class=\"line\"></span><br><span class=\"line\">    raise gen.Return(urls)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def remove_fragment(url):</span><br><span class=\"line\">    pure_url, frag = urldefrag(url)</span><br><span class=\"line\">    return pure_url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_links(html):</span><br><span class=\"line\">    class URLSeeker(HTMLParser):</span><br><span class=\"line\">        def __init__(self):</span><br><span class=\"line\">            HTMLParser.__init__(self)</span><br><span class=\"line\">            self.urls = []</span><br><span class=\"line\"></span><br><span class=\"line\">        def handle_starttag(self, tag, attrs):</span><br><span class=\"line\">            href = dict(attrs).get(&apos;href&apos;)</span><br><span class=\"line\">            if href and tag == &apos;a&apos;:</span><br><span class=\"line\">                self.urls.append(href)</span><br><span class=\"line\"></span><br><span class=\"line\">    url_seeker = URLSeeker()</span><br><span class=\"line\">    url_seeker.feed(html)</span><br><span class=\"line\">    return url_seeker.urls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    q = queues.Queue()</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    fetching, fetched = set(), set()</span><br><span class=\"line\"></span><br><span class=\"line\">    @gen.coroutine</span><br><span class=\"line\">    def fetch_url():</span><br><span class=\"line\">        current_url = yield q.get()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if current_url in fetching:</span><br><span class=\"line\">                return</span><br><span class=\"line\"></span><br><span class=\"line\">            print(&apos;fetching %s&apos; % current_url)</span><br><span class=\"line\">            fetching.add(current_url)</span><br><span class=\"line\">            urls = yield get_links_from_url(current_url)</span><br><span class=\"line\">            fetched.add(current_url)</span><br><span class=\"line\"></span><br><span class=\"line\">            for new_url in urls:</span><br><span class=\"line\">                # Only follow links beneath the base URL</span><br><span class=\"line\">                if new_url.startswith(base_url):</span><br><span class=\"line\">                    yield q.put(new_url)</span><br><span class=\"line\"></span><br><span class=\"line\">        finally:</span><br><span class=\"line\">            q.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\">    @gen.coroutine</span><br><span class=\"line\">    def worker():</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            yield fetch_url()</span><br><span class=\"line\"></span><br><span class=\"line\">    q.put(base_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # Start workers, then wait for the work queue to be empty.</span><br><span class=\"line\">    for _ in range(concurrency):</span><br><span class=\"line\">        worker()</span><br><span class=\"line\">    yield q.join(timeout=timedelta(seconds=300))</span><br><span class=\"line\">    assert fetching == fetched</span><br><span class=\"line\">    print(&apos;Done in %d seconds, fetched %s URLs.&apos; % (</span><br><span class=\"line\">        time.time() - start, len(fetched)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    io_loop = ioloop.IOLoop.current()</span><br><span class=\"line\">    io_loop.run_sync(main)</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/queues.html\" target=\"_blank\" rel=\"noopener\"><code>Queue</code> example - a concurrent web spider</a> </p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - 介绍","date":"2018-06-10T12:48:11.000Z","_content":"\n[Tornado](http://www.tornadoweb.org/) 是一个 Python web 框架和异步网络库，起初由 [FriendFeed](http://friendfeed.com/) 开发。通过使用非阻塞网络 I/O，Tornado 可以支持上万级的连接，处理[长连接](http://en.wikipedia.org/wiki/Push_technology#Long_polling) [WebSockets](http://en.wikipedia.org/wiki/WebSocket) 和其他需要与每个用户保持长久连接的应用。\n\nTornado 大体上可以被分为4个主要的部分：\n\n- web 框架 - 包括创建 web 应用的 [`RequestHandler`]() 类，和其他支持类；\n- HTTP 客户端和服务端的实现([`HTTPServer`]() 和 [`AsyncHTTPClient`]())；\n- 异步网络库([`IOLoop`]() 和 [`IOStream`]())，为 HTTP 组件提供构建模块，也可以用来实现其他协议；\n- 协程库 ([`tornado.gen`]()) 允许异步代码写的更直接而不用链式回调的方式。\n\nTornado web 框架和 HTTP server 一起为 [WSGI](http://www.python.org/dev/peps/pep-3333/) 提供了一个全栈式的选择，在 WSGI 容器 ([`WSGIAdapter`]()) 中使用 Tornado web 框架或者使用 Tornado HTTP server 作为一个其他 WSGI 框架([`WSGIContainer`]())的容器，这样的组合方式都是有局限性的。为了充分利用Tornado的特性，你需要一起使用 Tornado 的 web 框架和 HTTP server。\n\n\n\nRead More:\n\n> [Introduction](http://www.tornadoweb.org/en/stable/guide/intro.html) \n\n\n\n\n","source":"_posts/tornado502-introduction.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - 介绍\ndate: 2018-06-10 20:48:11\ntags:\n - Tornado\n - 翻译文档\ncategories:\n - Tornado\n---\n\n[Tornado](http://www.tornadoweb.org/) 是一个 Python web 框架和异步网络库，起初由 [FriendFeed](http://friendfeed.com/) 开发。通过使用非阻塞网络 I/O，Tornado 可以支持上万级的连接，处理[长连接](http://en.wikipedia.org/wiki/Push_technology#Long_polling) [WebSockets](http://en.wikipedia.org/wiki/WebSocket) 和其他需要与每个用户保持长久连接的应用。\n\nTornado 大体上可以被分为4个主要的部分：\n\n- web 框架 - 包括创建 web 应用的 [`RequestHandler`]() 类，和其他支持类；\n- HTTP 客户端和服务端的实现([`HTTPServer`]() 和 [`AsyncHTTPClient`]())；\n- 异步网络库([`IOLoop`]() 和 [`IOStream`]())，为 HTTP 组件提供构建模块，也可以用来实现其他协议；\n- 协程库 ([`tornado.gen`]()) 允许异步代码写的更直接而不用链式回调的方式。\n\nTornado web 框架和 HTTP server 一起为 [WSGI](http://www.python.org/dev/peps/pep-3333/) 提供了一个全栈式的选择，在 WSGI 容器 ([`WSGIAdapter`]()) 中使用 Tornado web 框架或者使用 Tornado HTTP server 作为一个其他 WSGI 框架([`WSGIContainer`]())的容器，这样的组合方式都是有局限性的。为了充分利用Tornado的特性，你需要一起使用 Tornado 的 web 框架和 HTTP server。\n\n\n\nRead More:\n\n> [Introduction](http://www.tornadoweb.org/en/stable/guide/intro.html) \n\n\n\n\n","slug":"tornado502-introduction","published":1,"updated":"2020-10-25T06:43:32.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepv80036molc38uwyawg","content":"<p><a href=\"http://www.tornadoweb.org/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 是一个 Python web 框架和异步网络库，起初由 <a href=\"http://friendfeed.com/\" target=\"_blank\" rel=\"noopener\">FriendFeed</a> 开发。通过使用非阻塞网络 I/O，Tornado 可以支持上万级的连接，处理<a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\" target=\"_blank\" rel=\"noopener\">长连接</a> <a href=\"http://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"noopener\">WebSockets</a> 和其他需要与每个用户保持长久连接的应用。</p>\n<p>Tornado 大体上可以被分为4个主要的部分：</p>\n<ul>\n<li>web 框架 - 包括创建 web 应用的 <a href><code>RequestHandler</code></a> 类，和其他支持类；</li>\n<li>HTTP 客户端和服务端的实现(<a href><code>HTTPServer</code></a> 和 <a href><code>AsyncHTTPClient</code></a>)；</li>\n<li>异步网络库(<a href><code>IOLoop</code></a> 和 <a href><code>IOStream</code></a>)，为 HTTP 组件提供构建模块，也可以用来实现其他协议；</li>\n<li>协程库 (<a href><code>tornado.gen</code></a>) 允许异步代码写的更直接而不用链式回调的方式。</li>\n</ul>\n<p>Tornado web 框架和 HTTP server 一起为 <a href=\"http://www.python.org/dev/peps/pep-3333/\" target=\"_blank\" rel=\"noopener\">WSGI</a> 提供了一个全栈式的选择，在 WSGI 容器 (<a href><code>WSGIAdapter</code></a>) 中使用 Tornado web 框架或者使用 Tornado HTTP server 作为一个其他 WSGI 框架(<a href><code>WSGIContainer</code></a>)的容器，这样的组合方式都是有局限性的。为了充分利用Tornado的特性，你需要一起使用 Tornado 的 web 框架和 HTTP server。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/intro.html\" target=\"_blank\" rel=\"noopener\">Introduction</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.tornadoweb.org/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 是一个 Python web 框架和异步网络库，起初由 <a href=\"http://friendfeed.com/\" target=\"_blank\" rel=\"noopener\">FriendFeed</a> 开发。通过使用非阻塞网络 I/O，Tornado 可以支持上万级的连接，处理<a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\" target=\"_blank\" rel=\"noopener\">长连接</a> <a href=\"http://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"noopener\">WebSockets</a> 和其他需要与每个用户保持长久连接的应用。</p>\n<p>Tornado 大体上可以被分为4个主要的部分：</p>\n<ul>\n<li>web 框架 - 包括创建 web 应用的 <a href><code>RequestHandler</code></a> 类，和其他支持类；</li>\n<li>HTTP 客户端和服务端的实现(<a href><code>HTTPServer</code></a> 和 <a href><code>AsyncHTTPClient</code></a>)；</li>\n<li>异步网络库(<a href><code>IOLoop</code></a> 和 <a href><code>IOStream</code></a>)，为 HTTP 组件提供构建模块，也可以用来实现其他协议；</li>\n<li>协程库 (<a href><code>tornado.gen</code></a>) 允许异步代码写的更直接而不用链式回调的方式。</li>\n</ul>\n<p>Tornado web 框架和 HTTP server 一起为 <a href=\"http://www.python.org/dev/peps/pep-3333/\" target=\"_blank\" rel=\"noopener\">WSGI</a> 提供了一个全栈式的选择，在 WSGI 容器 (<a href><code>WSGIAdapter</code></a>) 中使用 Tornado web 框架或者使用 Tornado HTTP server 作为一个其他 WSGI 框架(<a href><code>WSGIContainer</code></a>)的容器，这样的组合方式都是有局限性的。为了充分利用Tornado的特性，你需要一起使用 Tornado 的 web 框架和 HTTP server。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/intro.html\" target=\"_blank\" rel=\"noopener\">Introduction</a> </p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - 用户指南","date":"2018-06-10T10:50:44.000Z","_content":"\n### 用户指南\n\n- [介绍](https://runnerliu.github.io/2018/06/10/tornado502-introduction/)\n- [异步和非阻塞I/O](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [阻塞](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [异步](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [例子](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n- [协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [Python3.5: async 和 await ](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [它如何工作](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [如何调用协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [协程模式](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n    - [调用阻塞函数]()\n    - [并行]()\n    - [交叉存取]()\n    - [循环]()\n    - [在后台运行]()\n- [Queue 示例-一个并发网络爬虫](https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more)\n- [Tornado Web应用的结构]()\n  - [Application 对象]()\n  - [RequestHandler 子类]()\n  - [处理输入请求]()\n  - [重写 RequestHandler 方法]()\n  - [错误处理]()\n  - [重定向]()\n  - [异步处理]()\n- [模板和 UI]()\n  - [配置模板]()\n  - [模板语法]()\n  - [国际化]()\n  - [UI 模块]()\n- [认证和安全]()\n  - [Cookies 和 secure cookies]()\n  - [用户认证]()\n  - [第三方用户认证]()\n  - [跨站请求伪造(防护)]()\n  - [DNS 重绑定]()\n- [运行和部署]()\n  - [进程和端口]()\n  - [运行在负载均衡器后面]()\n  - [静态文件和文件缓存]()\n  - [Debug 模式和自动重载]()\n  - [WSGI 和 Google App Engine]()\n\n\n\nRead More:\n\n> [User’s guide](http://www.tornadoweb.org/en/stable/guide.html) ","source":"_posts/tornado502-userguide.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - 用户指南\ndate: 2018-06-10 18:50:44\ntags:\n - Tornado\n - 翻译文档\n - 用户指南\ncategories:\n - Tornado\n---\n\n### 用户指南\n\n- [介绍](https://runnerliu.github.io/2018/06/10/tornado502-introduction/)\n- [异步和非阻塞I/O](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [阻塞](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [异步](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [例子](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n- [协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [Python3.5: async 和 await ](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [它如何工作](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [如何调用协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [协程模式](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n    - [调用阻塞函数]()\n    - [并行]()\n    - [交叉存取]()\n    - [循环]()\n    - [在后台运行]()\n- [Queue 示例-一个并发网络爬虫](https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more)\n- [Tornado Web应用的结构]()\n  - [Application 对象]()\n  - [RequestHandler 子类]()\n  - [处理输入请求]()\n  - [重写 RequestHandler 方法]()\n  - [错误处理]()\n  - [重定向]()\n  - [异步处理]()\n- [模板和 UI]()\n  - [配置模板]()\n  - [模板语法]()\n  - [国际化]()\n  - [UI 模块]()\n- [认证和安全]()\n  - [Cookies 和 secure cookies]()\n  - [用户认证]()\n  - [第三方用户认证]()\n  - [跨站请求伪造(防护)]()\n  - [DNS 重绑定]()\n- [运行和部署]()\n  - [进程和端口]()\n  - [运行在负载均衡器后面]()\n  - [静态文件和文件缓存]()\n  - [Debug 模式和自动重载]()\n  - [WSGI 和 Google App Engine]()\n\n\n\nRead More:\n\n> [User’s guide](http://www.tornadoweb.org/en/stable/guide.html) ","slug":"tornado502-userguide","published":1,"updated":"2020-10-25T06:43:32.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepvd003amolci129wdc8","content":"<h3 id=\"用户指南\"><a href=\"#用户指南\" class=\"headerlink\" title=\"用户指南\"></a>用户指南</h3><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-introduction/\">介绍</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步和非阻塞I/O</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">阻塞</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">例子</a></li>\n</ul>\n</li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">Python3.5: async 和 await </a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">它如何工作</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">如何调用协程</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程模式</a><ul>\n<li><a href>调用阻塞函数</a></li>\n<li><a href>并行</a></li>\n<li><a href>交叉存取</a></li>\n<li><a href>循环</a></li>\n<li><a href>在后台运行</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more\">Queue 示例-一个并发网络爬虫</a></li>\n<li><a href>Tornado Web应用的结构</a><ul>\n<li><a href>Application 对象</a></li>\n<li><a href>RequestHandler 子类</a></li>\n<li><a href>处理输入请求</a></li>\n<li><a href>重写 RequestHandler 方法</a></li>\n<li><a href>错误处理</a></li>\n<li><a href>重定向</a></li>\n<li><a href>异步处理</a></li>\n</ul>\n</li>\n<li><a href>模板和 UI</a><ul>\n<li><a href>配置模板</a></li>\n<li><a href>模板语法</a></li>\n<li><a href>国际化</a></li>\n<li><a href>UI 模块</a></li>\n</ul>\n</li>\n<li><a href>认证和安全</a><ul>\n<li><a href>Cookies 和 secure cookies</a></li>\n<li><a href>用户认证</a></li>\n<li><a href>第三方用户认证</a></li>\n<li><a href>跨站请求伪造(防护)</a></li>\n<li><a href>DNS 重绑定</a></li>\n</ul>\n</li>\n<li><a href>运行和部署</a><ul>\n<li><a href>进程和端口</a></li>\n<li><a href>运行在负载均衡器后面</a></li>\n<li><a href>静态文件和文件缓存</a></li>\n<li><a href>Debug 模式和自动重载</a></li>\n<li><a href>WSGI 和 Google App Engine</a></li>\n</ul>\n</li>\n</ul>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide.html\" target=\"_blank\" rel=\"noopener\">User’s guide</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"用户指南\"><a href=\"#用户指南\" class=\"headerlink\" title=\"用户指南\"></a>用户指南</h3><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-introduction/\">介绍</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步和非阻塞I/O</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">阻塞</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">例子</a></li>\n</ul>\n</li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">Python3.5: async 和 await </a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">它如何工作</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">如何调用协程</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程模式</a><ul>\n<li><a href>调用阻塞函数</a></li>\n<li><a href>并行</a></li>\n<li><a href>交叉存取</a></li>\n<li><a href>循环</a></li>\n<li><a href>在后台运行</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more\">Queue 示例-一个并发网络爬虫</a></li>\n<li><a href>Tornado Web应用的结构</a><ul>\n<li><a href>Application 对象</a></li>\n<li><a href>RequestHandler 子类</a></li>\n<li><a href>处理输入请求</a></li>\n<li><a href>重写 RequestHandler 方法</a></li>\n<li><a href>错误处理</a></li>\n<li><a href>重定向</a></li>\n<li><a href>异步处理</a></li>\n</ul>\n</li>\n<li><a href>模板和 UI</a><ul>\n<li><a href>配置模板</a></li>\n<li><a href>模板语法</a></li>\n<li><a href>国际化</a></li>\n<li><a href>UI 模块</a></li>\n</ul>\n</li>\n<li><a href>认证和安全</a><ul>\n<li><a href>Cookies 和 secure cookies</a></li>\n<li><a href>用户认证</a></li>\n<li><a href>第三方用户认证</a></li>\n<li><a href>跨站请求伪造(防护)</a></li>\n<li><a href>DNS 重绑定</a></li>\n</ul>\n</li>\n<li><a href>运行和部署</a><ul>\n<li><a href>进程和端口</a></li>\n<li><a href>运行在负载均衡器后面</a></li>\n<li><a href>静态文件和文件缓存</a></li>\n<li><a href>Debug 模式和自动重载</a></li>\n<li><a href>WSGI 和 Google App Engine</a></li>\n</ul>\n</li>\n</ul>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide.html\" target=\"_blank\" rel=\"noopener\">User’s guide</a> </p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - Tornado","date":"2018-06-03T09:27:51.000Z","_content":"\n[Tornado](http://www.tornadoweb.org/) 是一个 Python 的 Web 框架和异步网络库，最初由 [FriendFeed ](http://friendfeed.com/)开发。通过使用非阻塞网络I/O，Tornado 可以支持数以万计的连接，非常适合[长轮询](http://en.wikipedia.org/wiki/Push_technology#Long_polling)、[WebSockets](http://en.wikipedia.org/wiki/WebSocket) 和其他需要与每个用户建立长连接的应用程序。\n\n### 快速链接\n\n- 当前版本：5.0.2([download from PyPi](https://pypi.python.org/pypi/tornado) [release notes](http://www.tornadoweb.org/en/stable/releases.html))\n- [源代码](https://github.com/tornadoweb/tornado)\n- 邮件列表：[discussion](http://groups.google.com/group/python-tornado) 和 [announcements](http://groups.google.com/group/python-tornado-announce)\n- [Stack Overflow](http://stackoverflow.com/questions/tagged/tornado)\n- [Wiki](https://github.com/tornadoweb/tornado/wiki/Links)\n\n### Hello, World\n\n以下是利用 Tornado 实现的一个简单的 \"Hello, World\" 应用程序：\n\n```\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\ndef make_app():\n    return tornado.web.Application([\n        (r\"/\", MainHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n以上例子没有使用 Tornado 的任何异步特性，异步特性可以移步 [simple char room](https://github.com/tornadoweb/tornado/tree/stable/demos/chat)。\n\n### 线程和 WSGI\n\nTornado 与其他大多 Python web 框架不同，它不基于 [WSGI](https://wsgi.readthedocs.io/en/latest/) 且每个进程只能运行一个 Tornado 线程，移步 [用户手册]() 了解更多 Tornado 的异步编程方式。\n\n然而 WSGI 支持的一些方法可以在 [tornado.wsgi]() 模块中找到，但这并不是 Tornado 后续发展的重点，大多数 Tornado 应用应该直接使用其自带的接口（例如 [tornado.web]()）而不是 WSGI。\n\n一般来说，Tornado 的应用代码并不是线程安全的，Tornado 中唯一可以安全地从其他线程调用的方法是 [IOLoop.add_callback]() 。你也可以使用 [IOLoop.run_in_executor]() 在另一个线程上异步运行阻塞函数，但请注意，传给 [run_in_executor]() 的函数不能引用任何 Tornado 对象。与阻塞函数进行交互时，推荐使用 [run_in_executor]() 。\n\n### 安装\n\n```\npip install tornado\n```\n\nTornado 在 [PyPi](http://pypi.python.org/pypi/tornado) 可获取安装列表中，所以可以直接使用 `pip` 方式进行安装。请注意，源代码发行版包含演示应用程序，当以这种方式安装 Tornado 时，这些演示应用程序将不会存在，因此您可能希望下载源代码 tar 包或克隆 [git repository](https://github.com/tornadoweb/tornado)。\n\n**安装条件**：Tornado 运行在 Python 2.7 和 Python 3.4+上。 Python 2.7.9 中需要对 ssl 模块进行更新（在某些发行版中，这些更新可能在较早的 Python 版本中可用）。除了 `pip` 或 `setup.py` 自动安装的依赖外，以下可选软件包可能会有用：\n\n- [pycurl](http://pycurl.sourceforge.net/) 在 [tornado.curl_httpclient]() 中需要使用，需要 Libcurl 7.22或更高版本；\n- [Twisted](http://www.twistedmatrix.com/) 在 [tornado.platform.twisted]() 的诸多类中会使用到；\n- [pycares](https://pypi.python.org/pypi/pycares) 是一个可选的非阻塞 DNS 解析器，可以在线程不适用时使用；\n- [monotonic](https://pypi.python.org/pypi/monotonic) 或 [Monotime](https://pypi.python.org/pypi/Monotime) 添加对单调时钟的支持，从而提高时钟频繁调整场景下的可靠性。 在Python 3中不再需要。\n\n**平台**：尽管为了获得最佳性能和可扩展性，Tornado 应该可以在任何类Unix平台上运行，但对于生产部署，建议只使用Linux（with `epoll`）和 BSD（with `kqueue`）（尽管 Mac OS X 源自 BSD 并支持 kqueue，但其网络 性能一般很差，所以建议仅用于开发使用）。Tornado 也可以在 Windows 上运行，这种配置没有官方的支持，只推荐用于开发。 如果不修改 Tornado IOLoop 接口，就不可能添加本地 Tornado Windows IOLoop 实现，且不能利用像 AsyncIO 或 Twisted 等框架的 Windows 的 IOCP 支持。\n\n### 文档\n\n- [用户指南](https://runnerliu.github.io/2018/06/10/tornado502-userguide/#more)\n  - [介绍](https://runnerliu.github.io/2018/06/10/tornado502-introduction/)\n  - [异步和非阻塞 I/O](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [Queue 示例-一个并发网络爬虫](https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more)\n  - [Tornado 的 web 应用程序结构]()\n  - [模板和UI]()\n  - [认证和安全]()\n  - [运行和部署]()\n- [Web 框架]()\n  - [tornado.web - RequestHandler Application 类]()\n  - [tornado.template - 灵活的输出生成]()\n  - [tornado.routing - 基本的路由实现]()\n  - [tornado.escape - 转义和字符串操作]()\n  - [tornado.locale - 国际化支持]()\n  - [tornado.websocket - 与浏览器的双向通信]()\n- [HTTP 服务器和客户端]()\n  - [tornado.httpserver - 非阻塞 HTTP 服务器]()\n  - [tornado.httpclient - 异步 HTTP 客户端]()\n  - [tornado.httputil - 操作HTTP标头和URL]()\n  - [tornado.httpconnection - HTTP/1.x客户端/服务器实现]()\n- [异步网络]()\n  - [tornado.ioloop - 主时间循环]()\n  - [tornado.iostream - 对非阻塞 socket 的简易包装]()\n  - [tronado.netutil - 网络实用程序]()\n  - [tornado.tcpclient - IOStream 连接工厂]()\n  - [tornado.tcpserver - 基于 TCP 服务器的 IOStream]()\n- [协程和并发]()\n  - [tornado.gen - 基于生成器的协程]()\n  - [tornado.locks - 同步原语]()\n  - [tornado.queues - 协程队列]()\n  - [tornado.process - 多进程的实用程序]()\n- [与其他服务集成]()\n  - [tornado.auth - 集成 OpenID 和 OAuth 的第三方登录服务]()\n  - [tornado.wsgi - 与其他 Python 框架和服务器的互操作性]()\n  - [tornado.platform.caresresolver - 使用 C-Ares 的异步DNS解析器]()\n  - [tornado.platform.twisted - 兼容 Tornado 和 Twisted]()\n  - [tornado.asyncio - 兼容 Tornado 和 asyncio]()\n- [通用工具]()\n  - [tornado.authoreload - 开发环境中自动检测代码变化]()\n  - [tornado.concrrent - 与 Future 对象交互]()\n  - [tornado.log - 日志支持]()\n  - [tornado.options - 命令行解析]()\n  - [tornado.stack_context - 异步回调异常处理]()\n  - [tornado.testing - 异步代码的单元测试]()\n  - [tornado.util - 通用程序]()\n\n### 讨论和支持\n\n你可以在 [the Tornado developer mailing list](http://groups.google.com/group/python-tornado) 参与 Tornado 的讨论，在 [GitHub issue tracker](https://github.com/tornadoweb/tornado/issues) 上提交你的bug，更多资源可以在 [Tornado wiki](https://github.com/tornadoweb/tornado/wiki/Links) 找到，新版本发布在 [announcements mailing list](http://groups.google.com/group/python-tornado-announce)。\n\n\n\nRead More:\n\n> [Tornado](http://www.tornadoweb.org/en/stable/index.html) ","source":"_posts/tornado502_start.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - Tornado\ndate: 2018-06-03 17:27:51\ntags:\n - Tornado\n - 翻译文档\ncategories:\n - Tornado\n---\n\n[Tornado](http://www.tornadoweb.org/) 是一个 Python 的 Web 框架和异步网络库，最初由 [FriendFeed ](http://friendfeed.com/)开发。通过使用非阻塞网络I/O，Tornado 可以支持数以万计的连接，非常适合[长轮询](http://en.wikipedia.org/wiki/Push_technology#Long_polling)、[WebSockets](http://en.wikipedia.org/wiki/WebSocket) 和其他需要与每个用户建立长连接的应用程序。\n\n### 快速链接\n\n- 当前版本：5.0.2([download from PyPi](https://pypi.python.org/pypi/tornado) [release notes](http://www.tornadoweb.org/en/stable/releases.html))\n- [源代码](https://github.com/tornadoweb/tornado)\n- 邮件列表：[discussion](http://groups.google.com/group/python-tornado) 和 [announcements](http://groups.google.com/group/python-tornado-announce)\n- [Stack Overflow](http://stackoverflow.com/questions/tagged/tornado)\n- [Wiki](https://github.com/tornadoweb/tornado/wiki/Links)\n\n### Hello, World\n\n以下是利用 Tornado 实现的一个简单的 \"Hello, World\" 应用程序：\n\n```\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\ndef make_app():\n    return tornado.web.Application([\n        (r\"/\", MainHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n以上例子没有使用 Tornado 的任何异步特性，异步特性可以移步 [simple char room](https://github.com/tornadoweb/tornado/tree/stable/demos/chat)。\n\n### 线程和 WSGI\n\nTornado 与其他大多 Python web 框架不同，它不基于 [WSGI](https://wsgi.readthedocs.io/en/latest/) 且每个进程只能运行一个 Tornado 线程，移步 [用户手册]() 了解更多 Tornado 的异步编程方式。\n\n然而 WSGI 支持的一些方法可以在 [tornado.wsgi]() 模块中找到，但这并不是 Tornado 后续发展的重点，大多数 Tornado 应用应该直接使用其自带的接口（例如 [tornado.web]()）而不是 WSGI。\n\n一般来说，Tornado 的应用代码并不是线程安全的，Tornado 中唯一可以安全地从其他线程调用的方法是 [IOLoop.add_callback]() 。你也可以使用 [IOLoop.run_in_executor]() 在另一个线程上异步运行阻塞函数，但请注意，传给 [run_in_executor]() 的函数不能引用任何 Tornado 对象。与阻塞函数进行交互时，推荐使用 [run_in_executor]() 。\n\n### 安装\n\n```\npip install tornado\n```\n\nTornado 在 [PyPi](http://pypi.python.org/pypi/tornado) 可获取安装列表中，所以可以直接使用 `pip` 方式进行安装。请注意，源代码发行版包含演示应用程序，当以这种方式安装 Tornado 时，这些演示应用程序将不会存在，因此您可能希望下载源代码 tar 包或克隆 [git repository](https://github.com/tornadoweb/tornado)。\n\n**安装条件**：Tornado 运行在 Python 2.7 和 Python 3.4+上。 Python 2.7.9 中需要对 ssl 模块进行更新（在某些发行版中，这些更新可能在较早的 Python 版本中可用）。除了 `pip` 或 `setup.py` 自动安装的依赖外，以下可选软件包可能会有用：\n\n- [pycurl](http://pycurl.sourceforge.net/) 在 [tornado.curl_httpclient]() 中需要使用，需要 Libcurl 7.22或更高版本；\n- [Twisted](http://www.twistedmatrix.com/) 在 [tornado.platform.twisted]() 的诸多类中会使用到；\n- [pycares](https://pypi.python.org/pypi/pycares) 是一个可选的非阻塞 DNS 解析器，可以在线程不适用时使用；\n- [monotonic](https://pypi.python.org/pypi/monotonic) 或 [Monotime](https://pypi.python.org/pypi/Monotime) 添加对单调时钟的支持，从而提高时钟频繁调整场景下的可靠性。 在Python 3中不再需要。\n\n**平台**：尽管为了获得最佳性能和可扩展性，Tornado 应该可以在任何类Unix平台上运行，但对于生产部署，建议只使用Linux（with `epoll`）和 BSD（with `kqueue`）（尽管 Mac OS X 源自 BSD 并支持 kqueue，但其网络 性能一般很差，所以建议仅用于开发使用）。Tornado 也可以在 Windows 上运行，这种配置没有官方的支持，只推荐用于开发。 如果不修改 Tornado IOLoop 接口，就不可能添加本地 Tornado Windows IOLoop 实现，且不能利用像 AsyncIO 或 Twisted 等框架的 Windows 的 IOCP 支持。\n\n### 文档\n\n- [用户指南](https://runnerliu.github.io/2018/06/10/tornado502-userguide/#more)\n  - [介绍](https://runnerliu.github.io/2018/06/10/tornado502-introduction/)\n  - [异步和非阻塞 I/O](https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more)\n  - [协程](https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more)\n  - [Queue 示例-一个并发网络爬虫](https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more)\n  - [Tornado 的 web 应用程序结构]()\n  - [模板和UI]()\n  - [认证和安全]()\n  - [运行和部署]()\n- [Web 框架]()\n  - [tornado.web - RequestHandler Application 类]()\n  - [tornado.template - 灵活的输出生成]()\n  - [tornado.routing - 基本的路由实现]()\n  - [tornado.escape - 转义和字符串操作]()\n  - [tornado.locale - 国际化支持]()\n  - [tornado.websocket - 与浏览器的双向通信]()\n- [HTTP 服务器和客户端]()\n  - [tornado.httpserver - 非阻塞 HTTP 服务器]()\n  - [tornado.httpclient - 异步 HTTP 客户端]()\n  - [tornado.httputil - 操作HTTP标头和URL]()\n  - [tornado.httpconnection - HTTP/1.x客户端/服务器实现]()\n- [异步网络]()\n  - [tornado.ioloop - 主时间循环]()\n  - [tornado.iostream - 对非阻塞 socket 的简易包装]()\n  - [tronado.netutil - 网络实用程序]()\n  - [tornado.tcpclient - IOStream 连接工厂]()\n  - [tornado.tcpserver - 基于 TCP 服务器的 IOStream]()\n- [协程和并发]()\n  - [tornado.gen - 基于生成器的协程]()\n  - [tornado.locks - 同步原语]()\n  - [tornado.queues - 协程队列]()\n  - [tornado.process - 多进程的实用程序]()\n- [与其他服务集成]()\n  - [tornado.auth - 集成 OpenID 和 OAuth 的第三方登录服务]()\n  - [tornado.wsgi - 与其他 Python 框架和服务器的互操作性]()\n  - [tornado.platform.caresresolver - 使用 C-Ares 的异步DNS解析器]()\n  - [tornado.platform.twisted - 兼容 Tornado 和 Twisted]()\n  - [tornado.asyncio - 兼容 Tornado 和 asyncio]()\n- [通用工具]()\n  - [tornado.authoreload - 开发环境中自动检测代码变化]()\n  - [tornado.concrrent - 与 Future 对象交互]()\n  - [tornado.log - 日志支持]()\n  - [tornado.options - 命令行解析]()\n  - [tornado.stack_context - 异步回调异常处理]()\n  - [tornado.testing - 异步代码的单元测试]()\n  - [tornado.util - 通用程序]()\n\n### 讨论和支持\n\n你可以在 [the Tornado developer mailing list](http://groups.google.com/group/python-tornado) 参与 Tornado 的讨论，在 [GitHub issue tracker](https://github.com/tornadoweb/tornado/issues) 上提交你的bug，更多资源可以在 [Tornado wiki](https://github.com/tornadoweb/tornado/wiki/Links) 找到，新版本发布在 [announcements mailing list](http://groups.google.com/group/python-tornado-announce)。\n\n\n\nRead More:\n\n> [Tornado](http://www.tornadoweb.org/en/stable/index.html) ","slug":"tornado502_start","published":1,"updated":"2020-10-25T06:43:32.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepvg003dmolcxtmis06w","content":"<p><a href=\"http://www.tornadoweb.org/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 是一个 Python 的 Web 框架和异步网络库，最初由 <a href=\"http://friendfeed.com/\" target=\"_blank\" rel=\"noopener\">FriendFeed </a>开发。通过使用非阻塞网络I/O，Tornado 可以支持数以万计的连接，非常适合<a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\" target=\"_blank\" rel=\"noopener\">长轮询</a>、<a href=\"http://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"noopener\">WebSockets</a> 和其他需要与每个用户建立长连接的应用程序。</p>\n<h3 id=\"快速链接\"><a href=\"#快速链接\" class=\"headerlink\" title=\"快速链接\"></a>快速链接</h3><ul>\n<li>当前版本：5.0.2(<a href=\"https://pypi.python.org/pypi/tornado\" target=\"_blank\" rel=\"noopener\">download from PyPi</a> <a href=\"http://www.tornadoweb.org/en/stable/releases.html\" target=\"_blank\" rel=\"noopener\">release notes</a>)</li>\n<li><a href=\"https://github.com/tornadoweb/tornado\" target=\"_blank\" rel=\"noopener\">源代码</a></li>\n<li>邮件列表：<a href=\"http://groups.google.com/group/python-tornado\" target=\"_blank\" rel=\"noopener\">discussion</a> 和 <a href=\"http://groups.google.com/group/python-tornado-announce\" target=\"_blank\" rel=\"noopener\">announcements</a></li>\n<li><a href=\"http://stackoverflow.com/questions/tagged/tornado\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></li>\n<li><a href=\"https://github.com/tornadoweb/tornado/wiki/Links\" target=\"_blank\" rel=\"noopener\">Wiki</a></li>\n</ul>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello, World\"></a>Hello, World</h3><p>以下是利用 Tornado 实现的一个简单的 “Hello, World” 应用程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tornado.ioloop</span><br><span class=\"line\">import tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\">class MainHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        self.write(&quot;Hello, world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def make_app():</span><br><span class=\"line\">    return tornado.web.Application([</span><br><span class=\"line\">        (r&quot;/&quot;, MainHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    app = make_app()</span><br><span class=\"line\">    app.listen(8888)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n<p>以上例子没有使用 Tornado 的任何异步特性，异步特性可以移步 <a href=\"https://github.com/tornadoweb/tornado/tree/stable/demos/chat\" target=\"_blank\" rel=\"noopener\">simple char room</a>。</p>\n<h3 id=\"线程和-WSGI\"><a href=\"#线程和-WSGI\" class=\"headerlink\" title=\"线程和 WSGI\"></a>线程和 WSGI</h3><p>Tornado 与其他大多 Python web 框架不同，它不基于 <a href=\"https://wsgi.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">WSGI</a> 且每个进程只能运行一个 Tornado 线程，移步 <a href>用户手册</a> 了解更多 Tornado 的异步编程方式。</p>\n<p>然而 WSGI 支持的一些方法可以在 <a href>tornado.wsgi</a> 模块中找到，但这并不是 Tornado 后续发展的重点，大多数 Tornado 应用应该直接使用其自带的接口（例如 <a href>tornado.web</a>）而不是 WSGI。</p>\n<p>一般来说，Tornado 的应用代码并不是线程安全的，Tornado 中唯一可以安全地从其他线程调用的方法是 <a href>IOLoop.add_callback</a> 。你也可以使用 <a href>IOLoop.run_in_executor</a> 在另一个线程上异步运行阻塞函数，但请注意，传给 <a href>run_in_executor</a> 的函数不能引用任何 Tornado 对象。与阻塞函数进行交互时，推荐使用 <a href>run_in_executor</a> 。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tornado</span><br></pre></td></tr></table></figure>\n<p>Tornado 在 <a href=\"http://pypi.python.org/pypi/tornado\" target=\"_blank\" rel=\"noopener\">PyPi</a> 可获取安装列表中，所以可以直接使用 <code>pip</code> 方式进行安装。请注意，源代码发行版包含演示应用程序，当以这种方式安装 Tornado 时，这些演示应用程序将不会存在，因此您可能希望下载源代码 tar 包或克隆 <a href=\"https://github.com/tornadoweb/tornado\" target=\"_blank\" rel=\"noopener\">git repository</a>。</p>\n<p><strong>安装条件</strong>：Tornado 运行在 Python 2.7 和 Python 3.4+上。 Python 2.7.9 中需要对 ssl 模块进行更新（在某些发行版中，这些更新可能在较早的 Python 版本中可用）。除了 <code>pip</code> 或 <code>setup.py</code> 自动安装的依赖外，以下可选软件包可能会有用：</p>\n<ul>\n<li><a href=\"http://pycurl.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">pycurl</a> 在 <a href>tornado.curl_httpclient</a> 中需要使用，需要 Libcurl 7.22或更高版本；</li>\n<li><a href=\"http://www.twistedmatrix.com/\" target=\"_blank\" rel=\"noopener\">Twisted</a> 在 <a href>tornado.platform.twisted</a> 的诸多类中会使用到；</li>\n<li><a href=\"https://pypi.python.org/pypi/pycares\" target=\"_blank\" rel=\"noopener\">pycares</a> 是一个可选的非阻塞 DNS 解析器，可以在线程不适用时使用；</li>\n<li><a href=\"https://pypi.python.org/pypi/monotonic\" target=\"_blank\" rel=\"noopener\">monotonic</a> 或 <a href=\"https://pypi.python.org/pypi/Monotime\" target=\"_blank\" rel=\"noopener\">Monotime</a> 添加对单调时钟的支持，从而提高时钟频繁调整场景下的可靠性。 在Python 3中不再需要。</li>\n</ul>\n<p><strong>平台</strong>：尽管为了获得最佳性能和可扩展性，Tornado 应该可以在任何类Unix平台上运行，但对于生产部署，建议只使用Linux（with <code>epoll</code>）和 BSD（with <code>kqueue</code>）（尽管 Mac OS X 源自 BSD 并支持 kqueue，但其网络 性能一般很差，所以建议仅用于开发使用）。Tornado 也可以在 Windows 上运行，这种配置没有官方的支持，只推荐用于开发。 如果不修改 Tornado IOLoop 接口，就不可能添加本地 Tornado Windows IOLoop 实现，且不能利用像 AsyncIO 或 Twisted 等框架的 Windows 的 IOCP 支持。</p>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-userguide/#more\">用户指南</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-introduction/\">介绍</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步和非阻塞 I/O</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more\">Queue 示例-一个并发网络爬虫</a></li>\n<li><a href>Tornado 的 web 应用程序结构</a></li>\n<li><a href>模板和UI</a></li>\n<li><a href>认证和安全</a></li>\n<li><a href>运行和部署</a></li>\n</ul>\n</li>\n<li><a href>Web 框架</a><ul>\n<li><a href>tornado.web - RequestHandler Application 类</a></li>\n<li><a href>tornado.template - 灵活的输出生成</a></li>\n<li><a href>tornado.routing - 基本的路由实现</a></li>\n<li><a href>tornado.escape - 转义和字符串操作</a></li>\n<li><a href>tornado.locale - 国际化支持</a></li>\n<li><a href>tornado.websocket - 与浏览器的双向通信</a></li>\n</ul>\n</li>\n<li><a href>HTTP 服务器和客户端</a><ul>\n<li><a href>tornado.httpserver - 非阻塞 HTTP 服务器</a></li>\n<li><a href>tornado.httpclient - 异步 HTTP 客户端</a></li>\n<li><a href>tornado.httputil - 操作HTTP标头和URL</a></li>\n<li><a href>tornado.httpconnection - HTTP/1.x客户端/服务器实现</a></li>\n</ul>\n</li>\n<li><a href>异步网络</a><ul>\n<li><a href>tornado.ioloop - 主时间循环</a></li>\n<li><a href>tornado.iostream - 对非阻塞 socket 的简易包装</a></li>\n<li><a href>tronado.netutil - 网络实用程序</a></li>\n<li><a href>tornado.tcpclient - IOStream 连接工厂</a></li>\n<li><a href>tornado.tcpserver - 基于 TCP 服务器的 IOStream</a></li>\n</ul>\n</li>\n<li><a href>协程和并发</a><ul>\n<li><a href>tornado.gen - 基于生成器的协程</a></li>\n<li><a href>tornado.locks - 同步原语</a></li>\n<li><a href>tornado.queues - 协程队列</a></li>\n<li><a href>tornado.process - 多进程的实用程序</a></li>\n</ul>\n</li>\n<li><a href>与其他服务集成</a><ul>\n<li><a href>tornado.auth - 集成 OpenID 和 OAuth 的第三方登录服务</a></li>\n<li><a href>tornado.wsgi - 与其他 Python 框架和服务器的互操作性</a></li>\n<li><a href>tornado.platform.caresresolver - 使用 C-Ares 的异步DNS解析器</a></li>\n<li><a href>tornado.platform.twisted - 兼容 Tornado 和 Twisted</a></li>\n<li><a href>tornado.asyncio - 兼容 Tornado 和 asyncio</a></li>\n</ul>\n</li>\n<li><a href>通用工具</a><ul>\n<li><a href>tornado.authoreload - 开发环境中自动检测代码变化</a></li>\n<li><a href>tornado.concrrent - 与 Future 对象交互</a></li>\n<li><a href>tornado.log - 日志支持</a></li>\n<li><a href>tornado.options - 命令行解析</a></li>\n<li><a href>tornado.stack_context - 异步回调异常处理</a></li>\n<li><a href>tornado.testing - 异步代码的单元测试</a></li>\n<li><a href>tornado.util - 通用程序</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"讨论和支持\"><a href=\"#讨论和支持\" class=\"headerlink\" title=\"讨论和支持\"></a>讨论和支持</h3><p>你可以在 <a href=\"http://groups.google.com/group/python-tornado\" target=\"_blank\" rel=\"noopener\">the Tornado developer mailing list</a> 参与 Tornado 的讨论，在 <a href=\"https://github.com/tornadoweb/tornado/issues\" target=\"_blank\" rel=\"noopener\">GitHub issue tracker</a> 上提交你的bug，更多资源可以在 <a href=\"https://github.com/tornadoweb/tornado/wiki/Links\" target=\"_blank\" rel=\"noopener\">Tornado wiki</a> 找到，新版本发布在 <a href=\"http://groups.google.com/group/python-tornado-announce\" target=\"_blank\" rel=\"noopener\">announcements mailing list</a>。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/index.html\" target=\"_blank\" rel=\"noopener\">Tornado</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.tornadoweb.org/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 是一个 Python 的 Web 框架和异步网络库，最初由 <a href=\"http://friendfeed.com/\" target=\"_blank\" rel=\"noopener\">FriendFeed </a>开发。通过使用非阻塞网络I/O，Tornado 可以支持数以万计的连接，非常适合<a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\" target=\"_blank\" rel=\"noopener\">长轮询</a>、<a href=\"http://en.wikipedia.org/wiki/WebSocket\" target=\"_blank\" rel=\"noopener\">WebSockets</a> 和其他需要与每个用户建立长连接的应用程序。</p>\n<h3 id=\"快速链接\"><a href=\"#快速链接\" class=\"headerlink\" title=\"快速链接\"></a>快速链接</h3><ul>\n<li>当前版本：5.0.2(<a href=\"https://pypi.python.org/pypi/tornado\" target=\"_blank\" rel=\"noopener\">download from PyPi</a> <a href=\"http://www.tornadoweb.org/en/stable/releases.html\" target=\"_blank\" rel=\"noopener\">release notes</a>)</li>\n<li><a href=\"https://github.com/tornadoweb/tornado\" target=\"_blank\" rel=\"noopener\">源代码</a></li>\n<li>邮件列表：<a href=\"http://groups.google.com/group/python-tornado\" target=\"_blank\" rel=\"noopener\">discussion</a> 和 <a href=\"http://groups.google.com/group/python-tornado-announce\" target=\"_blank\" rel=\"noopener\">announcements</a></li>\n<li><a href=\"http://stackoverflow.com/questions/tagged/tornado\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></li>\n<li><a href=\"https://github.com/tornadoweb/tornado/wiki/Links\" target=\"_blank\" rel=\"noopener\">Wiki</a></li>\n</ul>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello, World\"></a>Hello, World</h3><p>以下是利用 Tornado 实现的一个简单的 “Hello, World” 应用程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tornado.ioloop</span><br><span class=\"line\">import tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\">class MainHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        self.write(&quot;Hello, world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def make_app():</span><br><span class=\"line\">    return tornado.web.Application([</span><br><span class=\"line\">        (r&quot;/&quot;, MainHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    app = make_app()</span><br><span class=\"line\">    app.listen(8888)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n<p>以上例子没有使用 Tornado 的任何异步特性，异步特性可以移步 <a href=\"https://github.com/tornadoweb/tornado/tree/stable/demos/chat\" target=\"_blank\" rel=\"noopener\">simple char room</a>。</p>\n<h3 id=\"线程和-WSGI\"><a href=\"#线程和-WSGI\" class=\"headerlink\" title=\"线程和 WSGI\"></a>线程和 WSGI</h3><p>Tornado 与其他大多 Python web 框架不同，它不基于 <a href=\"https://wsgi.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">WSGI</a> 且每个进程只能运行一个 Tornado 线程，移步 <a href>用户手册</a> 了解更多 Tornado 的异步编程方式。</p>\n<p>然而 WSGI 支持的一些方法可以在 <a href>tornado.wsgi</a> 模块中找到，但这并不是 Tornado 后续发展的重点，大多数 Tornado 应用应该直接使用其自带的接口（例如 <a href>tornado.web</a>）而不是 WSGI。</p>\n<p>一般来说，Tornado 的应用代码并不是线程安全的，Tornado 中唯一可以安全地从其他线程调用的方法是 <a href>IOLoop.add_callback</a> 。你也可以使用 <a href>IOLoop.run_in_executor</a> 在另一个线程上异步运行阻塞函数，但请注意，传给 <a href>run_in_executor</a> 的函数不能引用任何 Tornado 对象。与阻塞函数进行交互时，推荐使用 <a href>run_in_executor</a> 。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tornado</span><br></pre></td></tr></table></figure>\n<p>Tornado 在 <a href=\"http://pypi.python.org/pypi/tornado\" target=\"_blank\" rel=\"noopener\">PyPi</a> 可获取安装列表中，所以可以直接使用 <code>pip</code> 方式进行安装。请注意，源代码发行版包含演示应用程序，当以这种方式安装 Tornado 时，这些演示应用程序将不会存在，因此您可能希望下载源代码 tar 包或克隆 <a href=\"https://github.com/tornadoweb/tornado\" target=\"_blank\" rel=\"noopener\">git repository</a>。</p>\n<p><strong>安装条件</strong>：Tornado 运行在 Python 2.7 和 Python 3.4+上。 Python 2.7.9 中需要对 ssl 模块进行更新（在某些发行版中，这些更新可能在较早的 Python 版本中可用）。除了 <code>pip</code> 或 <code>setup.py</code> 自动安装的依赖外，以下可选软件包可能会有用：</p>\n<ul>\n<li><a href=\"http://pycurl.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">pycurl</a> 在 <a href>tornado.curl_httpclient</a> 中需要使用，需要 Libcurl 7.22或更高版本；</li>\n<li><a href=\"http://www.twistedmatrix.com/\" target=\"_blank\" rel=\"noopener\">Twisted</a> 在 <a href>tornado.platform.twisted</a> 的诸多类中会使用到；</li>\n<li><a href=\"https://pypi.python.org/pypi/pycares\" target=\"_blank\" rel=\"noopener\">pycares</a> 是一个可选的非阻塞 DNS 解析器，可以在线程不适用时使用；</li>\n<li><a href=\"https://pypi.python.org/pypi/monotonic\" target=\"_blank\" rel=\"noopener\">monotonic</a> 或 <a href=\"https://pypi.python.org/pypi/Monotime\" target=\"_blank\" rel=\"noopener\">Monotime</a> 添加对单调时钟的支持，从而提高时钟频繁调整场景下的可靠性。 在Python 3中不再需要。</li>\n</ul>\n<p><strong>平台</strong>：尽管为了获得最佳性能和可扩展性，Tornado 应该可以在任何类Unix平台上运行，但对于生产部署，建议只使用Linux（with <code>epoll</code>）和 BSD（with <code>kqueue</code>）（尽管 Mac OS X 源自 BSD 并支持 kqueue，但其网络 性能一般很差，所以建议仅用于开发使用）。Tornado 也可以在 Windows 上运行，这种配置没有官方的支持，只推荐用于开发。 如果不修改 Tornado IOLoop 接口，就不可能添加本地 Tornado Windows IOLoop 实现，且不能利用像 AsyncIO 或 Twisted 等框架的 Windows 的 IOCP 支持。</p>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-userguide/#more\">用户指南</a><ul>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-introduction/\">介绍</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/10/tornado502-asnon/#more\">异步和非阻塞 I/O</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-coroutines/#more\">协程</a></li>\n<li><a href=\"https://runnerliu.github.io/2018/06/18/tornado502-concurrentwebspider/#more\">Queue 示例-一个并发网络爬虫</a></li>\n<li><a href>Tornado 的 web 应用程序结构</a></li>\n<li><a href>模板和UI</a></li>\n<li><a href>认证和安全</a></li>\n<li><a href>运行和部署</a></li>\n</ul>\n</li>\n<li><a href>Web 框架</a><ul>\n<li><a href>tornado.web - RequestHandler Application 类</a></li>\n<li><a href>tornado.template - 灵活的输出生成</a></li>\n<li><a href>tornado.routing - 基本的路由实现</a></li>\n<li><a href>tornado.escape - 转义和字符串操作</a></li>\n<li><a href>tornado.locale - 国际化支持</a></li>\n<li><a href>tornado.websocket - 与浏览器的双向通信</a></li>\n</ul>\n</li>\n<li><a href>HTTP 服务器和客户端</a><ul>\n<li><a href>tornado.httpserver - 非阻塞 HTTP 服务器</a></li>\n<li><a href>tornado.httpclient - 异步 HTTP 客户端</a></li>\n<li><a href>tornado.httputil - 操作HTTP标头和URL</a></li>\n<li><a href>tornado.httpconnection - HTTP/1.x客户端/服务器实现</a></li>\n</ul>\n</li>\n<li><a href>异步网络</a><ul>\n<li><a href>tornado.ioloop - 主时间循环</a></li>\n<li><a href>tornado.iostream - 对非阻塞 socket 的简易包装</a></li>\n<li><a href>tronado.netutil - 网络实用程序</a></li>\n<li><a href>tornado.tcpclient - IOStream 连接工厂</a></li>\n<li><a href>tornado.tcpserver - 基于 TCP 服务器的 IOStream</a></li>\n</ul>\n</li>\n<li><a href>协程和并发</a><ul>\n<li><a href>tornado.gen - 基于生成器的协程</a></li>\n<li><a href>tornado.locks - 同步原语</a></li>\n<li><a href>tornado.queues - 协程队列</a></li>\n<li><a href>tornado.process - 多进程的实用程序</a></li>\n</ul>\n</li>\n<li><a href>与其他服务集成</a><ul>\n<li><a href>tornado.auth - 集成 OpenID 和 OAuth 的第三方登录服务</a></li>\n<li><a href>tornado.wsgi - 与其他 Python 框架和服务器的互操作性</a></li>\n<li><a href>tornado.platform.caresresolver - 使用 C-Ares 的异步DNS解析器</a></li>\n<li><a href>tornado.platform.twisted - 兼容 Tornado 和 Twisted</a></li>\n<li><a href>tornado.asyncio - 兼容 Tornado 和 asyncio</a></li>\n</ul>\n</li>\n<li><a href>通用工具</a><ul>\n<li><a href>tornado.authoreload - 开发环境中自动检测代码变化</a></li>\n<li><a href>tornado.concrrent - 与 Future 对象交互</a></li>\n<li><a href>tornado.log - 日志支持</a></li>\n<li><a href>tornado.options - 命令行解析</a></li>\n<li><a href>tornado.stack_context - 异步回调异常处理</a></li>\n<li><a href>tornado.testing - 异步代码的单元测试</a></li>\n<li><a href>tornado.util - 通用程序</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"讨论和支持\"><a href=\"#讨论和支持\" class=\"headerlink\" title=\"讨论和支持\"></a>讨论和支持</h3><p>你可以在 <a href=\"http://groups.google.com/group/python-tornado\" target=\"_blank\" rel=\"noopener\">the Tornado developer mailing list</a> 参与 Tornado 的讨论，在 <a href=\"https://github.com/tornadoweb/tornado/issues\" target=\"_blank\" rel=\"noopener\">GitHub issue tracker</a> 上提交你的bug，更多资源可以在 <a href=\"https://github.com/tornadoweb/tornado/wiki/Links\" target=\"_blank\" rel=\"noopener\">Tornado wiki</a> 找到，新版本发布在 <a href=\"http://groups.google.com/group/python-tornado-announce\" target=\"_blank\" rel=\"noopener\">announcements mailing list</a>。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/index.html\" target=\"_blank\" rel=\"noopener\">Tornado</a> </p>\n</blockquote>\n"},{"title":"MySQL中UNIQUE KEY与PRIMARY KEY的区别","date":"2017-07-15T09:30:51.000Z","_content":"\n定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；\n\nPRIMARY KEY 不可空不可重复，在一个表里可以定义联合主键；\n\n一般来说，PRIMARY KEY = UNIQUE KEY +  NOT NULL\n\nUNIQUE KEY 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。比如说，如果你有一个person 表，并且表中有个身份证的 column，那么你就可以指定该字段为UNIQUE KEY。 从技术的角度来看，PRIMARY KEY和UNIQUE KEY有很多相似之处。但还是有以下区别： \n\n- 作为 PRIMARY KEY 的域/域组不能为NULL，而 UNIQUE KEY 可以。 \n- 在一个表中只能有一个PRIMARY KEY，而多个 UNIQUE KEY 可以同时存在。 \n\n更大的区别在逻辑设计上。PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而UNIQUE KEY 只是为了保证域/域组的唯一性。 \n\nPRIMARY KEY 的语法：alter table name add constraint key name primary key( columns); \n\nUNIQUE KEY 的语法：alter table name add constraint key name unique( columns); \n\n一个表只能有一个主键，但是可以有好多个UNIQUE KEY，而且 UNIQUE KEY 可以为 NULL 值，如员工的电话号码一般就用UNIQUE KEY，因为电话号码肯定是唯一的，但是有的员工可能没有电话。","source":"_posts/uniqueprimarykey.md","raw":"---\ntitle: MySQL中UNIQUE KEY与PRIMARY KEY的区别\ndate: 2017-07-15 17:30:51\ntags:\n - MySQL\n - UNIQUE KEY\n - PRIMARY KEY\ncategories:\n - MySQL\n---\n\n定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；\n\nPRIMARY KEY 不可空不可重复，在一个表里可以定义联合主键；\n\n一般来说，PRIMARY KEY = UNIQUE KEY +  NOT NULL\n\nUNIQUE KEY 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。比如说，如果你有一个person 表，并且表中有个身份证的 column，那么你就可以指定该字段为UNIQUE KEY。 从技术的角度来看，PRIMARY KEY和UNIQUE KEY有很多相似之处。但还是有以下区别： \n\n- 作为 PRIMARY KEY 的域/域组不能为NULL，而 UNIQUE KEY 可以。 \n- 在一个表中只能有一个PRIMARY KEY，而多个 UNIQUE KEY 可以同时存在。 \n\n更大的区别在逻辑设计上。PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而UNIQUE KEY 只是为了保证域/域组的唯一性。 \n\nPRIMARY KEY 的语法：alter table name add constraint key name primary key( columns); \n\nUNIQUE KEY 的语法：alter table name add constraint key name unique( columns); \n\n一个表只能有一个主键，但是可以有好多个UNIQUE KEY，而且 UNIQUE KEY 可以为 NULL 值，如员工的电话号码一般就用UNIQUE KEY，因为电话号码肯定是唯一的，但是有的员工可能没有电话。","slug":"uniqueprimarykey","published":1,"updated":"2020-10-25T06:43:32.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepvn003imolcrpkr6mwc","content":"<p>定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；</p>\n<p>PRIMARY KEY 不可空不可重复，在一个表里可以定义联合主键；</p>\n<p>一般来说，PRIMARY KEY = UNIQUE KEY +  NOT NULL</p>\n<p>UNIQUE KEY 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。比如说，如果你有一个person 表，并且表中有个身份证的 column，那么你就可以指定该字段为UNIQUE KEY。 从技术的角度来看，PRIMARY KEY和UNIQUE KEY有很多相似之处。但还是有以下区别： </p>\n<ul>\n<li>作为 PRIMARY KEY 的域/域组不能为NULL，而 UNIQUE KEY 可以。 </li>\n<li>在一个表中只能有一个PRIMARY KEY，而多个 UNIQUE KEY 可以同时存在。 </li>\n</ul>\n<p>更大的区别在逻辑设计上。PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而UNIQUE KEY 只是为了保证域/域组的唯一性。 </p>\n<p>PRIMARY KEY 的语法：alter table name add constraint key name primary key( columns); </p>\n<p>UNIQUE KEY 的语法：alter table name add constraint key name unique( columns); </p>\n<p>一个表只能有一个主键，但是可以有好多个UNIQUE KEY，而且 UNIQUE KEY 可以为 NULL 值，如员工的电话号码一般就用UNIQUE KEY，因为电话号码肯定是唯一的，但是有的员工可能没有电话。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；</p>\n<p>PRIMARY KEY 不可空不可重复，在一个表里可以定义联合主键；</p>\n<p>一般来说，PRIMARY KEY = UNIQUE KEY +  NOT NULL</p>\n<p>UNIQUE KEY 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。比如说，如果你有一个person 表，并且表中有个身份证的 column，那么你就可以指定该字段为UNIQUE KEY。 从技术的角度来看，PRIMARY KEY和UNIQUE KEY有很多相似之处。但还是有以下区别： </p>\n<ul>\n<li>作为 PRIMARY KEY 的域/域组不能为NULL，而 UNIQUE KEY 可以。 </li>\n<li>在一个表中只能有一个PRIMARY KEY，而多个 UNIQUE KEY 可以同时存在。 </li>\n</ul>\n<p>更大的区别在逻辑设计上。PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而UNIQUE KEY 只是为了保证域/域组的唯一性。 </p>\n<p>PRIMARY KEY 的语法：alter table name add constraint key name primary key( columns); </p>\n<p>UNIQUE KEY 的语法：alter table name add constraint key name unique( columns); </p>\n<p>一个表只能有一个主键，但是可以有好多个UNIQUE KEY，而且 UNIQUE KEY 可以为 NULL 值，如员工的电话号码一般就用UNIQUE KEY，因为电话号码肯定是唯一的，但是有的员工可能没有电话。</p>\n"},{"title":"Windows查看端口占用并关闭进程","date":"2018-01-02T14:59:25.000Z","_content":"\n开始-->运行-->cmd，进入命令提示符输入`netstat -ano` 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选\"查看\" -> \"选择列\"。\n\n经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。\n\n假设我们需要确定哪个进程占用了8083端口。\n\n#### 查看所有端口的占用情况\n\n`netstat -ano`，结果如图\n\n![2017-12-19 161752](/images/2017-12-19 161752.png)\n\n#### 查看指定端口的占用情况\n\n`netstat -aon | findstr \"9050\"`，结果如图\n\n![2017-12-19 162037](/images/2017-12-19 162037.png)\n\n可以看到8083端口被进程号为2648的进程占用。\n\n#### 查看PID对应的进程\n\n`tasklist | findstr \"2648\"`，结果如图\n\n![2017-12-19 162446](/images/2017-12-19 162446.png)\n\n#### 杀死相应进程\n\n`tasklist|findstr \"2016\"`，结果如图\n\n![2017-12-19 162624](/images/2017-12-19 162624.png)","source":"_posts/windowskillprocess.md","raw":"---\ntitle: Windows查看端口占用并关闭进程\ndate: 2018-01-02 22:59:25\ntags:\n - Windows\n - 端口占用\ncategories:\n - Windows\n---\n\n开始-->运行-->cmd，进入命令提示符输入`netstat -ano` 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选\"查看\" -> \"选择列\"。\n\n经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。\n\n假设我们需要确定哪个进程占用了8083端口。\n\n#### 查看所有端口的占用情况\n\n`netstat -ano`，结果如图\n\n![2017-12-19 161752](/images/2017-12-19 161752.png)\n\n#### 查看指定端口的占用情况\n\n`netstat -aon | findstr \"9050\"`，结果如图\n\n![2017-12-19 162037](/images/2017-12-19 162037.png)\n\n可以看到8083端口被进程号为2648的进程占用。\n\n#### 查看PID对应的进程\n\n`tasklist | findstr \"2648\"`，结果如图\n\n![2017-12-19 162446](/images/2017-12-19 162446.png)\n\n#### 杀死相应进程\n\n`tasklist|findstr \"2016\"`，结果如图\n\n![2017-12-19 162624](/images/2017-12-19 162624.png)","slug":"windowskillprocess","published":1,"updated":"2020-10-25T06:43:32.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepvp003kmolc5ngl9uvr","content":"<p>开始–&gt;运行–&gt;cmd，进入命令提示符输入<code>netstat -ano</code> 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&gt; “选择列”。</p>\n<p>经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。</p>\n<p>假设我们需要确定哪个进程占用了8083端口。</p>\n<h4 id=\"查看所有端口的占用情况\"><a href=\"#查看所有端口的占用情况\" class=\"headerlink\" title=\"查看所有端口的占用情况\"></a>查看所有端口的占用情况</h4><p><code>netstat -ano</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 161752.png\" alt=\"2017-12-19 161752\"></p>\n<h4 id=\"查看指定端口的占用情况\"><a href=\"#查看指定端口的占用情况\" class=\"headerlink\" title=\"查看指定端口的占用情况\"></a>查看指定端口的占用情况</h4><p><code>netstat -aon | findstr &quot;9050&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162037.png\" alt=\"2017-12-19 162037\"></p>\n<p>可以看到8083端口被进程号为2648的进程占用。</p>\n<h4 id=\"查看PID对应的进程\"><a href=\"#查看PID对应的进程\" class=\"headerlink\" title=\"查看PID对应的进程\"></a>查看PID对应的进程</h4><p><code>tasklist | findstr &quot;2648&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162446.png\" alt=\"2017-12-19 162446\"></p>\n<h4 id=\"杀死相应进程\"><a href=\"#杀死相应进程\" class=\"headerlink\" title=\"杀死相应进程\"></a>杀死相应进程</h4><p><code>tasklist|findstr &quot;2016&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162624.png\" alt=\"2017-12-19 162624\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开始–&gt;运行–&gt;cmd，进入命令提示符输入<code>netstat -ano</code> 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&gt; “选择列”。</p>\n<p>经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。</p>\n<p>假设我们需要确定哪个进程占用了8083端口。</p>\n<h4 id=\"查看所有端口的占用情况\"><a href=\"#查看所有端口的占用情况\" class=\"headerlink\" title=\"查看所有端口的占用情况\"></a>查看所有端口的占用情况</h4><p><code>netstat -ano</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 161752.png\" alt=\"2017-12-19 161752\"></p>\n<h4 id=\"查看指定端口的占用情况\"><a href=\"#查看指定端口的占用情况\" class=\"headerlink\" title=\"查看指定端口的占用情况\"></a>查看指定端口的占用情况</h4><p><code>netstat -aon | findstr &quot;9050&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162037.png\" alt=\"2017-12-19 162037\"></p>\n<p>可以看到8083端口被进程号为2648的进程占用。</p>\n<h4 id=\"查看PID对应的进程\"><a href=\"#查看PID对应的进程\" class=\"headerlink\" title=\"查看PID对应的进程\"></a>查看PID对应的进程</h4><p><code>tasklist | findstr &quot;2648&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162446.png\" alt=\"2017-12-19 162446\"></p>\n<h4 id=\"杀死相应进程\"><a href=\"#杀死相应进程\" class=\"headerlink\" title=\"杀死相应进程\"></a>杀死相应进程</h4><p><code>tasklist|findstr &quot;2016&quot;</code>，结果如图</p>\n<p><img src=\"/images/2017-12-19 162624.png\" alt=\"2017-12-19 162624\"></p>\n"},{"title":"阻塞|非阻塞 - 异步|同步","date":"2017-07-20T07:05:19.000Z","_content":"\n最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。\n\n**阻塞** 与 **非阻塞** 、**同步** 与 **异步**不能简单的从字面理解，提供一个从分布式系统角度的回答。\n\n### 同步与异步\n\n同步和异步关注的是消息通信机制。\n\n所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。\n\n典型的异步编程模型比如 Node.js。举个通俗的例子：\n\n你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下\"，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。\n\n### 阻塞与非阻塞\n\n阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。\n\n阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。\n\n还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。\n\n\n\n> 参考文章：\n>\n> 作者：严肃\n> 链接：https://www.zhihu.com/question/19732473/answer/20851256\n> 来源：知乎","source":"_posts/zsfzsybtb.md","raw":"---\ntitle: 阻塞|非阻塞 - 异步|同步\ndate: 2017-07-20 15:05:19\ntags:\n - 阻塞\n - 非阻塞\n - 异步\n - 同步\ncategories:\n - 网络编程\n---\n\n最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。\n\n**阻塞** 与 **非阻塞** 、**同步** 与 **异步**不能简单的从字面理解，提供一个从分布式系统角度的回答。\n\n### 同步与异步\n\n同步和异步关注的是消息通信机制。\n\n所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。\n\n典型的异步编程模型比如 Node.js。举个通俗的例子：\n\n你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下\"，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。\n\n### 阻塞与非阻塞\n\n阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。\n\n阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。\n\n还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。\n\n\n\n> 参考文章：\n>\n> 作者：严肃\n> 链接：https://www.zhihu.com/question/19732473/answer/20851256\n> 来源：知乎","slug":"zsfzsybtb","published":1,"updated":"2020-10-25T06:43:32.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgruepvu003omolcziz49m7m","content":"<p>最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。</p>\n<p><strong>阻塞</strong> 与 <strong>非阻塞</strong> 、<strong>同步</strong> 与 <strong>异步</strong>不能简单的从字面理解，提供一个从分布式系统角度的回答。</p>\n<h3 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h3><p>同步和异步关注的是消息通信机制。</p>\n<p>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>\n<p>典型的异步编程模型比如 Node.js。举个通俗的例子：</p>\n<p>你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</p>\n<h3 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h3><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>\n<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>\n<p>还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p>\n<blockquote>\n<p>参考文章：</p>\n<p>作者：严肃<br>链接：<a href=\"https://www.zhihu.com/question/19732473/answer/20851256\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19732473/answer/20851256</a><br>来源：知乎</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。</p>\n<p><strong>阻塞</strong> 与 <strong>非阻塞</strong> 、<strong>同步</strong> 与 <strong>异步</strong>不能简单的从字面理解，提供一个从分布式系统角度的回答。</p>\n<h3 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h3><p>同步和异步关注的是消息通信机制。</p>\n<p>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>\n<p>典型的异步编程模型比如 Node.js。举个通俗的例子：</p>\n<p>你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</p>\n<h3 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h3><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>\n<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>\n<p>还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p>\n<blockquote>\n<p>参考文章：</p>\n<p>作者：严肃<br>链接：<a href=\"https://www.zhihu.com/question/19732473/answer/20851256\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19732473/answer/20851256</a><br>来源：知乎</p>\n</blockquote>\n"},{"title":"抽象类和接口的区别","date":"2017-06-10T09:27:45.000Z","_content":"\n抽象类与接口相似，都是一种比较特殊的类。抽象类是一种特殊的类，而接口也是一种特殊的抽象类。它们通常配合面向对象的多态性一起使用。虽然声明和使用都比较容易，但它们的作用在理解上会困难一点。\n\n### 抽象类\n\n在OOP语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法作为外部代码访问它的接口。而抽象方法就是为了方便继承而引入的。本节中先来介绍一下抽象类和抽象方法的声明，然后再说明其用途。在声明抽象类之前，我们先了解一下什么是抽象方法。抽象方法就是没有方法体的方法，所谓没有方法体是指在方法声明时没有花括号及其中的内容，而是在声明方法时直接在方法名后加上分号结束。另外在声明抽象方法时，还要使用关键字 `abstract` 来修饰。声明抽象方法的格式如下所示：\n\n`abstract function fun1();` //不能有花括号，就更不能有方法体中的内容了\n`abstract function fun2(); ` //直接在方法名的括号后面加上分号结束，还要使用 `abstract` 修饰\n\n只要在声明类时有一个方法时抽象方法，那么这个类就是抽象类，抽象类也要使用 `abstract` 关键字来修饰。在抽象类中可以有不是抽象的成员方法和成员属性，但访问权限不能使用private关键字修饰为私有的。下面的例子在Person类中声明了两个抽象方法 `say()` 和 `eat()` ，则 `Person` 类就是一个抽象类，需要使用 `abstract` 标识。代码如下所示：\n\n```\n<?php\n    abstract class Person{\n        protected $name;\n        protected $country;\n \n        function __construct($name=\"\",$country=\"china\"){\n            $this ->name = $name;\n            $this ->country = $country;\n        }\n \n        abstract function say();\n        abstract function eat();\n \n        function run(){\n            echo \"使用两条腿走路<br>\";\n        }\n    }\n?>\n```\n\n在上例中声明了一个抽象类 `Person` ，在这个类中定义了两个成员属性、一个构造方法和两个抽象方法，还有一个是非抽象的方法。抽象类就像是一个“半成品”的类，在抽象类中有没有被实现的抽象方法，所以抽象类是不能被实例化的，即创建不了对象，也就不能直接使用它。既然抽象类是一个“半成品”的类，那么使用抽象类有什么作用呢？使用抽象类就包含了继承关系，它是为它的子类定义公共接口，将它的操作（可能是部分，也可能是全部）交给子类去实现。就是将抽象类作为子类重载的模板使用，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守。当子类继承抽象类以后，就必须把抽象类中的抽象方法按照子类自己的需要去实现。子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，所以还是抽象类，也不能实例化对象。在下例中声明了两个类，分别实现上例中声明的抽象类 `Person` 。代码如下所示：\n\n```\n<?php\n    class ChineseMan extends Person{\n \n        function say(){\n            echo $this ->name.\"是\".$this->country.\"人，讲汉语<br>\";    \n        }\n \n        function eat(){\n            echo $this ->name.\"使用筷子吃饭<br>\";\n        }\n    }\n \n        class Americans extends Person{\n \n        function say(){\n            echo $this ->name.\"是\".$this->country.\"人，讲英语<br>\";    \n        }\n \n        function eat(){\n            echo $this ->name.\"使用刀子和叉子吃饭<br>\";\n        }\n    }\n \n    $chianeseMan = new ChineseMan(\"高洛峰\"，\"中国\");\n    $americans = new Americans (\"alex\",\"美国\");\n \n    $chineseMan ->say();\n    $chineseMan ->eat();\n \n    $americans ->say();\n    $americans ->eat();\n?>\n```\n\n在上例中声明了两个类去继承抽象类 `Person` ，并将 `Person` 类中的抽象方法按各自的需求分别实现，这样两个子类就都可以创建对象了。抽象类 `Person` 就可以看成是一个模板，类中的抽象方法自己不去实现，只是规范了子类中必须要有父类中声明的抽象方法，而且要按照自己的特点实现抽象方法的内容。\n\n### 接口\n\n因为 `PHP` 只支持单继承，也就是说每个类只能继承一个父类。当声明的新类继承抽象类实现模板以后，它就不能再有其他父类了。为了解决这个问题， `PHP` 引入了接口。接口是一种特殊的抽象类，而抽象类又是一种特殊的类。如果抽象类中的所有方法都是抽象方法，我们就可以换另外一种声明方式，使用“接口”技术。接口中声明的方法必须都是抽象方法，另外不能再接口中声明变量，只能使用 `const` 关键字声明为常量的成员属性，而且接口中所有成员都必须有 `public` 的访问权限。类的声明是使用 `class` 关键字标识的，而接口的声明则是使用 `interface` 关键字标识的。声明接口的格式如下所示：\n\n```\n<?php\ninterface 接口名称{ //使用interface关键字声明接口\n常量成员 //接口中的成员属性只能是常量，不能是变量\n抽象方法 //接口中的所有方法必须是抽象方法，不能有非抽象的方法存在\n}\n?>\n```\n\n接口中的所有方法都要求是抽象方法，所以就不需要在方法前使用 `abstract` 关键字标识了。而且在接口中也不需要显式地使用 `public` 访问权限进行修饰，因为默认权限就是 `public` 的，也只能是公有的。另外接口和抽象类一样也不能实例化对象，它是一种更严格的规范，也需要通过子类来实现。但可以直接使用接口名称在接口外面去获取常量成员的值。一个接口的声明例子，代码如下所示：\n\n```\n<?php\ninterface one{\nconst CONSTANT = 'CONSTANT value';\nfunction fun1();\nfunction fun2();\n}\n?>\n```\n\n也可以使用 `extends` 关键字让一个接口去继承另一个接口，实现接口之间的扩展。在下面的例子中声明一个 `Two` 接口继承了上例中的 `One` 接口。代码如下所示：\n\n```\n<?php\ninterface Two extends one{\nfunction fun3();\nfunction fun4();\n}\n?>\n```\n\n如果需要使用接口中的成员，则需要通过子类去实现接口中的全部抽象方法，然后创建子类的对象去调用在子类中实现后的方法。但通过类去继承接口时需要使用 `implements` 关键字来实现，而并不是使用 `extends` 关键字完成。如果需要使用抽象类去实现接口中的部分方法，也需要使用 `implements` 关键字实现。在下面的例子中声明一个抽象类 `Three` 去实现 `One` 接口中的部分方法，但要想实例化对象，这个抽象类还需要有子类把它所有的抽象方法都实现才行。声明一个 `Four` 类去实现 `One` 接口中全部方法。代码如下所示：\n\n```\n<?php\ninterface one{\nconst CONSTANT = 'CONSTANT value';\nfunction fun1();\nfunction fun2();\n}\n \n//声明一个抽象类去实现接口One中的第二个方法\nabstract class Three implements One{ //只实现接口中的一个抽象方法\nfunction fun2(){\n//具体的实现内容由子类自己决定\n}\n}\n \n//声明一个类实现接口One中的全部抽象方法\nclass Four implements One{\nfunction fun1(){\n//具体的实现内容由子类自己决定\n}\n \nfunction fun2(){\n//具体的实现内容由子类自己决定\n}\n}\n \n?>\n```\n\n`PHP` 是单继承的，一个类只能有一个父类，但是一个类可以实现多个接口。将要实现的多个接口之间使用逗号分隔开，而且在子类中药将所有接口中的抽象方法全部实现才可以创建对象。就相当于一个类要遵守多个规范，就像我们不仅要遵守国家的法律，如果是在学校，还需要遵守学校的校规一样。实现多个接口的格式如下所示：\n\n```\nclass 类名 implements 接口一，接口二，……接口n{\n实现所有接口中的抽象方法\n}\n\n```\n\n实现多个接口是使用 `implements` 关键字，同时还可以使用 `extends` 关键字继承一个类。即在继承类的同时实现多个接口，但一定更要先使用extends继承一个类，再去使用 `inplements` 实现多个接口。使用格式如下所示：\n\n```\nclass 类名 extends 父类名 implements 接口一，接口二，……接口n{\n实现所有接口中的抽象方法\n}\n```\n\n除了上述的一些应用外，还有很多地方可以使用使用接口，例如对于一些已经开发好的系统，在结构上进行较大的调整已经不太现实，这时可以通过自定义一些接口并追加相应的实现来完成功能结构的扩展。\n\n### 区别\n\n- 对接口的使用方式是通过关键字 `implements` 来实现的，而对于抽象类的操作是使用类继承的关键字 `extends` 实现的，使用时要特别注意。\n- 接口没有数据成员，但是抽象类有数据成员，抽象类可以实现数据的封装。\n- 接口没有构造函数，抽象类可以有构造函数。\n- 接口中的方法都是 `public` 类型，而抽象类中的方法可以使用 `private` 、 `protected` 或 `public` 来修饰。\n- 一个类可以同时实现多个接口，但是只能实现一个抽象类。\n\n### 如何选择\n\n- 如果要创建一个模型，这个模型将由一些紧密相关的对象采用，就可以使用抽象类。如果要创建将由一些不相关对象采用的功能，就使用接口。\n- 如果必须从多个来源继承行为，就使用接口。\n- 如果知道所有类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。\n\n\n\n> 参考文章：\n>\n> [PHP的抽象类和接口](http://www.cnblogs.com/ncong/p/3901173.html)  [PHP的抽象类、接口的区别和选择](http://blog.csdn.net/fanteathy/article/details/7309966)  [PHP高级——抽象类与接口的区别](http://www.cnblogs.com/picaso/archive/2012/10/05/2711865.html) ","source":"_posts/abstractinterface.md","raw":"---\ntitle: 抽象类和接口的区别\ndate: 2017-06-10 17:27:45\ntags:\n - 抽象类\n - 接口\ncategories:\n - 基本概念\n---\n\n抽象类与接口相似，都是一种比较特殊的类。抽象类是一种特殊的类，而接口也是一种特殊的抽象类。它们通常配合面向对象的多态性一起使用。虽然声明和使用都比较容易，但它们的作用在理解上会困难一点。\n\n### 抽象类\n\n在OOP语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法作为外部代码访问它的接口。而抽象方法就是为了方便继承而引入的。本节中先来介绍一下抽象类和抽象方法的声明，然后再说明其用途。在声明抽象类之前，我们先了解一下什么是抽象方法。抽象方法就是没有方法体的方法，所谓没有方法体是指在方法声明时没有花括号及其中的内容，而是在声明方法时直接在方法名后加上分号结束。另外在声明抽象方法时，还要使用关键字 `abstract` 来修饰。声明抽象方法的格式如下所示：\n\n`abstract function fun1();` //不能有花括号，就更不能有方法体中的内容了\n`abstract function fun2(); ` //直接在方法名的括号后面加上分号结束，还要使用 `abstract` 修饰\n\n只要在声明类时有一个方法时抽象方法，那么这个类就是抽象类，抽象类也要使用 `abstract` 关键字来修饰。在抽象类中可以有不是抽象的成员方法和成员属性，但访问权限不能使用private关键字修饰为私有的。下面的例子在Person类中声明了两个抽象方法 `say()` 和 `eat()` ，则 `Person` 类就是一个抽象类，需要使用 `abstract` 标识。代码如下所示：\n\n```\n<?php\n    abstract class Person{\n        protected $name;\n        protected $country;\n \n        function __construct($name=\"\",$country=\"china\"){\n            $this ->name = $name;\n            $this ->country = $country;\n        }\n \n        abstract function say();\n        abstract function eat();\n \n        function run(){\n            echo \"使用两条腿走路<br>\";\n        }\n    }\n?>\n```\n\n在上例中声明了一个抽象类 `Person` ，在这个类中定义了两个成员属性、一个构造方法和两个抽象方法，还有一个是非抽象的方法。抽象类就像是一个“半成品”的类，在抽象类中有没有被实现的抽象方法，所以抽象类是不能被实例化的，即创建不了对象，也就不能直接使用它。既然抽象类是一个“半成品”的类，那么使用抽象类有什么作用呢？使用抽象类就包含了继承关系，它是为它的子类定义公共接口，将它的操作（可能是部分，也可能是全部）交给子类去实现。就是将抽象类作为子类重载的模板使用，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守。当子类继承抽象类以后，就必须把抽象类中的抽象方法按照子类自己的需要去实现。子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，所以还是抽象类，也不能实例化对象。在下例中声明了两个类，分别实现上例中声明的抽象类 `Person` 。代码如下所示：\n\n```\n<?php\n    class ChineseMan extends Person{\n \n        function say(){\n            echo $this ->name.\"是\".$this->country.\"人，讲汉语<br>\";    \n        }\n \n        function eat(){\n            echo $this ->name.\"使用筷子吃饭<br>\";\n        }\n    }\n \n        class Americans extends Person{\n \n        function say(){\n            echo $this ->name.\"是\".$this->country.\"人，讲英语<br>\";    \n        }\n \n        function eat(){\n            echo $this ->name.\"使用刀子和叉子吃饭<br>\";\n        }\n    }\n \n    $chianeseMan = new ChineseMan(\"高洛峰\"，\"中国\");\n    $americans = new Americans (\"alex\",\"美国\");\n \n    $chineseMan ->say();\n    $chineseMan ->eat();\n \n    $americans ->say();\n    $americans ->eat();\n?>\n```\n\n在上例中声明了两个类去继承抽象类 `Person` ，并将 `Person` 类中的抽象方法按各自的需求分别实现，这样两个子类就都可以创建对象了。抽象类 `Person` 就可以看成是一个模板，类中的抽象方法自己不去实现，只是规范了子类中必须要有父类中声明的抽象方法，而且要按照自己的特点实现抽象方法的内容。\n\n### 接口\n\n因为 `PHP` 只支持单继承，也就是说每个类只能继承一个父类。当声明的新类继承抽象类实现模板以后，它就不能再有其他父类了。为了解决这个问题， `PHP` 引入了接口。接口是一种特殊的抽象类，而抽象类又是一种特殊的类。如果抽象类中的所有方法都是抽象方法，我们就可以换另外一种声明方式，使用“接口”技术。接口中声明的方法必须都是抽象方法，另外不能再接口中声明变量，只能使用 `const` 关键字声明为常量的成员属性，而且接口中所有成员都必须有 `public` 的访问权限。类的声明是使用 `class` 关键字标识的，而接口的声明则是使用 `interface` 关键字标识的。声明接口的格式如下所示：\n\n```\n<?php\ninterface 接口名称{ //使用interface关键字声明接口\n常量成员 //接口中的成员属性只能是常量，不能是变量\n抽象方法 //接口中的所有方法必须是抽象方法，不能有非抽象的方法存在\n}\n?>\n```\n\n接口中的所有方法都要求是抽象方法，所以就不需要在方法前使用 `abstract` 关键字标识了。而且在接口中也不需要显式地使用 `public` 访问权限进行修饰，因为默认权限就是 `public` 的，也只能是公有的。另外接口和抽象类一样也不能实例化对象，它是一种更严格的规范，也需要通过子类来实现。但可以直接使用接口名称在接口外面去获取常量成员的值。一个接口的声明例子，代码如下所示：\n\n```\n<?php\ninterface one{\nconst CONSTANT = 'CONSTANT value';\nfunction fun1();\nfunction fun2();\n}\n?>\n```\n\n也可以使用 `extends` 关键字让一个接口去继承另一个接口，实现接口之间的扩展。在下面的例子中声明一个 `Two` 接口继承了上例中的 `One` 接口。代码如下所示：\n\n```\n<?php\ninterface Two extends one{\nfunction fun3();\nfunction fun4();\n}\n?>\n```\n\n如果需要使用接口中的成员，则需要通过子类去实现接口中的全部抽象方法，然后创建子类的对象去调用在子类中实现后的方法。但通过类去继承接口时需要使用 `implements` 关键字来实现，而并不是使用 `extends` 关键字完成。如果需要使用抽象类去实现接口中的部分方法，也需要使用 `implements` 关键字实现。在下面的例子中声明一个抽象类 `Three` 去实现 `One` 接口中的部分方法，但要想实例化对象，这个抽象类还需要有子类把它所有的抽象方法都实现才行。声明一个 `Four` 类去实现 `One` 接口中全部方法。代码如下所示：\n\n```\n<?php\ninterface one{\nconst CONSTANT = 'CONSTANT value';\nfunction fun1();\nfunction fun2();\n}\n \n//声明一个抽象类去实现接口One中的第二个方法\nabstract class Three implements One{ //只实现接口中的一个抽象方法\nfunction fun2(){\n//具体的实现内容由子类自己决定\n}\n}\n \n//声明一个类实现接口One中的全部抽象方法\nclass Four implements One{\nfunction fun1(){\n//具体的实现内容由子类自己决定\n}\n \nfunction fun2(){\n//具体的实现内容由子类自己决定\n}\n}\n \n?>\n```\n\n`PHP` 是单继承的，一个类只能有一个父类，但是一个类可以实现多个接口。将要实现的多个接口之间使用逗号分隔开，而且在子类中药将所有接口中的抽象方法全部实现才可以创建对象。就相当于一个类要遵守多个规范，就像我们不仅要遵守国家的法律，如果是在学校，还需要遵守学校的校规一样。实现多个接口的格式如下所示：\n\n```\nclass 类名 implements 接口一，接口二，……接口n{\n实现所有接口中的抽象方法\n}\n\n```\n\n实现多个接口是使用 `implements` 关键字，同时还可以使用 `extends` 关键字继承一个类。即在继承类的同时实现多个接口，但一定更要先使用extends继承一个类，再去使用 `inplements` 实现多个接口。使用格式如下所示：\n\n```\nclass 类名 extends 父类名 implements 接口一，接口二，……接口n{\n实现所有接口中的抽象方法\n}\n```\n\n除了上述的一些应用外，还有很多地方可以使用使用接口，例如对于一些已经开发好的系统，在结构上进行较大的调整已经不太现实，这时可以通过自定义一些接口并追加相应的实现来完成功能结构的扩展。\n\n### 区别\n\n- 对接口的使用方式是通过关键字 `implements` 来实现的，而对于抽象类的操作是使用类继承的关键字 `extends` 实现的，使用时要特别注意。\n- 接口没有数据成员，但是抽象类有数据成员，抽象类可以实现数据的封装。\n- 接口没有构造函数，抽象类可以有构造函数。\n- 接口中的方法都是 `public` 类型，而抽象类中的方法可以使用 `private` 、 `protected` 或 `public` 来修饰。\n- 一个类可以同时实现多个接口，但是只能实现一个抽象类。\n\n### 如何选择\n\n- 如果要创建一个模型，这个模型将由一些紧密相关的对象采用，就可以使用抽象类。如果要创建将由一些不相关对象采用的功能，就使用接口。\n- 如果必须从多个来源继承行为，就使用接口。\n- 如果知道所有类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。\n\n\n\n> 参考文章：\n>\n> [PHP的抽象类和接口](http://www.cnblogs.com/ncong/p/3901173.html)  [PHP的抽象类、接口的区别和选择](http://blog.csdn.net/fanteathy/article/details/7309966)  [PHP高级——抽象类与接口的区别](http://www.cnblogs.com/picaso/archive/2012/10/05/2711865.html) ","slug":"abstractinterface","published":1,"updated":"2020-10-25T06:43:32.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq5t0090molcjy24ultp","content":"<p>抽象类与接口相似，都是一种比较特殊的类。抽象类是一种特殊的类，而接口也是一种特殊的抽象类。它们通常配合面向对象的多态性一起使用。虽然声明和使用都比较容易，但它们的作用在理解上会困难一点。</p>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><p>在OOP语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法作为外部代码访问它的接口。而抽象方法就是为了方便继承而引入的。本节中先来介绍一下抽象类和抽象方法的声明，然后再说明其用途。在声明抽象类之前，我们先了解一下什么是抽象方法。抽象方法就是没有方法体的方法，所谓没有方法体是指在方法声明时没有花括号及其中的内容，而是在声明方法时直接在方法名后加上分号结束。另外在声明抽象方法时，还要使用关键字 <code>abstract</code> 来修饰。声明抽象方法的格式如下所示：</p>\n<p><code>abstract function fun1();</code> //不能有花括号，就更不能有方法体中的内容了<br><code>abstract function fun2();</code> //直接在方法名的括号后面加上分号结束，还要使用 <code>abstract</code> 修饰</p>\n<p>只要在声明类时有一个方法时抽象方法，那么这个类就是抽象类，抽象类也要使用 <code>abstract</code> 关键字来修饰。在抽象类中可以有不是抽象的成员方法和成员属性，但访问权限不能使用private关键字修饰为私有的。下面的例子在Person类中声明了两个抽象方法 <code>say()</code> 和 <code>eat()</code> ，则 <code>Person</code> 类就是一个抽象类，需要使用 <code>abstract</code> 标识。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    abstract class Person&#123;</span><br><span class=\"line\">        protected $name;</span><br><span class=\"line\">        protected $country;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function __construct($name=&quot;&quot;,$country=&quot;china&quot;)&#123;</span><br><span class=\"line\">            $this -&gt;name = $name;</span><br><span class=\"line\">            $this -&gt;country = $country;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        abstract function say();</span><br><span class=\"line\">        abstract function eat();</span><br><span class=\"line\"> </span><br><span class=\"line\">        function run()&#123;</span><br><span class=\"line\">            echo &quot;使用两条腿走路&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中声明了一个抽象类 <code>Person</code> ，在这个类中定义了两个成员属性、一个构造方法和两个抽象方法，还有一个是非抽象的方法。抽象类就像是一个“半成品”的类，在抽象类中有没有被实现的抽象方法，所以抽象类是不能被实例化的，即创建不了对象，也就不能直接使用它。既然抽象类是一个“半成品”的类，那么使用抽象类有什么作用呢？使用抽象类就包含了继承关系，它是为它的子类定义公共接口，将它的操作（可能是部分，也可能是全部）交给子类去实现。就是将抽象类作为子类重载的模板使用，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守。当子类继承抽象类以后，就必须把抽象类中的抽象方法按照子类自己的需要去实现。子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，所以还是抽象类，也不能实例化对象。在下例中声明了两个类，分别实现上例中声明的抽象类 <code>Person</code> 。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class ChineseMan extends Person&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function say()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;是&quot;.$this-&gt;country.&quot;人，讲汉语&lt;br&gt;&quot;;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function eat()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;使用筷子吃饭&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        class Americans extends Person&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function say()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;是&quot;.$this-&gt;country.&quot;人，讲英语&lt;br&gt;&quot;;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function eat()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;使用刀子和叉子吃饭&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    $chianeseMan = new ChineseMan(&quot;高洛峰&quot;，&quot;中国&quot;);</span><br><span class=\"line\">    $americans = new Americans (&quot;alex&quot;,&quot;美国&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    $chineseMan -&gt;say();</span><br><span class=\"line\">    $chineseMan -&gt;eat();</span><br><span class=\"line\"> </span><br><span class=\"line\">    $americans -&gt;say();</span><br><span class=\"line\">    $americans -&gt;eat();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中声明了两个类去继承抽象类 <code>Person</code> ，并将 <code>Person</code> 类中的抽象方法按各自的需求分别实现，这样两个子类就都可以创建对象了。抽象类 <code>Person</code> 就可以看成是一个模板，类中的抽象方法自己不去实现，只是规范了子类中必须要有父类中声明的抽象方法，而且要按照自己的特点实现抽象方法的内容。</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>因为 <code>PHP</code> 只支持单继承，也就是说每个类只能继承一个父类。当声明的新类继承抽象类实现模板以后，它就不能再有其他父类了。为了解决这个问题， <code>PHP</code> 引入了接口。接口是一种特殊的抽象类，而抽象类又是一种特殊的类。如果抽象类中的所有方法都是抽象方法，我们就可以换另外一种声明方式，使用“接口”技术。接口中声明的方法必须都是抽象方法，另外不能再接口中声明变量，只能使用 <code>const</code> 关键字声明为常量的成员属性，而且接口中所有成员都必须有 <code>public</code> 的访问权限。类的声明是使用 <code>class</code> 关键字标识的，而接口的声明则是使用 <code>interface</code> 关键字标识的。声明接口的格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface 接口名称&#123; //使用interface关键字声明接口</span><br><span class=\"line\">常量成员 //接口中的成员属性只能是常量，不能是变量</span><br><span class=\"line\">抽象方法 //接口中的所有方法必须是抽象方法，不能有非抽象的方法存在</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>接口中的所有方法都要求是抽象方法，所以就不需要在方法前使用 <code>abstract</code> 关键字标识了。而且在接口中也不需要显式地使用 <code>public</code> 访问权限进行修饰，因为默认权限就是 <code>public</code> 的，也只能是公有的。另外接口和抽象类一样也不能实例化对象，它是一种更严格的规范，也需要通过子类来实现。但可以直接使用接口名称在接口外面去获取常量成员的值。一个接口的声明例子，代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface one&#123;</span><br><span class=\"line\">const CONSTANT = &apos;CONSTANT value&apos;;</span><br><span class=\"line\">function fun1();</span><br><span class=\"line\">function fun2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 <code>extends</code> 关键字让一个接口去继承另一个接口，实现接口之间的扩展。在下面的例子中声明一个 <code>Two</code> 接口继承了上例中的 <code>One</code> 接口。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface Two extends one&#123;</span><br><span class=\"line\">function fun3();</span><br><span class=\"line\">function fun4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>如果需要使用接口中的成员，则需要通过子类去实现接口中的全部抽象方法，然后创建子类的对象去调用在子类中实现后的方法。但通过类去继承接口时需要使用 <code>implements</code> 关键字来实现，而并不是使用 <code>extends</code> 关键字完成。如果需要使用抽象类去实现接口中的部分方法，也需要使用 <code>implements</code> 关键字实现。在下面的例子中声明一个抽象类 <code>Three</code> 去实现 <code>One</code> 接口中的部分方法，但要想实例化对象，这个抽象类还需要有子类把它所有的抽象方法都实现才行。声明一个 <code>Four</code> 类去实现 <code>One</code> 接口中全部方法。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface one&#123;</span><br><span class=\"line\">const CONSTANT = &apos;CONSTANT value&apos;;</span><br><span class=\"line\">function fun1();</span><br><span class=\"line\">function fun2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//声明一个抽象类去实现接口One中的第二个方法</span><br><span class=\"line\">abstract class Three implements One&#123; //只实现接口中的一个抽象方法</span><br><span class=\"line\">function fun2()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//声明一个类实现接口One中的全部抽象方法</span><br><span class=\"line\">class Four implements One&#123;</span><br><span class=\"line\">function fun1()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">function fun2()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p><code>PHP</code> 是单继承的，一个类只能有一个父类，但是一个类可以实现多个接口。将要实现的多个接口之间使用逗号分隔开，而且在子类中药将所有接口中的抽象方法全部实现才可以创建对象。就相当于一个类要遵守多个规范，就像我们不仅要遵守国家的法律，如果是在学校，还需要遵守学校的校规一样。实现多个接口的格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名 implements 接口一，接口二，……接口n&#123;</span><br><span class=\"line\">实现所有接口中的抽象方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现多个接口是使用 <code>implements</code> 关键字，同时还可以使用 <code>extends</code> 关键字继承一个类。即在继承类的同时实现多个接口，但一定更要先使用extends继承一个类，再去使用 <code>inplements</code> 实现多个接口。使用格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名 extends 父类名 implements 接口一，接口二，……接口n&#123;</span><br><span class=\"line\">实现所有接口中的抽象方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上述的一些应用外，还有很多地方可以使用使用接口，例如对于一些已经开发好的系统，在结构上进行较大的调整已经不太现实，这时可以通过自定义一些接口并追加相应的实现来完成功能结构的扩展。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>对接口的使用方式是通过关键字 <code>implements</code> 来实现的，而对于抽象类的操作是使用类继承的关键字 <code>extends</code> 实现的，使用时要特别注意。</li>\n<li>接口没有数据成员，但是抽象类有数据成员，抽象类可以实现数据的封装。</li>\n<li>接口没有构造函数，抽象类可以有构造函数。</li>\n<li>接口中的方法都是 <code>public</code> 类型，而抽象类中的方法可以使用 <code>private</code> 、 <code>protected</code> 或 <code>public</code> 来修饰。</li>\n<li>一个类可以同时实现多个接口，但是只能实现一个抽象类。</li>\n</ul>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><ul>\n<li>如果要创建一个模型，这个模型将由一些紧密相关的对象采用，就可以使用抽象类。如果要创建将由一些不相关对象采用的功能，就使用接口。</li>\n<li>如果必须从多个来源继承行为，就使用接口。</li>\n<li>如果知道所有类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/ncong/p/3901173.html\" target=\"_blank\" rel=\"noopener\">PHP的抽象类和接口</a>  <a href=\"http://blog.csdn.net/fanteathy/article/details/7309966\" target=\"_blank\" rel=\"noopener\">PHP的抽象类、接口的区别和选择</a>  <a href=\"http://www.cnblogs.com/picaso/archive/2012/10/05/2711865.html\" target=\"_blank\" rel=\"noopener\">PHP高级——抽象类与接口的区别</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>抽象类与接口相似，都是一种比较特殊的类。抽象类是一种特殊的类，而接口也是一种特殊的抽象类。它们通常配合面向对象的多态性一起使用。虽然声明和使用都比较容易，但它们的作用在理解上会困难一点。</p>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><p>在OOP语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法作为外部代码访问它的接口。而抽象方法就是为了方便继承而引入的。本节中先来介绍一下抽象类和抽象方法的声明，然后再说明其用途。在声明抽象类之前，我们先了解一下什么是抽象方法。抽象方法就是没有方法体的方法，所谓没有方法体是指在方法声明时没有花括号及其中的内容，而是在声明方法时直接在方法名后加上分号结束。另外在声明抽象方法时，还要使用关键字 <code>abstract</code> 来修饰。声明抽象方法的格式如下所示：</p>\n<p><code>abstract function fun1();</code> //不能有花括号，就更不能有方法体中的内容了<br><code>abstract function fun2();</code> //直接在方法名的括号后面加上分号结束，还要使用 <code>abstract</code> 修饰</p>\n<p>只要在声明类时有一个方法时抽象方法，那么这个类就是抽象类，抽象类也要使用 <code>abstract</code> 关键字来修饰。在抽象类中可以有不是抽象的成员方法和成员属性，但访问权限不能使用private关键字修饰为私有的。下面的例子在Person类中声明了两个抽象方法 <code>say()</code> 和 <code>eat()</code> ，则 <code>Person</code> 类就是一个抽象类，需要使用 <code>abstract</code> 标识。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    abstract class Person&#123;</span><br><span class=\"line\">        protected $name;</span><br><span class=\"line\">        protected $country;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function __construct($name=&quot;&quot;,$country=&quot;china&quot;)&#123;</span><br><span class=\"line\">            $this -&gt;name = $name;</span><br><span class=\"line\">            $this -&gt;country = $country;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        abstract function say();</span><br><span class=\"line\">        abstract function eat();</span><br><span class=\"line\"> </span><br><span class=\"line\">        function run()&#123;</span><br><span class=\"line\">            echo &quot;使用两条腿走路&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中声明了一个抽象类 <code>Person</code> ，在这个类中定义了两个成员属性、一个构造方法和两个抽象方法，还有一个是非抽象的方法。抽象类就像是一个“半成品”的类，在抽象类中有没有被实现的抽象方法，所以抽象类是不能被实例化的，即创建不了对象，也就不能直接使用它。既然抽象类是一个“半成品”的类，那么使用抽象类有什么作用呢？使用抽象类就包含了继承关系，它是为它的子类定义公共接口，将它的操作（可能是部分，也可能是全部）交给子类去实现。就是将抽象类作为子类重载的模板使用，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守。当子类继承抽象类以后，就必须把抽象类中的抽象方法按照子类自己的需要去实现。子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，所以还是抽象类，也不能实例化对象。在下例中声明了两个类，分别实现上例中声明的抽象类 <code>Person</code> 。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class ChineseMan extends Person&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function say()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;是&quot;.$this-&gt;country.&quot;人，讲汉语&lt;br&gt;&quot;;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function eat()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;使用筷子吃饭&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        class Americans extends Person&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function say()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;是&quot;.$this-&gt;country.&quot;人，讲英语&lt;br&gt;&quot;;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        function eat()&#123;</span><br><span class=\"line\">            echo $this -&gt;name.&quot;使用刀子和叉子吃饭&lt;br&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    $chianeseMan = new ChineseMan(&quot;高洛峰&quot;，&quot;中国&quot;);</span><br><span class=\"line\">    $americans = new Americans (&quot;alex&quot;,&quot;美国&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    $chineseMan -&gt;say();</span><br><span class=\"line\">    $chineseMan -&gt;eat();</span><br><span class=\"line\"> </span><br><span class=\"line\">    $americans -&gt;say();</span><br><span class=\"line\">    $americans -&gt;eat();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中声明了两个类去继承抽象类 <code>Person</code> ，并将 <code>Person</code> 类中的抽象方法按各自的需求分别实现，这样两个子类就都可以创建对象了。抽象类 <code>Person</code> 就可以看成是一个模板，类中的抽象方法自己不去实现，只是规范了子类中必须要有父类中声明的抽象方法，而且要按照自己的特点实现抽象方法的内容。</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>因为 <code>PHP</code> 只支持单继承，也就是说每个类只能继承一个父类。当声明的新类继承抽象类实现模板以后，它就不能再有其他父类了。为了解决这个问题， <code>PHP</code> 引入了接口。接口是一种特殊的抽象类，而抽象类又是一种特殊的类。如果抽象类中的所有方法都是抽象方法，我们就可以换另外一种声明方式，使用“接口”技术。接口中声明的方法必须都是抽象方法，另外不能再接口中声明变量，只能使用 <code>const</code> 关键字声明为常量的成员属性，而且接口中所有成员都必须有 <code>public</code> 的访问权限。类的声明是使用 <code>class</code> 关键字标识的，而接口的声明则是使用 <code>interface</code> 关键字标识的。声明接口的格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface 接口名称&#123; //使用interface关键字声明接口</span><br><span class=\"line\">常量成员 //接口中的成员属性只能是常量，不能是变量</span><br><span class=\"line\">抽象方法 //接口中的所有方法必须是抽象方法，不能有非抽象的方法存在</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>接口中的所有方法都要求是抽象方法，所以就不需要在方法前使用 <code>abstract</code> 关键字标识了。而且在接口中也不需要显式地使用 <code>public</code> 访问权限进行修饰，因为默认权限就是 <code>public</code> 的，也只能是公有的。另外接口和抽象类一样也不能实例化对象，它是一种更严格的规范，也需要通过子类来实现。但可以直接使用接口名称在接口外面去获取常量成员的值。一个接口的声明例子，代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface one&#123;</span><br><span class=\"line\">const CONSTANT = &apos;CONSTANT value&apos;;</span><br><span class=\"line\">function fun1();</span><br><span class=\"line\">function fun2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 <code>extends</code> 关键字让一个接口去继承另一个接口，实现接口之间的扩展。在下面的例子中声明一个 <code>Two</code> 接口继承了上例中的 <code>One</code> 接口。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface Two extends one&#123;</span><br><span class=\"line\">function fun3();</span><br><span class=\"line\">function fun4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>如果需要使用接口中的成员，则需要通过子类去实现接口中的全部抽象方法，然后创建子类的对象去调用在子类中实现后的方法。但通过类去继承接口时需要使用 <code>implements</code> 关键字来实现，而并不是使用 <code>extends</code> 关键字完成。如果需要使用抽象类去实现接口中的部分方法，也需要使用 <code>implements</code> 关键字实现。在下面的例子中声明一个抽象类 <code>Three</code> 去实现 <code>One</code> 接口中的部分方法，但要想实例化对象，这个抽象类还需要有子类把它所有的抽象方法都实现才行。声明一个 <code>Four</code> 类去实现 <code>One</code> 接口中全部方法。代码如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">interface one&#123;</span><br><span class=\"line\">const CONSTANT = &apos;CONSTANT value&apos;;</span><br><span class=\"line\">function fun1();</span><br><span class=\"line\">function fun2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//声明一个抽象类去实现接口One中的第二个方法</span><br><span class=\"line\">abstract class Three implements One&#123; //只实现接口中的一个抽象方法</span><br><span class=\"line\">function fun2()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//声明一个类实现接口One中的全部抽象方法</span><br><span class=\"line\">class Four implements One&#123;</span><br><span class=\"line\">function fun1()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">function fun2()&#123;</span><br><span class=\"line\">//具体的实现内容由子类自己决定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p><code>PHP</code> 是单继承的，一个类只能有一个父类，但是一个类可以实现多个接口。将要实现的多个接口之间使用逗号分隔开，而且在子类中药将所有接口中的抽象方法全部实现才可以创建对象。就相当于一个类要遵守多个规范，就像我们不仅要遵守国家的法律，如果是在学校，还需要遵守学校的校规一样。实现多个接口的格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名 implements 接口一，接口二，……接口n&#123;</span><br><span class=\"line\">实现所有接口中的抽象方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现多个接口是使用 <code>implements</code> 关键字，同时还可以使用 <code>extends</code> 关键字继承一个类。即在继承类的同时实现多个接口，但一定更要先使用extends继承一个类，再去使用 <code>inplements</code> 实现多个接口。使用格式如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名 extends 父类名 implements 接口一，接口二，……接口n&#123;</span><br><span class=\"line\">实现所有接口中的抽象方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上述的一些应用外，还有很多地方可以使用使用接口，例如对于一些已经开发好的系统，在结构上进行较大的调整已经不太现实，这时可以通过自定义一些接口并追加相应的实现来完成功能结构的扩展。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>对接口的使用方式是通过关键字 <code>implements</code> 来实现的，而对于抽象类的操作是使用类继承的关键字 <code>extends</code> 实现的，使用时要特别注意。</li>\n<li>接口没有数据成员，但是抽象类有数据成员，抽象类可以实现数据的封装。</li>\n<li>接口没有构造函数，抽象类可以有构造函数。</li>\n<li>接口中的方法都是 <code>public</code> 类型，而抽象类中的方法可以使用 <code>private</code> 、 <code>protected</code> 或 <code>public</code> 来修饰。</li>\n<li>一个类可以同时实现多个接口，但是只能实现一个抽象类。</li>\n</ul>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><ul>\n<li>如果要创建一个模型，这个模型将由一些紧密相关的对象采用，就可以使用抽象类。如果要创建将由一些不相关对象采用的功能，就使用接口。</li>\n<li>如果必须从多个来源继承行为，就使用接口。</li>\n<li>如果知道所有类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。</li>\n</ul>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/ncong/p/3901173.html\" target=\"_blank\" rel=\"noopener\">PHP的抽象类和接口</a>  <a href=\"http://blog.csdn.net/fanteathy/article/details/7309966\" target=\"_blank\" rel=\"noopener\">PHP的抽象类、接口的区别和选择</a>  <a href=\"http://www.cnblogs.com/picaso/archive/2012/10/05/2711865.html\" target=\"_blank\" rel=\"noopener\">PHP高级——抽象类与接口的区别</a> </p>\n</blockquote>\n"},{"title":"Datatables使用系列-基础配置","date":"2018-05-27T08:48:21.000Z","_content":"\n[Datatables](https://datatables.net/) 为是 [JQuery](https://jquery.com/) 的一款表格插件库，是一个高度灵活的工具，可以将任何 HTML 表格添加高级的交互功能。特别是后台开发者，对前端相关框架或知识并不是很熟悉，在做一些内部使用的工具时，总会涉及到页面展示的功能，[Buttons](http://www.bootcss.com/p/buttons/) 同样是一个高度可定制的、免费并且开源的按钮 CSS 样式库。类似插件对于后台开发者来说，简直是福音。本文主要介绍 [Datatables](https://datatables.net/) 的基本配置和使用。\n\n### 下载\n\n从 [Download](https://datatables.net/download/) 页面可下载需要使用的 JS 文件和其他的插件，可以根据需求选择不同的样式、包文件和扩展文件，如：\n\n```\nStep 1. Choose a styling framework\n    Bootstrap 4\nStep 2. Select packages\n    jQuery 3\n    Bootstrap 4\n    DataTables\nExtensions\n    可选\nStep 3. Pick a download method\n    Minify\n    Concatenate\n    下载方式常用是CDN和本地文件方式（推荐）\n```\n\n然后我们下载打包好的文件到本地就可以了。\n\n### 基本使用\n\n将文件打包下载后，因为一般页面都是在 web 应用中使用，所以笔者创建了一个简单的 [Tornado](http://www.tornadoweb.org/en/stable/) 应用，将所有的静态文件放到了 `/static` 目录下：\n\n ![2018-05-27T222132](/images/2018-05-27T222132.png)\n\n**注意：** `jquery.js` 文件是必需的，目前使用 `3.0` 版本。\n\n然后我们可以创建一个简单的 HTML 静态页面，引入基本的 `js`  文件：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Datatables</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/js/Bootstrap-4-4.0.0/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/js/DataTables-1.10.16/css/dataTables.bootstrap4.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/css/datatables.min.css\"/>\n\n    <script src=\"static/js/jquery.js\"></script>\n    <script src=\"static/js/Bootstrap-4-4.0.0/js/bootstrap.js\"></script>\n    <script src=\"static/js/DataTables-1.10.16/js/jquery.dataTables.js\"></script>\n    <script src=\"static/js/DataTables-1.10.16/js/dataTables.bootstrap4.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n**注意：** 如果在调试过程中，出现表格显示错误，请检查 `css` 文件和 `js`  文件的引用顺序。\n\n接下来创建一个 `div` 作为表格区域：\n\n```\n<div>\n    <table id=\"test_dt\" class=\"table table-striped table-bordered\" cellspacing=\"0\" style=\"width: 100%\">\n        <thead>\n        <tr>\n            <th>id</th>\n            <th>username</th>\n            <th>sex</th>\n            <th>address</th>\n            <th>age</th>\n        </tr>\n        </thead>\n    </table>\n</div>\n```\n\n`table` 中的 `class` 属性都是在 `css` 文件中定义好的，直接引用即可。\n\n然后就是通过 `js` 为 `test_dt` 表格填充数据，数据源一般 [Data sources](https://datatables.net/examples/data_sources/) 这些，我们在 `web` 应用中使用最多的就是 [Ajax](https://datatables.net/examples/ajax/) 方式了，可以局部刷新页面。\n\n本文数据源方式使用 [Ajax data source (objects)](https://datatables.net/examples/ajax/objects.html) 这种方式，`js` 代码如下：\n\n```\nfunction init_table(){\n    $('#test_dt').DataTable({\n        order: [[ 0, \"desc\"]],\n        searching: true,\n        stateSave: true,\n        paging: true,\n        pagingType: 'full_numbers',\n        autoWidth: true,\n        responsive: false,\n        pageLength: 10,\n        destroy: true,\n        ajax: {\n            'url': '/index',\n            'dataSrc': handle_data_src,\n            'type': 'POST',\n            'async': false,\n            'data': {}\n        },\n        columns:[\n            {\n                \"data\":\"id\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"username\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"sex\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"address\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"age\",\n                \"width\": \"10%\"\n            },\n        ],\n    });\n}\n```\n\n通过 `POST` 方式获取表格数据，方便表格的刷新操作。其中 `dataSrc` 参数可以对请求的数据在显示到表格前做其他处理。\n\n效果图基本如下：\n\n![2018-05-27T223227](/images/2018-05-27T223227.png)\n\n### 配置参数\n\nDatatables 支持参数配置方式以提供各种场景下对表格的需求，目前笔者主要使用的参数如下：\n\n| 参数         | 含义                             | 可选值                                      |\n| ---------- | ------------------------------ | ---------------------------------------- |\n| order      | 表格在初始化的时候的排序                   | [order](https://datatables.net/reference/option/order) |\n| searching  | 允许表格搜索                         | true false                               |\n| stateSave  | 允许浏览器缓存 Datatables，以便下次恢复之前的状态 | true false                               |\n| paging     | 允许表格分页                         | true false                               |\n| pagingType | 分页按钮显示选项                       | [pagingType](http://www.datatables.club/reference/option/pagingType.html) |\n| autoWidth  | 定义是否由控件自动控制列宽                  | true false                               |\n| pageLength | 单页显示的数据条数                      | integer                                  |\n| destroy    | 销毁已经存在的 Datatables 实例并替换新的选项   | true false                               |\n| ajax       | 异步获取数据填充到表格显示                  | [ajax](http://www.datatables.club/reference/option/ajax.html) |\n| columns    | 设定列的所有初始属性                     | [columns](http://www.datatables.club/reference/option/columns.html) |\n| info       | 控制总数信息（标准界面右下角显示总数和过滤条数的控件）的显隐 | true false                               |\n\n其他参数设置可参考 [Options](https://datatables.net/manual/options) 。\n\n### Tips[持续更新]\n\n**ajax.reload()**\n\n场景：间隔一定时间进行局部刷新。\n\n该场景下如果每次都初始化 datatables ，则会使表格在刷新时失去鼠标控制，用户体验较差。使用 `ajax.reload(callback, resetPaging)  ` 方式可以在重复初始化 `datatables` 下重新加载数据，如：\n\n```\n$('#test_dt').DataTable().ajax.reload(null, false);\n```\n\n当使用该方式时，如果 `ajax` 提交的请求 `data` 字段带的参数值需要动态更新的话，可以使用：\n\n```\n'data': function(d){\n    d.test_name = test_name;\n}\n```\n\n通过 `js` 函数动态更新参数值，这样在 `reload` 表格时，提交的参数就是动态获取的了。\n\n**render**\n\n场景：获取数据后，需要根据某列值对数据进行预处理。\n\n我们可以在 `dataSrc` 中对数据进行处理，但是 `Datatables` 提供了另外一种更加方便的处理方式，即 [columns.render](https://datatables.net/reference/option/columns.render) 方法，如：\n\n```\n{\n    \"data\":\"address\",\n    render: function (data, type, row, meta) {\n        var node = \"<span \";\n        if (data <= bw_warn) {\n            node += \"style='color:red;font-weight: bold;'\"\n        }\n        node += \">\" + data + \"</span>\"\n        return node;\n    },\n    \"width\": \"10%\"\n},\n```\n\n可以根据列值，对该列的显示添加其他的 `css` 属性。\n\n**自定义排序**\n\nDatatables 可以根据指定的列进行排序，但是实际场景中某列值可能较为复杂，而我们只需使用其中的一部分进行排序，例如：去掉前缀。Datatables 的扩展插件提供了很多较为强大的[自定义排序功能](https://datatables.net/plug-ins/sorting/)。\n\n例如：去掉前缀字符 `prefix` ，将剩下字符作为整型排序，可以参考 [Anti-the](https://datatables.net/plug-ins/sorting/anti-the)。\n\n首先新建一个名为 jquery.datatable.sort.plugin.js 文件，将以下 copy 到文件中。\n\n```\njQuery.extend( jQuery.fn.dataTableExt.oSort, {\n    \"anti-prefix-pre\": function ( a ) {\n        var x = a.replace(/^prefix /i, \"\");\n        return parseInt(x);\n    },\n \n    \"anti-prefix-asc\": function ( a, b ) {\n        return ((a < b) ? -1 : ((a > b) ? 1 : 0));\n    },\n \n    \"anti-prefix-desc\": function ( a, b ) {\n        return ((a < b) ? 1 : ((a > b) ? -1 : 0));\n    }\n} );\n```\n\n然后在页面中按照如下方式引用\n\n```\n<script type=\"text/javascript\" src=\"/path/jquery.datatable.sort.plugin.js\"></script>\n```\n\n最后在 Datatables 中加入\n\n```\ncolumnDefs: [\n    { type: 'anti-prefix', targets: 0 }\n]\n```\n\n其中：targets 表示列编号，从0开始。\n\nExample：\n\n```\n$('#example').dataTable( {\n    columnDefs: [\n        { type: 'anti-the', targets: 0 }\n    ]\n} );\n```\n\n\n\nRead More:\n\n> [Datatables](https://datatables.net/) ","source":"_posts/datatables1.md","raw":"---\ntitle: Datatables使用系列-基础配置\ndate: 2018-05-27 16:48:21\ntags:\n - datatables\n - jquery\n - 前端\ncategories:\n - 前端\n---\n\n[Datatables](https://datatables.net/) 为是 [JQuery](https://jquery.com/) 的一款表格插件库，是一个高度灵活的工具，可以将任何 HTML 表格添加高级的交互功能。特别是后台开发者，对前端相关框架或知识并不是很熟悉，在做一些内部使用的工具时，总会涉及到页面展示的功能，[Buttons](http://www.bootcss.com/p/buttons/) 同样是一个高度可定制的、免费并且开源的按钮 CSS 样式库。类似插件对于后台开发者来说，简直是福音。本文主要介绍 [Datatables](https://datatables.net/) 的基本配置和使用。\n\n### 下载\n\n从 [Download](https://datatables.net/download/) 页面可下载需要使用的 JS 文件和其他的插件，可以根据需求选择不同的样式、包文件和扩展文件，如：\n\n```\nStep 1. Choose a styling framework\n    Bootstrap 4\nStep 2. Select packages\n    jQuery 3\n    Bootstrap 4\n    DataTables\nExtensions\n    可选\nStep 3. Pick a download method\n    Minify\n    Concatenate\n    下载方式常用是CDN和本地文件方式（推荐）\n```\n\n然后我们下载打包好的文件到本地就可以了。\n\n### 基本使用\n\n将文件打包下载后，因为一般页面都是在 web 应用中使用，所以笔者创建了一个简单的 [Tornado](http://www.tornadoweb.org/en/stable/) 应用，将所有的静态文件放到了 `/static` 目录下：\n\n ![2018-05-27T222132](/images/2018-05-27T222132.png)\n\n**注意：** `jquery.js` 文件是必需的，目前使用 `3.0` 版本。\n\n然后我们可以创建一个简单的 HTML 静态页面，引入基本的 `js`  文件：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Datatables</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/js/Bootstrap-4-4.0.0/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/js/DataTables-1.10.16/css/dataTables.bootstrap4.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"static/css/datatables.min.css\"/>\n\n    <script src=\"static/js/jquery.js\"></script>\n    <script src=\"static/js/Bootstrap-4-4.0.0/js/bootstrap.js\"></script>\n    <script src=\"static/js/DataTables-1.10.16/js/jquery.dataTables.js\"></script>\n    <script src=\"static/js/DataTables-1.10.16/js/dataTables.bootstrap4.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n**注意：** 如果在调试过程中，出现表格显示错误，请检查 `css` 文件和 `js`  文件的引用顺序。\n\n接下来创建一个 `div` 作为表格区域：\n\n```\n<div>\n    <table id=\"test_dt\" class=\"table table-striped table-bordered\" cellspacing=\"0\" style=\"width: 100%\">\n        <thead>\n        <tr>\n            <th>id</th>\n            <th>username</th>\n            <th>sex</th>\n            <th>address</th>\n            <th>age</th>\n        </tr>\n        </thead>\n    </table>\n</div>\n```\n\n`table` 中的 `class` 属性都是在 `css` 文件中定义好的，直接引用即可。\n\n然后就是通过 `js` 为 `test_dt` 表格填充数据，数据源一般 [Data sources](https://datatables.net/examples/data_sources/) 这些，我们在 `web` 应用中使用最多的就是 [Ajax](https://datatables.net/examples/ajax/) 方式了，可以局部刷新页面。\n\n本文数据源方式使用 [Ajax data source (objects)](https://datatables.net/examples/ajax/objects.html) 这种方式，`js` 代码如下：\n\n```\nfunction init_table(){\n    $('#test_dt').DataTable({\n        order: [[ 0, \"desc\"]],\n        searching: true,\n        stateSave: true,\n        paging: true,\n        pagingType: 'full_numbers',\n        autoWidth: true,\n        responsive: false,\n        pageLength: 10,\n        destroy: true,\n        ajax: {\n            'url': '/index',\n            'dataSrc': handle_data_src,\n            'type': 'POST',\n            'async': false,\n            'data': {}\n        },\n        columns:[\n            {\n                \"data\":\"id\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"username\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"sex\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"address\",\n                \"width\": \"10%\"\n            },\n            {\n                \"data\":\"age\",\n                \"width\": \"10%\"\n            },\n        ],\n    });\n}\n```\n\n通过 `POST` 方式获取表格数据，方便表格的刷新操作。其中 `dataSrc` 参数可以对请求的数据在显示到表格前做其他处理。\n\n效果图基本如下：\n\n![2018-05-27T223227](/images/2018-05-27T223227.png)\n\n### 配置参数\n\nDatatables 支持参数配置方式以提供各种场景下对表格的需求，目前笔者主要使用的参数如下：\n\n| 参数         | 含义                             | 可选值                                      |\n| ---------- | ------------------------------ | ---------------------------------------- |\n| order      | 表格在初始化的时候的排序                   | [order](https://datatables.net/reference/option/order) |\n| searching  | 允许表格搜索                         | true false                               |\n| stateSave  | 允许浏览器缓存 Datatables，以便下次恢复之前的状态 | true false                               |\n| paging     | 允许表格分页                         | true false                               |\n| pagingType | 分页按钮显示选项                       | [pagingType](http://www.datatables.club/reference/option/pagingType.html) |\n| autoWidth  | 定义是否由控件自动控制列宽                  | true false                               |\n| pageLength | 单页显示的数据条数                      | integer                                  |\n| destroy    | 销毁已经存在的 Datatables 实例并替换新的选项   | true false                               |\n| ajax       | 异步获取数据填充到表格显示                  | [ajax](http://www.datatables.club/reference/option/ajax.html) |\n| columns    | 设定列的所有初始属性                     | [columns](http://www.datatables.club/reference/option/columns.html) |\n| info       | 控制总数信息（标准界面右下角显示总数和过滤条数的控件）的显隐 | true false                               |\n\n其他参数设置可参考 [Options](https://datatables.net/manual/options) 。\n\n### Tips[持续更新]\n\n**ajax.reload()**\n\n场景：间隔一定时间进行局部刷新。\n\n该场景下如果每次都初始化 datatables ，则会使表格在刷新时失去鼠标控制，用户体验较差。使用 `ajax.reload(callback, resetPaging)  ` 方式可以在重复初始化 `datatables` 下重新加载数据，如：\n\n```\n$('#test_dt').DataTable().ajax.reload(null, false);\n```\n\n当使用该方式时，如果 `ajax` 提交的请求 `data` 字段带的参数值需要动态更新的话，可以使用：\n\n```\n'data': function(d){\n    d.test_name = test_name;\n}\n```\n\n通过 `js` 函数动态更新参数值，这样在 `reload` 表格时，提交的参数就是动态获取的了。\n\n**render**\n\n场景：获取数据后，需要根据某列值对数据进行预处理。\n\n我们可以在 `dataSrc` 中对数据进行处理，但是 `Datatables` 提供了另外一种更加方便的处理方式，即 [columns.render](https://datatables.net/reference/option/columns.render) 方法，如：\n\n```\n{\n    \"data\":\"address\",\n    render: function (data, type, row, meta) {\n        var node = \"<span \";\n        if (data <= bw_warn) {\n            node += \"style='color:red;font-weight: bold;'\"\n        }\n        node += \">\" + data + \"</span>\"\n        return node;\n    },\n    \"width\": \"10%\"\n},\n```\n\n可以根据列值，对该列的显示添加其他的 `css` 属性。\n\n**自定义排序**\n\nDatatables 可以根据指定的列进行排序，但是实际场景中某列值可能较为复杂，而我们只需使用其中的一部分进行排序，例如：去掉前缀。Datatables 的扩展插件提供了很多较为强大的[自定义排序功能](https://datatables.net/plug-ins/sorting/)。\n\n例如：去掉前缀字符 `prefix` ，将剩下字符作为整型排序，可以参考 [Anti-the](https://datatables.net/plug-ins/sorting/anti-the)。\n\n首先新建一个名为 jquery.datatable.sort.plugin.js 文件，将以下 copy 到文件中。\n\n```\njQuery.extend( jQuery.fn.dataTableExt.oSort, {\n    \"anti-prefix-pre\": function ( a ) {\n        var x = a.replace(/^prefix /i, \"\");\n        return parseInt(x);\n    },\n \n    \"anti-prefix-asc\": function ( a, b ) {\n        return ((a < b) ? -1 : ((a > b) ? 1 : 0));\n    },\n \n    \"anti-prefix-desc\": function ( a, b ) {\n        return ((a < b) ? 1 : ((a > b) ? -1 : 0));\n    }\n} );\n```\n\n然后在页面中按照如下方式引用\n\n```\n<script type=\"text/javascript\" src=\"/path/jquery.datatable.sort.plugin.js\"></script>\n```\n\n最后在 Datatables 中加入\n\n```\ncolumnDefs: [\n    { type: 'anti-prefix', targets: 0 }\n]\n```\n\n其中：targets 表示列编号，从0开始。\n\nExample：\n\n```\n$('#example').dataTable( {\n    columnDefs: [\n        { type: 'anti-the', targets: 0 }\n    ]\n} );\n```\n\n\n\nRead More:\n\n> [Datatables](https://datatables.net/) ","slug":"datatables1","published":1,"updated":"2020-10-25T06:43:32.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq5w0092molctlhkr4qz","content":"<p><a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> 为是 <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"noopener\">JQuery</a> 的一款表格插件库，是一个高度灵活的工具，可以将任何 HTML 表格添加高级的交互功能。特别是后台开发者，对前端相关框架或知识并不是很熟悉，在做一些内部使用的工具时，总会涉及到页面展示的功能，<a href=\"http://www.bootcss.com/p/buttons/\" target=\"_blank\" rel=\"noopener\">Buttons</a> 同样是一个高度可定制的、免费并且开源的按钮 CSS 样式库。类似插件对于后台开发者来说，简直是福音。本文主要介绍 <a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> 的基本配置和使用。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>从 <a href=\"https://datatables.net/download/\" target=\"_blank\" rel=\"noopener\">Download</a> 页面可下载需要使用的 JS 文件和其他的插件，可以根据需求选择不同的样式、包文件和扩展文件，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step 1. Choose a styling framework</span><br><span class=\"line\">    Bootstrap 4</span><br><span class=\"line\">Step 2. Select packages</span><br><span class=\"line\">    jQuery 3</span><br><span class=\"line\">    Bootstrap 4</span><br><span class=\"line\">    DataTables</span><br><span class=\"line\">Extensions</span><br><span class=\"line\">    可选</span><br><span class=\"line\">Step 3. Pick a download method</span><br><span class=\"line\">    Minify</span><br><span class=\"line\">    Concatenate</span><br><span class=\"line\">    下载方式常用是CDN和本地文件方式（推荐）</span><br></pre></td></tr></table></figure>\n<p>然后我们下载打包好的文件到本地就可以了。</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>将文件打包下载后，因为一般页面都是在 web 应用中使用，所以笔者创建了一个简单的 <a href=\"http://www.tornadoweb.org/en/stable/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 应用，将所有的静态文件放到了 <code>/static</code> 目录下：</p>\n<p> <img src=\"/images/2018-05-27T222132.png\" alt=\"2018-05-27T222132\"></p>\n<p><strong>注意：</strong> <code>jquery.js</code> 文件是必需的，目前使用 <code>3.0</code> 版本。</p>\n<p>然后我们可以创建一个简单的 HTML 静态页面，引入基本的 <code>js</code>  文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Datatables&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/Bootstrap-4-4.0.0/css/bootstrap.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/DataTables-1.10.16/css/dataTables.bootstrap4.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/datatables.min.css&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;static/js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/Bootstrap-4-4.0.0/js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/jquery.dataTables.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/dataTables.bootstrap4.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 如果在调试过程中，出现表格显示错误，请检查 <code>css</code> 文件和 <code>js</code>  文件的引用顺序。</p>\n<p>接下来创建一个 <code>div</code> 作为表格区域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table id=&quot;test_dt&quot; class=&quot;table table-striped table-bordered&quot; cellspacing=&quot;0&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;id&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;username&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;sex&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;address&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;age&lt;/th&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><code>table</code> 中的 <code>class</code> 属性都是在 <code>css</code> 文件中定义好的，直接引用即可。</p>\n<p>然后就是通过 <code>js</code> 为 <code>test_dt</code> 表格填充数据，数据源一般 <a href=\"https://datatables.net/examples/data_sources/\" target=\"_blank\" rel=\"noopener\">Data sources</a> 这些，我们在 <code>web</code> 应用中使用最多的就是 <a href=\"https://datatables.net/examples/ajax/\" target=\"_blank\" rel=\"noopener\">Ajax</a> 方式了，可以局部刷新页面。</p>\n<p>本文数据源方式使用 <a href=\"https://datatables.net/examples/ajax/objects.html\" target=\"_blank\" rel=\"noopener\">Ajax data source (objects)</a> 这种方式，<code>js</code> 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function init_table()&#123;</span><br><span class=\"line\">    $(&apos;#test_dt&apos;).DataTable(&#123;</span><br><span class=\"line\">        order: [[ 0, &quot;desc&quot;]],</span><br><span class=\"line\">        searching: true,</span><br><span class=\"line\">        stateSave: true,</span><br><span class=\"line\">        paging: true,</span><br><span class=\"line\">        pagingType: &apos;full_numbers&apos;,</span><br><span class=\"line\">        autoWidth: true,</span><br><span class=\"line\">        responsive: false,</span><br><span class=\"line\">        pageLength: 10,</span><br><span class=\"line\">        destroy: true,</span><br><span class=\"line\">        ajax: &#123;</span><br><span class=\"line\">            &apos;url&apos;: &apos;/index&apos;,</span><br><span class=\"line\">            &apos;dataSrc&apos;: handle_data_src,</span><br><span class=\"line\">            &apos;type&apos;: &apos;POST&apos;,</span><br><span class=\"line\">            &apos;async&apos;: false,</span><br><span class=\"line\">            &apos;data&apos;: &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        columns:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;id&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;username&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;sex&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;address&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;age&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 <code>POST</code> 方式获取表格数据，方便表格的刷新操作。其中 <code>dataSrc</code> 参数可以对请求的数据在显示到表格前做其他处理。</p>\n<p>效果图基本如下：</p>\n<p><img src=\"/images/2018-05-27T223227.png\" alt=\"2018-05-27T223227\"></p>\n<h3 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h3><p>Datatables 支持参数配置方式以提供各种场景下对表格的需求，目前笔者主要使用的参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n<th>可选值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>order</td>\n<td>表格在初始化的时候的排序</td>\n<td><a href=\"https://datatables.net/reference/option/order\" target=\"_blank\" rel=\"noopener\">order</a></td>\n</tr>\n<tr>\n<td>searching</td>\n<td>允许表格搜索</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>stateSave</td>\n<td>允许浏览器缓存 Datatables，以便下次恢复之前的状态</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>paging</td>\n<td>允许表格分页</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>pagingType</td>\n<td>分页按钮显示选项</td>\n<td><a href=\"http://www.datatables.club/reference/option/pagingType.html\" target=\"_blank\" rel=\"noopener\">pagingType</a></td>\n</tr>\n<tr>\n<td>autoWidth</td>\n<td>定义是否由控件自动控制列宽</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>pageLength</td>\n<td>单页显示的数据条数</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>销毁已经存在的 Datatables 实例并替换新的选项</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td>异步获取数据填充到表格显示</td>\n<td><a href=\"http://www.datatables.club/reference/option/ajax.html\" target=\"_blank\" rel=\"noopener\">ajax</a></td>\n</tr>\n<tr>\n<td>columns</td>\n<td>设定列的所有初始属性</td>\n<td><a href=\"http://www.datatables.club/reference/option/columns.html\" target=\"_blank\" rel=\"noopener\">columns</a></td>\n</tr>\n<tr>\n<td>info</td>\n<td>控制总数信息（标准界面右下角显示总数和过滤条数的控件）的显隐</td>\n<td>true false</td>\n</tr>\n</tbody>\n</table>\n<p>其他参数设置可参考 <a href=\"https://datatables.net/manual/options\" target=\"_blank\" rel=\"noopener\">Options</a> 。</p>\n<h3 id=\"Tips-持续更新\"><a href=\"#Tips-持续更新\" class=\"headerlink\" title=\"Tips[持续更新]\"></a>Tips[持续更新]</h3><p><strong>ajax.reload()</strong></p>\n<p>场景：间隔一定时间进行局部刷新。</p>\n<p>该场景下如果每次都初始化 datatables ，则会使表格在刷新时失去鼠标控制，用户体验较差。使用 <code>ajax.reload(callback, resetPaging)</code> 方式可以在重复初始化 <code>datatables</code> 下重新加载数据，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#test_dt&apos;).DataTable().ajax.reload(null, false);</span><br></pre></td></tr></table></figure>\n<p>当使用该方式时，如果 <code>ajax</code> 提交的请求 <code>data</code> 字段带的参数值需要动态更新的话，可以使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;data&apos;: function(d)&#123;</span><br><span class=\"line\">    d.test_name = test_name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 <code>js</code> 函数动态更新参数值，这样在 <code>reload</code> 表格时，提交的参数就是动态获取的了。</p>\n<p><strong>render</strong></p>\n<p>场景：获取数据后，需要根据某列值对数据进行预处理。</p>\n<p>我们可以在 <code>dataSrc</code> 中对数据进行处理，但是 <code>Datatables</code> 提供了另外一种更加方便的处理方式，即 <a href=\"https://datatables.net/reference/option/columns.render\" target=\"_blank\" rel=\"noopener\">columns.render</a> 方法，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;:&quot;address&quot;,</span><br><span class=\"line\">    render: function (data, type, row, meta) &#123;</span><br><span class=\"line\">        var node = &quot;&lt;span &quot;;</span><br><span class=\"line\">        if (data &lt;= bw_warn) &#123;</span><br><span class=\"line\">            node += &quot;style=&apos;color:red;font-weight: bold;&apos;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node += &quot;&gt;&quot; + data + &quot;&lt;/span&gt;&quot;</span><br><span class=\"line\">        return node;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>可以根据列值，对该列的显示添加其他的 <code>css</code> 属性。</p>\n<p><strong>自定义排序</strong></p>\n<p>Datatables 可以根据指定的列进行排序，但是实际场景中某列值可能较为复杂，而我们只需使用其中的一部分进行排序，例如：去掉前缀。Datatables 的扩展插件提供了很多较为强大的<a href=\"https://datatables.net/plug-ins/sorting/\" target=\"_blank\" rel=\"noopener\">自定义排序功能</a>。</p>\n<p>例如：去掉前缀字符 <code>prefix</code> ，将剩下字符作为整型排序，可以参考 <a href=\"https://datatables.net/plug-ins/sorting/anti-the\" target=\"_blank\" rel=\"noopener\">Anti-the</a>。</p>\n<p>首先新建一个名为 jquery.datatable.sort.plugin.js 文件，将以下 copy 到文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend( jQuery.fn.dataTableExt.oSort, &#123;</span><br><span class=\"line\">    &quot;anti-prefix-pre&quot;: function ( a ) &#123;</span><br><span class=\"line\">        var x = a.replace(/^prefix /i, &quot;&quot;);</span><br><span class=\"line\">        return parseInt(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    &quot;anti-prefix-asc&quot;: function ( a, b ) &#123;</span><br><span class=\"line\">        return ((a &lt; b) ? -1 : ((a &gt; b) ? 1 : 0));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    &quot;anti-prefix-desc&quot;: function ( a, b ) &#123;</span><br><span class=\"line\">        return ((a &lt; b) ? 1 : ((a &gt; b) ? -1 : 0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>然后在页面中按照如下方式引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/path/jquery.datatable.sort.plugin.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后在 Datatables 中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">columnDefs: [</span><br><span class=\"line\">    &#123; type: &apos;anti-prefix&apos;, targets: 0 &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>其中：targets 表示列编号，从0开始。</p>\n<p>Example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class=\"line\">    columnDefs: [</span><br><span class=\"line\">        &#123; type: &apos;anti-the&apos;, targets: 0 &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> 为是 <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"noopener\">JQuery</a> 的一款表格插件库，是一个高度灵活的工具，可以将任何 HTML 表格添加高级的交互功能。特别是后台开发者，对前端相关框架或知识并不是很熟悉，在做一些内部使用的工具时，总会涉及到页面展示的功能，<a href=\"http://www.bootcss.com/p/buttons/\" target=\"_blank\" rel=\"noopener\">Buttons</a> 同样是一个高度可定制的、免费并且开源的按钮 CSS 样式库。类似插件对于后台开发者来说，简直是福音。本文主要介绍 <a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> 的基本配置和使用。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>从 <a href=\"https://datatables.net/download/\" target=\"_blank\" rel=\"noopener\">Download</a> 页面可下载需要使用的 JS 文件和其他的插件，可以根据需求选择不同的样式、包文件和扩展文件，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step 1. Choose a styling framework</span><br><span class=\"line\">    Bootstrap 4</span><br><span class=\"line\">Step 2. Select packages</span><br><span class=\"line\">    jQuery 3</span><br><span class=\"line\">    Bootstrap 4</span><br><span class=\"line\">    DataTables</span><br><span class=\"line\">Extensions</span><br><span class=\"line\">    可选</span><br><span class=\"line\">Step 3. Pick a download method</span><br><span class=\"line\">    Minify</span><br><span class=\"line\">    Concatenate</span><br><span class=\"line\">    下载方式常用是CDN和本地文件方式（推荐）</span><br></pre></td></tr></table></figure>\n<p>然后我们下载打包好的文件到本地就可以了。</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>将文件打包下载后，因为一般页面都是在 web 应用中使用，所以笔者创建了一个简单的 <a href=\"http://www.tornadoweb.org/en/stable/\" target=\"_blank\" rel=\"noopener\">Tornado</a> 应用，将所有的静态文件放到了 <code>/static</code> 目录下：</p>\n<p> <img src=\"/images/2018-05-27T222132.png\" alt=\"2018-05-27T222132\"></p>\n<p><strong>注意：</strong> <code>jquery.js</code> 文件是必需的，目前使用 <code>3.0</code> 版本。</p>\n<p>然后我们可以创建一个简单的 HTML 静态页面，引入基本的 <code>js</code>  文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Datatables&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/Bootstrap-4-4.0.0/css/bootstrap.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/DataTables-1.10.16/css/dataTables.bootstrap4.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/datatables.min.css&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;static/js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/Bootstrap-4-4.0.0/js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/jquery.dataTables.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/dataTables.bootstrap4.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 如果在调试过程中，出现表格显示错误，请检查 <code>css</code> 文件和 <code>js</code>  文件的引用顺序。</p>\n<p>接下来创建一个 <code>div</code> 作为表格区域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table id=&quot;test_dt&quot; class=&quot;table table-striped table-bordered&quot; cellspacing=&quot;0&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;id&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;username&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;sex&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;address&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;age&lt;/th&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><code>table</code> 中的 <code>class</code> 属性都是在 <code>css</code> 文件中定义好的，直接引用即可。</p>\n<p>然后就是通过 <code>js</code> 为 <code>test_dt</code> 表格填充数据，数据源一般 <a href=\"https://datatables.net/examples/data_sources/\" target=\"_blank\" rel=\"noopener\">Data sources</a> 这些，我们在 <code>web</code> 应用中使用最多的就是 <a href=\"https://datatables.net/examples/ajax/\" target=\"_blank\" rel=\"noopener\">Ajax</a> 方式了，可以局部刷新页面。</p>\n<p>本文数据源方式使用 <a href=\"https://datatables.net/examples/ajax/objects.html\" target=\"_blank\" rel=\"noopener\">Ajax data source (objects)</a> 这种方式，<code>js</code> 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function init_table()&#123;</span><br><span class=\"line\">    $(&apos;#test_dt&apos;).DataTable(&#123;</span><br><span class=\"line\">        order: [[ 0, &quot;desc&quot;]],</span><br><span class=\"line\">        searching: true,</span><br><span class=\"line\">        stateSave: true,</span><br><span class=\"line\">        paging: true,</span><br><span class=\"line\">        pagingType: &apos;full_numbers&apos;,</span><br><span class=\"line\">        autoWidth: true,</span><br><span class=\"line\">        responsive: false,</span><br><span class=\"line\">        pageLength: 10,</span><br><span class=\"line\">        destroy: true,</span><br><span class=\"line\">        ajax: &#123;</span><br><span class=\"line\">            &apos;url&apos;: &apos;/index&apos;,</span><br><span class=\"line\">            &apos;dataSrc&apos;: handle_data_src,</span><br><span class=\"line\">            &apos;type&apos;: &apos;POST&apos;,</span><br><span class=\"line\">            &apos;async&apos;: false,</span><br><span class=\"line\">            &apos;data&apos;: &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        columns:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;id&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;username&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;sex&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;address&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;data&quot;:&quot;age&quot;,</span><br><span class=\"line\">                &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 <code>POST</code> 方式获取表格数据，方便表格的刷新操作。其中 <code>dataSrc</code> 参数可以对请求的数据在显示到表格前做其他处理。</p>\n<p>效果图基本如下：</p>\n<p><img src=\"/images/2018-05-27T223227.png\" alt=\"2018-05-27T223227\"></p>\n<h3 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h3><p>Datatables 支持参数配置方式以提供各种场景下对表格的需求，目前笔者主要使用的参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n<th>可选值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>order</td>\n<td>表格在初始化的时候的排序</td>\n<td><a href=\"https://datatables.net/reference/option/order\" target=\"_blank\" rel=\"noopener\">order</a></td>\n</tr>\n<tr>\n<td>searching</td>\n<td>允许表格搜索</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>stateSave</td>\n<td>允许浏览器缓存 Datatables，以便下次恢复之前的状态</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>paging</td>\n<td>允许表格分页</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>pagingType</td>\n<td>分页按钮显示选项</td>\n<td><a href=\"http://www.datatables.club/reference/option/pagingType.html\" target=\"_blank\" rel=\"noopener\">pagingType</a></td>\n</tr>\n<tr>\n<td>autoWidth</td>\n<td>定义是否由控件自动控制列宽</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>pageLength</td>\n<td>单页显示的数据条数</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>销毁已经存在的 Datatables 实例并替换新的选项</td>\n<td>true false</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td>异步获取数据填充到表格显示</td>\n<td><a href=\"http://www.datatables.club/reference/option/ajax.html\" target=\"_blank\" rel=\"noopener\">ajax</a></td>\n</tr>\n<tr>\n<td>columns</td>\n<td>设定列的所有初始属性</td>\n<td><a href=\"http://www.datatables.club/reference/option/columns.html\" target=\"_blank\" rel=\"noopener\">columns</a></td>\n</tr>\n<tr>\n<td>info</td>\n<td>控制总数信息（标准界面右下角显示总数和过滤条数的控件）的显隐</td>\n<td>true false</td>\n</tr>\n</tbody>\n</table>\n<p>其他参数设置可参考 <a href=\"https://datatables.net/manual/options\" target=\"_blank\" rel=\"noopener\">Options</a> 。</p>\n<h3 id=\"Tips-持续更新\"><a href=\"#Tips-持续更新\" class=\"headerlink\" title=\"Tips[持续更新]\"></a>Tips[持续更新]</h3><p><strong>ajax.reload()</strong></p>\n<p>场景：间隔一定时间进行局部刷新。</p>\n<p>该场景下如果每次都初始化 datatables ，则会使表格在刷新时失去鼠标控制，用户体验较差。使用 <code>ajax.reload(callback, resetPaging)</code> 方式可以在重复初始化 <code>datatables</code> 下重新加载数据，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#test_dt&apos;).DataTable().ajax.reload(null, false);</span><br></pre></td></tr></table></figure>\n<p>当使用该方式时，如果 <code>ajax</code> 提交的请求 <code>data</code> 字段带的参数值需要动态更新的话，可以使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;data&apos;: function(d)&#123;</span><br><span class=\"line\">    d.test_name = test_name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 <code>js</code> 函数动态更新参数值，这样在 <code>reload</code> 表格时，提交的参数就是动态获取的了。</p>\n<p><strong>render</strong></p>\n<p>场景：获取数据后，需要根据某列值对数据进行预处理。</p>\n<p>我们可以在 <code>dataSrc</code> 中对数据进行处理，但是 <code>Datatables</code> 提供了另外一种更加方便的处理方式，即 <a href=\"https://datatables.net/reference/option/columns.render\" target=\"_blank\" rel=\"noopener\">columns.render</a> 方法，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;:&quot;address&quot;,</span><br><span class=\"line\">    render: function (data, type, row, meta) &#123;</span><br><span class=\"line\">        var node = &quot;&lt;span &quot;;</span><br><span class=\"line\">        if (data &lt;= bw_warn) &#123;</span><br><span class=\"line\">            node += &quot;style=&apos;color:red;font-weight: bold;&apos;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node += &quot;&gt;&quot; + data + &quot;&lt;/span&gt;&quot;</span><br><span class=\"line\">        return node;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;width&quot;: &quot;10%&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>可以根据列值，对该列的显示添加其他的 <code>css</code> 属性。</p>\n<p><strong>自定义排序</strong></p>\n<p>Datatables 可以根据指定的列进行排序，但是实际场景中某列值可能较为复杂，而我们只需使用其中的一部分进行排序，例如：去掉前缀。Datatables 的扩展插件提供了很多较为强大的<a href=\"https://datatables.net/plug-ins/sorting/\" target=\"_blank\" rel=\"noopener\">自定义排序功能</a>。</p>\n<p>例如：去掉前缀字符 <code>prefix</code> ，将剩下字符作为整型排序，可以参考 <a href=\"https://datatables.net/plug-ins/sorting/anti-the\" target=\"_blank\" rel=\"noopener\">Anti-the</a>。</p>\n<p>首先新建一个名为 jquery.datatable.sort.plugin.js 文件，将以下 copy 到文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend( jQuery.fn.dataTableExt.oSort, &#123;</span><br><span class=\"line\">    &quot;anti-prefix-pre&quot;: function ( a ) &#123;</span><br><span class=\"line\">        var x = a.replace(/^prefix /i, &quot;&quot;);</span><br><span class=\"line\">        return parseInt(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    &quot;anti-prefix-asc&quot;: function ( a, b ) &#123;</span><br><span class=\"line\">        return ((a &lt; b) ? -1 : ((a &gt; b) ? 1 : 0));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    &quot;anti-prefix-desc&quot;: function ( a, b ) &#123;</span><br><span class=\"line\">        return ((a &lt; b) ? 1 : ((a &gt; b) ? -1 : 0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>然后在页面中按照如下方式引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/path/jquery.datatable.sort.plugin.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后在 Datatables 中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">columnDefs: [</span><br><span class=\"line\">    &#123; type: &apos;anti-prefix&apos;, targets: 0 &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>其中：targets 表示列编号，从0开始。</p>\n<p>Example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#example&apos;).dataTable( &#123;</span><br><span class=\"line\">    columnDefs: [</span><br><span class=\"line\">        &#123; type: &apos;anti-the&apos;, targets: 0 &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://datatables.net/\" target=\"_blank\" rel=\"noopener\">Datatables</a> </p>\n</blockquote>\n"},{"title":"Kafka文件存储机制","date":"2018-04-30T12:05:02.000Z","_content":"\n### Kafka\n\n> Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统（也可以当做 MQ 系统），常见可以用于 web/nginx 日志、访问日志，消息服务等等，  Linkedin 于2010年贡献给了 Apache 基金会并成为顶级开源项目。\n\n一个商业化消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从  Kafka 文件存储机制和物理结构角度，分析 Kafka 是如何实现高效文件存储，及实际应用效果。\n\n### Kafka文件存储机制\n\nKafka部分名词解释如下：\n\n- Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；\n- Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；\n- Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列；\n- Segment：partition物理上由多个segment组成；\n- offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。\n\n分析过程分为以下4个步骤：\n\n- topic中partition存储分布；\n- partiton中文件存储方式；\n- partiton中segment文件存储结构；\n- 在partition中如何通过offset查找message。\n\n通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。\n\n#### topic中partition存储分布\n\n假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka broker中server.properties文件配置（参数log.dirs=xxx/message-folder），例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4，存储路径和目录规则为：xxx/message-folder。\n\n```\n|--report_push-0\n|--report_push-1\n|--report_push-2\n|--report_push-3\n|--launch_info-0\n|--launch_info-1\n|--launch_info-2\n|--launch_info-3\n```\n\n在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。\n\n如果是多broker分布情况，请参考[kafka集群partition分布原理分析](http://blog.csdn.net/lizhitao/article/details/41778193)\n\n#### partiton中文件存储方式\n\n下面示意图形象说明了partition中文件存储方式：\n\n ![2018-04-30T203835](/images/2018-04-30T203835.png)\n\n- 每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除；\n- 每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。\n\n这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。\n\n#### partiton中segment文件存储结构\n\n- segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀\".index\"和\".log\"分别表示为segment索引文件、数据文件；\n- segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。\n\n下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1 partition，设置每个segment大小为500MB，并启动producer向Kafka broker写入大量数据，如下图所示segment文件列表形象说明了上述2个规则：\n\n ![2018-04-30T204111](/images/2018-04-30T204111.png)\n\n以上述图2中一对segment file文件为例，说明segment中index<--->data file对应关系物理结构如下：\n\n ![2018-04-30T204213](/images/2018-04-30T204213.png)\n\n上述图3中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。\n\n其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。\n\n从上图了解到segment data file由许多message组成，下面详细说明message物理结构如下：\n\n ![2018-04-30T204327](/images/2018-04-30T204327.png)\n\n| 关键字                 | 解释                                       |\n| ------------------- | ---------------------------------------- |\n| 8 byte offset       | 在parition内的每条消息都有一个有序的id号，这个id号被称为偏移，它可以唯一确定每条消息在parition内的位置。即offset表示partiion的第多少message |\n| 4 byte message size | message大小                                |\n| 4 byte CRC32        | 用crc32校验message                          |\n| 1 byte “magic\"      | 表示本次发布Kafka服务程序协议版本号                     |\n| 1 byte “attributes\" | 表示为独立版本、或标识压缩类型、或编码类型。                   |\n| 4 byte key length   | 表示key的长度,当key为-1时，K byte key字段不填         |\n| K byte key          | 可选                                       |\n| value bytes payload | 表示实际消息数据                                 |\n\n#### 在partition中如何通过offset查找message\n\n例如读取offset=368776的message，需要通过下面2个步骤查找。\n\n- 第一步查找segment file\n  上述图为例，其中00000000000000000000.index表示最开始的文件，起始偏移量（offset）为0，第二个文件00000000000000368769.index的消息量起始偏移量为368770 = 368769 + 1，同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 + 1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset**二分查找**文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index|log；\n- 第二步通过segment file查找message\n  通过第一步定位到segment file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。\n\n这样做的优点，segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。\n\n### 实际运行效果\n\n实验环境：\n\n- Kafka集群：由2台虚拟机组成\n- cpu：4核\n- 物理内存：8GB\n- 网卡：千兆网卡\n- jvm heap: 4GB\n- 详细Kafka服务端配置及其优化请参考：[kafka server.properties配置详解](http://blog.csdn.net/lizhitao/article/details/25667831)\n\n ![2018-04-30T205037](/images/2018-04-30T205037.png)\n\n从上图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:\n\n写message\n\n- 消息从堆转入page cache（即物理内存）；\n- 由异步线程刷盘,消息从page cache刷入磁盘。\n\n读message\n\n- 消息直接从page cache转入socket发送出去；\n- 当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。\n\n### 总结\n\nKafka高效文件存储设计特点\n\n- Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用；\n- 通过索引信息可以快速定位message和确定response的最大大小；\n- 通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作；\n- 通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。\n\n\n\n\nRead More:\n\n> [Kafka文件存储机制那些事](https://tech.meituan.com/kafka-fs-design-theory.html)","source":"_posts/kafkasave.md","raw":"---\ntitle: Kafka文件存储机制\ndate: 2018-04-30 20:05:02\ntags:\n - kafka\n - 文件存储\ncategories:\n - 消息队列\n---\n\n### Kafka\n\n> Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统（也可以当做 MQ 系统），常见可以用于 web/nginx 日志、访问日志，消息服务等等，  Linkedin 于2010年贡献给了 Apache 基金会并成为顶级开源项目。\n\n一个商业化消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从  Kafka 文件存储机制和物理结构角度，分析 Kafka 是如何实现高效文件存储，及实际应用效果。\n\n### Kafka文件存储机制\n\nKafka部分名词解释如下：\n\n- Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；\n- Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；\n- Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列；\n- Segment：partition物理上由多个segment组成；\n- offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。\n\n分析过程分为以下4个步骤：\n\n- topic中partition存储分布；\n- partiton中文件存储方式；\n- partiton中segment文件存储结构；\n- 在partition中如何通过offset查找message。\n\n通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。\n\n#### topic中partition存储分布\n\n假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka broker中server.properties文件配置（参数log.dirs=xxx/message-folder），例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4，存储路径和目录规则为：xxx/message-folder。\n\n```\n|--report_push-0\n|--report_push-1\n|--report_push-2\n|--report_push-3\n|--launch_info-0\n|--launch_info-1\n|--launch_info-2\n|--launch_info-3\n```\n\n在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。\n\n如果是多broker分布情况，请参考[kafka集群partition分布原理分析](http://blog.csdn.net/lizhitao/article/details/41778193)\n\n#### partiton中文件存储方式\n\n下面示意图形象说明了partition中文件存储方式：\n\n ![2018-04-30T203835](/images/2018-04-30T203835.png)\n\n- 每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除；\n- 每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。\n\n这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。\n\n#### partiton中segment文件存储结构\n\n- segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀\".index\"和\".log\"分别表示为segment索引文件、数据文件；\n- segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。\n\n下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1 partition，设置每个segment大小为500MB，并启动producer向Kafka broker写入大量数据，如下图所示segment文件列表形象说明了上述2个规则：\n\n ![2018-04-30T204111](/images/2018-04-30T204111.png)\n\n以上述图2中一对segment file文件为例，说明segment中index<--->data file对应关系物理结构如下：\n\n ![2018-04-30T204213](/images/2018-04-30T204213.png)\n\n上述图3中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。\n\n其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。\n\n从上图了解到segment data file由许多message组成，下面详细说明message物理结构如下：\n\n ![2018-04-30T204327](/images/2018-04-30T204327.png)\n\n| 关键字                 | 解释                                       |\n| ------------------- | ---------------------------------------- |\n| 8 byte offset       | 在parition内的每条消息都有一个有序的id号，这个id号被称为偏移，它可以唯一确定每条消息在parition内的位置。即offset表示partiion的第多少message |\n| 4 byte message size | message大小                                |\n| 4 byte CRC32        | 用crc32校验message                          |\n| 1 byte “magic\"      | 表示本次发布Kafka服务程序协议版本号                     |\n| 1 byte “attributes\" | 表示为独立版本、或标识压缩类型、或编码类型。                   |\n| 4 byte key length   | 表示key的长度,当key为-1时，K byte key字段不填         |\n| K byte key          | 可选                                       |\n| value bytes payload | 表示实际消息数据                                 |\n\n#### 在partition中如何通过offset查找message\n\n例如读取offset=368776的message，需要通过下面2个步骤查找。\n\n- 第一步查找segment file\n  上述图为例，其中00000000000000000000.index表示最开始的文件，起始偏移量（offset）为0，第二个文件00000000000000368769.index的消息量起始偏移量为368770 = 368769 + 1，同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 + 1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset**二分查找**文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index|log；\n- 第二步通过segment file查找message\n  通过第一步定位到segment file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。\n\n这样做的优点，segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。\n\n### 实际运行效果\n\n实验环境：\n\n- Kafka集群：由2台虚拟机组成\n- cpu：4核\n- 物理内存：8GB\n- 网卡：千兆网卡\n- jvm heap: 4GB\n- 详细Kafka服务端配置及其优化请参考：[kafka server.properties配置详解](http://blog.csdn.net/lizhitao/article/details/25667831)\n\n ![2018-04-30T205037](/images/2018-04-30T205037.png)\n\n从上图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:\n\n写message\n\n- 消息从堆转入page cache（即物理内存）；\n- 由异步线程刷盘,消息从page cache刷入磁盘。\n\n读message\n\n- 消息直接从page cache转入socket发送出去；\n- 当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。\n\n### 总结\n\nKafka高效文件存储设计特点\n\n- Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用；\n- 通过索引信息可以快速定位message和确定response的最大大小；\n- 通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作；\n- 通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。\n\n\n\n\nRead More:\n\n> [Kafka文件存储机制那些事](https://tech.meituan.com/kafka-fs-design-theory.html)","slug":"kafkasave","published":1,"updated":"2020-10-25T06:43:32.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq630096molc25pyi4qu","content":"<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><blockquote>\n<p>Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统（也可以当做 MQ 系统），常见可以用于 web/nginx 日志、访问日志，消息服务等等，  Linkedin 于2010年贡献给了 Apache 基金会并成为顶级开源项目。</p>\n</blockquote>\n<p>一个商业化消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从  Kafka 文件存储机制和物理结构角度，分析 Kafka 是如何实现高效文件存储，及实际应用效果。</p>\n<h3 id=\"Kafka文件存储机制\"><a href=\"#Kafka文件存储机制\" class=\"headerlink\" title=\"Kafka文件存储机制\"></a>Kafka文件存储机制</h3><p>Kafka部分名词解释如下：</p>\n<ul>\n<li>Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；</li>\n<li>Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；</li>\n<li>Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列；</li>\n<li>Segment：partition物理上由多个segment组成；</li>\n<li>offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。</li>\n</ul>\n<p>分析过程分为以下4个步骤：</p>\n<ul>\n<li>topic中partition存储分布；</li>\n<li>partiton中文件存储方式；</li>\n<li>partiton中segment文件存储结构；</li>\n<li>在partition中如何通过offset查找message。</li>\n</ul>\n<p>通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。</p>\n<h4 id=\"topic中partition存储分布\"><a href=\"#topic中partition存储分布\" class=\"headerlink\" title=\"topic中partition存储分布\"></a>topic中partition存储分布</h4><p>假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka broker中server.properties文件配置（参数log.dirs=xxx/message-folder），例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4，存储路径和目录规则为：xxx/message-folder。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--report_push-0</span><br><span class=\"line\">|--report_push-1</span><br><span class=\"line\">|--report_push-2</span><br><span class=\"line\">|--report_push-3</span><br><span class=\"line\">|--launch_info-0</span><br><span class=\"line\">|--launch_info-1</span><br><span class=\"line\">|--launch_info-2</span><br><span class=\"line\">|--launch_info-3</span><br></pre></td></tr></table></figure>\n<p>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。</p>\n<p>如果是多broker分布情况，请参考<a href=\"http://blog.csdn.net/lizhitao/article/details/41778193\" target=\"_blank\" rel=\"noopener\">kafka集群partition分布原理分析</a></p>\n<h4 id=\"partiton中文件存储方式\"><a href=\"#partiton中文件存储方式\" class=\"headerlink\" title=\"partiton中文件存储方式\"></a>partiton中文件存储方式</h4><p>下面示意图形象说明了partition中文件存储方式：</p>\n<p> <img src=\"/images/2018-04-30T203835.png\" alt=\"2018-04-30T203835\"></p>\n<ul>\n<li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除；</li>\n<li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。</li>\n</ul>\n<p>这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。</p>\n<h4 id=\"partiton中segment文件存储结构\"><a href=\"#partiton中segment文件存储结构\" class=\"headerlink\" title=\"partiton中segment文件存储结构\"></a>partiton中segment文件存储结构</h4><ul>\n<li>segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和”.log”分别表示为segment索引文件、数据文件；</li>\n<li>segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li>\n</ul>\n<p>下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1 partition，设置每个segment大小为500MB，并启动producer向Kafka broker写入大量数据，如下图所示segment文件列表形象说明了上述2个规则：</p>\n<p> <img src=\"/images/2018-04-30T204111.png\" alt=\"2018-04-30T204111\"></p>\n<p>以上述图2中一对segment file文件为例，说明segment中index<--->data file对应关系物理结构如下：</---></p>\n<p> <img src=\"/images/2018-04-30T204213.png\" alt=\"2018-04-30T204213\"></p>\n<p>上述图3中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。</p>\n<p>其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。</p>\n<p>从上图了解到segment data file由许多message组成，下面详细说明message物理结构如下：</p>\n<p> <img src=\"/images/2018-04-30T204327.png\" alt=\"2018-04-30T204327\"></p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8 byte offset</td>\n<td>在parition内的每条消息都有一个有序的id号，这个id号被称为偏移，它可以唯一确定每条消息在parition内的位置。即offset表示partiion的第多少message</td>\n</tr>\n<tr>\n<td>4 byte message size</td>\n<td>message大小</td>\n</tr>\n<tr>\n<td>4 byte CRC32</td>\n<td>用crc32校验message</td>\n</tr>\n<tr>\n<td>1 byte “magic”</td>\n<td>表示本次发布Kafka服务程序协议版本号</td>\n</tr>\n<tr>\n<td>1 byte “attributes”</td>\n<td>表示为独立版本、或标识压缩类型、或编码类型。</td>\n</tr>\n<tr>\n<td>4 byte key length</td>\n<td>表示key的长度,当key为-1时，K byte key字段不填</td>\n</tr>\n<tr>\n<td>K byte key</td>\n<td>可选</td>\n</tr>\n<tr>\n<td>value bytes payload</td>\n<td>表示实际消息数据</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"在partition中如何通过offset查找message\"><a href=\"#在partition中如何通过offset查找message\" class=\"headerlink\" title=\"在partition中如何通过offset查找message\"></a>在partition中如何通过offset查找message</h4><p>例如读取offset=368776的message，需要通过下面2个步骤查找。</p>\n<ul>\n<li>第一步查找segment file<br>上述图为例，其中00000000000000000000.index表示最开始的文件，起始偏移量（offset）为0，第二个文件00000000000000368769.index的消息量起始偏移量为368770 = 368769 + 1，同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 + 1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset<strong>二分查找</strong>文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index|log；</li>\n<li>第二步通过segment file查找message<br>通过第一步定位到segment file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。</li>\n</ul>\n<p>这样做的优点，segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。</p>\n<h3 id=\"实际运行效果\"><a href=\"#实际运行效果\" class=\"headerlink\" title=\"实际运行效果\"></a>实际运行效果</h3><p>实验环境：</p>\n<ul>\n<li>Kafka集群：由2台虚拟机组成</li>\n<li>cpu：4核</li>\n<li>物理内存：8GB</li>\n<li>网卡：千兆网卡</li>\n<li>jvm heap: 4GB</li>\n<li><p>详细Kafka服务端配置及其优化请参考：<a href=\"http://blog.csdn.net/lizhitao/article/details/25667831\" target=\"_blank\" rel=\"noopener\">kafka server.properties配置详解</a></p>\n<p><img src=\"/images/2018-04-30T205037.png\" alt=\"2018-04-30T205037\"></p>\n</li>\n</ul>\n<p>从上图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:</p>\n<p>写message</p>\n<ul>\n<li>消息从堆转入page cache（即物理内存）；</li>\n<li>由异步线程刷盘,消息从page cache刷入磁盘。</li>\n</ul>\n<p>读message</p>\n<ul>\n<li>消息直接从page cache转入socket发送出去；</li>\n<li>当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Kafka高效文件存储设计特点</p>\n<ul>\n<li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用；</li>\n<li>通过索引信息可以快速定位message和确定response的最大大小；</li>\n<li>通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作；</li>\n<li>通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。</li>\n</ul>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://tech.meituan.com/kafka-fs-design-theory.html\" target=\"_blank\" rel=\"noopener\">Kafka文件存储机制那些事</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><blockquote>\n<p>Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统（也可以当做 MQ 系统），常见可以用于 web/nginx 日志、访问日志，消息服务等等，  Linkedin 于2010年贡献给了 Apache 基金会并成为顶级开源项目。</p>\n</blockquote>\n<p>一个商业化消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从  Kafka 文件存储机制和物理结构角度，分析 Kafka 是如何实现高效文件存储，及实际应用效果。</p>\n<h3 id=\"Kafka文件存储机制\"><a href=\"#Kafka文件存储机制\" class=\"headerlink\" title=\"Kafka文件存储机制\"></a>Kafka文件存储机制</h3><p>Kafka部分名词解释如下：</p>\n<ul>\n<li>Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；</li>\n<li>Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；</li>\n<li>Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列；</li>\n<li>Segment：partition物理上由多个segment组成；</li>\n<li>offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。</li>\n</ul>\n<p>分析过程分为以下4个步骤：</p>\n<ul>\n<li>topic中partition存储分布；</li>\n<li>partiton中文件存储方式；</li>\n<li>partiton中segment文件存储结构；</li>\n<li>在partition中如何通过offset查找message。</li>\n</ul>\n<p>通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。</p>\n<h4 id=\"topic中partition存储分布\"><a href=\"#topic中partition存储分布\" class=\"headerlink\" title=\"topic中partition存储分布\"></a>topic中partition存储分布</h4><p>假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka broker中server.properties文件配置（参数log.dirs=xxx/message-folder），例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4，存储路径和目录规则为：xxx/message-folder。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--report_push-0</span><br><span class=\"line\">|--report_push-1</span><br><span class=\"line\">|--report_push-2</span><br><span class=\"line\">|--report_push-3</span><br><span class=\"line\">|--launch_info-0</span><br><span class=\"line\">|--launch_info-1</span><br><span class=\"line\">|--launch_info-2</span><br><span class=\"line\">|--launch_info-3</span><br></pre></td></tr></table></figure>\n<p>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。</p>\n<p>如果是多broker分布情况，请参考<a href=\"http://blog.csdn.net/lizhitao/article/details/41778193\" target=\"_blank\" rel=\"noopener\">kafka集群partition分布原理分析</a></p>\n<h4 id=\"partiton中文件存储方式\"><a href=\"#partiton中文件存储方式\" class=\"headerlink\" title=\"partiton中文件存储方式\"></a>partiton中文件存储方式</h4><p>下面示意图形象说明了partition中文件存储方式：</p>\n<p> <img src=\"/images/2018-04-30T203835.png\" alt=\"2018-04-30T203835\"></p>\n<ul>\n<li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除；</li>\n<li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。</li>\n</ul>\n<p>这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。</p>\n<h4 id=\"partiton中segment文件存储结构\"><a href=\"#partiton中segment文件存储结构\" class=\"headerlink\" title=\"partiton中segment文件存储结构\"></a>partiton中segment文件存储结构</h4><ul>\n<li>segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和”.log”分别表示为segment索引文件、数据文件；</li>\n<li>segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li>\n</ul>\n<p>下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1 partition，设置每个segment大小为500MB，并启动producer向Kafka broker写入大量数据，如下图所示segment文件列表形象说明了上述2个规则：</p>\n<p> <img src=\"/images/2018-04-30T204111.png\" alt=\"2018-04-30T204111\"></p>\n<p>以上述图2中一对segment file文件为例，说明segment中index<--->data file对应关系物理结构如下：</---></p>\n<p> <img src=\"/images/2018-04-30T204213.png\" alt=\"2018-04-30T204213\"></p>\n<p>上述图3中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。</p>\n<p>其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。</p>\n<p>从上图了解到segment data file由许多message组成，下面详细说明message物理结构如下：</p>\n<p> <img src=\"/images/2018-04-30T204327.png\" alt=\"2018-04-30T204327\"></p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8 byte offset</td>\n<td>在parition内的每条消息都有一个有序的id号，这个id号被称为偏移，它可以唯一确定每条消息在parition内的位置。即offset表示partiion的第多少message</td>\n</tr>\n<tr>\n<td>4 byte message size</td>\n<td>message大小</td>\n</tr>\n<tr>\n<td>4 byte CRC32</td>\n<td>用crc32校验message</td>\n</tr>\n<tr>\n<td>1 byte “magic”</td>\n<td>表示本次发布Kafka服务程序协议版本号</td>\n</tr>\n<tr>\n<td>1 byte “attributes”</td>\n<td>表示为独立版本、或标识压缩类型、或编码类型。</td>\n</tr>\n<tr>\n<td>4 byte key length</td>\n<td>表示key的长度,当key为-1时，K byte key字段不填</td>\n</tr>\n<tr>\n<td>K byte key</td>\n<td>可选</td>\n</tr>\n<tr>\n<td>value bytes payload</td>\n<td>表示实际消息数据</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"在partition中如何通过offset查找message\"><a href=\"#在partition中如何通过offset查找message\" class=\"headerlink\" title=\"在partition中如何通过offset查找message\"></a>在partition中如何通过offset查找message</h4><p>例如读取offset=368776的message，需要通过下面2个步骤查找。</p>\n<ul>\n<li>第一步查找segment file<br>上述图为例，其中00000000000000000000.index表示最开始的文件，起始偏移量（offset）为0，第二个文件00000000000000368769.index的消息量起始偏移量为368770 = 368769 + 1，同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 + 1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset<strong>二分查找</strong>文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index|log；</li>\n<li>第二步通过segment file查找message<br>通过第一步定位到segment file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。</li>\n</ul>\n<p>这样做的优点，segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。</p>\n<h3 id=\"实际运行效果\"><a href=\"#实际运行效果\" class=\"headerlink\" title=\"实际运行效果\"></a>实际运行效果</h3><p>实验环境：</p>\n<ul>\n<li>Kafka集群：由2台虚拟机组成</li>\n<li>cpu：4核</li>\n<li>物理内存：8GB</li>\n<li>网卡：千兆网卡</li>\n<li>jvm heap: 4GB</li>\n<li><p>详细Kafka服务端配置及其优化请参考：<a href=\"http://blog.csdn.net/lizhitao/article/details/25667831\" target=\"_blank\" rel=\"noopener\">kafka server.properties配置详解</a></p>\n<p><img src=\"/images/2018-04-30T205037.png\" alt=\"2018-04-30T205037\"></p>\n</li>\n</ul>\n<p>从上图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:</p>\n<p>写message</p>\n<ul>\n<li>消息从堆转入page cache（即物理内存）；</li>\n<li>由异步线程刷盘,消息从page cache刷入磁盘。</li>\n</ul>\n<p>读message</p>\n<ul>\n<li>消息直接从page cache转入socket发送出去；</li>\n<li>当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Kafka高效文件存储设计特点</p>\n<ul>\n<li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用；</li>\n<li>通过索引信息可以快速定位message和确定response的最大大小；</li>\n<li>通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作；</li>\n<li>通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。</li>\n</ul>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://tech.meituan.com/kafka-fs-design-theory.html\" target=\"_blank\" rel=\"noopener\">Kafka文件存储机制那些事</a></p>\n</blockquote>\n"},{"title":"Laravel学习笔记-Laravel5.3用户登录实现及注册源码初探","date":"2017-05-05T11:33:56.000Z","_content":"\n### 简介\n\n在底层代码中，`Laravel` 的认证组件由 `guards` 和 `providers` 组成，`Guard` 定义了用户在每个请求中如何实现认证，例如，`Laravel` 通过 `session` `guard`来维护 `Session` 存储的状态、`Cookie` 以及 `token` `guard`，`token` `guard` 是认证用户发送请求时带的`API token`。\n\n`Provider` 定义了如何从持久化存储中获取用户信息，`Laravel` 底层支持通过 `Eloquent` 和数据库查询构建器两种方式来获取用户，如果需要的话，你还可以定义额外的 `Provider`。\n\n相对于 `Laravel5.2` 而言，`Laravel5.3` 在底层代码中做了很多修改，方法更加简洁。虽然代码改了很多，但是原理都是一样的，我们只需要重写不同的方法而已。\n\n### 默认认证\n\n首先我们使用`Laravel 5.3`提供的开箱即用的认证：\n\n```\nphp artisan make:auth\n```\n\n该Artisan命令会生成用户认证所需的路由、视图以及`HomeController`\n\n认证的路由也一并生成好了，查看路由文件`routes/web.php`，会发现该文件已经被更新\n\n```\nAuth::routes();\n\nRoute::get('/home', 'HomeController@index');\n```\n\n其中`Auth::routes()`定义了登录注册及找回密码路由，`/home` 为用户认证成功后跳转的路由。\n\n### 验证\n\n接下来我们先实现前台用户登录，也就是Laravel自带的Users用户表登录。通过生成的默认登录认证，已经写好了所有代码，剩下要做的就是使用迁移命令创建用户认证相关表：\n\n```\nphp artisan migrate\n```\n\n执行命令后会生成 `users` 表和 `password_resets` 表，分别为用户表和密码重置表。然后我们就可以在浏览器中输入http://myapp.com/register 来注册新用户\n\n![2017-5-5 194722](/images/2017-5-5 194722.png)\n\n我们创建一个用户，注册成功后直接跳转 `/home`，并且刚注册的用户名也已经显示出来了\n\n![2017-5-5 194823](/images/2017-5-5 194823.png)\n\n### 发送邮件重置密码\n\nLaravel 已经为我们提供了邮件重置密码的方式，只需要简单的设置即可。\n\n在`config/mail.php` 中配置邮件发送方\n\n```\n'from' => [\n        'address' => 'liuyangplus@163.com',\n        'name' => 'Laravel Reset Password',\n    ],\n```\n\n在根目录的`.env` 文件中配置\n\n```\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.163.com\nMAIL_PORT=587\nMAIL_USERNAME=youremail@163.com\nMAIL_PASSWORD=youremailpassword\nMAIL_ENCRYPTION=ssl\n```\n\n**注意：**如果想使用其他邮箱，最好将`'from'`中的`address`和`MAIL_HOST` `MAIL_USERNAME` 邮箱类型一致。\n\n![2017-5-5 195940](/images/2017-5-5 195940.png)\n\n以上就是发送邮件重置密码成功的邮件，其实我们也可以通过添加邮件发送类来自定义邮件的主题、内容等，这部分内容以后再添加。\n\n### 用户认证源码初探\n\n我们知道 Laravel 提供了开箱即用的用户认证过程，下面为了深入了解具体的用户认证实现，我们将深入 Laravel 的源码，探究用户验证是怎么处理的。\n\n在实现用户认证过程中，我们首先执行了如下命令\n\n```\nphp artisan make:auth\n```\n\n该命令会在项目里添加以下文件（目录）\n\n```\napp/Http/Controller/HomeController.PHP \nresources/views/auth/ \nresources/views/auth/login.blade.php \nresources/views/auth/passwords/ \nresources/views/auth/passwords/email.blade.php \nresources/views/auth/passwords/reset.blade.php \nresources/views/auth/register.blade.php \nresources/views/home.blade.php \nresources/views/layouts/ \nresources/views/layouts/app.blade.php\n```\n\n除了一个 `HomeController` 是处理用户登陆之后的逻辑，其他都是一些视图，用于显示相应的页面。\n\n在 `routes/web.php` 里添加了以下内容\n\n```\nAuth::routes();\n\nRoute::get('/home', 'HomeController@index');\n```\n\n`Auth::routes()` 是登陆、注册需要的一些路由；下面是定义一个 `/home` 路由，交给 `HomeController@index` 处理。\n\n那么，就从路由开始我们的探究之旅吧。\n\n#### 路由\n\n `Auth::routes()`定义在 `vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php`\n\n```\npublic static function routes()\n    {\n        static::$app->make('router')->auth();\n    }\n```\n\n这里由 IOC 容器解析了一个 Illuminate\\Routing\\Router 类的实例，再调用里面的 `auth()` 方法。\n\n我们再来看看 auth() 方法，定义在 `vendor/laravel/framework/src/Illuminate/Routing/Router.php`\n\n```\npublic function auth()\n    {\n        // Authentication Routes...\n        $this->get('login', 'Auth\\LoginController@showLoginForm')->name('login');\n        $this->post('login', 'Auth\\LoginController@login');\n        $this->post('logout', 'Auth\\LoginController@logout');\n\n        // Registration Routes...\n        $this->get('register', 'Auth\\RegisterController@showRegistrationForm');\n        $this->post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        $this->get('password/reset', 'Auth\\ForgotPasswordController@showLinkRequestForm');\n        $this->post('password/email', 'Auth\\ForgotPasswordController@sendResetLinkEmail');\n        $this->get('password/reset/{token}', 'Auth\\ResetPasswordController@showResetForm');\n        $this->post('password/reset', 'Auth\\ResetPasswordController@reset');\n    }\n```\n\n这里定义了 登陆 、 注销 、注册 和密码重置的路由。我们先看注册部分。\n\n#### 注册\n\n`App\\Http\\Controllers\\Auth\\RegisterController` 负责注册的逻辑，这里 use 了`Illuminate\\Foundation\\Auth\\RegistersUsers` 这个 trait ，包含注册时通用的一些逻辑。\n\n路由 `get('/register')` 所绑定的方法 `Auth\\RegisterController@showRegistrationForm` 就定义在这个 trait 里\n\n```\npublic function showRegistrationForm()\n    {\n        return view('auth.register');\n    }\n```\n\n很简单，返回一个 `auth.register` 视图。\n\n`auth.register` 视图获取用户的输入： `name`，`email`，`password`，然后 POST 提交到` /register`。\n\n再来看看路由 `post('/register')` 所绑定的方法 `Auth\\RegisterController@register`。\n\n同样， `register` 方法定义在 `Illuminate\\Foundation\\Auth\\RegistersUsers` 里\n\n```\npublic function register(Request $request)\n    {\n        $this->validator($request->all())->validate();\n\n        $this->guard()->login($this->create($request->all()));\n\n        return redirect($this->redirectPath());\n    }\n```\n\n首先使用请求传入的表单调用 `validator()` ，返回一个验证对象，再调用 `validate()` 验证表单内容的合法性。\n\n`validator()` 定义在 `App\\Http\\Controllers\\Auth\\RegisterController` 里\n\n```\nprotected function validator(array $data)\n    {\n        return Validator::make($data, [\n            'name' => 'required|max:255',\n            'email' => 'required|email|max:255|unique:users',\n            'password' => 'required|min:6|confirmed',\n        ]);\n    }\n```\n\n> 在这里给出了输入表单的验证规则，如果我们的用户注册需要的表单与这几个字段不一致（例如需要添加一个手机号），就在这里修改。\n\n返回的 `Validator` 对象会在 `register()` 方法里验证。\n\n再回到 `register()` 方法， 往下走 `$this->guard()->login($this->create($request->all()));`。\n\n`$this->guard()` 这里会调用 `Illuminate\\Foundation\\Auth\\RegistersUsers` 里的 `guard()`\n\n```\nprotected function guard()\n    {\n        return Auth::guard();\n    }\n```\n\n这里无参数调用 `Auth::guard()` 返回一个默认的 guard，看一下 `config/auth.php`\n\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'admin' => [\n            'driver' => 'session',\n            'provider' => 'admins',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n        ],\n    ],\n```\n\n默认的 guard 是 web ； web 这个 guard 采用 session 驱动， 数据提供者是 users ；users 数据提供者使用 eloquent 驱动， 使用 `App\\User::class` 模型。\n\n接下来调用 guard 的 `login($this->create($request->all()))`。\n\n首先是 `$this->create()` ，这个方法定义在 `App\\Http\\Controllers\\Auth\\RegisterController` 里\n\n```\nprotected function create(array $data)\n    {\n        return User::create([\n            'name' => $data['name'],\n            'email' => $data['email'],\n            'password' => bcrypt($data['password']),\n        ]);\n    }\n```\n\n使用 `User` 模型对输入的内容新增一条记录，并返回这个模型的对象。\n\n> 同样，如果需要修改注册时使用的字段，也是改写这个方法。\n\n生成的 `User` 对象交给 guard 的 `login()` 方法，做一系列登录的操作，具体怎么做的，还是放到登陆验证里再详细说明。\n\n最后， `return redirect($this->redirectPath());` 完成了注册、登陆的操作，最后跳转到我们在 `App\\Http\\Controllers\\Auth\\RegisterController` 里设置的 `protected $redirectTo = '/home';` 目标URL。\n\n可以看一下 `$this->redirectPath()` 方法怎么写的，在 `Illuminate\\Foundation\\Auth\\RedirectsUsers` 这个 trait 里\n\n```\npublic function redirectPath()\n    {\n        return property_exists($this, 'redirectTo') ? $this->redirectTo : '/home';\n    }\n```\n\n如果定义了 `$redirectTo` 这个属性，就按照这个属性返回；如果没有，返回 `'/home'`。\n\n> 这里把这个方法写成 trait 是因为这个方法还会在 `App\\Http\\Controllers\\Auth\\LoginController` 登陆控制器里使用，所以就把 `redirectPath()` 这个方法提出来做成一个 trait，严格遵守 DRY 原则。\n\n\n\n> 参考文章：\n>\n> [Laravel 5.3 用户验证源码探究 （一） 路由与注册](http://blog.csdn.net/realghost/article/details/52558962)  [Laravel 5.3 多用户表登录实现](http://laravelacademy.org/post/5925.html)","source":"_posts/laraveluserlogin.md","raw":"---\ntitle: Laravel学习笔记-Laravel5.3用户登录实现及注册源码初探\ndate: 2017-05-05 19:33:56\ntags:\n - Laravel\n - 多用户登录\n - 验证原理\ncategories:\n - Laravel\n---\n\n### 简介\n\n在底层代码中，`Laravel` 的认证组件由 `guards` 和 `providers` 组成，`Guard` 定义了用户在每个请求中如何实现认证，例如，`Laravel` 通过 `session` `guard`来维护 `Session` 存储的状态、`Cookie` 以及 `token` `guard`，`token` `guard` 是认证用户发送请求时带的`API token`。\n\n`Provider` 定义了如何从持久化存储中获取用户信息，`Laravel` 底层支持通过 `Eloquent` 和数据库查询构建器两种方式来获取用户，如果需要的话，你还可以定义额外的 `Provider`。\n\n相对于 `Laravel5.2` 而言，`Laravel5.3` 在底层代码中做了很多修改，方法更加简洁。虽然代码改了很多，但是原理都是一样的，我们只需要重写不同的方法而已。\n\n### 默认认证\n\n首先我们使用`Laravel 5.3`提供的开箱即用的认证：\n\n```\nphp artisan make:auth\n```\n\n该Artisan命令会生成用户认证所需的路由、视图以及`HomeController`\n\n认证的路由也一并生成好了，查看路由文件`routes/web.php`，会发现该文件已经被更新\n\n```\nAuth::routes();\n\nRoute::get('/home', 'HomeController@index');\n```\n\n其中`Auth::routes()`定义了登录注册及找回密码路由，`/home` 为用户认证成功后跳转的路由。\n\n### 验证\n\n接下来我们先实现前台用户登录，也就是Laravel自带的Users用户表登录。通过生成的默认登录认证，已经写好了所有代码，剩下要做的就是使用迁移命令创建用户认证相关表：\n\n```\nphp artisan migrate\n```\n\n执行命令后会生成 `users` 表和 `password_resets` 表，分别为用户表和密码重置表。然后我们就可以在浏览器中输入http://myapp.com/register 来注册新用户\n\n![2017-5-5 194722](/images/2017-5-5 194722.png)\n\n我们创建一个用户，注册成功后直接跳转 `/home`，并且刚注册的用户名也已经显示出来了\n\n![2017-5-5 194823](/images/2017-5-5 194823.png)\n\n### 发送邮件重置密码\n\nLaravel 已经为我们提供了邮件重置密码的方式，只需要简单的设置即可。\n\n在`config/mail.php` 中配置邮件发送方\n\n```\n'from' => [\n        'address' => 'liuyangplus@163.com',\n        'name' => 'Laravel Reset Password',\n    ],\n```\n\n在根目录的`.env` 文件中配置\n\n```\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.163.com\nMAIL_PORT=587\nMAIL_USERNAME=youremail@163.com\nMAIL_PASSWORD=youremailpassword\nMAIL_ENCRYPTION=ssl\n```\n\n**注意：**如果想使用其他邮箱，最好将`'from'`中的`address`和`MAIL_HOST` `MAIL_USERNAME` 邮箱类型一致。\n\n![2017-5-5 195940](/images/2017-5-5 195940.png)\n\n以上就是发送邮件重置密码成功的邮件，其实我们也可以通过添加邮件发送类来自定义邮件的主题、内容等，这部分内容以后再添加。\n\n### 用户认证源码初探\n\n我们知道 Laravel 提供了开箱即用的用户认证过程，下面为了深入了解具体的用户认证实现，我们将深入 Laravel 的源码，探究用户验证是怎么处理的。\n\n在实现用户认证过程中，我们首先执行了如下命令\n\n```\nphp artisan make:auth\n```\n\n该命令会在项目里添加以下文件（目录）\n\n```\napp/Http/Controller/HomeController.PHP \nresources/views/auth/ \nresources/views/auth/login.blade.php \nresources/views/auth/passwords/ \nresources/views/auth/passwords/email.blade.php \nresources/views/auth/passwords/reset.blade.php \nresources/views/auth/register.blade.php \nresources/views/home.blade.php \nresources/views/layouts/ \nresources/views/layouts/app.blade.php\n```\n\n除了一个 `HomeController` 是处理用户登陆之后的逻辑，其他都是一些视图，用于显示相应的页面。\n\n在 `routes/web.php` 里添加了以下内容\n\n```\nAuth::routes();\n\nRoute::get('/home', 'HomeController@index');\n```\n\n`Auth::routes()` 是登陆、注册需要的一些路由；下面是定义一个 `/home` 路由，交给 `HomeController@index` 处理。\n\n那么，就从路由开始我们的探究之旅吧。\n\n#### 路由\n\n `Auth::routes()`定义在 `vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php`\n\n```\npublic static function routes()\n    {\n        static::$app->make('router')->auth();\n    }\n```\n\n这里由 IOC 容器解析了一个 Illuminate\\Routing\\Router 类的实例，再调用里面的 `auth()` 方法。\n\n我们再来看看 auth() 方法，定义在 `vendor/laravel/framework/src/Illuminate/Routing/Router.php`\n\n```\npublic function auth()\n    {\n        // Authentication Routes...\n        $this->get('login', 'Auth\\LoginController@showLoginForm')->name('login');\n        $this->post('login', 'Auth\\LoginController@login');\n        $this->post('logout', 'Auth\\LoginController@logout');\n\n        // Registration Routes...\n        $this->get('register', 'Auth\\RegisterController@showRegistrationForm');\n        $this->post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        $this->get('password/reset', 'Auth\\ForgotPasswordController@showLinkRequestForm');\n        $this->post('password/email', 'Auth\\ForgotPasswordController@sendResetLinkEmail');\n        $this->get('password/reset/{token}', 'Auth\\ResetPasswordController@showResetForm');\n        $this->post('password/reset', 'Auth\\ResetPasswordController@reset');\n    }\n```\n\n这里定义了 登陆 、 注销 、注册 和密码重置的路由。我们先看注册部分。\n\n#### 注册\n\n`App\\Http\\Controllers\\Auth\\RegisterController` 负责注册的逻辑，这里 use 了`Illuminate\\Foundation\\Auth\\RegistersUsers` 这个 trait ，包含注册时通用的一些逻辑。\n\n路由 `get('/register')` 所绑定的方法 `Auth\\RegisterController@showRegistrationForm` 就定义在这个 trait 里\n\n```\npublic function showRegistrationForm()\n    {\n        return view('auth.register');\n    }\n```\n\n很简单，返回一个 `auth.register` 视图。\n\n`auth.register` 视图获取用户的输入： `name`，`email`，`password`，然后 POST 提交到` /register`。\n\n再来看看路由 `post('/register')` 所绑定的方法 `Auth\\RegisterController@register`。\n\n同样， `register` 方法定义在 `Illuminate\\Foundation\\Auth\\RegistersUsers` 里\n\n```\npublic function register(Request $request)\n    {\n        $this->validator($request->all())->validate();\n\n        $this->guard()->login($this->create($request->all()));\n\n        return redirect($this->redirectPath());\n    }\n```\n\n首先使用请求传入的表单调用 `validator()` ，返回一个验证对象，再调用 `validate()` 验证表单内容的合法性。\n\n`validator()` 定义在 `App\\Http\\Controllers\\Auth\\RegisterController` 里\n\n```\nprotected function validator(array $data)\n    {\n        return Validator::make($data, [\n            'name' => 'required|max:255',\n            'email' => 'required|email|max:255|unique:users',\n            'password' => 'required|min:6|confirmed',\n        ]);\n    }\n```\n\n> 在这里给出了输入表单的验证规则，如果我们的用户注册需要的表单与这几个字段不一致（例如需要添加一个手机号），就在这里修改。\n\n返回的 `Validator` 对象会在 `register()` 方法里验证。\n\n再回到 `register()` 方法， 往下走 `$this->guard()->login($this->create($request->all()));`。\n\n`$this->guard()` 这里会调用 `Illuminate\\Foundation\\Auth\\RegistersUsers` 里的 `guard()`\n\n```\nprotected function guard()\n    {\n        return Auth::guard();\n    }\n```\n\n这里无参数调用 `Auth::guard()` 返回一个默认的 guard，看一下 `config/auth.php`\n\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'admin' => [\n            'driver' => 'session',\n            'provider' => 'admins',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n        ],\n    ],\n```\n\n默认的 guard 是 web ； web 这个 guard 采用 session 驱动， 数据提供者是 users ；users 数据提供者使用 eloquent 驱动， 使用 `App\\User::class` 模型。\n\n接下来调用 guard 的 `login($this->create($request->all()))`。\n\n首先是 `$this->create()` ，这个方法定义在 `App\\Http\\Controllers\\Auth\\RegisterController` 里\n\n```\nprotected function create(array $data)\n    {\n        return User::create([\n            'name' => $data['name'],\n            'email' => $data['email'],\n            'password' => bcrypt($data['password']),\n        ]);\n    }\n```\n\n使用 `User` 模型对输入的内容新增一条记录，并返回这个模型的对象。\n\n> 同样，如果需要修改注册时使用的字段，也是改写这个方法。\n\n生成的 `User` 对象交给 guard 的 `login()` 方法，做一系列登录的操作，具体怎么做的，还是放到登陆验证里再详细说明。\n\n最后， `return redirect($this->redirectPath());` 完成了注册、登陆的操作，最后跳转到我们在 `App\\Http\\Controllers\\Auth\\RegisterController` 里设置的 `protected $redirectTo = '/home';` 目标URL。\n\n可以看一下 `$this->redirectPath()` 方法怎么写的，在 `Illuminate\\Foundation\\Auth\\RedirectsUsers` 这个 trait 里\n\n```\npublic function redirectPath()\n    {\n        return property_exists($this, 'redirectTo') ? $this->redirectTo : '/home';\n    }\n```\n\n如果定义了 `$redirectTo` 这个属性，就按照这个属性返回；如果没有，返回 `'/home'`。\n\n> 这里把这个方法写成 trait 是因为这个方法还会在 `App\\Http\\Controllers\\Auth\\LoginController` 登陆控制器里使用，所以就把 `redirectPath()` 这个方法提出来做成一个 trait，严格遵守 DRY 原则。\n\n\n\n> 参考文章：\n>\n> [Laravel 5.3 用户验证源码探究 （一） 路由与注册](http://blog.csdn.net/realghost/article/details/52558962)  [Laravel 5.3 多用户表登录实现](http://laravelacademy.org/post/5925.html)","slug":"laraveluserlogin","published":1,"updated":"2020-10-25T06:43:32.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq670097molcswddzy87","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在底层代码中，<code>Laravel</code> 的认证组件由 <code>guards</code> 和 <code>providers</code> 组成，<code>Guard</code> 定义了用户在每个请求中如何实现认证，例如，<code>Laravel</code> 通过 <code>session</code> <code>guard</code>来维护 <code>Session</code> 存储的状态、<code>Cookie</code> 以及 <code>token</code> <code>guard</code>，<code>token</code> <code>guard</code> 是认证用户发送请求时带的<code>API token</code>。</p>\n<p><code>Provider</code> 定义了如何从持久化存储中获取用户信息，<code>Laravel</code> 底层支持通过 <code>Eloquent</code> 和数据库查询构建器两种方式来获取用户，如果需要的话，你还可以定义额外的 <code>Provider</code>。</p>\n<p>相对于 <code>Laravel5.2</code> 而言，<code>Laravel5.3</code> 在底层代码中做了很多修改，方法更加简洁。虽然代码改了很多，但是原理都是一样的，我们只需要重写不同的方法而已。</p>\n<h3 id=\"默认认证\"><a href=\"#默认认证\" class=\"headerlink\" title=\"默认认证\"></a>默认认证</h3><p>首先我们使用<code>Laravel 5.3</code>提供的开箱即用的认证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>该Artisan命令会生成用户认证所需的路由、视图以及<code>HomeController</code></p>\n<p>认证的路由也一并生成好了，查看路由文件<code>routes/web.php</code>，会发现该文件已经被更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auth::routes();</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>\n<p>其中<code>Auth::routes()</code>定义了登录注册及找回密码路由，<code>/home</code> 为用户认证成功后跳转的路由。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>接下来我们先实现前台用户登录，也就是Laravel自带的Users用户表登录。通过生成的默认登录认证，已经写好了所有代码，剩下要做的就是使用迁移命令创建用户认证相关表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>执行命令后会生成 <code>users</code> 表和 <code>password_resets</code> 表，分别为用户表和密码重置表。然后我们就可以在浏览器中输入<a href=\"http://myapp.com/register\" target=\"_blank\" rel=\"noopener\">http://myapp.com/register</a> 来注册新用户</p>\n<p><img src=\"/images/2017-5-5 194722.png\" alt=\"2017-5-5 194722\"></p>\n<p>我们创建一个用户，注册成功后直接跳转 <code>/home</code>，并且刚注册的用户名也已经显示出来了</p>\n<p><img src=\"/images/2017-5-5 194823.png\" alt=\"2017-5-5 194823\"></p>\n<h3 id=\"发送邮件重置密码\"><a href=\"#发送邮件重置密码\" class=\"headerlink\" title=\"发送邮件重置密码\"></a>发送邮件重置密码</h3><p>Laravel 已经为我们提供了邮件重置密码的方式，只需要简单的设置即可。</p>\n<p>在<code>config/mail.php</code> 中配置邮件发送方</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;from&apos; =&gt; [</span><br><span class=\"line\">        &apos;address&apos; =&gt; &apos;liuyangplus@163.com&apos;,</span><br><span class=\"line\">        &apos;name&apos; =&gt; &apos;Laravel Reset Password&apos;,</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>在根目录的<code>.env</code> 文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.163.com</span><br><span class=\"line\">MAIL_PORT=587</span><br><span class=\"line\">MAIL_USERNAME=youremail@163.com</span><br><span class=\"line\">MAIL_PASSWORD=youremailpassword</span><br><span class=\"line\">MAIL_ENCRYPTION=ssl</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果想使用其他邮箱，最好将<code>&#39;from&#39;</code>中的<code>address</code>和<code>MAIL_HOST</code> <code>MAIL_USERNAME</code> 邮箱类型一致。</p>\n<p><img src=\"/images/2017-5-5 195940.png\" alt=\"2017-5-5 195940\"></p>\n<p>以上就是发送邮件重置密码成功的邮件，其实我们也可以通过添加邮件发送类来自定义邮件的主题、内容等，这部分内容以后再添加。</p>\n<h3 id=\"用户认证源码初探\"><a href=\"#用户认证源码初探\" class=\"headerlink\" title=\"用户认证源码初探\"></a>用户认证源码初探</h3><p>我们知道 Laravel 提供了开箱即用的用户认证过程，下面为了深入了解具体的用户认证实现，我们将深入 Laravel 的源码，探究用户验证是怎么处理的。</p>\n<p>在实现用户认证过程中，我们首先执行了如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>该命令会在项目里添加以下文件（目录）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/Http/Controller/HomeController.PHP </span><br><span class=\"line\">resources/views/auth/ </span><br><span class=\"line\">resources/views/auth/login.blade.php </span><br><span class=\"line\">resources/views/auth/passwords/ </span><br><span class=\"line\">resources/views/auth/passwords/email.blade.php </span><br><span class=\"line\">resources/views/auth/passwords/reset.blade.php </span><br><span class=\"line\">resources/views/auth/register.blade.php </span><br><span class=\"line\">resources/views/home.blade.php </span><br><span class=\"line\">resources/views/layouts/ </span><br><span class=\"line\">resources/views/layouts/app.blade.php</span><br></pre></td></tr></table></figure>\n<p>除了一个 <code>HomeController</code> 是处理用户登陆之后的逻辑，其他都是一些视图，用于显示相应的页面。</p>\n<p>在 <code>routes/web.php</code> 里添加了以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auth::routes();</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>\n<p><code>Auth::routes()</code> 是登陆、注册需要的一些路由；下面是定义一个 <code>/home</code> 路由，交给 <code>HomeController@index</code> 处理。</p>\n<p>那么，就从路由开始我们的探究之旅吧。</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p> <code>Auth::routes()</code>定义在 <code>vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function routes()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static::$app-&gt;make(&apos;router&apos;)-&gt;auth();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里由 IOC 容器解析了一个 Illuminate\\Routing\\Router 类的实例，再调用里面的 <code>auth()</code> 方法。</p>\n<p>我们再来看看 auth() 方法，定义在 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function auth()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Authentication Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;login&apos;, &apos;Auth\\LoginController@showLoginForm&apos;)-&gt;name(&apos;login&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;login&apos;, &apos;Auth\\LoginController@login&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;logout&apos;, &apos;Auth\\LoginController@logout&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Registration Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;register&apos;, &apos;Auth\\RegisterController@showRegistrationForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;register&apos;, &apos;Auth\\RegisterController@register&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Password Reset Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;password/reset&apos;, &apos;Auth\\ForgotPasswordController@showLinkRequestForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;password/email&apos;, &apos;Auth\\ForgotPasswordController@sendResetLinkEmail&apos;);</span><br><span class=\"line\">        $this-&gt;get(&apos;password/reset/&#123;token&#125;&apos;, &apos;Auth\\ResetPasswordController@showResetForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;password/reset&apos;, &apos;Auth\\ResetPasswordController@reset&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里定义了 登陆 、 注销 、注册 和密码重置的路由。我们先看注册部分。</p>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><p><code>App\\Http\\Controllers\\Auth\\RegisterController</code> 负责注册的逻辑，这里 use 了<code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 这个 trait ，包含注册时通用的一些逻辑。</p>\n<p>路由 <code>get(&#39;/register&#39;)</code> 所绑定的方法 <code>Auth\\RegisterController@showRegistrationForm</code> 就定义在这个 trait 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function showRegistrationForm()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;auth.register&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，返回一个 <code>auth.register</code> 视图。</p>\n<p><code>auth.register</code> 视图获取用户的输入： <code>name</code>，<code>email</code>，<code>password</code>，然后 POST 提交到<code>/register</code>。</p>\n<p>再来看看路由 <code>post(&#39;/register&#39;)</code> 所绑定的方法 <code>Auth\\RegisterController@register</code>。</p>\n<p>同样， <code>register</code> 方法定义在 <code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function register(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;validator($request-&gt;all())-&gt;validate();</span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;guard()-&gt;login($this-&gt;create($request-&gt;all()));</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect($this-&gt;redirectPath());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>首先使用请求传入的表单调用 <code>validator()</code> ，返回一个验证对象，再调用 <code>validate()</code> 验证表单内容的合法性。</p>\n<p><code>validator()</code> 定义在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function validator(array $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Validator::make($data, [</span><br><span class=\"line\">            &apos;name&apos; =&gt; &apos;required|max:255&apos;,</span><br><span class=\"line\">            &apos;email&apos; =&gt; &apos;required|email|max:255|unique:users&apos;,</span><br><span class=\"line\">            &apos;password&apos; =&gt; &apos;required|min:6|confirmed&apos;,</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里给出了输入表单的验证规则，如果我们的用户注册需要的表单与这几个字段不一致（例如需要添加一个手机号），就在这里修改。</p>\n</blockquote>\n<p>返回的 <code>Validator</code> 对象会在 <code>register()</code> 方法里验证。</p>\n<p>再回到 <code>register()</code> 方法， 往下走 <code>$this-&gt;guard()-&gt;login($this-&gt;create($request-&gt;all()));</code>。</p>\n<p><code>$this-&gt;guard()</code> 这里会调用 <code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 里的 <code>guard()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function guard()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Auth::guard();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里无参数调用 <code>Auth::guard()</code> 返回一个默认的 guard，看一下 <code>config/auth.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;guards&apos; =&gt; [</span><br><span class=\"line\">        &apos;web&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admin&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;admins&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;api&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;token&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>默认的 guard 是 web ； web 这个 guard 采用 session 驱动， 数据提供者是 users ；users 数据提供者使用 eloquent 驱动， 使用 <code>App\\User::class</code> 模型。</p>\n<p>接下来调用 guard 的 <code>login($this-&gt;create($request-&gt;all()))</code>。</p>\n<p>首先是 <code>$this-&gt;create()</code> ，这个方法定义在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function create(array $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return User::create([</span><br><span class=\"line\">            &apos;name&apos; =&gt; $data[&apos;name&apos;],</span><br><span class=\"line\">            &apos;email&apos; =&gt; $data[&apos;email&apos;],</span><br><span class=\"line\">            &apos;password&apos; =&gt; bcrypt($data[&apos;password&apos;]),</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>User</code> 模型对输入的内容新增一条记录，并返回这个模型的对象。</p>\n<blockquote>\n<p>同样，如果需要修改注册时使用的字段，也是改写这个方法。</p>\n</blockquote>\n<p>生成的 <code>User</code> 对象交给 guard 的 <code>login()</code> 方法，做一系列登录的操作，具体怎么做的，还是放到登陆验证里再详细说明。</p>\n<p>最后， <code>return redirect($this-&gt;redirectPath());</code> 完成了注册、登陆的操作，最后跳转到我们在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里设置的 <code>protected $redirectTo = &#39;/home&#39;;</code> 目标URL。</p>\n<p>可以看一下 <code>$this-&gt;redirectPath()</code> 方法怎么写的，在 <code>Illuminate\\Foundation\\Auth\\RedirectsUsers</code> 这个 trait 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function redirectPath()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return property_exists($this, &apos;redirectTo&apos;) ? $this-&gt;redirectTo : &apos;/home&apos;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如果定义了 <code>$redirectTo</code> 这个属性，就按照这个属性返回；如果没有，返回 <code>&#39;/home&#39;</code>。</p>\n<blockquote>\n<p>这里把这个方法写成 trait 是因为这个方法还会在 <code>App\\Http\\Controllers\\Auth\\LoginController</code> 登陆控制器里使用，所以就把 <code>redirectPath()</code> 这个方法提出来做成一个 trait，严格遵守 DRY 原则。</p>\n</blockquote>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/realghost/article/details/52558962\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 用户验证源码探究 （一） 路由与注册</a>  <a href=\"http://laravelacademy.org/post/5925.html\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 多用户表登录实现</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在底层代码中，<code>Laravel</code> 的认证组件由 <code>guards</code> 和 <code>providers</code> 组成，<code>Guard</code> 定义了用户在每个请求中如何实现认证，例如，<code>Laravel</code> 通过 <code>session</code> <code>guard</code>来维护 <code>Session</code> 存储的状态、<code>Cookie</code> 以及 <code>token</code> <code>guard</code>，<code>token</code> <code>guard</code> 是认证用户发送请求时带的<code>API token</code>。</p>\n<p><code>Provider</code> 定义了如何从持久化存储中获取用户信息，<code>Laravel</code> 底层支持通过 <code>Eloquent</code> 和数据库查询构建器两种方式来获取用户，如果需要的话，你还可以定义额外的 <code>Provider</code>。</p>\n<p>相对于 <code>Laravel5.2</code> 而言，<code>Laravel5.3</code> 在底层代码中做了很多修改，方法更加简洁。虽然代码改了很多，但是原理都是一样的，我们只需要重写不同的方法而已。</p>\n<h3 id=\"默认认证\"><a href=\"#默认认证\" class=\"headerlink\" title=\"默认认证\"></a>默认认证</h3><p>首先我们使用<code>Laravel 5.3</code>提供的开箱即用的认证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>该Artisan命令会生成用户认证所需的路由、视图以及<code>HomeController</code></p>\n<p>认证的路由也一并生成好了，查看路由文件<code>routes/web.php</code>，会发现该文件已经被更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auth::routes();</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>\n<p>其中<code>Auth::routes()</code>定义了登录注册及找回密码路由，<code>/home</code> 为用户认证成功后跳转的路由。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>接下来我们先实现前台用户登录，也就是Laravel自带的Users用户表登录。通过生成的默认登录认证，已经写好了所有代码，剩下要做的就是使用迁移命令创建用户认证相关表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>执行命令后会生成 <code>users</code> 表和 <code>password_resets</code> 表，分别为用户表和密码重置表。然后我们就可以在浏览器中输入<a href=\"http://myapp.com/register\" target=\"_blank\" rel=\"noopener\">http://myapp.com/register</a> 来注册新用户</p>\n<p><img src=\"/images/2017-5-5 194722.png\" alt=\"2017-5-5 194722\"></p>\n<p>我们创建一个用户，注册成功后直接跳转 <code>/home</code>，并且刚注册的用户名也已经显示出来了</p>\n<p><img src=\"/images/2017-5-5 194823.png\" alt=\"2017-5-5 194823\"></p>\n<h3 id=\"发送邮件重置密码\"><a href=\"#发送邮件重置密码\" class=\"headerlink\" title=\"发送邮件重置密码\"></a>发送邮件重置密码</h3><p>Laravel 已经为我们提供了邮件重置密码的方式，只需要简单的设置即可。</p>\n<p>在<code>config/mail.php</code> 中配置邮件发送方</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;from&apos; =&gt; [</span><br><span class=\"line\">        &apos;address&apos; =&gt; &apos;liuyangplus@163.com&apos;,</span><br><span class=\"line\">        &apos;name&apos; =&gt; &apos;Laravel Reset Password&apos;,</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>在根目录的<code>.env</code> 文件中配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.163.com</span><br><span class=\"line\">MAIL_PORT=587</span><br><span class=\"line\">MAIL_USERNAME=youremail@163.com</span><br><span class=\"line\">MAIL_PASSWORD=youremailpassword</span><br><span class=\"line\">MAIL_ENCRYPTION=ssl</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果想使用其他邮箱，最好将<code>&#39;from&#39;</code>中的<code>address</code>和<code>MAIL_HOST</code> <code>MAIL_USERNAME</code> 邮箱类型一致。</p>\n<p><img src=\"/images/2017-5-5 195940.png\" alt=\"2017-5-5 195940\"></p>\n<p>以上就是发送邮件重置密码成功的邮件，其实我们也可以通过添加邮件发送类来自定义邮件的主题、内容等，这部分内容以后再添加。</p>\n<h3 id=\"用户认证源码初探\"><a href=\"#用户认证源码初探\" class=\"headerlink\" title=\"用户认证源码初探\"></a>用户认证源码初探</h3><p>我们知道 Laravel 提供了开箱即用的用户认证过程，下面为了深入了解具体的用户认证实现，我们将深入 Laravel 的源码，探究用户验证是怎么处理的。</p>\n<p>在实现用户认证过程中，我们首先执行了如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>该命令会在项目里添加以下文件（目录）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/Http/Controller/HomeController.PHP </span><br><span class=\"line\">resources/views/auth/ </span><br><span class=\"line\">resources/views/auth/login.blade.php </span><br><span class=\"line\">resources/views/auth/passwords/ </span><br><span class=\"line\">resources/views/auth/passwords/email.blade.php </span><br><span class=\"line\">resources/views/auth/passwords/reset.blade.php </span><br><span class=\"line\">resources/views/auth/register.blade.php </span><br><span class=\"line\">resources/views/home.blade.php </span><br><span class=\"line\">resources/views/layouts/ </span><br><span class=\"line\">resources/views/layouts/app.blade.php</span><br></pre></td></tr></table></figure>\n<p>除了一个 <code>HomeController</code> 是处理用户登陆之后的逻辑，其他都是一些视图，用于显示相应的页面。</p>\n<p>在 <code>routes/web.php</code> 里添加了以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auth::routes();</span><br><span class=\"line\"></span><br><span class=\"line\">Route::get(&apos;/home&apos;, &apos;HomeController@index&apos;);</span><br></pre></td></tr></table></figure>\n<p><code>Auth::routes()</code> 是登陆、注册需要的一些路由；下面是定义一个 <code>/home</code> 路由，交给 <code>HomeController@index</code> 处理。</p>\n<p>那么，就从路由开始我们的探究之旅吧。</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p> <code>Auth::routes()</code>定义在 <code>vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function routes()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static::$app-&gt;make(&apos;router&apos;)-&gt;auth();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里由 IOC 容器解析了一个 Illuminate\\Routing\\Router 类的实例，再调用里面的 <code>auth()</code> 方法。</p>\n<p>我们再来看看 auth() 方法，定义在 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function auth()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Authentication Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;login&apos;, &apos;Auth\\LoginController@showLoginForm&apos;)-&gt;name(&apos;login&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;login&apos;, &apos;Auth\\LoginController@login&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;logout&apos;, &apos;Auth\\LoginController@logout&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Registration Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;register&apos;, &apos;Auth\\RegisterController@showRegistrationForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;register&apos;, &apos;Auth\\RegisterController@register&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Password Reset Routes...</span><br><span class=\"line\">        $this-&gt;get(&apos;password/reset&apos;, &apos;Auth\\ForgotPasswordController@showLinkRequestForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;password/email&apos;, &apos;Auth\\ForgotPasswordController@sendResetLinkEmail&apos;);</span><br><span class=\"line\">        $this-&gt;get(&apos;password/reset/&#123;token&#125;&apos;, &apos;Auth\\ResetPasswordController@showResetForm&apos;);</span><br><span class=\"line\">        $this-&gt;post(&apos;password/reset&apos;, &apos;Auth\\ResetPasswordController@reset&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里定义了 登陆 、 注销 、注册 和密码重置的路由。我们先看注册部分。</p>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><p><code>App\\Http\\Controllers\\Auth\\RegisterController</code> 负责注册的逻辑，这里 use 了<code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 这个 trait ，包含注册时通用的一些逻辑。</p>\n<p>路由 <code>get(&#39;/register&#39;)</code> 所绑定的方法 <code>Auth\\RegisterController@showRegistrationForm</code> 就定义在这个 trait 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function showRegistrationForm()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;auth.register&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，返回一个 <code>auth.register</code> 视图。</p>\n<p><code>auth.register</code> 视图获取用户的输入： <code>name</code>，<code>email</code>，<code>password</code>，然后 POST 提交到<code>/register</code>。</p>\n<p>再来看看路由 <code>post(&#39;/register&#39;)</code> 所绑定的方法 <code>Auth\\RegisterController@register</code>。</p>\n<p>同样， <code>register</code> 方法定义在 <code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function register(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;validator($request-&gt;all())-&gt;validate();</span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;guard()-&gt;login($this-&gt;create($request-&gt;all()));</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect($this-&gt;redirectPath());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>首先使用请求传入的表单调用 <code>validator()</code> ，返回一个验证对象，再调用 <code>validate()</code> 验证表单内容的合法性。</p>\n<p><code>validator()</code> 定义在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function validator(array $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Validator::make($data, [</span><br><span class=\"line\">            &apos;name&apos; =&gt; &apos;required|max:255&apos;,</span><br><span class=\"line\">            &apos;email&apos; =&gt; &apos;required|email|max:255|unique:users&apos;,</span><br><span class=\"line\">            &apos;password&apos; =&gt; &apos;required|min:6|confirmed&apos;,</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里给出了输入表单的验证规则，如果我们的用户注册需要的表单与这几个字段不一致（例如需要添加一个手机号），就在这里修改。</p>\n</blockquote>\n<p>返回的 <code>Validator</code> 对象会在 <code>register()</code> 方法里验证。</p>\n<p>再回到 <code>register()</code> 方法， 往下走 <code>$this-&gt;guard()-&gt;login($this-&gt;create($request-&gt;all()));</code>。</p>\n<p><code>$this-&gt;guard()</code> 这里会调用 <code>Illuminate\\Foundation\\Auth\\RegistersUsers</code> 里的 <code>guard()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function guard()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Auth::guard();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里无参数调用 <code>Auth::guard()</code> 返回一个默认的 guard，看一下 <code>config/auth.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;guards&apos; =&gt; [</span><br><span class=\"line\">        &apos;web&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admin&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;admins&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;api&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;token&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>默认的 guard 是 web ； web 这个 guard 采用 session 驱动， 数据提供者是 users ；users 数据提供者使用 eloquent 驱动， 使用 <code>App\\User::class</code> 模型。</p>\n<p>接下来调用 guard 的 <code>login($this-&gt;create($request-&gt;all()))</code>。</p>\n<p>首先是 <code>$this-&gt;create()</code> ，这个方法定义在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected function create(array $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return User::create([</span><br><span class=\"line\">            &apos;name&apos; =&gt; $data[&apos;name&apos;],</span><br><span class=\"line\">            &apos;email&apos; =&gt; $data[&apos;email&apos;],</span><br><span class=\"line\">            &apos;password&apos; =&gt; bcrypt($data[&apos;password&apos;]),</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>User</code> 模型对输入的内容新增一条记录，并返回这个模型的对象。</p>\n<blockquote>\n<p>同样，如果需要修改注册时使用的字段，也是改写这个方法。</p>\n</blockquote>\n<p>生成的 <code>User</code> 对象交给 guard 的 <code>login()</code> 方法，做一系列登录的操作，具体怎么做的，还是放到登陆验证里再详细说明。</p>\n<p>最后， <code>return redirect($this-&gt;redirectPath());</code> 完成了注册、登陆的操作，最后跳转到我们在 <code>App\\Http\\Controllers\\Auth\\RegisterController</code> 里设置的 <code>protected $redirectTo = &#39;/home&#39;;</code> 目标URL。</p>\n<p>可以看一下 <code>$this-&gt;redirectPath()</code> 方法怎么写的，在 <code>Illuminate\\Foundation\\Auth\\RedirectsUsers</code> 这个 trait 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function redirectPath()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return property_exists($this, &apos;redirectTo&apos;) ? $this-&gt;redirectTo : &apos;/home&apos;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如果定义了 <code>$redirectTo</code> 这个属性，就按照这个属性返回；如果没有，返回 <code>&#39;/home&#39;</code>。</p>\n<blockquote>\n<p>这里把这个方法写成 trait 是因为这个方法还会在 <code>App\\Http\\Controllers\\Auth\\LoginController</code> 登陆控制器里使用，所以就把 <code>redirectPath()</code> 这个方法提出来做成一个 trait，严格遵守 DRY 原则。</p>\n</blockquote>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/realghost/article/details/52558962\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 用户验证源码探究 （一） 路由与注册</a>  <a href=\"http://laravelacademy.org/post/5925.html\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 多用户表登录实现</a></p>\n</blockquote>\n"},{"title":"librdkafka的安装和使用","date":"2018-01-04T14:17:29.000Z","_content":"\n[kafka](https://kafka.apache.org/) 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 [多家不同类型的公司](https://cwiki.apache.org/confluence/display/KAFKA/Powered+By) 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 [pykafka](https://github.com/Parsely/pykafka) 、[confluent-kafka-python](https://github.com/confluentinc/confluent-kafka-python) 、[librdkafka](https://github.com/edenhill/librdkafka) ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 [simpleconsumer](http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html) 、[balancedconsumer](http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html) 两种消费方式。\n\n其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。\n\n> **librdkafka** is a C library implementation of the [Apache Kafka](http://kafka.apache.org/) protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.\n\n由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。\n\n#### 安装librdkafka\n\n执行\n\n```\ngit clone https://github.com/edenhill/librdkafka.git\n```\n\n将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。\n\n如果github上无法下载，请转到百度网盘：链接: https://pan.baidu.com/s/1sl0uj2d 密码: af7k\n\n下载的是0.11.1版本，本文安装的也是这个版本。\n\n本文直接下载到/root/目录下，执行`cd librdkafka-0.11.1`进行目录\n\n依次执行一下命令进行安装：\n\n```\n./configure\nmake && make install\n```\n\nlibrdkafka依赖的环境如下，如果未安装请自行安装\n\n```\nThe GNU toolchain\nGNU make\npthreads\nzlib (optional, for gzip compression support)\nlibssl-dev (optional, for SSL and SASL SCRAM support)\nlibsasl2-dev (optional, for SASL GSSAPI support)\n```\n\n如果安装成功，会在`/usr/local/lib`目录中出现以下文件\n\n```\n[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib\n[root@hcdn-others-worker-dev100-bjlt lib]# ll\ntotal 15200\n-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a\n-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a\nlrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -> librdkafka.so.1\nlrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -> librdkafka++.so.1\n-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1\n-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1\ndrwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig\n```\n\nlibrdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是`/lib`、`/usr/lib`，而librdkafka默认安装到了`/usr/local/lib`，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件`/etc/ld.so.conf`，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下\n\n```\ninclude ld.so.conf.d/*.conf\n```\n\n可以看到，`/etc/ld.so.conf`包含了ld.so.conf.d目录中的所有`.conf`文件，所以我们新建一个配置文件\n\n```\n[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll\ntotal 24\n...\n-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf\n...\n```\n\n在`librdkafka.conf`文件中将`/usr/local/lib`路径包含进去\n\n```\n/usr/local/lib\n```\n\n保存退出后执行以下命令更新动态链接库的搜索配置文件\n\n```\nldconfig\n```\n\n通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。\n\n#### 安装pykafka\n\nPython可以通过pip工具安装pykafka\n\n```\npip install pykafka\n```\n\n但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。\n\n执行\n\n```\ngit clone https://github.com/Parsely/pykafka.git\n```\n\n下载pykafka的源码包到本地，这时别着急执行`./configure`，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。\n\n> PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by `setup.py develop`) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare `C_INCLUDE_PATH`, `LIBRARY_PATH`, and `LD_LIBRARY_PATH` in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.\n\n我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？\n\n在`pykafka/pykafka/rdkafka/_rd_kafkamodule.c`文件中有这样一行代码\n\n```\n#include <librdkafka/rdkafka.h>\n```\n\n所以我们需要在刚才下载的pykafka源码包中新建一个目录，将`rdkafka.h`放进去，保证我们在编译安装时能够找到它\n\n```\n[root@hcdn-others-worker-dev100-bjlt pykafka]# ll\ntotal 128\n...\ndrwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka\n...\n```\n\n`rdkafka.h`文件可以在刚才下载的librdkafka源码包中找到，即`librdkafka/src/`目录下\n\n执行\n\n```\ncp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/\n```\n\n**注意**：/root代表librdkafka-0.11.1的存放目录\n\n完成以上工作，依次执行\n\n```\ncd pykafka/\npython setup.py build\npython setup.py install\n```\n\n不出意外的话，就可以安装成功，这时在Python的安装目录的`site-packages/`目录下会产生`pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg`目录，内容如下\n\n```\n[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO\ndrwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka\ndrwxr-xr-x 4 root root 4096 Jan  4 15:22 tests\n```\n\n表明安装成功了，在`pykafka/rdkafka/`目录中可以看到\n\n```\n[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll\ntotal 172\n-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py\n-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py\n-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py\ndrwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__\n-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so\n-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c\n-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py\n-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py\n```\n\n#### 踩的坑\n\n- 使用执行报错1\n\n```\npykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes > 1048618 remaining bytes\npykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)\n```\n\n错误给出的提示是`incorrect broker.version.fallback?`，一番google后，找到了问题所在，请看 [Broker version compatibility](https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility) ，librdkafka不同版本的broker对程序的配置要求不同，主要是`api.version.request` 、`broker.version.fallback`这两个参数的配置，在`pykafka/rdkafka/simple_consumer.py`文件中有这样的代码：\n\n```\n...\nver10 = parse_version(self._broker_version) >= parse_version(\"0.10.0\")\n...\nconf = {\n    ...\n    \"api.version.request\": ver10,\n    ...\n}\n...\nif not ver10:\n    conf[\"broker.version.fallback\"] = self._broker_version\n...\n```\n\n所以在使用时加上了`broker_version`参数，这个参数需要知道**kafka集群的broker的版本**，这个非常重要！\n\n```\nself.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=\"0.8.2\")\n```\n\n这样使用就没有问题了。\n\n但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：\n\n| pykafka            | pykafka-with-librdkafka |\n| ------------------ | ----------------------- |\n| 43.136744260787964 | 35.90807628631592       |\n| 44.06431531906128  | 37.58351707458496       |\n| 43.47287678718567  | 37.0159432888031        |\n\n理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。","source":"_posts/librdkafkainstallanduse.md","raw":"---\ntitle: librdkafka的安装和使用\ndate: 2018-01-04 22:17:29\ntags:\n - librdkafka\n - kafka\ncategories:\n - kafka\n---\n\n[kafka](https://kafka.apache.org/) 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 [多家不同类型的公司](https://cwiki.apache.org/confluence/display/KAFKA/Powered+By) 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 [pykafka](https://github.com/Parsely/pykafka) 、[confluent-kafka-python](https://github.com/confluentinc/confluent-kafka-python) 、[librdkafka](https://github.com/edenhill/librdkafka) ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 [simpleconsumer](http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html) 、[balancedconsumer](http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html) 两种消费方式。\n\n其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。\n\n> **librdkafka** is a C library implementation of the [Apache Kafka](http://kafka.apache.org/) protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.\n\n由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。\n\n#### 安装librdkafka\n\n执行\n\n```\ngit clone https://github.com/edenhill/librdkafka.git\n```\n\n将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。\n\n如果github上无法下载，请转到百度网盘：链接: https://pan.baidu.com/s/1sl0uj2d 密码: af7k\n\n下载的是0.11.1版本，本文安装的也是这个版本。\n\n本文直接下载到/root/目录下，执行`cd librdkafka-0.11.1`进行目录\n\n依次执行一下命令进行安装：\n\n```\n./configure\nmake && make install\n```\n\nlibrdkafka依赖的环境如下，如果未安装请自行安装\n\n```\nThe GNU toolchain\nGNU make\npthreads\nzlib (optional, for gzip compression support)\nlibssl-dev (optional, for SSL and SASL SCRAM support)\nlibsasl2-dev (optional, for SASL GSSAPI support)\n```\n\n如果安装成功，会在`/usr/local/lib`目录中出现以下文件\n\n```\n[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib\n[root@hcdn-others-worker-dev100-bjlt lib]# ll\ntotal 15200\n-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a\n-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a\nlrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -> librdkafka.so.1\nlrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -> librdkafka++.so.1\n-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1\n-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1\ndrwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig\n```\n\nlibrdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是`/lib`、`/usr/lib`，而librdkafka默认安装到了`/usr/local/lib`，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件`/etc/ld.so.conf`，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下\n\n```\ninclude ld.so.conf.d/*.conf\n```\n\n可以看到，`/etc/ld.so.conf`包含了ld.so.conf.d目录中的所有`.conf`文件，所以我们新建一个配置文件\n\n```\n[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll\ntotal 24\n...\n-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf\n...\n```\n\n在`librdkafka.conf`文件中将`/usr/local/lib`路径包含进去\n\n```\n/usr/local/lib\n```\n\n保存退出后执行以下命令更新动态链接库的搜索配置文件\n\n```\nldconfig\n```\n\n通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。\n\n#### 安装pykafka\n\nPython可以通过pip工具安装pykafka\n\n```\npip install pykafka\n```\n\n但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。\n\n执行\n\n```\ngit clone https://github.com/Parsely/pykafka.git\n```\n\n下载pykafka的源码包到本地，这时别着急执行`./configure`，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。\n\n> PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by `setup.py develop`) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare `C_INCLUDE_PATH`, `LIBRARY_PATH`, and `LD_LIBRARY_PATH` in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.\n\n我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？\n\n在`pykafka/pykafka/rdkafka/_rd_kafkamodule.c`文件中有这样一行代码\n\n```\n#include <librdkafka/rdkafka.h>\n```\n\n所以我们需要在刚才下载的pykafka源码包中新建一个目录，将`rdkafka.h`放进去，保证我们在编译安装时能够找到它\n\n```\n[root@hcdn-others-worker-dev100-bjlt pykafka]# ll\ntotal 128\n...\ndrwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka\n...\n```\n\n`rdkafka.h`文件可以在刚才下载的librdkafka源码包中找到，即`librdkafka/src/`目录下\n\n执行\n\n```\ncp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/\n```\n\n**注意**：/root代表librdkafka-0.11.1的存放目录\n\n完成以上工作，依次执行\n\n```\ncd pykafka/\npython setup.py build\npython setup.py install\n```\n\n不出意外的话，就可以安装成功，这时在Python的安装目录的`site-packages/`目录下会产生`pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg`目录，内容如下\n\n```\n[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO\ndrwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka\ndrwxr-xr-x 4 root root 4096 Jan  4 15:22 tests\n```\n\n表明安装成功了，在`pykafka/rdkafka/`目录中可以看到\n\n```\n[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll\ntotal 172\n-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py\n-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py\n-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py\ndrwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__\n-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so\n-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c\n-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py\n-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py\n```\n\n#### 踩的坑\n\n- 使用执行报错1\n\n```\npykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes > 1048618 remaining bytes\npykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)\n```\n\n错误给出的提示是`incorrect broker.version.fallback?`，一番google后，找到了问题所在，请看 [Broker version compatibility](https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility) ，librdkafka不同版本的broker对程序的配置要求不同，主要是`api.version.request` 、`broker.version.fallback`这两个参数的配置，在`pykafka/rdkafka/simple_consumer.py`文件中有这样的代码：\n\n```\n...\nver10 = parse_version(self._broker_version) >= parse_version(\"0.10.0\")\n...\nconf = {\n    ...\n    \"api.version.request\": ver10,\n    ...\n}\n...\nif not ver10:\n    conf[\"broker.version.fallback\"] = self._broker_version\n...\n```\n\n所以在使用时加上了`broker_version`参数，这个参数需要知道**kafka集群的broker的版本**，这个非常重要！\n\n```\nself.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=\"0.8.2\")\n```\n\n这样使用就没有问题了。\n\n但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：\n\n| pykafka            | pykafka-with-librdkafka |\n| ------------------ | ----------------------- |\n| 43.136744260787964 | 35.90807628631592       |\n| 44.06431531906128  | 37.58351707458496       |\n| 43.47287678718567  | 37.0159432888031        |\n\n理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。","slug":"librdkafkainstallanduse","published":1,"updated":"2020-10-25T06:43:32.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6a0098molc6pziklx4","content":"<p><a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">kafka</a> 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/Powered+By\" target=\"_blank\" rel=\"noopener\">多家不同类型的公司</a> 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 <a href=\"https://github.com/Parsely/pykafka\" target=\"_blank\" rel=\"noopener\">pykafka</a> 、<a href=\"https://github.com/confluentinc/confluent-kafka-python\" target=\"_blank\" rel=\"noopener\">confluent-kafka-python</a> 、<a href=\"https://github.com/edenhill/librdkafka\" target=\"_blank\" rel=\"noopener\">librdkafka</a> ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 <a href=\"http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html\" target=\"_blank\" rel=\"noopener\">simpleconsumer</a> 、<a href=\"http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html\" target=\"_blank\" rel=\"noopener\">balancedconsumer</a> 两种消费方式。</p>\n<p>其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。</p>\n<blockquote>\n<p><strong>librdkafka</strong> is a C library implementation of the <a href=\"http://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Kafka</a> protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.</p>\n</blockquote>\n<p>由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。</p>\n<h4 id=\"安装librdkafka\"><a href=\"#安装librdkafka\" class=\"headerlink\" title=\"安装librdkafka\"></a>安装librdkafka</h4><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/edenhill/librdkafka.git</span><br></pre></td></tr></table></figure>\n<p>将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。</p>\n<p>如果github上无法下载，请转到百度网盘：链接: <a href=\"https://pan.baidu.com/s/1sl0uj2d\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1sl0uj2d</a> 密码: af7k</p>\n<p>下载的是0.11.1版本，本文安装的也是这个版本。</p>\n<p>本文直接下载到/root/目录下，执行<code>cd librdkafka-0.11.1</code>进行目录</p>\n<p>依次执行一下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>librdkafka依赖的环境如下，如果未安装请自行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The GNU toolchain</span><br><span class=\"line\">GNU make</span><br><span class=\"line\">pthreads</span><br><span class=\"line\">zlib (optional, for gzip compression support)</span><br><span class=\"line\">libssl-dev (optional, for SSL and SASL SCRAM support)</span><br><span class=\"line\">libsasl2-dev (optional, for SASL GSSAPI support)</span><br></pre></td></tr></table></figure>\n<p>如果安装成功，会在<code>/usr/local/lib</code>目录中出现以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt lib]# ll</span><br><span class=\"line\">total 15200</span><br><span class=\"line\">-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a</span><br><span class=\"line\">-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a</span><br><span class=\"line\">lrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -&gt; librdkafka.so.1</span><br><span class=\"line\">lrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -&gt; librdkafka++.so.1</span><br><span class=\"line\">-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1</span><br><span class=\"line\">-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1</span><br><span class=\"line\">drwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig</span><br></pre></td></tr></table></figure>\n<p>librdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是<code>/lib</code>、<code>/usr/lib</code>，而librdkafka默认安装到了<code>/usr/local/lib</code>，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件<code>/etc/ld.so.conf</code>，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include ld.so.conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>可以看到，<code>/etc/ld.so.conf</code>包含了ld.so.conf.d目录中的所有<code>.conf</code>文件，所以我们新建一个配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">...</span><br><span class=\"line\">-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>在<code>librdkafka.conf</code>文件中将<code>/usr/local/lib</code>路径包含进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/lib</span><br></pre></td></tr></table></figure>\n<p>保存退出后执行以下命令更新动态链接库的搜索配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldconfig</span><br></pre></td></tr></table></figure>\n<p>通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。</p>\n<h4 id=\"安装pykafka\"><a href=\"#安装pykafka\" class=\"headerlink\" title=\"安装pykafka\"></a>安装pykafka</h4><p>Python可以通过pip工具安装pykafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pykafka</span><br></pre></td></tr></table></figure>\n<p>但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Parsely/pykafka.git</span><br></pre></td></tr></table></figure>\n<p>下载pykafka的源码包到本地，这时别着急执行<code>./configure</code>，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。</p>\n<blockquote>\n<p>PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by <code>setup.py develop</code>) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare <code>C_INCLUDE_PATH</code>, <code>LIBRARY_PATH</code>, and <code>LD_LIBRARY_PATH</code> in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.</p>\n</blockquote>\n<p>我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？</p>\n<p>在<code>pykafka/pykafka/rdkafka/_rd_kafkamodule.c</code>文件中有这样一行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;librdkafka/rdkafka.h&gt;</span><br></pre></td></tr></table></figure>\n<p>所以我们需要在刚才下载的pykafka源码包中新建一个目录，将<code>rdkafka.h</code>放进去，保证我们在编译安装时能够找到它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt pykafka]# ll</span><br><span class=\"line\">total 128</span><br><span class=\"line\">...</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><code>rdkafka.h</code>文件可以在刚才下载的librdkafka源码包中找到，即<code>librdkafka/src/</code>目录下</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：/root代表librdkafka-0.11.1的存放目录</p>\n<p>完成以上工作，依次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd pykafka/</span><br><span class=\"line\">python setup.py build</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n<p>不出意外的话，就可以安装成功，这时在Python的安装目录的<code>site-packages/</code>目录下会产生<code>pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg</code>目录，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO</span><br><span class=\"line\">drwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jan  4 15:22 tests</span><br></pre></td></tr></table></figure>\n<p>表明安装成功了，在<code>pykafka/rdkafka/</code>目录中可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll</span><br><span class=\"line\">total 172</span><br><span class=\"line\">-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py</span><br><span class=\"line\">-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py</span><br><span class=\"line\">-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__</span><br><span class=\"line\">-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so</span><br><span class=\"line\">-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c</span><br><span class=\"line\">-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py</span><br><span class=\"line\">-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py</span><br></pre></td></tr></table></figure>\n<h4 id=\"踩的坑\"><a href=\"#踩的坑\" class=\"headerlink\" title=\"踩的坑\"></a>踩的坑</h4><ul>\n<li>使用执行报错1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes &gt; 1048618 remaining bytes</span><br><span class=\"line\">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)</span><br></pre></td></tr></table></figure>\n<p>错误给出的提示是<code>incorrect broker.version.fallback?</code>，一番google后，找到了问题所在，请看 <a href=\"https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility\" target=\"_blank\" rel=\"noopener\">Broker version compatibility</a> ，librdkafka不同版本的broker对程序的配置要求不同，主要是<code>api.version.request</code> 、<code>broker.version.fallback</code>这两个参数的配置，在<code>pykafka/rdkafka/simple_consumer.py</code>文件中有这样的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ver10 = parse_version(self._broker_version) &gt;= parse_version(&quot;0.10.0&quot;)</span><br><span class=\"line\">...</span><br><span class=\"line\">conf = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;api.version.request&quot;: ver10,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">if not ver10:</span><br><span class=\"line\">    conf[&quot;broker.version.fallback&quot;] = self._broker_version</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>所以在使用时加上了<code>broker_version</code>参数，这个参数需要知道<strong>kafka集群的broker的版本</strong>，这个非常重要！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=&quot;0.8.2&quot;)</span><br></pre></td></tr></table></figure>\n<p>这样使用就没有问题了。</p>\n<p>但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：</p>\n<table>\n<thead>\n<tr>\n<th>pykafka</th>\n<th>pykafka-with-librdkafka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>43.136744260787964</td>\n<td>35.90807628631592</td>\n</tr>\n<tr>\n<td>44.06431531906128</td>\n<td>37.58351707458496</td>\n</tr>\n<tr>\n<td>43.47287678718567</td>\n<td>37.0159432888031</td>\n</tr>\n</tbody>\n</table>\n<p>理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">kafka</a> 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/Powered+By\" target=\"_blank\" rel=\"noopener\">多家不同类型的公司</a> 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 <a href=\"https://github.com/Parsely/pykafka\" target=\"_blank\" rel=\"noopener\">pykafka</a> 、<a href=\"https://github.com/confluentinc/confluent-kafka-python\" target=\"_blank\" rel=\"noopener\">confluent-kafka-python</a> 、<a href=\"https://github.com/edenhill/librdkafka\" target=\"_blank\" rel=\"noopener\">librdkafka</a> ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 <a href=\"http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html\" target=\"_blank\" rel=\"noopener\">simpleconsumer</a> 、<a href=\"http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html\" target=\"_blank\" rel=\"noopener\">balancedconsumer</a> 两种消费方式。</p>\n<p>其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。</p>\n<blockquote>\n<p><strong>librdkafka</strong> is a C library implementation of the <a href=\"http://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Kafka</a> protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.</p>\n</blockquote>\n<p>由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。</p>\n<h4 id=\"安装librdkafka\"><a href=\"#安装librdkafka\" class=\"headerlink\" title=\"安装librdkafka\"></a>安装librdkafka</h4><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/edenhill/librdkafka.git</span><br></pre></td></tr></table></figure>\n<p>将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。</p>\n<p>如果github上无法下载，请转到百度网盘：链接: <a href=\"https://pan.baidu.com/s/1sl0uj2d\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1sl0uj2d</a> 密码: af7k</p>\n<p>下载的是0.11.1版本，本文安装的也是这个版本。</p>\n<p>本文直接下载到/root/目录下，执行<code>cd librdkafka-0.11.1</code>进行目录</p>\n<p>依次执行一下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>librdkafka依赖的环境如下，如果未安装请自行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The GNU toolchain</span><br><span class=\"line\">GNU make</span><br><span class=\"line\">pthreads</span><br><span class=\"line\">zlib (optional, for gzip compression support)</span><br><span class=\"line\">libssl-dev (optional, for SSL and SASL SCRAM support)</span><br><span class=\"line\">libsasl2-dev (optional, for SASL GSSAPI support)</span><br></pre></td></tr></table></figure>\n<p>如果安装成功，会在<code>/usr/local/lib</code>目录中出现以下文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt lib]# ll</span><br><span class=\"line\">total 15200</span><br><span class=\"line\">-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a</span><br><span class=\"line\">-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a</span><br><span class=\"line\">lrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -&gt; librdkafka.so.1</span><br><span class=\"line\">lrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -&gt; librdkafka++.so.1</span><br><span class=\"line\">-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1</span><br><span class=\"line\">-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1</span><br><span class=\"line\">drwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig</span><br></pre></td></tr></table></figure>\n<p>librdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是<code>/lib</code>、<code>/usr/lib</code>，而librdkafka默认安装到了<code>/usr/local/lib</code>，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件<code>/etc/ld.so.conf</code>，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include ld.so.conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>可以看到，<code>/etc/ld.so.conf</code>包含了ld.so.conf.d目录中的所有<code>.conf</code>文件，所以我们新建一个配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">...</span><br><span class=\"line\">-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>在<code>librdkafka.conf</code>文件中将<code>/usr/local/lib</code>路径包含进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/lib</span><br></pre></td></tr></table></figure>\n<p>保存退出后执行以下命令更新动态链接库的搜索配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldconfig</span><br></pre></td></tr></table></figure>\n<p>通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。</p>\n<h4 id=\"安装pykafka\"><a href=\"#安装pykafka\" class=\"headerlink\" title=\"安装pykafka\"></a>安装pykafka</h4><p>Python可以通过pip工具安装pykafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pykafka</span><br></pre></td></tr></table></figure>\n<p>但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Parsely/pykafka.git</span><br></pre></td></tr></table></figure>\n<p>下载pykafka的源码包到本地，这时别着急执行<code>./configure</code>，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。</p>\n<blockquote>\n<p>PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by <code>setup.py develop</code>) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare <code>C_INCLUDE_PATH</code>, <code>LIBRARY_PATH</code>, and <code>LD_LIBRARY_PATH</code> in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.</p>\n</blockquote>\n<p>我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？</p>\n<p>在<code>pykafka/pykafka/rdkafka/_rd_kafkamodule.c</code>文件中有这样一行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;librdkafka/rdkafka.h&gt;</span><br></pre></td></tr></table></figure>\n<p>所以我们需要在刚才下载的pykafka源码包中新建一个目录，将<code>rdkafka.h</code>放进去，保证我们在编译安装时能够找到它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt pykafka]# ll</span><br><span class=\"line\">total 128</span><br><span class=\"line\">...</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><code>rdkafka.h</code>文件可以在刚才下载的librdkafka源码包中找到，即<code>librdkafka/src/</code>目录下</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：/root代表librdkafka-0.11.1的存放目录</p>\n<p>完成以上工作，依次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd pykafka/</span><br><span class=\"line\">python setup.py build</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n<p>不出意外的话，就可以安装成功，这时在Python的安装目录的<code>site-packages/</code>目录下会产生<code>pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg</code>目录，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO</span><br><span class=\"line\">drwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka</span><br><span class=\"line\">drwxr-xr-x 4 root root 4096 Jan  4 15:22 tests</span><br></pre></td></tr></table></figure>\n<p>表明安装成功了，在<code>pykafka/rdkafka/</code>目录中可以看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll</span><br><span class=\"line\">total 172</span><br><span class=\"line\">-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py</span><br><span class=\"line\">-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py</span><br><span class=\"line\">-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__</span><br><span class=\"line\">-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so</span><br><span class=\"line\">-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c</span><br><span class=\"line\">-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py</span><br><span class=\"line\">-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py</span><br></pre></td></tr></table></figure>\n<h4 id=\"踩的坑\"><a href=\"#踩的坑\" class=\"headerlink\" title=\"踩的坑\"></a>踩的坑</h4><ul>\n<li>使用执行报错1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes &gt; 1048618 remaining bytes</span><br><span class=\"line\">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)</span><br></pre></td></tr></table></figure>\n<p>错误给出的提示是<code>incorrect broker.version.fallback?</code>，一番google后，找到了问题所在，请看 <a href=\"https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility\" target=\"_blank\" rel=\"noopener\">Broker version compatibility</a> ，librdkafka不同版本的broker对程序的配置要求不同，主要是<code>api.version.request</code> 、<code>broker.version.fallback</code>这两个参数的配置，在<code>pykafka/rdkafka/simple_consumer.py</code>文件中有这样的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ver10 = parse_version(self._broker_version) &gt;= parse_version(&quot;0.10.0&quot;)</span><br><span class=\"line\">...</span><br><span class=\"line\">conf = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;api.version.request&quot;: ver10,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">if not ver10:</span><br><span class=\"line\">    conf[&quot;broker.version.fallback&quot;] = self._broker_version</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>所以在使用时加上了<code>broker_version</code>参数，这个参数需要知道<strong>kafka集群的broker的版本</strong>，这个非常重要！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=&quot;0.8.2&quot;)</span><br></pre></td></tr></table></figure>\n<p>这样使用就没有问题了。</p>\n<p>但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：</p>\n<table>\n<thead>\n<tr>\n<th>pykafka</th>\n<th>pykafka-with-librdkafka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>43.136744260787964</td>\n<td>35.90807628631592</td>\n</tr>\n<tr>\n<td>44.06431531906128</td>\n<td>37.58351707458496</td>\n</tr>\n<tr>\n<td>43.47287678718567</td>\n<td>37.0159432888031</td>\n</tr>\n</tbody>\n</table>\n<p>理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。</p>\n"},{"title":"Linux命令-crontab","date":"2017-04-02T09:59:12.000Z","_content":"\ncrond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。\n\n### Linux下的任务调度\n\nLinux下的任务调度分为两类，系统任务调度和用户任务调度。\n\n#### 系统任务调度\n\n系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。\n\n/etc/crontab文件包括下面几行：\n\n```\n[root@localhost ~]# cat /etc/crontab \nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=\"\"HOME=/\n# run-parts\n51 * * * * root run-parts /etc/cron.hourly\n24 7 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n[root@localhost ~]#\n```\n\n前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。\n\n#### 用户任务调度\n\n用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron 目录中。其文件名与用户名一致。\n\n### 使用者权限文件\n\n| 文件               | 说明                        |\n| ---------------- | ------------------------- |\n| /etc/cron.deny   | 该文件中所列用户不允许使用crontab命令    |\n| /etc/cron.allow  | 该文件中所列用户允许使用crontab命令     |\n| /var/spool/cron/ | 所有用户crontab文件存放的目录，以用户名命名 |\n\n### crontab文件的含义\n\n用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：\n\n```\nminute   hour   day   month   week   command\n```\n\n| 参数      | 说明                               |\n| ------- | -------------------------------- |\n| minute  | 表示分钟，可以是从0到59之间的任何整数             |\n| hour    | 表示小时，可以是从0到23之间的任何整数             |\n| day     | 表示日期，可以是从1到31之间的任何整数             |\n| month   | 表示月份，可以是从1到12之间的任何整数             |\n| week    | 表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日 |\n| command | 要执行的命令，可以是系统命令，也可以是自己编写的脚本文件     |\n\n![2017-4-2165636](/images/2017-4-2 165636.png)\n\n在以上各个字段中，还可以使用以下特殊字符：\n\n星号(\\*)：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作；\n\n逗号(,)：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”；\n\n中杠(-)：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”；\n\n正斜线(/)：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如\\*/10，如果用在minute字段，表示每十分钟执行一次。\n\n### crond服务\n\n安装crontab：\n\n```\nyum install crontabs\n```\n\n服务操作说明：\n\n```\n/sbin/service crond start    //启动服务\n/sbin/service crond stop     //关闭服务\n/sbin/service crond restart  //重启服务\n/sbin/service crond reload   //重新载入配置\n```\n\n查看crontab服务状态：\n\n```\nservice crond status\n```\n\n手动启动crontab服务：\n\n```\nservice crond start\n```\n\n查看crontab服务是否已设置为开机启动，执行命令：\n\n```\nntsysv\n```\n\n加入开机自动启动：\n\n```\nchkconfig –level 35 crond on\n```\n\n### crontab命令详解\n\n#### 命令格式\n\n```\ncrontab [-u user] file\ncrontab [-u user] [ -e | -l | -r ]\n```\n\n#### 命令功能\n\n通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。\n\n#### 命令参数\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| -u user | 用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行 |\n| file    | file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab |\n| -e      | 编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件 |\n| -l      | 显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容 |\n| -r      | 从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件 |\n| -i      | 在删除用户的crontab文件时给确认提示                    |\n\n#### 使用示例\n\n| 示例                          | 命令                                       |\n| --------------------------- | ---------------------------------------- |\n| 每1分钟执行一次command             | \\* \\* \\* \\* \\* command                   |\n| 每小时的第3和第15分钟执行              | 3,15 \\* \\* \\* \\* command                 |\n| 在上午8点到11点的第3和第15分钟执行        | 3,15 8-11 \\* \\* \\* command               |\n| 每隔两天的上午8点到11点的第3和第15分钟执行    | 3,15 8-11 \\*/2 \\* \\* command             |\n| 每个星期一的上午8点到11点的第3和第15分钟执行   | 3,15 8-11 \\* \\* 1 command                |\n| 每晚的21:30重启smb               | 30 21 \\* \\* \\* /etc/init.d/smb restart   |\n| 每月1、10、22日的4 : 45重启smb      | 45 4 1,10,22 \\* \\* /etc/init.d/smb restart |\n| 一月一号的4点重启smb                | 0 4 1 jan \\* /etc/init.d/smb restart     |\n| 每小时执行/etc/cron.hourly目录内的脚本 | 01 \\* \\* \\* \\*  root run-parts /etc/cron.hourly |\n\n### 使用注意事项\n\n#### 注意环境变量问题\n\n有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。\n\n在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。\n\n不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：\n\n- 脚本中涉及文件路径时写全局路径；\n\n- 脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：\n\n  ​\n\n  ```\n  cat start_cbp.sh\n  #!/bin/sh\n  source /etc/profile\n  export RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf\n  /usr/local/jboss-4.0.5/bin/run.sh -c mev &\n  ```\n\n- 当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题，如：\n\n  ```\n  0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh\n  ```\n\n#### 注意清理系统用户的邮件日志\n\n每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。\n\n例如，可以在crontab文件中设置如下形式，忽略日志输出：\n\n```\n0 */3 * * * /usr/local/apache2/apachectl restart >/dev/null 2>&1\n```\n\n“/dev/null 2>&1” 表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。\n\n#### 系统级任务调度与用户级任务调度\n\n系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（**不建议这么做**），但是反过来却不行。\n\nroot用户的任务调度操作可以通过\n\n```\ncrontab –uroot –e\n```\n\n来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。\n\n#### 其他注意事项\n\n新创建的cron 任务，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。当 crontab 突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错\n\n```\ntail -f /var/log/cron\n```\n\n千万别乱运行\n\n```\ncrontab -r\n```\n\n它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n\n在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的\n\n```\ndate '+%Y%m%d'\n```\n\n在crontab里是不会执行的，应该换成\n\n```\ndate '+\\%Y\\%m\\%d'\n```\n\n\n\nRead More: \n\n> [每天一个linux命令（50）：crontab命令](http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html)\n\n","source":"_posts/linuxcrontab.md","raw":"---\ntitle: Linux命令-crontab\ndate: 2017-04-02 17:59:12\ntags:\n - Linux\n - 命令\n - crontab\ncategories:\n - Linux/Unix\n---\n\ncrond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。\n\n### Linux下的任务调度\n\nLinux下的任务调度分为两类，系统任务调度和用户任务调度。\n\n#### 系统任务调度\n\n系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。\n\n/etc/crontab文件包括下面几行：\n\n```\n[root@localhost ~]# cat /etc/crontab \nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=\"\"HOME=/\n# run-parts\n51 * * * * root run-parts /etc/cron.hourly\n24 7 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n[root@localhost ~]#\n```\n\n前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。\n\n#### 用户任务调度\n\n用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron 目录中。其文件名与用户名一致。\n\n### 使用者权限文件\n\n| 文件               | 说明                        |\n| ---------------- | ------------------------- |\n| /etc/cron.deny   | 该文件中所列用户不允许使用crontab命令    |\n| /etc/cron.allow  | 该文件中所列用户允许使用crontab命令     |\n| /var/spool/cron/ | 所有用户crontab文件存放的目录，以用户名命名 |\n\n### crontab文件的含义\n\n用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：\n\n```\nminute   hour   day   month   week   command\n```\n\n| 参数      | 说明                               |\n| ------- | -------------------------------- |\n| minute  | 表示分钟，可以是从0到59之间的任何整数             |\n| hour    | 表示小时，可以是从0到23之间的任何整数             |\n| day     | 表示日期，可以是从1到31之间的任何整数             |\n| month   | 表示月份，可以是从1到12之间的任何整数             |\n| week    | 表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日 |\n| command | 要执行的命令，可以是系统命令，也可以是自己编写的脚本文件     |\n\n![2017-4-2165636](/images/2017-4-2 165636.png)\n\n在以上各个字段中，还可以使用以下特殊字符：\n\n星号(\\*)：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作；\n\n逗号(,)：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”；\n\n中杠(-)：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”；\n\n正斜线(/)：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如\\*/10，如果用在minute字段，表示每十分钟执行一次。\n\n### crond服务\n\n安装crontab：\n\n```\nyum install crontabs\n```\n\n服务操作说明：\n\n```\n/sbin/service crond start    //启动服务\n/sbin/service crond stop     //关闭服务\n/sbin/service crond restart  //重启服务\n/sbin/service crond reload   //重新载入配置\n```\n\n查看crontab服务状态：\n\n```\nservice crond status\n```\n\n手动启动crontab服务：\n\n```\nservice crond start\n```\n\n查看crontab服务是否已设置为开机启动，执行命令：\n\n```\nntsysv\n```\n\n加入开机自动启动：\n\n```\nchkconfig –level 35 crond on\n```\n\n### crontab命令详解\n\n#### 命令格式\n\n```\ncrontab [-u user] file\ncrontab [-u user] [ -e | -l | -r ]\n```\n\n#### 命令功能\n\n通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。\n\n#### 命令参数\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| -u user | 用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行 |\n| file    | file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab |\n| -e      | 编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件 |\n| -l      | 显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容 |\n| -r      | 从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件 |\n| -i      | 在删除用户的crontab文件时给确认提示                    |\n\n#### 使用示例\n\n| 示例                          | 命令                                       |\n| --------------------------- | ---------------------------------------- |\n| 每1分钟执行一次command             | \\* \\* \\* \\* \\* command                   |\n| 每小时的第3和第15分钟执行              | 3,15 \\* \\* \\* \\* command                 |\n| 在上午8点到11点的第3和第15分钟执行        | 3,15 8-11 \\* \\* \\* command               |\n| 每隔两天的上午8点到11点的第3和第15分钟执行    | 3,15 8-11 \\*/2 \\* \\* command             |\n| 每个星期一的上午8点到11点的第3和第15分钟执行   | 3,15 8-11 \\* \\* 1 command                |\n| 每晚的21:30重启smb               | 30 21 \\* \\* \\* /etc/init.d/smb restart   |\n| 每月1、10、22日的4 : 45重启smb      | 45 4 1,10,22 \\* \\* /etc/init.d/smb restart |\n| 一月一号的4点重启smb                | 0 4 1 jan \\* /etc/init.d/smb restart     |\n| 每小时执行/etc/cron.hourly目录内的脚本 | 01 \\* \\* \\* \\*  root run-parts /etc/cron.hourly |\n\n### 使用注意事项\n\n#### 注意环境变量问题\n\n有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。\n\n在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。\n\n不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：\n\n- 脚本中涉及文件路径时写全局路径；\n\n- 脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：\n\n  ​\n\n  ```\n  cat start_cbp.sh\n  #!/bin/sh\n  source /etc/profile\n  export RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf\n  /usr/local/jboss-4.0.5/bin/run.sh -c mev &\n  ```\n\n- 当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题，如：\n\n  ```\n  0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh\n  ```\n\n#### 注意清理系统用户的邮件日志\n\n每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。\n\n例如，可以在crontab文件中设置如下形式，忽略日志输出：\n\n```\n0 */3 * * * /usr/local/apache2/apachectl restart >/dev/null 2>&1\n```\n\n“/dev/null 2>&1” 表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。\n\n#### 系统级任务调度与用户级任务调度\n\n系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（**不建议这么做**），但是反过来却不行。\n\nroot用户的任务调度操作可以通过\n\n```\ncrontab –uroot –e\n```\n\n来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。\n\n#### 其他注意事项\n\n新创建的cron 任务，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。当 crontab 突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错\n\n```\ntail -f /var/log/cron\n```\n\n千万别乱运行\n\n```\ncrontab -r\n```\n\n它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n\n在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的\n\n```\ndate '+%Y%m%d'\n```\n\n在crontab里是不会执行的，应该换成\n\n```\ndate '+\\%Y\\%m\\%d'\n```\n\n\n\nRead More: \n\n> [每天一个linux命令（50）：crontab命令](http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html)\n\n","slug":"linuxcrontab","published":1,"updated":"2020-10-25T06:43:32.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6d009bmolco5qxkur5","content":"<p>crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>\n<h3 id=\"Linux下的任务调度\"><a href=\"#Linux下的任务调度\" class=\"headerlink\" title=\"Linux下的任务调度\"></a>Linux下的任务调度</h3><p>Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p>\n<h4 id=\"系统任务调度\"><a href=\"#系统任务调度\" class=\"headerlink\" title=\"系统任务调度\"></a>系统任务调度</h4><p>系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p>\n<p>/etc/crontab文件包括下面几行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/crontab </span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=&quot;&quot;HOME=/</span><br><span class=\"line\"># run-parts</span><br><span class=\"line\">51 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\">24 7 * * * root run-parts /etc/cron.daily</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly</span><br><span class=\"line\">[root@localhost ~]#</span><br></pre></td></tr></table></figure>\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<h4 id=\"用户任务调度\"><a href=\"#用户任务调度\" class=\"headerlink\" title=\"用户任务调度\"></a>用户任务调度</h4><p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron 目录中。其文件名与用户名一致。</p>\n<h3 id=\"使用者权限文件\"><a href=\"#使用者权限文件\" class=\"headerlink\" title=\"使用者权限文件\"></a>使用者权限文件</h3><table>\n<thead>\n<tr>\n<th>文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/etc/cron.deny</td>\n<td>该文件中所列用户不允许使用crontab命令</td>\n</tr>\n<tr>\n<td>/etc/cron.allow</td>\n<td>该文件中所列用户允许使用crontab命令</td>\n</tr>\n<tr>\n<td>/var/spool/cron/</td>\n<td>所有用户crontab文件存放的目录，以用户名命名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"crontab文件的含义\"><a href=\"#crontab文件的含义\" class=\"headerlink\" title=\"crontab文件的含义\"></a>crontab文件的含义</h3><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minute   hour   day   month   week   command</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>minute</td>\n<td>表示分钟，可以是从0到59之间的任何整数</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>表示小时，可以是从0到23之间的任何整数</td>\n</tr>\n<tr>\n<td>day</td>\n<td>表示日期，可以是从1到31之间的任何整数</td>\n</tr>\n<tr>\n<td>month</td>\n<td>表示月份，可以是从1到12之间的任何整数</td>\n</tr>\n<tr>\n<td>week</td>\n<td>表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日</td>\n</tr>\n<tr>\n<td>command</td>\n<td>要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/2017-4-2 165636.png\" alt=\"2017-4-2165636\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>星号(*)：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作；</p>\n<p>逗号(,)：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”；</p>\n<p>中杠(-)：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”；</p>\n<p>正斜线(/)：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p>\n<h3 id=\"crond服务\"><a href=\"#crond服务\" class=\"headerlink\" title=\"crond服务\"></a>crond服务</h3><p>安装crontab：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<p>服务操作说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/service crond start    //启动服务</span><br><span class=\"line\">/sbin/service crond stop     //关闭服务</span><br><span class=\"line\">/sbin/service crond restart  //重启服务</span><br><span class=\"line\">/sbin/service crond reload   //重新载入配置</span><br></pre></td></tr></table></figure>\n<p>查看crontab服务状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond status</span><br></pre></td></tr></table></figure>\n<p>手动启动crontab服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br></pre></td></tr></table></figure>\n<p>查看crontab服务是否已设置为开机启动，执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntsysv</span><br></pre></td></tr></table></figure>\n<p>加入开机自动启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure>\n<h3 id=\"crontab命令详解\"><a href=\"#crontab命令详解\" class=\"headerlink\" title=\"crontab命令详解\"></a>crontab命令详解</h3><h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab [-u user] file</span><br><span class=\"line\">crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-u user</td>\n<td>用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行</td>\n</tr>\n<tr>\n<td>file</td>\n<td>file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>在删除用户的crontab文件时给确认提示</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><table>\n<thead>\n<tr>\n<th>示例</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>每1分钟执行一次command</td>\n<td>* * * * * command</td>\n</tr>\n<tr>\n<td>每小时的第3和第15分钟执行</td>\n<td>3,15 * * * * command</td>\n</tr>\n<tr>\n<td>在上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 * * * command</td>\n</tr>\n<tr>\n<td>每隔两天的上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 */2 * * command</td>\n</tr>\n<tr>\n<td>每个星期一的上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 * * 1 command</td>\n</tr>\n<tr>\n<td>每晚的21:30重启smb</td>\n<td>30 21 * * * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>每月1、10、22日的4 : 45重启smb</td>\n<td>45 4 1,10,22 * * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>一月一号的4点重启smb</td>\n<td>0 4 1 jan * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>每小时执行/etc/cron.hourly目录内的脚本</td>\n<td>01 * * * *  root run-parts /etc/cron.hourly</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><h4 id=\"注意环境变量问题\"><a href=\"#注意环境变量问题\" class=\"headerlink\" title=\"注意环境变量问题\"></a>注意环境变量问题</h4><p>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p>\n<p>在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p>\n<p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p>\n<ul>\n<li><p>脚本中涉及文件路径时写全局路径；</p>\n</li>\n<li><p>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat start_cbp.sh</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">export RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf</span><br><span class=\"line\">/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意清理系统用户的邮件日志\"><a href=\"#注意清理系统用户的邮件日志\" class=\"headerlink\" title=\"注意清理系统用户的邮件日志\"></a>注意清理系统用户的邮件日志</h4><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。</p>\n<p>例如，可以在crontab文件中设置如下形式，忽略日志输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>“/dev/null 2&gt;&amp;1” 表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。</p>\n<h4 id=\"系统级任务调度与用户级任务调度\"><a href=\"#系统级任务调度与用户级任务调度\" class=\"headerlink\" title=\"系统级任务调度与用户级任务调度\"></a>系统级任务调度与用户级任务调度</h4><p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（<strong>不建议这么做</strong>），但是反过来却不行。</p>\n<p>root用户的任务调度操作可以通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab –uroot –e</span><br></pre></td></tr></table></figure>\n<p>来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p>\n<h4 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h4><p>新创建的cron 任务，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。当 crontab 突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/cron</span><br></pre></td></tr></table></figure>\n<p>千万别乱运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -r</span><br></pre></td></tr></table></figure>\n<p>它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p>\n<p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &apos;+%Y%m%d&apos;</span><br></pre></td></tr></table></figure>\n<p>在crontab里是不会执行的，应该换成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &apos;+\\%Y\\%m\\%d&apos;</span><br></pre></td></tr></table></figure>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（50）：crontab命令</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>\n<h3 id=\"Linux下的任务调度\"><a href=\"#Linux下的任务调度\" class=\"headerlink\" title=\"Linux下的任务调度\"></a>Linux下的任务调度</h3><p>Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p>\n<h4 id=\"系统任务调度\"><a href=\"#系统任务调度\" class=\"headerlink\" title=\"系统任务调度\"></a>系统任务调度</h4><p>系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p>\n<p>/etc/crontab文件包括下面几行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/crontab </span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=&quot;&quot;HOME=/</span><br><span class=\"line\"># run-parts</span><br><span class=\"line\">51 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\">24 7 * * * root run-parts /etc/cron.daily</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly</span><br><span class=\"line\">[root@localhost ~]#</span><br></pre></td></tr></table></figure>\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<h4 id=\"用户任务调度\"><a href=\"#用户任务调度\" class=\"headerlink\" title=\"用户任务调度\"></a>用户任务调度</h4><p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron 目录中。其文件名与用户名一致。</p>\n<h3 id=\"使用者权限文件\"><a href=\"#使用者权限文件\" class=\"headerlink\" title=\"使用者权限文件\"></a>使用者权限文件</h3><table>\n<thead>\n<tr>\n<th>文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/etc/cron.deny</td>\n<td>该文件中所列用户不允许使用crontab命令</td>\n</tr>\n<tr>\n<td>/etc/cron.allow</td>\n<td>该文件中所列用户允许使用crontab命令</td>\n</tr>\n<tr>\n<td>/var/spool/cron/</td>\n<td>所有用户crontab文件存放的目录，以用户名命名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"crontab文件的含义\"><a href=\"#crontab文件的含义\" class=\"headerlink\" title=\"crontab文件的含义\"></a>crontab文件的含义</h3><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minute   hour   day   month   week   command</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>minute</td>\n<td>表示分钟，可以是从0到59之间的任何整数</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>表示小时，可以是从0到23之间的任何整数</td>\n</tr>\n<tr>\n<td>day</td>\n<td>表示日期，可以是从1到31之间的任何整数</td>\n</tr>\n<tr>\n<td>month</td>\n<td>表示月份，可以是从1到12之间的任何整数</td>\n</tr>\n<tr>\n<td>week</td>\n<td>表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日</td>\n</tr>\n<tr>\n<td>command</td>\n<td>要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/2017-4-2 165636.png\" alt=\"2017-4-2165636\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>星号(*)：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作；</p>\n<p>逗号(,)：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”；</p>\n<p>中杠(-)：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”；</p>\n<p>正斜线(/)：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p>\n<h3 id=\"crond服务\"><a href=\"#crond服务\" class=\"headerlink\" title=\"crond服务\"></a>crond服务</h3><p>安装crontab：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<p>服务操作说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/service crond start    //启动服务</span><br><span class=\"line\">/sbin/service crond stop     //关闭服务</span><br><span class=\"line\">/sbin/service crond restart  //重启服务</span><br><span class=\"line\">/sbin/service crond reload   //重新载入配置</span><br></pre></td></tr></table></figure>\n<p>查看crontab服务状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond status</span><br></pre></td></tr></table></figure>\n<p>手动启动crontab服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br></pre></td></tr></table></figure>\n<p>查看crontab服务是否已设置为开机启动，执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntsysv</span><br></pre></td></tr></table></figure>\n<p>加入开机自动启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure>\n<h3 id=\"crontab命令详解\"><a href=\"#crontab命令详解\" class=\"headerlink\" title=\"crontab命令详解\"></a>crontab命令详解</h3><h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab [-u user] file</span><br><span class=\"line\">crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-u user</td>\n<td>用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行</td>\n</tr>\n<tr>\n<td>file</td>\n<td>file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>在删除用户的crontab文件时给确认提示</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><table>\n<thead>\n<tr>\n<th>示例</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>每1分钟执行一次command</td>\n<td>* * * * * command</td>\n</tr>\n<tr>\n<td>每小时的第3和第15分钟执行</td>\n<td>3,15 * * * * command</td>\n</tr>\n<tr>\n<td>在上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 * * * command</td>\n</tr>\n<tr>\n<td>每隔两天的上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 */2 * * command</td>\n</tr>\n<tr>\n<td>每个星期一的上午8点到11点的第3和第15分钟执行</td>\n<td>3,15 8-11 * * 1 command</td>\n</tr>\n<tr>\n<td>每晚的21:30重启smb</td>\n<td>30 21 * * * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>每月1、10、22日的4 : 45重启smb</td>\n<td>45 4 1,10,22 * * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>一月一号的4点重启smb</td>\n<td>0 4 1 jan * /etc/init.d/smb restart</td>\n</tr>\n<tr>\n<td>每小时执行/etc/cron.hourly目录内的脚本</td>\n<td>01 * * * *  root run-parts /etc/cron.hourly</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><h4 id=\"注意环境变量问题\"><a href=\"#注意环境变量问题\" class=\"headerlink\" title=\"注意环境变量问题\"></a>注意环境变量问题</h4><p>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p>\n<p>在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p>\n<p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p>\n<ul>\n<li><p>脚本中涉及文件路径时写全局路径；</p>\n</li>\n<li><p>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p>\n<p>​</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat start_cbp.sh</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">export RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf</span><br><span class=\"line\">/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意清理系统用户的邮件日志\"><a href=\"#注意清理系统用户的邮件日志\" class=\"headerlink\" title=\"注意清理系统用户的邮件日志\"></a>注意清理系统用户的邮件日志</h4><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。</p>\n<p>例如，可以在crontab文件中设置如下形式，忽略日志输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>“/dev/null 2&gt;&amp;1” 表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。</p>\n<h4 id=\"系统级任务调度与用户级任务调度\"><a href=\"#系统级任务调度与用户级任务调度\" class=\"headerlink\" title=\"系统级任务调度与用户级任务调度\"></a>系统级任务调度与用户级任务调度</h4><p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（<strong>不建议这么做</strong>），但是反过来却不行。</p>\n<p>root用户的任务调度操作可以通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab –uroot –e</span><br></pre></td></tr></table></figure>\n<p>来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p>\n<h4 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h4><p>新创建的cron 任务，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。当 crontab 突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /var/log/cron</span><br></pre></td></tr></table></figure>\n<p>千万别乱运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -r</span><br></pre></td></tr></table></figure>\n<p>它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p>\n<p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &apos;+%Y%m%d&apos;</span><br></pre></td></tr></table></figure>\n<p>在crontab里是不会执行的，应该换成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &apos;+\\%Y\\%m\\%d&apos;</span><br></pre></td></tr></table></figure>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（50）：crontab命令</a></p>\n</blockquote>\n"},{"title":"Linux命令-ps","date":"2018-01-02T14:38:35.000Z","_content":"\nLinux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。\n\n要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。\n\n#### Linux上的进程状态\n\n- 运行（正在运行或在运行队列中等待）\n- 中断（休眠中，受阻，在等待某个条件的形成或接受到信号）\n- 不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）\n- 僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）\n- 停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）\n\n#### ps命令标识进程状态码\n\n- R: 运行\n- S: 中断\n- D: 不可中断\n- Z: 僵死\n- T: 停止\n\n#### 命令格式\n\n```\nps [参数]\n```\n\n#### 命令功能\n\nps命令用来显示当前进程的状态。\n\n#### 命令参数\n\n| 参数            | 说明             |\n| ------------- | -------------- |\n| a             | 显示所有进程         |\n| -a            | 显示同一终端下的所有程序   |\n| -A            | 显示所有进程         |\n| c             | 显示进程的真实名称      |\n| -N            | 反向选择           |\n| -e            | 等于\"-A\"         |\n| e             | 显示环境变量         |\n| f             | 显示程序间的关系       |\n| -H            | 显示树状结构         |\n| r             | 显示当前终端的进程      |\n| T             | 显示当前终端的所有程序    |\n| u             | 指定用户的所有进程      |\n| -au           | 显示较详细的资讯       |\n| -aux          | 显示所有包含其他使用者的行程 |\n| -C <命令>d      | 列出指定命令的状况      |\n| --lines <行数>  | 每页显示的行数        |\n| --width <字符数> | 每页显示的字符数       |\n| --help        | 显示帮助信息         |\n| --version     | 显示版本显示         |\n\n#### 使用示例\n\n- ps -A\n\n```\nPID TTY          TIME CMD\n    1 ?        00:00:16 init\n    2 ?        00:00:00 kthreadd\n    3 ?        00:00:21 migration/0\n    4 ?        00:00:36 ksoftirqd/0\n    5 ?        00:00:00 stopper/0\n    6 ?        00:00:08 watchdog/0\n    7 ?        00:00:21 migration/1\n    8 ?        00:00:00 stopper/1\n    9 ?        00:00:35 ksoftirqd/1\n   10 ?        00:00:07 watchdog/1\n   11 ?        00:00:21 migration/2\n   12 ?        00:00:00 stopper/2\n   13 ?        00:00:34 ksoftirqd/2\n```\n\n显示所有进程\n\n- ps -u root\n\n```\nPID TTY          TIME CMD\n    1 ?        00:00:16 init\n    2 ?        00:00:00 kthreadd\n    3 ?        00:00:21 migration/0\n    4 ?        00:00:36 ksoftirqd/0\n    5 ?        00:00:00 stopper/0\n    6 ?        00:00:08 watchdog/0\n    7 ?        00:00:21 migration/1\n    8 ?        00:00:00 stopper/1\n    9 ?        00:00:35 ksoftirqd/1\n   10 ?        00:00:07 watchdog/1\n```\n\n显示特定用户的进程信息\n\n- ps -ef\n\n```\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot     12426 10831  0 16:47 pts/0    00:00:00 ps -ef\nroot     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\nroot     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master\nroot     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/\nroot     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater\nroot     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d\nroot     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py\n```\n\n显示所有进程信息（包括命令行）\n\n- ps -ef | grep python\n\n```\nroot      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021\nroot      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020\nroot      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022\nroot      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py\n850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py\nroot     12567 10831  0 16:48 pts/0    00:00:00 grep python\nroot     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\nroot     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py\nroot     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py\nroot     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py\nroot     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py\nroot     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py\nroot     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py\n```\n\n查找特定进程\n\n- ps aux\n\n```\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init\nroot         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]\nroot         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]\nroot         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]\nroot         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]\nroot         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]\nroot         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]\nroot        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]\nroot        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]\n......\nroot      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]\nroot      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021\nroot      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020\nroot      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022\ndbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system\nroot      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid\n68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald\nroot      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner\nroot      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0\n68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket\nroot      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon\nroot      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master\npostfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u\nroot      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd\n......\nroot     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 \nroot     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash\nroot     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux\nroot     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py\nroot     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master\nroot     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l\nroot     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater\nroot     17973  0.0  0.0  11540   676 ?        S<    2017   0:00 /sbin/udevd -d\n......\nroot     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/\nroot     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops \nroot     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]\nroot     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]\nroot     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]\nroot     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]\nroot     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      \nroot     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py\n```\n\n列出目前所有正在内存中的进程\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| USER    | 进程所属账号                                   |\n| PID     | 进程id号                                    |\n| %CPU    | 进程所占CPU资源百分比                             |\n| %MEM    | 进程所占物理内存百分比                              |\n| VSZ     | 进程所占虚拟内存大小                               |\n| RSS     | 进程所占固定内存大小                               |\n| TTY     | 进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序 |\n| STAT    | 进程当前状态                                   |\n| START   | 进程被触发启动的时间                               |\n| TIME    | 进程实际使用CPU的时间                             |\n| COMMAND | 进程的启动指令                                  |\n\n- ps aux | egrep '(cron|syslog)'\n\n```\nroot      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond\nroot     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)\nroot     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5\n```\n\n显示与 cron、syslog服务有关进程的PID号\n\n- ps -aux | more : 分页查看\n- ps -aux > ps001.txt : 输出到文件中\n- ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段\n\n\n\nRead More：\n\n> [每天一个linux命令（41）：ps命令](http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html) [Linux ps命令](http://www.runoob.com/linux/linux-comm-ps.html)","source":"_posts/linuxps.md","raw":"---\ntitle: Linux命令-ps\ndate: 2018-01-02 22:38:35\ntags:\n - Linux\n - 命令\n - ps\ncategories:\n - Linux/Unix\n---\n\nLinux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。\n\n要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。\n\n#### Linux上的进程状态\n\n- 运行（正在运行或在运行队列中等待）\n- 中断（休眠中，受阻，在等待某个条件的形成或接受到信号）\n- 不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）\n- 僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）\n- 停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）\n\n#### ps命令标识进程状态码\n\n- R: 运行\n- S: 中断\n- D: 不可中断\n- Z: 僵死\n- T: 停止\n\n#### 命令格式\n\n```\nps [参数]\n```\n\n#### 命令功能\n\nps命令用来显示当前进程的状态。\n\n#### 命令参数\n\n| 参数            | 说明             |\n| ------------- | -------------- |\n| a             | 显示所有进程         |\n| -a            | 显示同一终端下的所有程序   |\n| -A            | 显示所有进程         |\n| c             | 显示进程的真实名称      |\n| -N            | 反向选择           |\n| -e            | 等于\"-A\"         |\n| e             | 显示环境变量         |\n| f             | 显示程序间的关系       |\n| -H            | 显示树状结构         |\n| r             | 显示当前终端的进程      |\n| T             | 显示当前终端的所有程序    |\n| u             | 指定用户的所有进程      |\n| -au           | 显示较详细的资讯       |\n| -aux          | 显示所有包含其他使用者的行程 |\n| -C <命令>d      | 列出指定命令的状况      |\n| --lines <行数>  | 每页显示的行数        |\n| --width <字符数> | 每页显示的字符数       |\n| --help        | 显示帮助信息         |\n| --version     | 显示版本显示         |\n\n#### 使用示例\n\n- ps -A\n\n```\nPID TTY          TIME CMD\n    1 ?        00:00:16 init\n    2 ?        00:00:00 kthreadd\n    3 ?        00:00:21 migration/0\n    4 ?        00:00:36 ksoftirqd/0\n    5 ?        00:00:00 stopper/0\n    6 ?        00:00:08 watchdog/0\n    7 ?        00:00:21 migration/1\n    8 ?        00:00:00 stopper/1\n    9 ?        00:00:35 ksoftirqd/1\n   10 ?        00:00:07 watchdog/1\n   11 ?        00:00:21 migration/2\n   12 ?        00:00:00 stopper/2\n   13 ?        00:00:34 ksoftirqd/2\n```\n\n显示所有进程\n\n- ps -u root\n\n```\nPID TTY          TIME CMD\n    1 ?        00:00:16 init\n    2 ?        00:00:00 kthreadd\n    3 ?        00:00:21 migration/0\n    4 ?        00:00:36 ksoftirqd/0\n    5 ?        00:00:00 stopper/0\n    6 ?        00:00:08 watchdog/0\n    7 ?        00:00:21 migration/1\n    8 ?        00:00:00 stopper/1\n    9 ?        00:00:35 ksoftirqd/1\n   10 ?        00:00:07 watchdog/1\n```\n\n显示特定用户的进程信息\n\n- ps -ef\n\n```\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot     12426 10831  0 16:47 pts/0    00:00:00 ps -ef\nroot     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\nroot     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master\nroot     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/\nroot     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater\nroot     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d\nroot     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py\n```\n\n显示所有进程信息（包括命令行）\n\n- ps -ef | grep python\n\n```\nroot      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021\nroot      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020\nroot      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022\nroot      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py\n850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py\nroot     12567 10831  0 16:48 pts/0    00:00:00 grep python\nroot     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\nroot     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py\nroot     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py\nroot     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py\nroot     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py\nroot     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py\nroot     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py\n```\n\n查找特定进程\n\n- ps aux\n\n```\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init\nroot         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]\nroot         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]\nroot         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]\nroot         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]\nroot         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]\nroot         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]\nroot        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]\nroot        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]\n......\nroot      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]\nroot      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021\nroot      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020\nroot      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022\ndbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system\nroot      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid\n68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald\nroot      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner\nroot      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0\n68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket\nroot      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon\nroot      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master\npostfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u\nroot      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd\n......\nroot     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 \nroot     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash\nroot     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux\nroot     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py\nroot     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py\nroot     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master\nroot     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l\nroot     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater\nroot     17973  0.0  0.0  11540   676 ?        S<    2017   0:00 /sbin/udevd -d\n......\nroot     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/\nroot     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops \nroot     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]\nroot     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]\nroot     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]\nroot     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]\nroot     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      \nroot     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py\n```\n\n列出目前所有正在内存中的进程\n\n| 参数      | 说明                                       |\n| ------- | ---------------------------------------- |\n| USER    | 进程所属账号                                   |\n| PID     | 进程id号                                    |\n| %CPU    | 进程所占CPU资源百分比                             |\n| %MEM    | 进程所占物理内存百分比                              |\n| VSZ     | 进程所占虚拟内存大小                               |\n| RSS     | 进程所占固定内存大小                               |\n| TTY     | 进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序 |\n| STAT    | 进程当前状态                                   |\n| START   | 进程被触发启动的时间                               |\n| TIME    | 进程实际使用CPU的时间                             |\n| COMMAND | 进程的启动指令                                  |\n\n- ps aux | egrep '(cron|syslog)'\n\n```\nroot      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond\nroot     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)\nroot     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5\n```\n\n显示与 cron、syslog服务有关进程的PID号\n\n- ps -aux | more : 分页查看\n- ps -aux > ps001.txt : 输出到文件中\n- ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段\n\n\n\nRead More：\n\n> [每天一个linux命令（41）：ps命令](http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html) [Linux ps命令](http://www.runoob.com/linux/linux-comm-ps.html)","slug":"linuxps","published":1,"updated":"2020-10-25T06:43:32.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6f009cmolcofz4fhd0","content":"<p>Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p>\n<p>要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p>\n<h4 id=\"Linux上的进程状态\"><a href=\"#Linux上的进程状态\" class=\"headerlink\" title=\"Linux上的进程状态\"></a>Linux上的进程状态</h4><ul>\n<li>运行（正在运行或在运行队列中等待）</li>\n<li>中断（休眠中，受阻，在等待某个条件的形成或接受到信号）</li>\n<li>不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）</li>\n<li>僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）</li>\n<li>停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）</li>\n</ul>\n<h4 id=\"ps命令标识进程状态码\"><a href=\"#ps命令标识进程状态码\" class=\"headerlink\" title=\"ps命令标识进程状态码\"></a>ps命令标识进程状态码</h4><ul>\n<li>R: 运行</li>\n<li>S: 中断</li>\n<li>D: 不可中断</li>\n<li>Z: 僵死</li>\n<li>T: 停止</li>\n</ul>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [参数]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>ps命令用来显示当前进程的状态。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>显示所有进程</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>显示同一终端下的所有程序</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>显示所有进程</td>\n</tr>\n<tr>\n<td>c</td>\n<td>显示进程的真实名称</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>反向选择</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>等于”-A”</td>\n</tr>\n<tr>\n<td>e</td>\n<td>显示环境变量</td>\n</tr>\n<tr>\n<td>f</td>\n<td>显示程序间的关系</td>\n</tr>\n<tr>\n<td>-H</td>\n<td>显示树状结构</td>\n</tr>\n<tr>\n<td>r</td>\n<td>显示当前终端的进程</td>\n</tr>\n<tr>\n<td>T</td>\n<td>显示当前终端的所有程序</td>\n</tr>\n<tr>\n<td>u</td>\n<td>指定用户的所有进程</td>\n</tr>\n<tr>\n<td>-au</td>\n<td>显示较详细的资讯</td>\n</tr>\n<tr>\n<td>-aux</td>\n<td>显示所有包含其他使用者的行程</td>\n</tr>\n<tr>\n<td>-C &lt;命令&gt;d</td>\n<td>列出指定命令的状况</td>\n</tr>\n<tr>\n<td>–lines &lt;行数&gt;</td>\n<td>每页显示的行数</td>\n</tr>\n<tr>\n<td>–width &lt;字符数&gt;</td>\n<td>每页显示的字符数</td>\n</tr>\n<tr>\n<td>–help</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本显示</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ps -A</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:16 init</span><br><span class=\"line\">    2 ?        00:00:00 kthreadd</span><br><span class=\"line\">    3 ?        00:00:21 migration/0</span><br><span class=\"line\">    4 ?        00:00:36 ksoftirqd/0</span><br><span class=\"line\">    5 ?        00:00:00 stopper/0</span><br><span class=\"line\">    6 ?        00:00:08 watchdog/0</span><br><span class=\"line\">    7 ?        00:00:21 migration/1</span><br><span class=\"line\">    8 ?        00:00:00 stopper/1</span><br><span class=\"line\">    9 ?        00:00:35 ksoftirqd/1</span><br><span class=\"line\">   10 ?        00:00:07 watchdog/1</span><br><span class=\"line\">   11 ?        00:00:21 migration/2</span><br><span class=\"line\">   12 ?        00:00:00 stopper/2</span><br><span class=\"line\">   13 ?        00:00:34 ksoftirqd/2</span><br></pre></td></tr></table></figure>\n<p>显示所有进程</p>\n<ul>\n<li>ps -u root</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:16 init</span><br><span class=\"line\">    2 ?        00:00:00 kthreadd</span><br><span class=\"line\">    3 ?        00:00:21 migration/0</span><br><span class=\"line\">    4 ?        00:00:36 ksoftirqd/0</span><br><span class=\"line\">    5 ?        00:00:00 stopper/0</span><br><span class=\"line\">    6 ?        00:00:08 watchdog/0</span><br><span class=\"line\">    7 ?        00:00:21 migration/1</span><br><span class=\"line\">    8 ?        00:00:00 stopper/1</span><br><span class=\"line\">    9 ?        00:00:35 ksoftirqd/1</span><br><span class=\"line\">   10 ?        00:00:07 watchdog/1</span><br></pre></td></tr></table></figure>\n<p>显示特定用户的进程信息</p>\n<ul>\n<li>ps -ef</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root     12426 10831  0 16:47 pts/0    00:00:00 ps -ef</span><br><span class=\"line\">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</span><br><span class=\"line\">root     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/</span><br><span class=\"line\">root     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</span><br><span class=\"line\">root     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d</span><br><span class=\"line\">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</span><br></pre></td></tr></table></figure>\n<p>显示所有进程信息（包括命令行）</p>\n<ul>\n<li>ps -ef | grep python</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">root      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py</span><br><span class=\"line\">850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py</span><br><span class=\"line\">root     12567 10831  0 16:48 pts/0    00:00:00 grep python</span><br><span class=\"line\">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</span><br><span class=\"line\">root     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py</span><br><span class=\"line\">root     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py</span><br><span class=\"line\">root     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py</span><br><span class=\"line\">root     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py</span><br><span class=\"line\">root     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</span><br></pre></td></tr></table></figure>\n<p>查找特定进程</p>\n<ul>\n<li>ps aux</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">root         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init</span><br><span class=\"line\">root         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]</span><br><span class=\"line\">root         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]</span><br><span class=\"line\">root         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]</span><br><span class=\"line\">root         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]</span><br><span class=\"line\">root         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]</span><br><span class=\"line\">root         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]</span><br><span class=\"line\">root         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]</span><br><span class=\"line\">root         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]</span><br><span class=\"line\">root        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]</span><br><span class=\"line\">root        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]</span><br><span class=\"line\">......</span><br><span class=\"line\">root      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]</span><br><span class=\"line\">root      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">dbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system</span><br><span class=\"line\">root      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid</span><br><span class=\"line\">68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald</span><br><span class=\"line\">root      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner</span><br><span class=\"line\">root      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0</span><br><span class=\"line\">68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket</span><br><span class=\"line\">root      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon</span><br><span class=\"line\">root      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master</span><br><span class=\"line\">postfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u</span><br><span class=\"line\">root      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd</span><br><span class=\"line\">......</span><br><span class=\"line\">root     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 </span><br><span class=\"line\">root     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash</span><br><span class=\"line\">root     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux</span><br><span class=\"line\">root     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</span><br><span class=\"line\">root     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l</span><br><span class=\"line\">root     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</span><br><span class=\"line\">root     17973  0.0  0.0  11540   676 ?        S&lt;    2017   0:00 /sbin/udevd -d</span><br><span class=\"line\">......</span><br><span class=\"line\">root     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/</span><br><span class=\"line\">root     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops </span><br><span class=\"line\">root     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]</span><br><span class=\"line\">root     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]</span><br><span class=\"line\">root     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]</span><br><span class=\"line\">root     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]</span><br><span class=\"line\">root     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      </span><br><span class=\"line\">root     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</span><br></pre></td></tr></table></figure>\n<p>列出目前所有正在内存中的进程</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>进程所属账号</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程id号</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>进程所占CPU资源百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>进程所占物理内存百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>进程所占虚拟内存大小</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>进程所占固定内存大小</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>进程当前状态</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程被触发启动的时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>进程实际使用CPU的时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程的启动指令</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ps aux | egrep ‘(cron|syslog)’</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond</span><br><span class=\"line\">root     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)</span><br><span class=\"line\">root     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5</span><br></pre></td></tr></table></figure>\n<p>显示与 cron、syslog服务有关进程的PID号</p>\n<ul>\n<li>ps -aux | more : 分页查看</li>\n<li>ps -aux &gt; ps001.txt : 输出到文件中</li>\n<li>ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段</li>\n</ul>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（41）：ps命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ps.html\" target=\"_blank\" rel=\"noopener\">Linux ps命令</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p>\n<p>要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p>\n<h4 id=\"Linux上的进程状态\"><a href=\"#Linux上的进程状态\" class=\"headerlink\" title=\"Linux上的进程状态\"></a>Linux上的进程状态</h4><ul>\n<li>运行（正在运行或在运行队列中等待）</li>\n<li>中断（休眠中，受阻，在等待某个条件的形成或接受到信号）</li>\n<li>不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）</li>\n<li>僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）</li>\n<li>停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）</li>\n</ul>\n<h4 id=\"ps命令标识进程状态码\"><a href=\"#ps命令标识进程状态码\" class=\"headerlink\" title=\"ps命令标识进程状态码\"></a>ps命令标识进程状态码</h4><ul>\n<li>R: 运行</li>\n<li>S: 中断</li>\n<li>D: 不可中断</li>\n<li>Z: 僵死</li>\n<li>T: 停止</li>\n</ul>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [参数]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>ps命令用来显示当前进程的状态。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>显示所有进程</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>显示同一终端下的所有程序</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>显示所有进程</td>\n</tr>\n<tr>\n<td>c</td>\n<td>显示进程的真实名称</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>反向选择</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>等于”-A”</td>\n</tr>\n<tr>\n<td>e</td>\n<td>显示环境变量</td>\n</tr>\n<tr>\n<td>f</td>\n<td>显示程序间的关系</td>\n</tr>\n<tr>\n<td>-H</td>\n<td>显示树状结构</td>\n</tr>\n<tr>\n<td>r</td>\n<td>显示当前终端的进程</td>\n</tr>\n<tr>\n<td>T</td>\n<td>显示当前终端的所有程序</td>\n</tr>\n<tr>\n<td>u</td>\n<td>指定用户的所有进程</td>\n</tr>\n<tr>\n<td>-au</td>\n<td>显示较详细的资讯</td>\n</tr>\n<tr>\n<td>-aux</td>\n<td>显示所有包含其他使用者的行程</td>\n</tr>\n<tr>\n<td>-C &lt;命令&gt;d</td>\n<td>列出指定命令的状况</td>\n</tr>\n<tr>\n<td>–lines &lt;行数&gt;</td>\n<td>每页显示的行数</td>\n</tr>\n<tr>\n<td>–width &lt;字符数&gt;</td>\n<td>每页显示的字符数</td>\n</tr>\n<tr>\n<td>–help</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本显示</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>ps -A</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:16 init</span><br><span class=\"line\">    2 ?        00:00:00 kthreadd</span><br><span class=\"line\">    3 ?        00:00:21 migration/0</span><br><span class=\"line\">    4 ?        00:00:36 ksoftirqd/0</span><br><span class=\"line\">    5 ?        00:00:00 stopper/0</span><br><span class=\"line\">    6 ?        00:00:08 watchdog/0</span><br><span class=\"line\">    7 ?        00:00:21 migration/1</span><br><span class=\"line\">    8 ?        00:00:00 stopper/1</span><br><span class=\"line\">    9 ?        00:00:35 ksoftirqd/1</span><br><span class=\"line\">   10 ?        00:00:07 watchdog/1</span><br><span class=\"line\">   11 ?        00:00:21 migration/2</span><br><span class=\"line\">   12 ?        00:00:00 stopper/2</span><br><span class=\"line\">   13 ?        00:00:34 ksoftirqd/2</span><br></pre></td></tr></table></figure>\n<p>显示所有进程</p>\n<ul>\n<li>ps -u root</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:16 init</span><br><span class=\"line\">    2 ?        00:00:00 kthreadd</span><br><span class=\"line\">    3 ?        00:00:21 migration/0</span><br><span class=\"line\">    4 ?        00:00:36 ksoftirqd/0</span><br><span class=\"line\">    5 ?        00:00:00 stopper/0</span><br><span class=\"line\">    6 ?        00:00:08 watchdog/0</span><br><span class=\"line\">    7 ?        00:00:21 migration/1</span><br><span class=\"line\">    8 ?        00:00:00 stopper/1</span><br><span class=\"line\">    9 ?        00:00:35 ksoftirqd/1</span><br><span class=\"line\">   10 ?        00:00:07 watchdog/1</span><br></pre></td></tr></table></figure>\n<p>显示特定用户的进程信息</p>\n<ul>\n<li>ps -ef</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root     12426 10831  0 16:47 pts/0    00:00:00 ps -ef</span><br><span class=\"line\">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</span><br><span class=\"line\">root     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/</span><br><span class=\"line\">root     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</span><br><span class=\"line\">root     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d</span><br><span class=\"line\">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</span><br></pre></td></tr></table></figure>\n<p>显示所有进程信息（包括命令行）</p>\n<ul>\n<li>ps -ef | grep python</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">root      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py</span><br><span class=\"line\">850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py</span><br><span class=\"line\">root     12567 10831  0 16:48 pts/0    00:00:00 grep python</span><br><span class=\"line\">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</span><br><span class=\"line\">root     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py</span><br><span class=\"line\">root     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py</span><br><span class=\"line\">root     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py</span><br><span class=\"line\">root     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py</span><br><span class=\"line\">root     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</span><br></pre></td></tr></table></figure>\n<p>查找特定进程</p>\n<ul>\n<li>ps aux</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">root         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init</span><br><span class=\"line\">root         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]</span><br><span class=\"line\">root         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]</span><br><span class=\"line\">root         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]</span><br><span class=\"line\">root         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]</span><br><span class=\"line\">root         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]</span><br><span class=\"line\">root         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]</span><br><span class=\"line\">root         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]</span><br><span class=\"line\">root         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]</span><br><span class=\"line\">root        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]</span><br><span class=\"line\">root        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]</span><br><span class=\"line\">......</span><br><span class=\"line\">root      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]</span><br><span class=\"line\">root      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">dbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system</span><br><span class=\"line\">root      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid</span><br><span class=\"line\">68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald</span><br><span class=\"line\">root      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner</span><br><span class=\"line\">root      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0</span><br><span class=\"line\">68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket</span><br><span class=\"line\">root      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon</span><br><span class=\"line\">root      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master</span><br><span class=\"line\">postfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u</span><br><span class=\"line\">root      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd</span><br><span class=\"line\">......</span><br><span class=\"line\">root     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 </span><br><span class=\"line\">root     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash</span><br><span class=\"line\">root     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux</span><br><span class=\"line\">root     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py</span><br><span class=\"line\">root     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py</span><br><span class=\"line\">root     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</span><br><span class=\"line\">root     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l</span><br><span class=\"line\">root     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</span><br><span class=\"line\">root     17973  0.0  0.0  11540   676 ?        S&lt;    2017   0:00 /sbin/udevd -d</span><br><span class=\"line\">......</span><br><span class=\"line\">root     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/</span><br><span class=\"line\">root     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops </span><br><span class=\"line\">root     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]</span><br><span class=\"line\">root     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]</span><br><span class=\"line\">root     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]</span><br><span class=\"line\">root     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]</span><br><span class=\"line\">root     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      </span><br><span class=\"line\">root     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</span><br></pre></td></tr></table></figure>\n<p>列出目前所有正在内存中的进程</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>进程所属账号</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程id号</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>进程所占CPU资源百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>进程所占物理内存百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>进程所占虚拟内存大小</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>进程所占固定内存大小</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>进程当前状态</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程被触发启动的时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>进程实际使用CPU的时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程的启动指令</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ps aux | egrep ‘(cron|syslog)’</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond</span><br><span class=\"line\">root     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)</span><br><span class=\"line\">root     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5</span><br></pre></td></tr></table></figure>\n<p>显示与 cron、syslog服务有关进程的PID号</p>\n<ul>\n<li>ps -aux | more : 分页查看</li>\n<li>ps -aux &gt; ps001.txt : 输出到文件中</li>\n<li>ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段</li>\n</ul>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（41）：ps命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ps.html\" target=\"_blank\" rel=\"noopener\">Linux ps命令</a></p>\n</blockquote>\n"},{"title":"Linux命令-tar","date":"2018-01-04T14:15:40.000Z","_content":"\n通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候`tar`命令是必不可少的一个功能强大的工具。\n\ntar命令可以为Linux的文件和目录创建档案。利用`tar`可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。`tar`最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。\n\n首先区分一下打包和压缩的概念：\n\n- 打包是将一大堆文件或目录变成一个总的文件；\n- 压缩是将一个大的文件通过一些压缩算法变成一个小文件。\n\n为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（`tar`命令），然后再用压缩程序进行压缩（`gzip`、`bzip2`命令）。\n\nLinux下最常用的打包程序就是`tar`了，使用`tar`程序打出来的包我们常称为`tar`包，`tar`包文件的命令通常都是以`.tar`结尾的。生成`tar`包后，就可以用其它的程序来进行压缩。\n\n#### 命令格式\n\n```\ntar [参数] [文件]\n```\n\n#### 命令功能\n\n用来压缩和解压文件，`tar`本身不具有压缩功能，是调用压缩功能实现的压缩。\n\n#### 命令参数\n\n| 参数             | 说明                            |\n| -------------- | ----------------------------- |\n| -A             | 新增文件到以存在的备份文件                 |\n| -B             | 设置区块大小                        |\n| -c             | 建立新的备份文件                      |\n| -C <目录>        | 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项 |\n| -d             | 记录文件的差别                       |\n| -r             | 添加文件到已经压缩的文件                  |\n| -u             | 添加改变了和现有的文件到已经存在的压缩文件         |\n| -x             | 从备份文件中还原文件                    |\n| -t             | 列出备份文件的内容                     |\n| -z             | 通过gzip指令处理备份文件                |\n| -j             | 支持bzip2解压文件                   |\n| -Z             | 通过compress指令处理备份文件            |\n| -v             | 显示操作过程                        |\n| -l             | 文件系统边界设置                      |\n| -k             | 保留原有文件不覆盖                     |\n| -m             | 保留文件不被覆盖                      |\n| -w             | 确认压缩文件的正确性                    |\n| -f <备份文件>      | 指定备份文件                        |\n| -b <区块数目>      | 设置每笔记录的区块数目，每个区块大小为12Bytes    |\n| -p             | 用原来的文件权限还原文件                  |\n| -P             | 文件名使用绝对名称，不移除文件名称前的\"/\"号       |\n| -N             | 只将较指定日期更新的文件保存到备份文件里          |\n| --version      | 显示版本信息                        |\n| --exclude <文件> | 排除某个文件                        |\n\n#### 常见的解压/压缩命令\n\n`.tar`文件\n\n```\n解包：tar xvf FileName.tar\n打包：tar cvf FileName.tar DirName\n```\n\n`.gz`文件\n\n```\n解压1：gunzip FileName.gz\n解压2：gzip -d FileName.gz\n压缩：gzip FileName\n```\n\n`.tar.gz`文件 和 `.tgz`文件\n\n```\n解压：tar zxvf FileName.tar.gz\n压缩：tar zcvf FileName.tar.gz DirName\n```\n\n`.bz2`文件\n\n```\n解压1：bzip2 -d FileName.bz2\n解压2：bunzip2 FileName.bz2\n压缩： bzip2 -z FileName\n```\n\n`.tar.bz2`文件\n\n```\n解压：tar jxvf FileName.tar.bz2\n压缩：tar jcvf FileName.tar.bz2 DirName\n```\n\n`.bz`文件\n\n```\n解压1：bzip2 -d FileName.bz\n解压2：bunzip2 FileName.bz\n压缩：未知\n```\n\n`.tar.bz`文件\n\n```\n解压：tar jxvf FileName.tar.bz\n压缩：未知\n```\n\n`.Z`文件\n\n```\n解压：uncompress FileName.Z\n压缩：compress FileName\n```\n\n`.tar.Z`文件\n\n```\n解压：tar Zxvf FileName.tar.Z\n压缩：tar Zcvf FileName.tar.Z DirName\n```\n\n`.zip`文件\n\n```\n解压：unzip FileName.zip\n压缩：zip FileName.zip DirName\n```\n\n`.rar`文件\n\n```\n解压：rar x FileName.rar\n压缩：rar a FileName.rar DirName \n```\n\n#### 使用示例\n\n- tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 4\n-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 24\n-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n将文件只打包不压缩、以gzip压缩、以bzip2压缩。\n\n- tar -ztvf testlog.tar.gz\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz \n-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log\n```\n\n查看testlog.tar.gz中有哪些文件。\n\n- tar -zxvf testlog.tar.gz\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 24\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz\ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 28\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n将testlog.tar.gz解压缩。\n\n- tar -zcvf testlogs.tar.gz testlog1.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log \ntestlog1.log\ntestlog2.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 36\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz \n-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log\n-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log \n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 32\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log\ntestlog1.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 36\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n从压缩包中解压出指定文件。\n\n- tar -N \"2018/01/03\" -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份\n- tar --exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件\n\n\n\nRead More：\n\n> [每天一个linux命令（28）：tar命令](http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html) [Linux tar命令](http://www.runoob.com/linux/linux-comm-tar.html)  [tar](http://wangchujiang.com/linux-command/c/tar.html) ","source":"_posts/linuxtar.md","raw":"---\ntitle: Linux命令-tar\ndate: 2018-01-04 22:15:40\ntags:\n - Linux\n - 命令\n - tar\ncategories:\n - Linux/Unix\n---\n\n通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候`tar`命令是必不可少的一个功能强大的工具。\n\ntar命令可以为Linux的文件和目录创建档案。利用`tar`可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。`tar`最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。\n\n首先区分一下打包和压缩的概念：\n\n- 打包是将一大堆文件或目录变成一个总的文件；\n- 压缩是将一个大的文件通过一些压缩算法变成一个小文件。\n\n为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（`tar`命令），然后再用压缩程序进行压缩（`gzip`、`bzip2`命令）。\n\nLinux下最常用的打包程序就是`tar`了，使用`tar`程序打出来的包我们常称为`tar`包，`tar`包文件的命令通常都是以`.tar`结尾的。生成`tar`包后，就可以用其它的程序来进行压缩。\n\n#### 命令格式\n\n```\ntar [参数] [文件]\n```\n\n#### 命令功能\n\n用来压缩和解压文件，`tar`本身不具有压缩功能，是调用压缩功能实现的压缩。\n\n#### 命令参数\n\n| 参数             | 说明                            |\n| -------------- | ----------------------------- |\n| -A             | 新增文件到以存在的备份文件                 |\n| -B             | 设置区块大小                        |\n| -c             | 建立新的备份文件                      |\n| -C <目录>        | 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项 |\n| -d             | 记录文件的差别                       |\n| -r             | 添加文件到已经压缩的文件                  |\n| -u             | 添加改变了和现有的文件到已经存在的压缩文件         |\n| -x             | 从备份文件中还原文件                    |\n| -t             | 列出备份文件的内容                     |\n| -z             | 通过gzip指令处理备份文件                |\n| -j             | 支持bzip2解压文件                   |\n| -Z             | 通过compress指令处理备份文件            |\n| -v             | 显示操作过程                        |\n| -l             | 文件系统边界设置                      |\n| -k             | 保留原有文件不覆盖                     |\n| -m             | 保留文件不被覆盖                      |\n| -w             | 确认压缩文件的正确性                    |\n| -f <备份文件>      | 指定备份文件                        |\n| -b <区块数目>      | 设置每笔记录的区块数目，每个区块大小为12Bytes    |\n| -p             | 用原来的文件权限还原文件                  |\n| -P             | 文件名使用绝对名称，不移除文件名称前的\"/\"号       |\n| -N             | 只将较指定日期更新的文件保存到备份文件里          |\n| --version      | 显示版本信息                        |\n| --exclude <文件> | 排除某个文件                        |\n\n#### 常见的解压/压缩命令\n\n`.tar`文件\n\n```\n解包：tar xvf FileName.tar\n打包：tar cvf FileName.tar DirName\n```\n\n`.gz`文件\n\n```\n解压1：gunzip FileName.gz\n解压2：gzip -d FileName.gz\n压缩：gzip FileName\n```\n\n`.tar.gz`文件 和 `.tgz`文件\n\n```\n解压：tar zxvf FileName.tar.gz\n压缩：tar zcvf FileName.tar.gz DirName\n```\n\n`.bz2`文件\n\n```\n解压1：bzip2 -d FileName.bz2\n解压2：bunzip2 FileName.bz2\n压缩： bzip2 -z FileName\n```\n\n`.tar.bz2`文件\n\n```\n解压：tar jxvf FileName.tar.bz2\n压缩：tar jcvf FileName.tar.bz2 DirName\n```\n\n`.bz`文件\n\n```\n解压1：bzip2 -d FileName.bz\n解压2：bunzip2 FileName.bz\n压缩：未知\n```\n\n`.tar.bz`文件\n\n```\n解压：tar jxvf FileName.tar.bz\n压缩：未知\n```\n\n`.Z`文件\n\n```\n解压：uncompress FileName.Z\n压缩：compress FileName\n```\n\n`.tar.Z`文件\n\n```\n解压：tar Zxvf FileName.tar.Z\n压缩：tar Zcvf FileName.tar.Z DirName\n```\n\n`.zip`文件\n\n```\n解压：unzip FileName.zip\n压缩：zip FileName.zip DirName\n```\n\n`.rar`文件\n\n```\n解压：rar x FileName.rar\n压缩：rar a FileName.rar DirName \n```\n\n#### 使用示例\n\n- tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 4\n-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log \ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 24\n-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n将文件只打包不压缩、以gzip压缩、以bzip2压缩。\n\n- tar -ztvf testlog.tar.gz\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz \n-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log\n```\n\n查看testlog.tar.gz中有哪些文件。\n\n- tar -zxvf testlog.tar.gz\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 24\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz\ntestlog.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 28\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n将testlog.tar.gz解压缩。\n\n- tar -zcvf testlogs.tar.gz testlog1.log\n\n```\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log \ntestlog1.log\ntestlog2.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 36\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz \n-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log\n-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log \n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 32\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log\ntestlog1.log\n[root@hcdn-others-worker-dev100-bjlt testtar]# ll\ntotal 36\ndrwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog\n-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log\n-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log\n-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz\n-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar\n-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2\n-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz\n```\n\n从压缩包中解压出指定文件。\n\n- tar -N \"2018/01/03\" -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份\n- tar --exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件\n\n\n\nRead More：\n\n> [每天一个linux命令（28）：tar命令](http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html) [Linux tar命令](http://www.runoob.com/linux/linux-comm-tar.html)  [tar](http://wangchujiang.com/linux-command/c/tar.html) ","slug":"linuxtar","published":1,"updated":"2020-10-25T06:43:32.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6i009gmolcpqk8b7ds","content":"<p>通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候<code>tar</code>命令是必不可少的一个功能强大的工具。</p>\n<p>tar命令可以为Linux的文件和目录创建档案。利用<code>tar</code>可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。</p>\n<p>首先区分一下打包和压缩的概念：</p>\n<ul>\n<li>打包是将一大堆文件或目录变成一个总的文件；</li>\n<li>压缩是将一个大的文件通过一些压缩算法变成一个小文件。</li>\n</ul>\n<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（<code>tar</code>命令），然后再用压缩程序进行压缩（<code>gzip</code>、<code>bzip2</code>命令）。</p>\n<p>Linux下最常用的打包程序就是<code>tar</code>了，使用<code>tar</code>程序打出来的包我们常称为<code>tar</code>包，<code>tar</code>包文件的命令通常都是以<code>.tar</code>结尾的。生成<code>tar</code>包后，就可以用其它的程序来进行压缩。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar [参数] [文件]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>用来压缩和解压文件，<code>tar</code>本身不具有压缩功能，是调用压缩功能实现的压缩。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-A</td>\n<td>新增文件到以存在的备份文件</td>\n</tr>\n<tr>\n<td>-B</td>\n<td>设置区块大小</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>建立新的备份文件</td>\n</tr>\n<tr>\n<td>-C &lt;目录&gt;</td>\n<td>这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>记录文件的差别</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>添加文件到已经压缩的文件</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>添加改变了和现有的文件到已经存在的压缩文件</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>从备份文件中还原文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>列出备份文件的内容</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>通过gzip指令处理备份文件</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>支持bzip2解压文件</td>\n</tr>\n<tr>\n<td>-Z</td>\n<td>通过compress指令处理备份文件</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示操作过程</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>文件系统边界设置</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>保留原有文件不覆盖</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>保留文件不被覆盖</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>确认压缩文件的正确性</td>\n</tr>\n<tr>\n<td>-f &lt;备份文件&gt;</td>\n<td>指定备份文件</td>\n</tr>\n<tr>\n<td>-b &lt;区块数目&gt;</td>\n<td>设置每笔记录的区块数目，每个区块大小为12Bytes</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>用原来的文件权限还原文件</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>文件名使用绝对名称，不移除文件名称前的”/“号</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>只将较指定日期更新的文件保存到备份文件里</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>–exclude &lt;文件&gt;</td>\n<td>排除某个文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"常见的解压-压缩命令\"><a href=\"#常见的解压-压缩命令\" class=\"headerlink\" title=\"常见的解压/压缩命令\"></a>常见的解压/压缩命令</h4><p><code>.tar</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解包：tar xvf FileName.tar</span><br><span class=\"line\">打包：tar cvf FileName.tar DirName</span><br></pre></td></tr></table></figure>\n<p><code>.gz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：gunzip FileName.gz</span><br><span class=\"line\">解压2：gzip -d FileName.gz</span><br><span class=\"line\">压缩：gzip FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.gz</code>文件 和 <code>.tgz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar zxvf FileName.tar.gz</span><br><span class=\"line\">压缩：tar zcvf FileName.tar.gz DirName</span><br></pre></td></tr></table></figure>\n<p><code>.bz2</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：bzip2 -d FileName.bz2</span><br><span class=\"line\">解压2：bunzip2 FileName.bz2</span><br><span class=\"line\">压缩： bzip2 -z FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.bz2</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar jxvf FileName.tar.bz2</span><br><span class=\"line\">压缩：tar jcvf FileName.tar.bz2 DirName</span><br></pre></td></tr></table></figure>\n<p><code>.bz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：bzip2 -d FileName.bz</span><br><span class=\"line\">解压2：bunzip2 FileName.bz</span><br><span class=\"line\">压缩：未知</span><br></pre></td></tr></table></figure>\n<p><code>.tar.bz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar jxvf FileName.tar.bz</span><br><span class=\"line\">压缩：未知</span><br></pre></td></tr></table></figure>\n<p><code>.Z</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：uncompress FileName.Z</span><br><span class=\"line\">压缩：compress FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.Z</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar Zxvf FileName.tar.Z</span><br><span class=\"line\">压缩：tar Zcvf FileName.tar.Z DirName</span><br></pre></td></tr></table></figure>\n<p><code>.zip</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：unzip FileName.zip</span><br><span class=\"line\">压缩：zip FileName.zip DirName</span><br></pre></td></tr></table></figure>\n<p><code>.rar</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：rar x FileName.rar</span><br><span class=\"line\">压缩：rar a FileName.rar DirName</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将文件只打包不压缩、以gzip压缩、以bzip2压缩。</p>\n<ul>\n<li>tar -ztvf testlog.tar.gz</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz </span><br><span class=\"line\">-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log</span><br></pre></td></tr></table></figure>\n<p>查看testlog.tar.gz中有哪些文件。</p>\n<ul>\n<li>tar -zxvf testlog.tar.gz</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz</span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 28</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将testlog.tar.gz解压缩。</p>\n<ul>\n<li>tar -zcvf testlogs.tar.gz testlog1.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log </span><br><span class=\"line\">testlog1.log</span><br><span class=\"line\">testlog2.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz </span><br><span class=\"line\">-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 32</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log</span><br><span class=\"line\">testlog1.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>从压缩包中解压出指定文件。</p>\n<ul>\n<li>tar -N “2018/01/03” -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份</li>\n<li>tar –exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件</li>\n</ul>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（28）：tar命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-tar.html\" target=\"_blank\" rel=\"noopener\">Linux tar命令</a>  <a href=\"http://wangchujiang.com/linux-command/c/tar.html\" target=\"_blank\" rel=\"noopener\">tar</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候<code>tar</code>命令是必不可少的一个功能强大的工具。</p>\n<p>tar命令可以为Linux的文件和目录创建档案。利用<code>tar</code>可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。</p>\n<p>首先区分一下打包和压缩的概念：</p>\n<ul>\n<li>打包是将一大堆文件或目录变成一个总的文件；</li>\n<li>压缩是将一个大的文件通过一些压缩算法变成一个小文件。</li>\n</ul>\n<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（<code>tar</code>命令），然后再用压缩程序进行压缩（<code>gzip</code>、<code>bzip2</code>命令）。</p>\n<p>Linux下最常用的打包程序就是<code>tar</code>了，使用<code>tar</code>程序打出来的包我们常称为<code>tar</code>包，<code>tar</code>包文件的命令通常都是以<code>.tar</code>结尾的。生成<code>tar</code>包后，就可以用其它的程序来进行压缩。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar [参数] [文件]</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>用来压缩和解压文件，<code>tar</code>本身不具有压缩功能，是调用压缩功能实现的压缩。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-A</td>\n<td>新增文件到以存在的备份文件</td>\n</tr>\n<tr>\n<td>-B</td>\n<td>设置区块大小</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>建立新的备份文件</td>\n</tr>\n<tr>\n<td>-C &lt;目录&gt;</td>\n<td>这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>记录文件的差别</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>添加文件到已经压缩的文件</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>添加改变了和现有的文件到已经存在的压缩文件</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>从备份文件中还原文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>列出备份文件的内容</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>通过gzip指令处理备份文件</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>支持bzip2解压文件</td>\n</tr>\n<tr>\n<td>-Z</td>\n<td>通过compress指令处理备份文件</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示操作过程</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>文件系统边界设置</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>保留原有文件不覆盖</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>保留文件不被覆盖</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>确认压缩文件的正确性</td>\n</tr>\n<tr>\n<td>-f &lt;备份文件&gt;</td>\n<td>指定备份文件</td>\n</tr>\n<tr>\n<td>-b &lt;区块数目&gt;</td>\n<td>设置每笔记录的区块数目，每个区块大小为12Bytes</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>用原来的文件权限还原文件</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>文件名使用绝对名称，不移除文件名称前的”/“号</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>只将较指定日期更新的文件保存到备份文件里</td>\n</tr>\n<tr>\n<td>–version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>–exclude &lt;文件&gt;</td>\n<td>排除某个文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"常见的解压-压缩命令\"><a href=\"#常见的解压-压缩命令\" class=\"headerlink\" title=\"常见的解压/压缩命令\"></a>常见的解压/压缩命令</h4><p><code>.tar</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解包：tar xvf FileName.tar</span><br><span class=\"line\">打包：tar cvf FileName.tar DirName</span><br></pre></td></tr></table></figure>\n<p><code>.gz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：gunzip FileName.gz</span><br><span class=\"line\">解压2：gzip -d FileName.gz</span><br><span class=\"line\">压缩：gzip FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.gz</code>文件 和 <code>.tgz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar zxvf FileName.tar.gz</span><br><span class=\"line\">压缩：tar zcvf FileName.tar.gz DirName</span><br></pre></td></tr></table></figure>\n<p><code>.bz2</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：bzip2 -d FileName.bz2</span><br><span class=\"line\">解压2：bunzip2 FileName.bz2</span><br><span class=\"line\">压缩： bzip2 -z FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.bz2</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar jxvf FileName.tar.bz2</span><br><span class=\"line\">压缩：tar jcvf FileName.tar.bz2 DirName</span><br></pre></td></tr></table></figure>\n<p><code>.bz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压1：bzip2 -d FileName.bz</span><br><span class=\"line\">解压2：bunzip2 FileName.bz</span><br><span class=\"line\">压缩：未知</span><br></pre></td></tr></table></figure>\n<p><code>.tar.bz</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar jxvf FileName.tar.bz</span><br><span class=\"line\">压缩：未知</span><br></pre></td></tr></table></figure>\n<p><code>.Z</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：uncompress FileName.Z</span><br><span class=\"line\">压缩：compress FileName</span><br></pre></td></tr></table></figure>\n<p><code>.tar.Z</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：tar Zxvf FileName.tar.Z</span><br><span class=\"line\">压缩：tar Zcvf FileName.tar.Z DirName</span><br></pre></td></tr></table></figure>\n<p><code>.zip</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：unzip FileName.zip</span><br><span class=\"line\">压缩：zip FileName.zip DirName</span><br></pre></td></tr></table></figure>\n<p><code>.rar</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解压：rar x FileName.rar</span><br><span class=\"line\">压缩：rar a FileName.rar DirName</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li>tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 4</span><br><span class=\"line\">-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log </span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将文件只打包不压缩、以gzip压缩、以bzip2压缩。</p>\n<ul>\n<li>tar -ztvf testlog.tar.gz</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz </span><br><span class=\"line\">-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log</span><br></pre></td></tr></table></figure>\n<p>查看testlog.tar.gz中有哪些文件。</p>\n<ul>\n<li>tar -zxvf testlog.tar.gz</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz</span><br><span class=\"line\">testlog.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 28</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将testlog.tar.gz解压缩。</p>\n<ul>\n<li>tar -zcvf testlogs.tar.gz testlog1.log</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log </span><br><span class=\"line\">testlog1.log</span><br><span class=\"line\">testlog2.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz </span><br><span class=\"line\">-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 32</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log</span><br><span class=\"line\">testlog1.log</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</span><br><span class=\"line\">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</span><br><span class=\"line\">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</span><br><span class=\"line\">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</span><br><span class=\"line\">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</span><br><span class=\"line\">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</span><br></pre></td></tr></table></figure>\n<p>从压缩包中解压出指定文件。</p>\n<ul>\n<li>tar -N “2018/01/03” -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份</li>\n<li>tar –exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件</li>\n</ul>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（28）：tar命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-tar.html\" target=\"_blank\" rel=\"noopener\">Linux tar命令</a>  <a href=\"http://wangchujiang.com/linux-command/c/tar.html\" target=\"_blank\" rel=\"noopener\">tar</a> </p>\n</blockquote>\n"},{"title":"Linux命令-top","date":"2017-06-07T01:29:20.000Z","_content":"\n### 简介\n\ntop 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。\n\ntop 显示系统当前的进程和其他状况，是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用、内存使用、执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。\n\n### 参数含义\n\n![2017-6-7 095218](/images/2017-6-7 095218.png)\n\n统计信息区前五行是系统整体的统计信息。\n\n第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：\n\n| 参数                             | 意义                                       |\n| ------------------------------ | ---------------------------------------- |\n| 09:51:29                       | 当前时间                                     |\n| up 423 days                    | 已经运行天数                                   |\n| 15:28                          | 系统运行时间，格式为时:分                            |\n| 5 users                        | 当前登录用户数                                  |\n| load average: 0.09, 0.04, 0.05 | 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。 |\n\n第二行是进程信息。其内容如下：\n\n| 参数           | 意义       |\n| ------------ | -------- |\n| 143 total    | 进程总数     |\n| 2 running    | 正在运行的进程数 |\n| 138 sleeping | 睡眠的进程数   |\n| 0 stopped    | 停止的进程数   |\n| 3 zombie     | 僵尸进程数    |\n\n第三行是CPU信息。其内容如下：\n\n| 参数      | 意义                       |\n| ------- | ------------------------ |\n| 1.0 us  | 用户空间占用CPU百分比             |\n| 0.3 sy  | 内核空间占用CPU百分比             |\n| 0.0 ni  | 用户进程空间内改变过优先级的进程占用CPU百分比 |\n| 97.7 id | 空闲CPU百分比                 |\n| 1.0 wa  | 等待输入输出的CPU时间百分比          |\n| 0.0 hi  | 硬件CPU中断占用百分比             |\n| 0.0 si  | 软中断占用百分比                 |\n| 0.0 st  | 虚拟机占用百分比                 |\n\n最后两行是内存信息。其内容如下：\n\n| 参数                | 意义                                       |\n| ----------------- | ---------------------------------------- |\n| KiB Mem：          |                                          |\n| 1016656 total     | 物理内存总量                                   |\n| 936036 used       | 使用的物理内存总量                                |\n| 80620 free        | 空闲内存总量                                   |\n| 77144 buffers     | 用作内核缓存的内存量                               |\n| KiB Swap：         |                                          |\n| 0 total           | 交换区总量                                    |\n| 0 used            | 使用的交换区总量                                 |\n| 0 free            | 空闲交换区总量                                  |\n| 178128 cached Mem | 缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。 |\n\n进程信息区统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。\n\n| 序号   | 列名      | 含义                                       |\n| ---- | ------- | ---------------------------------------- |\n| 1    | PID     | 进程id                                     |\n| 2    | PPID    | 父进程id                                    |\n| 3    | RUSER   | 真正的用户名                                   |\n| 4    | UID     | 进程所有者的用户id                               |\n| 5    | USER    | 进程所有者的用户名                                |\n| 6    | GROUP   | 进程所有者的组名                                 |\n| 7    | TTY     | 启动进程的终端名。不是从终端启动的进程则显示为 ?                |\n| 8    | PR      | 优先级                                      |\n| 9    | NI      | nice值。负值表示高优先级，正值表示低优先级                  |\n| 10   | P       | 最后使用的CPU，仅在多CPU环境下有意义                    |\n| 11   | %CPU    | 上次更新到现在的CPU时间占用百分比                       |\n| 12   | TIME    | 进程使用的CPU时间总计，单位秒                         |\n| 13   | TIME+   | 进程使用的CPU时间总计，单位1/100秒                    |\n| 14   | %MEM    | 进程使用的物理内存百分比                             |\n| 15   | VIRT    | 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES           |\n| 16   | SWAP    | 进程使用的虚拟内存中，被换出的大小，单位kb。                  |\n| 17   | RES     | 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA     |\n| 18   | CODE    | 可执行代码占用的物理内存大小，单位kb                      |\n| 19   | DATA    | 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb          |\n| 20   | SHR     | 共享内存大小，单位kb                              |\n| 21   | nFLT    | 页面错误次数                                   |\n| 22   | nDRT    | 最后一次写入到现在，被修改过的页面数。                      |\n| 23   | S       | 进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程) |\n| 24   | COMMAND | 命令名/命令行                                  |\n| 25   | WCHAN   | 若该进程在睡眠，则显示睡眠中的系统函数名                     |\n| 26   | Flags   | 任务标志，参考 sched.h                          |\n\n默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。\n\n可以通过下面的快捷键来更改显示内容。 更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。 按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。 按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。\n\n### 命令使用\n\ntop 使用格式\n\n`top [-] [d] [q] [c] [S] [s] [i] [n] [b]`\n\n#### 参数说明\n\n| 参数   | 说明                                       |\n| ---- | ---------------------------------------- |\n| d    | 改变显示的更新速度，或是在交互式指令列( interactive command)按 s |\n| q    | 没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行 |\n| c    | 切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来 |\n| s    | 安全模式，将交互式指令取消, 避免潜在的危机                   |\n| i    | 不显示任何闲置 (idle) 或无用 (zombie) 的行程          |\n| n    | 更新的次数，完成后将会退出 top                        |\n| b    | 批次档模式，搭配 \"n\" 参数一起使用，可以用来将 top 的结果输出到档案内  |\n\n#### 交互命令\n\n| 命令    | 说明                                       |\n| ----- | ---------------------------------------- |\n| h / ? | 显示帮助画面，给出一些简短的命令总结说明                     |\n| k     | 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽 |\n| i     | 忽略闲置和僵死进程。这是一个开关式命令                      |\n| q     | 退出程序                                     |\n| r     | 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10 |\n| S     | 切换到累计模式                                  |\n| s     | 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加 |\n| f / F | 从当前显示中添加或者删除项目                           |\n| o / O | 改变显示项目的顺序                                |\n| l     | 切换显示平均负载和启动时间信息                          |\n| m     | 切换显示内存信息                                 |\n| t     | 切换显示进程和CPU状态信息                           |\n| c     | 切换显示命令名称和完整命令行                           |\n| M     | 根据驻留内存大小进行排序                             |\n| P     | 根据CPU使用百分比大小进行排序                         |\n| T     | 根据时间/累计时间进行排序                            |\n| W     | 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法       |\n\n#### 常用操作\n\n| 命令                    | 说明                                       |\n| --------------------- | ---------------------------------------- |\n| top                   | 每隔5秒显式所有进程的资源占用情况                        |\n| top -d 2              | 每隔2秒显式所有进程的资源占用情况                        |\n| top -c                | 每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)     |\n| top -p 12345 -p 6789  | 每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况     |\n| top -d 2 -c -p 123456 | 每隔2秒显示pid是12345的进程的资源使用情况，并显示该进程启动的命令行参数 |\n\n#### Load Average\n\n平均负载 (load average) 是指系统的运行队列的平均利用率，也可以认为是可运行进程的平均数。通过系统命令\"w\" 或\"top\"可以查看当前 load average 情况。\n\n第一位：表示最近1分钟平均负载；\n第二位：表示最近5分钟平均负载；\n第三位：表示最近15分钟平均负载。\n\n假设我们的系统是单CPU单内核的，把它比喻成是一条单向马路，把CPU任务比作汽车。当车不多的时候，load < 1；当车占满整个马路的时候 load = 1；当马路都站满了，而且马路外还堆满了汽车的时候，load > 1。\n\n我们经常会发现服务器Load > 1但是运行仍然不错，那是因为服务器是多核处理器。假设我们服务器CPU是2核，那么将意味我们拥有2条马路，我们的Load = 2时，所有马路都跑满车辆。\n\n- 0.7 < load < 1：此时是不错的状态，如果进来更多的汽车，你的马路仍然可以应付；\n- load = 1：你的马路即将拥堵，而且没有更多的资源额外的任务，赶紧看看发生了什么吧；\n- load > 5：非常严重拥堵，我们的马路非常繁忙，每辆车都无法很快的运行。\n\n通常我们先看15分钟load，如果load很高，再看1分钟和5分钟负载，查看是否有下降趋势。1分钟负载值 > 1，那么我们不用担心，但是如果15分钟负载都超过1，我们要赶紧看看发生了什么事情。所以我们要根据实际情况查看这三个值。\n\n\n\n> 参考文章：\n>\n> [Linux系统中的load average](http://www.cnblogs.com/kaituorensheng/p/3602805.html)  [linux 平均负载 load average 的含义](http://www.cnblogs.com/ghj1976/p/5611220.html)  [linux的top命令参数详解](http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html)  [Linux top命令](http://www.runoob.com/linux/linux-comm-top.html)\n\n","source":"_posts/linuxtop.md","raw":"---\ntitle: Linux命令-top\ndate: 2017-06-07 09:29:20\ntags:\n - Linux\n - 命令\n - top\ncategories:\n - Linux/Unix\n---\n\n### 简介\n\ntop 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。\n\ntop 显示系统当前的进程和其他状况，是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用、内存使用、执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。\n\n### 参数含义\n\n![2017-6-7 095218](/images/2017-6-7 095218.png)\n\n统计信息区前五行是系统整体的统计信息。\n\n第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：\n\n| 参数                             | 意义                                       |\n| ------------------------------ | ---------------------------------------- |\n| 09:51:29                       | 当前时间                                     |\n| up 423 days                    | 已经运行天数                                   |\n| 15:28                          | 系统运行时间，格式为时:分                            |\n| 5 users                        | 当前登录用户数                                  |\n| load average: 0.09, 0.04, 0.05 | 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。 |\n\n第二行是进程信息。其内容如下：\n\n| 参数           | 意义       |\n| ------------ | -------- |\n| 143 total    | 进程总数     |\n| 2 running    | 正在运行的进程数 |\n| 138 sleeping | 睡眠的进程数   |\n| 0 stopped    | 停止的进程数   |\n| 3 zombie     | 僵尸进程数    |\n\n第三行是CPU信息。其内容如下：\n\n| 参数      | 意义                       |\n| ------- | ------------------------ |\n| 1.0 us  | 用户空间占用CPU百分比             |\n| 0.3 sy  | 内核空间占用CPU百分比             |\n| 0.0 ni  | 用户进程空间内改变过优先级的进程占用CPU百分比 |\n| 97.7 id | 空闲CPU百分比                 |\n| 1.0 wa  | 等待输入输出的CPU时间百分比          |\n| 0.0 hi  | 硬件CPU中断占用百分比             |\n| 0.0 si  | 软中断占用百分比                 |\n| 0.0 st  | 虚拟机占用百分比                 |\n\n最后两行是内存信息。其内容如下：\n\n| 参数                | 意义                                       |\n| ----------------- | ---------------------------------------- |\n| KiB Mem：          |                                          |\n| 1016656 total     | 物理内存总量                                   |\n| 936036 used       | 使用的物理内存总量                                |\n| 80620 free        | 空闲内存总量                                   |\n| 77144 buffers     | 用作内核缓存的内存量                               |\n| KiB Swap：         |                                          |\n| 0 total           | 交换区总量                                    |\n| 0 used            | 使用的交换区总量                                 |\n| 0 free            | 空闲交换区总量                                  |\n| 178128 cached Mem | 缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。 |\n\n进程信息区统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。\n\n| 序号   | 列名      | 含义                                       |\n| ---- | ------- | ---------------------------------------- |\n| 1    | PID     | 进程id                                     |\n| 2    | PPID    | 父进程id                                    |\n| 3    | RUSER   | 真正的用户名                                   |\n| 4    | UID     | 进程所有者的用户id                               |\n| 5    | USER    | 进程所有者的用户名                                |\n| 6    | GROUP   | 进程所有者的组名                                 |\n| 7    | TTY     | 启动进程的终端名。不是从终端启动的进程则显示为 ?                |\n| 8    | PR      | 优先级                                      |\n| 9    | NI      | nice值。负值表示高优先级，正值表示低优先级                  |\n| 10   | P       | 最后使用的CPU，仅在多CPU环境下有意义                    |\n| 11   | %CPU    | 上次更新到现在的CPU时间占用百分比                       |\n| 12   | TIME    | 进程使用的CPU时间总计，单位秒                         |\n| 13   | TIME+   | 进程使用的CPU时间总计，单位1/100秒                    |\n| 14   | %MEM    | 进程使用的物理内存百分比                             |\n| 15   | VIRT    | 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES           |\n| 16   | SWAP    | 进程使用的虚拟内存中，被换出的大小，单位kb。                  |\n| 17   | RES     | 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA     |\n| 18   | CODE    | 可执行代码占用的物理内存大小，单位kb                      |\n| 19   | DATA    | 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb          |\n| 20   | SHR     | 共享内存大小，单位kb                              |\n| 21   | nFLT    | 页面错误次数                                   |\n| 22   | nDRT    | 最后一次写入到现在，被修改过的页面数。                      |\n| 23   | S       | 进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程) |\n| 24   | COMMAND | 命令名/命令行                                  |\n| 25   | WCHAN   | 若该进程在睡眠，则显示睡眠中的系统函数名                     |\n| 26   | Flags   | 任务标志，参考 sched.h                          |\n\n默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。\n\n可以通过下面的快捷键来更改显示内容。 更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。 按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。 按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。\n\n### 命令使用\n\ntop 使用格式\n\n`top [-] [d] [q] [c] [S] [s] [i] [n] [b]`\n\n#### 参数说明\n\n| 参数   | 说明                                       |\n| ---- | ---------------------------------------- |\n| d    | 改变显示的更新速度，或是在交互式指令列( interactive command)按 s |\n| q    | 没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行 |\n| c    | 切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来 |\n| s    | 安全模式，将交互式指令取消, 避免潜在的危机                   |\n| i    | 不显示任何闲置 (idle) 或无用 (zombie) 的行程          |\n| n    | 更新的次数，完成后将会退出 top                        |\n| b    | 批次档模式，搭配 \"n\" 参数一起使用，可以用来将 top 的结果输出到档案内  |\n\n#### 交互命令\n\n| 命令    | 说明                                       |\n| ----- | ---------------------------------------- |\n| h / ? | 显示帮助画面，给出一些简短的命令总结说明                     |\n| k     | 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽 |\n| i     | 忽略闲置和僵死进程。这是一个开关式命令                      |\n| q     | 退出程序                                     |\n| r     | 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10 |\n| S     | 切换到累计模式                                  |\n| s     | 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加 |\n| f / F | 从当前显示中添加或者删除项目                           |\n| o / O | 改变显示项目的顺序                                |\n| l     | 切换显示平均负载和启动时间信息                          |\n| m     | 切换显示内存信息                                 |\n| t     | 切换显示进程和CPU状态信息                           |\n| c     | 切换显示命令名称和完整命令行                           |\n| M     | 根据驻留内存大小进行排序                             |\n| P     | 根据CPU使用百分比大小进行排序                         |\n| T     | 根据时间/累计时间进行排序                            |\n| W     | 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法       |\n\n#### 常用操作\n\n| 命令                    | 说明                                       |\n| --------------------- | ---------------------------------------- |\n| top                   | 每隔5秒显式所有进程的资源占用情况                        |\n| top -d 2              | 每隔2秒显式所有进程的资源占用情况                        |\n| top -c                | 每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)     |\n| top -p 12345 -p 6789  | 每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况     |\n| top -d 2 -c -p 123456 | 每隔2秒显示pid是12345的进程的资源使用情况，并显示该进程启动的命令行参数 |\n\n#### Load Average\n\n平均负载 (load average) 是指系统的运行队列的平均利用率，也可以认为是可运行进程的平均数。通过系统命令\"w\" 或\"top\"可以查看当前 load average 情况。\n\n第一位：表示最近1分钟平均负载；\n第二位：表示最近5分钟平均负载；\n第三位：表示最近15分钟平均负载。\n\n假设我们的系统是单CPU单内核的，把它比喻成是一条单向马路，把CPU任务比作汽车。当车不多的时候，load < 1；当车占满整个马路的时候 load = 1；当马路都站满了，而且马路外还堆满了汽车的时候，load > 1。\n\n我们经常会发现服务器Load > 1但是运行仍然不错，那是因为服务器是多核处理器。假设我们服务器CPU是2核，那么将意味我们拥有2条马路，我们的Load = 2时，所有马路都跑满车辆。\n\n- 0.7 < load < 1：此时是不错的状态，如果进来更多的汽车，你的马路仍然可以应付；\n- load = 1：你的马路即将拥堵，而且没有更多的资源额外的任务，赶紧看看发生了什么吧；\n- load > 5：非常严重拥堵，我们的马路非常繁忙，每辆车都无法很快的运行。\n\n通常我们先看15分钟load，如果load很高，再看1分钟和5分钟负载，查看是否有下降趋势。1分钟负载值 > 1，那么我们不用担心，但是如果15分钟负载都超过1，我们要赶紧看看发生了什么事情。所以我们要根据实际情况查看这三个值。\n\n\n\n> 参考文章：\n>\n> [Linux系统中的load average](http://www.cnblogs.com/kaituorensheng/p/3602805.html)  [linux 平均负载 load average 的含义](http://www.cnblogs.com/ghj1976/p/5611220.html)  [linux的top命令参数详解](http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html)  [Linux top命令](http://www.runoob.com/linux/linux-comm-top.html)\n\n","slug":"linuxtop","published":1,"updated":"2020-10-25T06:43:32.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6l009imolcixfclcom","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>\n<p>top 显示系统当前的进程和其他状况，是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用、内存使用、执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p>\n<h3 id=\"参数含义\"><a href=\"#参数含义\" class=\"headerlink\" title=\"参数含义\"></a>参数含义</h3><p><img src=\"/images/2017-6-7 095218.png\" alt=\"2017-6-7 095218\"></p>\n<p>统计信息区前五行是系统整体的统计信息。</p>\n<p>第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>09:51:29</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>up 423 days</td>\n<td>已经运行天数</td>\n</tr>\n<tr>\n<td>15:28</td>\n<td>系统运行时间，格式为时:分</td>\n</tr>\n<tr>\n<td>5 users</td>\n<td>当前登录用户数</td>\n</tr>\n<tr>\n<td>load average: 0.09, 0.04, 0.05</td>\n<td>系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</td>\n</tr>\n</tbody>\n</table>\n<p>第二行是进程信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>143 total</td>\n<td>进程总数</td>\n</tr>\n<tr>\n<td>2 running</td>\n<td>正在运行的进程数</td>\n</tr>\n<tr>\n<td>138 sleeping</td>\n<td>睡眠的进程数</td>\n</tr>\n<tr>\n<td>0 stopped</td>\n<td>停止的进程数</td>\n</tr>\n<tr>\n<td>3 zombie</td>\n<td>僵尸进程数</td>\n</tr>\n</tbody>\n</table>\n<p>第三行是CPU信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.0 us</td>\n<td>用户空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.3 sy</td>\n<td>内核空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0 ni</td>\n<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>\n</tr>\n<tr>\n<td>97.7 id</td>\n<td>空闲CPU百分比</td>\n</tr>\n<tr>\n<td>1.0 wa</td>\n<td>等待输入输出的CPU时间百分比</td>\n</tr>\n<tr>\n<td>0.0 hi</td>\n<td>硬件CPU中断占用百分比</td>\n</tr>\n<tr>\n<td>0.0 si</td>\n<td>软中断占用百分比</td>\n</tr>\n<tr>\n<td>0.0 st</td>\n<td>虚拟机占用百分比</td>\n</tr>\n</tbody>\n</table>\n<p>最后两行是内存信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KiB Mem：</td>\n<td></td>\n</tr>\n<tr>\n<td>1016656 total</td>\n<td>物理内存总量</td>\n</tr>\n<tr>\n<td>936036 used</td>\n<td>使用的物理内存总量</td>\n</tr>\n<tr>\n<td>80620 free</td>\n<td>空闲内存总量</td>\n</tr>\n<tr>\n<td>77144 buffers</td>\n<td>用作内核缓存的内存量</td>\n</tr>\n<tr>\n<td>KiB Swap：</td>\n<td></td>\n</tr>\n<tr>\n<td>0 total</td>\n<td>交换区总量</td>\n</tr>\n<tr>\n<td>0 used</td>\n<td>使用的交换区总量</td>\n</tr>\n<tr>\n<td>0 free</td>\n<td>空闲交换区总量</td>\n</tr>\n<tr>\n<td>178128 cached Mem</td>\n<td>缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。</td>\n</tr>\n</tbody>\n</table>\n<p>进程信息区统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>列名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>PID</td>\n<td>进程id</td>\n</tr>\n<tr>\n<td>2</td>\n<td>PPID</td>\n<td>父进程id</td>\n</tr>\n<tr>\n<td>3</td>\n<td>RUSER</td>\n<td>真正的用户名</td>\n</tr>\n<tr>\n<td>4</td>\n<td>UID</td>\n<td>进程所有者的用户id</td>\n</tr>\n<tr>\n<td>5</td>\n<td>USER</td>\n<td>进程所有者的用户名</td>\n</tr>\n<tr>\n<td>6</td>\n<td>GROUP</td>\n<td>进程所有者的组名</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TTY</td>\n<td>启动进程的终端名。不是从终端启动的进程则显示为 ?</td>\n</tr>\n<tr>\n<td>8</td>\n<td>PR</td>\n<td>优先级</td>\n</tr>\n<tr>\n<td>9</td>\n<td>NI</td>\n<td>nice值。负值表示高优先级，正值表示低优先级</td>\n</tr>\n<tr>\n<td>10</td>\n<td>P</td>\n<td>最后使用的CPU，仅在多CPU环境下有意义</td>\n</tr>\n<tr>\n<td>11</td>\n<td>%CPU</td>\n<td>上次更新到现在的CPU时间占用百分比</td>\n</tr>\n<tr>\n<td>12</td>\n<td>TIME</td>\n<td>进程使用的CPU时间总计，单位秒</td>\n</tr>\n<tr>\n<td>13</td>\n<td>TIME+</td>\n<td>进程使用的CPU时间总计，单位1/100秒</td>\n</tr>\n<tr>\n<td>14</td>\n<td>%MEM</td>\n<td>进程使用的物理内存百分比</td>\n</tr>\n<tr>\n<td>15</td>\n<td>VIRT</td>\n<td>进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SWAP</td>\n<td>进程使用的虚拟内存中，被换出的大小，单位kb。</td>\n</tr>\n<tr>\n<td>17</td>\n<td>RES</td>\n<td>进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td>\n</tr>\n<tr>\n<td>18</td>\n<td>CODE</td>\n<td>可执行代码占用的物理内存大小，单位kb</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DATA</td>\n<td>可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SHR</td>\n<td>共享内存大小，单位kb</td>\n</tr>\n<tr>\n<td>21</td>\n<td>nFLT</td>\n<td>页面错误次数</td>\n</tr>\n<tr>\n<td>22</td>\n<td>nDRT</td>\n<td>最后一次写入到现在，被修改过的页面数。</td>\n</tr>\n<tr>\n<td>23</td>\n<td>S</td>\n<td>进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)</td>\n</tr>\n<tr>\n<td>24</td>\n<td>COMMAND</td>\n<td>命令名/命令行</td>\n</tr>\n<tr>\n<td>25</td>\n<td>WCHAN</td>\n<td>若该进程在睡眠，则显示睡眠中的系统函数名</td>\n</tr>\n<tr>\n<td>26</td>\n<td>Flags</td>\n<td>任务标志，参考 sched.h</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。</p>\n<p>可以通过下面的快捷键来更改显示内容。 更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。 按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。 按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。</p>\n<h3 id=\"命令使用\"><a href=\"#命令使用\" class=\"headerlink\" title=\"命令使用\"></a>命令使用</h3><p>top 使用格式</p>\n<p><code>top [-] [d] [q] [c] [S] [s] [i] [n] [b]</code></p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>改变显示的更新速度，或是在交互式指令列( interactive command)按 s</td>\n</tr>\n<tr>\n<td>q</td>\n<td>没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</td>\n</tr>\n<tr>\n<td>c</td>\n<td>切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来</td>\n</tr>\n<tr>\n<td>s</td>\n<td>安全模式，将交互式指令取消, 避免潜在的危机</td>\n</tr>\n<tr>\n<td>i</td>\n<td>不显示任何闲置 (idle) 或无用 (zombie) 的行程</td>\n</tr>\n<tr>\n<td>n</td>\n<td>更新的次数，完成后将会退出 top</td>\n</tr>\n<tr>\n<td>b</td>\n<td>批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"交互命令\"><a href=\"#交互命令\" class=\"headerlink\" title=\"交互命令\"></a>交互命令</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h / ?</td>\n<td>显示帮助画面，给出一些简短的命令总结说明</td>\n</tr>\n<tr>\n<td>k</td>\n<td>终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽</td>\n</tr>\n<tr>\n<td>i</td>\n<td>忽略闲置和僵死进程。这是一个开关式命令</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出程序</td>\n</tr>\n<tr>\n<td>r</td>\n<td>重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10</td>\n</tr>\n<tr>\n<td>S</td>\n<td>切换到累计模式</td>\n</tr>\n<tr>\n<td>s</td>\n<td>改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加</td>\n</tr>\n<tr>\n<td>f / F</td>\n<td>从当前显示中添加或者删除项目</td>\n</tr>\n<tr>\n<td>o / O</td>\n<td>改变显示项目的顺序</td>\n</tr>\n<tr>\n<td>l</td>\n<td>切换显示平均负载和启动时间信息</td>\n</tr>\n<tr>\n<td>m</td>\n<td>切换显示内存信息</td>\n</tr>\n<tr>\n<td>t</td>\n<td>切换显示进程和CPU状态信息</td>\n</tr>\n<tr>\n<td>c</td>\n<td>切换显示命令名称和完整命令行</td>\n</tr>\n<tr>\n<td>M</td>\n<td>根据驻留内存大小进行排序</td>\n</tr>\n<tr>\n<td>P</td>\n<td>根据CPU使用百分比大小进行排序</td>\n</tr>\n<tr>\n<td>T</td>\n<td>根据时间/累计时间进行排序</td>\n</tr>\n<tr>\n<td>W</td>\n<td>将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>top</td>\n<td>每隔5秒显式所有进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -d 2</td>\n<td>每隔2秒显式所有进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -c</td>\n<td>每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)</td>\n</tr>\n<tr>\n<td>top -p 12345 -p 6789</td>\n<td>每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -d 2 -c -p 123456</td>\n<td>每隔2秒显示pid是12345的进程的资源使用情况，并显示该进程启动的命令行参数</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Load-Average\"><a href=\"#Load-Average\" class=\"headerlink\" title=\"Load Average\"></a>Load Average</h4><p>平均负载 (load average) 是指系统的运行队列的平均利用率，也可以认为是可运行进程的平均数。通过系统命令”w” 或”top”可以查看当前 load average 情况。</p>\n<p>第一位：表示最近1分钟平均负载；<br>第二位：表示最近5分钟平均负载；<br>第三位：表示最近15分钟平均负载。</p>\n<p>假设我们的系统是单CPU单内核的，把它比喻成是一条单向马路，把CPU任务比作汽车。当车不多的时候，load &lt; 1；当车占满整个马路的时候 load = 1；当马路都站满了，而且马路外还堆满了汽车的时候，load &gt; 1。</p>\n<p>我们经常会发现服务器Load &gt; 1但是运行仍然不错，那是因为服务器是多核处理器。假设我们服务器CPU是2核，那么将意味我们拥有2条马路，我们的Load = 2时，所有马路都跑满车辆。</p>\n<ul>\n<li>0.7 &lt; load &lt; 1：此时是不错的状态，如果进来更多的汽车，你的马路仍然可以应付；</li>\n<li>load = 1：你的马路即将拥堵，而且没有更多的资源额外的任务，赶紧看看发生了什么吧；</li>\n<li>load &gt; 5：非常严重拥堵，我们的马路非常繁忙，每辆车都无法很快的运行。</li>\n</ul>\n<p>通常我们先看15分钟load，如果load很高，再看1分钟和5分钟负载，查看是否有下降趋势。1分钟负载值 &gt; 1，那么我们不用担心，但是如果15分钟负载都超过1，我们要赶紧看看发生了什么事情。所以我们要根据实际情况查看这三个值。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/3602805.html\" target=\"_blank\" rel=\"noopener\">Linux系统中的load average</a>  <a href=\"http://www.cnblogs.com/ghj1976/p/5611220.html\" target=\"_blank\" rel=\"noopener\">linux 平均负载 load average 的含义</a>  <a href=\"http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html\" target=\"_blank\" rel=\"noopener\">linux的top命令参数详解</a>  <a href=\"http://www.runoob.com/linux/linux-comm-top.html\" target=\"_blank\" rel=\"noopener\">Linux top命令</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>\n<p>top 显示系统当前的进程和其他状况，是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用、内存使用、执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p>\n<h3 id=\"参数含义\"><a href=\"#参数含义\" class=\"headerlink\" title=\"参数含义\"></a>参数含义</h3><p><img src=\"/images/2017-6-7 095218.png\" alt=\"2017-6-7 095218\"></p>\n<p>统计信息区前五行是系统整体的统计信息。</p>\n<p>第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>09:51:29</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>up 423 days</td>\n<td>已经运行天数</td>\n</tr>\n<tr>\n<td>15:28</td>\n<td>系统运行时间，格式为时:分</td>\n</tr>\n<tr>\n<td>5 users</td>\n<td>当前登录用户数</td>\n</tr>\n<tr>\n<td>load average: 0.09, 0.04, 0.05</td>\n<td>系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</td>\n</tr>\n</tbody>\n</table>\n<p>第二行是进程信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>143 total</td>\n<td>进程总数</td>\n</tr>\n<tr>\n<td>2 running</td>\n<td>正在运行的进程数</td>\n</tr>\n<tr>\n<td>138 sleeping</td>\n<td>睡眠的进程数</td>\n</tr>\n<tr>\n<td>0 stopped</td>\n<td>停止的进程数</td>\n</tr>\n<tr>\n<td>3 zombie</td>\n<td>僵尸进程数</td>\n</tr>\n</tbody>\n</table>\n<p>第三行是CPU信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.0 us</td>\n<td>用户空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.3 sy</td>\n<td>内核空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0 ni</td>\n<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>\n</tr>\n<tr>\n<td>97.7 id</td>\n<td>空闲CPU百分比</td>\n</tr>\n<tr>\n<td>1.0 wa</td>\n<td>等待输入输出的CPU时间百分比</td>\n</tr>\n<tr>\n<td>0.0 hi</td>\n<td>硬件CPU中断占用百分比</td>\n</tr>\n<tr>\n<td>0.0 si</td>\n<td>软中断占用百分比</td>\n</tr>\n<tr>\n<td>0.0 st</td>\n<td>虚拟机占用百分比</td>\n</tr>\n</tbody>\n</table>\n<p>最后两行是内存信息。其内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KiB Mem：</td>\n<td></td>\n</tr>\n<tr>\n<td>1016656 total</td>\n<td>物理内存总量</td>\n</tr>\n<tr>\n<td>936036 used</td>\n<td>使用的物理内存总量</td>\n</tr>\n<tr>\n<td>80620 free</td>\n<td>空闲内存总量</td>\n</tr>\n<tr>\n<td>77144 buffers</td>\n<td>用作内核缓存的内存量</td>\n</tr>\n<tr>\n<td>KiB Swap：</td>\n<td></td>\n</tr>\n<tr>\n<td>0 total</td>\n<td>交换区总量</td>\n</tr>\n<tr>\n<td>0 used</td>\n<td>使用的交换区总量</td>\n</tr>\n<tr>\n<td>0 free</td>\n<td>空闲交换区总量</td>\n</tr>\n<tr>\n<td>178128 cached Mem</td>\n<td>缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。</td>\n</tr>\n</tbody>\n</table>\n<p>进程信息区统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>列名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>PID</td>\n<td>进程id</td>\n</tr>\n<tr>\n<td>2</td>\n<td>PPID</td>\n<td>父进程id</td>\n</tr>\n<tr>\n<td>3</td>\n<td>RUSER</td>\n<td>真正的用户名</td>\n</tr>\n<tr>\n<td>4</td>\n<td>UID</td>\n<td>进程所有者的用户id</td>\n</tr>\n<tr>\n<td>5</td>\n<td>USER</td>\n<td>进程所有者的用户名</td>\n</tr>\n<tr>\n<td>6</td>\n<td>GROUP</td>\n<td>进程所有者的组名</td>\n</tr>\n<tr>\n<td>7</td>\n<td>TTY</td>\n<td>启动进程的终端名。不是从终端启动的进程则显示为 ?</td>\n</tr>\n<tr>\n<td>8</td>\n<td>PR</td>\n<td>优先级</td>\n</tr>\n<tr>\n<td>9</td>\n<td>NI</td>\n<td>nice值。负值表示高优先级，正值表示低优先级</td>\n</tr>\n<tr>\n<td>10</td>\n<td>P</td>\n<td>最后使用的CPU，仅在多CPU环境下有意义</td>\n</tr>\n<tr>\n<td>11</td>\n<td>%CPU</td>\n<td>上次更新到现在的CPU时间占用百分比</td>\n</tr>\n<tr>\n<td>12</td>\n<td>TIME</td>\n<td>进程使用的CPU时间总计，单位秒</td>\n</tr>\n<tr>\n<td>13</td>\n<td>TIME+</td>\n<td>进程使用的CPU时间总计，单位1/100秒</td>\n</tr>\n<tr>\n<td>14</td>\n<td>%MEM</td>\n<td>进程使用的物理内存百分比</td>\n</tr>\n<tr>\n<td>15</td>\n<td>VIRT</td>\n<td>进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SWAP</td>\n<td>进程使用的虚拟内存中，被换出的大小，单位kb。</td>\n</tr>\n<tr>\n<td>17</td>\n<td>RES</td>\n<td>进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td>\n</tr>\n<tr>\n<td>18</td>\n<td>CODE</td>\n<td>可执行代码占用的物理内存大小，单位kb</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DATA</td>\n<td>可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SHR</td>\n<td>共享内存大小，单位kb</td>\n</tr>\n<tr>\n<td>21</td>\n<td>nFLT</td>\n<td>页面错误次数</td>\n</tr>\n<tr>\n<td>22</td>\n<td>nDRT</td>\n<td>最后一次写入到现在，被修改过的页面数。</td>\n</tr>\n<tr>\n<td>23</td>\n<td>S</td>\n<td>进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)</td>\n</tr>\n<tr>\n<td>24</td>\n<td>COMMAND</td>\n<td>命令名/命令行</td>\n</tr>\n<tr>\n<td>25</td>\n<td>WCHAN</td>\n<td>若该进程在睡眠，则显示睡眠中的系统函数名</td>\n</tr>\n<tr>\n<td>26</td>\n<td>Flags</td>\n<td>任务标志，参考 sched.h</td>\n</tr>\n</tbody>\n</table>\n<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。</p>\n<p>可以通过下面的快捷键来更改显示内容。 更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。 按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。 按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。</p>\n<h3 id=\"命令使用\"><a href=\"#命令使用\" class=\"headerlink\" title=\"命令使用\"></a>命令使用</h3><p>top 使用格式</p>\n<p><code>top [-] [d] [q] [c] [S] [s] [i] [n] [b]</code></p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td>改变显示的更新速度，或是在交互式指令列( interactive command)按 s</td>\n</tr>\n<tr>\n<td>q</td>\n<td>没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</td>\n</tr>\n<tr>\n<td>c</td>\n<td>切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来</td>\n</tr>\n<tr>\n<td>s</td>\n<td>安全模式，将交互式指令取消, 避免潜在的危机</td>\n</tr>\n<tr>\n<td>i</td>\n<td>不显示任何闲置 (idle) 或无用 (zombie) 的行程</td>\n</tr>\n<tr>\n<td>n</td>\n<td>更新的次数，完成后将会退出 top</td>\n</tr>\n<tr>\n<td>b</td>\n<td>批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"交互命令\"><a href=\"#交互命令\" class=\"headerlink\" title=\"交互命令\"></a>交互命令</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h / ?</td>\n<td>显示帮助画面，给出一些简短的命令总结说明</td>\n</tr>\n<tr>\n<td>k</td>\n<td>终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽</td>\n</tr>\n<tr>\n<td>i</td>\n<td>忽略闲置和僵死进程。这是一个开关式命令</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出程序</td>\n</tr>\n<tr>\n<td>r</td>\n<td>重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10</td>\n</tr>\n<tr>\n<td>S</td>\n<td>切换到累计模式</td>\n</tr>\n<tr>\n<td>s</td>\n<td>改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加</td>\n</tr>\n<tr>\n<td>f / F</td>\n<td>从当前显示中添加或者删除项目</td>\n</tr>\n<tr>\n<td>o / O</td>\n<td>改变显示项目的顺序</td>\n</tr>\n<tr>\n<td>l</td>\n<td>切换显示平均负载和启动时间信息</td>\n</tr>\n<tr>\n<td>m</td>\n<td>切换显示内存信息</td>\n</tr>\n<tr>\n<td>t</td>\n<td>切换显示进程和CPU状态信息</td>\n</tr>\n<tr>\n<td>c</td>\n<td>切换显示命令名称和完整命令行</td>\n</tr>\n<tr>\n<td>M</td>\n<td>根据驻留内存大小进行排序</td>\n</tr>\n<tr>\n<td>P</td>\n<td>根据CPU使用百分比大小进行排序</td>\n</tr>\n<tr>\n<td>T</td>\n<td>根据时间/累计时间进行排序</td>\n</tr>\n<tr>\n<td>W</td>\n<td>将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>top</td>\n<td>每隔5秒显式所有进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -d 2</td>\n<td>每隔2秒显式所有进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -c</td>\n<td>每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)</td>\n</tr>\n<tr>\n<td>top -p 12345 -p 6789</td>\n<td>每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况</td>\n</tr>\n<tr>\n<td>top -d 2 -c -p 123456</td>\n<td>每隔2秒显示pid是12345的进程的资源使用情况，并显示该进程启动的命令行参数</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Load-Average\"><a href=\"#Load-Average\" class=\"headerlink\" title=\"Load Average\"></a>Load Average</h4><p>平均负载 (load average) 是指系统的运行队列的平均利用率，也可以认为是可运行进程的平均数。通过系统命令”w” 或”top”可以查看当前 load average 情况。</p>\n<p>第一位：表示最近1分钟平均负载；<br>第二位：表示最近5分钟平均负载；<br>第三位：表示最近15分钟平均负载。</p>\n<p>假设我们的系统是单CPU单内核的，把它比喻成是一条单向马路，把CPU任务比作汽车。当车不多的时候，load &lt; 1；当车占满整个马路的时候 load = 1；当马路都站满了，而且马路外还堆满了汽车的时候，load &gt; 1。</p>\n<p>我们经常会发现服务器Load &gt; 1但是运行仍然不错，那是因为服务器是多核处理器。假设我们服务器CPU是2核，那么将意味我们拥有2条马路，我们的Load = 2时，所有马路都跑满车辆。</p>\n<ul>\n<li>0.7 &lt; load &lt; 1：此时是不错的状态，如果进来更多的汽车，你的马路仍然可以应付；</li>\n<li>load = 1：你的马路即将拥堵，而且没有更多的资源额外的任务，赶紧看看发生了什么吧；</li>\n<li>load &gt; 5：非常严重拥堵，我们的马路非常繁忙，每辆车都无法很快的运行。</li>\n</ul>\n<p>通常我们先看15分钟load，如果load很高，再看1分钟和5分钟负载，查看是否有下降趋势。1分钟负载值 &gt; 1，那么我们不用担心，但是如果15分钟负载都超过1，我们要赶紧看看发生了什么事情。所以我们要根据实际情况查看这三个值。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/3602805.html\" target=\"_blank\" rel=\"noopener\">Linux系统中的load average</a>  <a href=\"http://www.cnblogs.com/ghj1976/p/5611220.html\" target=\"_blank\" rel=\"noopener\">linux 平均负载 load average 的含义</a>  <a href=\"http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html\" target=\"_blank\" rel=\"noopener\">linux的top命令参数详解</a>  <a href=\"http://www.runoob.com/linux/linux-comm-top.html\" target=\"_blank\" rel=\"noopener\">Linux top命令</a></p>\n</blockquote>\n"},{"title":"数据库事物及其隔离级别","date":"2017-08-28T11:52:05.000Z","_content":"\n学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了事务的四中隔离级别。\n\n### 事务 ACID 特性\n\n#### 原子性：Atomicity\n\n事务必须是原子工作单元；对于其执行的数据修改操作，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。\n\n#### 一致性：Consistency\n\n事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n#### 隔离性：Isolation\n\n由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为隔离性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。\n\n即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n#### 持久性：Durability\n\n事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。\n\n例如我们在操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n以上介绍完事务的 ACID 特性，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n### 并发事务的问题\n\n#### 丢失更新\n\n当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。\n\n例如，两个编辑人员制作了同一文档的电子复本。每个编辑人员独立地更改其复本，然后保存更改后的复本，这样就覆盖了原始文档。最后保存其更改复本的编辑人员覆盖了第一个编辑人员所做的更改。如果在第一个编辑人员完成之后第二个编辑人员才能进行更改，则可以避免该问题。\n\n#### 脏读\n\n读“脏”数据是指事务 T1 修改某一数据，并将其写回磁盘，事务 T2 读取同一数据后，T1 由于某种原因被除撤消，而此时T1 把已修改过的数据又恢复原值，T2 读到的数据与数据库的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。简单来说就是，事务 T2 读取了事务 T1 还未提交的更新。\n\n例如：一个编辑人员正在更改电子文档。在更改过程中，另一个编辑人员复制了该文档（该复本包含到目前为止所做的全部更改）并将其分发给预期的用户。此后，第一个编辑人员认为所做的更改是错误的，于是删除了所做的编辑并保存了文档。分发给用户的文档包含不再存在的编辑内容，并且这些编辑内容应认为从未存在过。如果在第一个编辑人员确定最终更改前任何人都不能读取更改的文档，则可以避免该问题。\n\n#### 不可重复读\n\n指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法读取前一次结果。\n\n#### 幻读\n\n按一定条件从数据库中读取了某些记录后，T2 删除了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录消失；T1 按一定条件从数据库中读取某些数据记录后，T2 插入了一些记录，当 T1 再次按相同条件读取数据时，发现多了一些记录。\n\n### 事务隔离级别\n\n#### 读取未提交内容：Read Uncommitted\n\n- 所有事务都可以看到其他未提交事务的执行结果\n- 一个事物更新的时候不允许另一更新，但允许另一事务读取，不会出现丢失更新\n- 该级别引发的问题是 - 脏读：读取到了未提交的数据\n\n该隔离级别可以通过“排他写锁”实现。\n\n#### 读取提交内容：Read Committed\n\n- 这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）\n- 一个事物更新的时候不允许读取，必须等到更新事物提交后才能读取\n- 这种隔离级别出现的问题是 - 不可重复读：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：\n  - 有一个交叉的事务有新的commit，导致了数据的改变\n  - 一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit\n\n#### 可重复读：Repeatable Read\n\n- 这是 MySQL 的默认事务隔离级别\n- 一个事物读取时，不允许更新，但允许插入\n- 此级别可能出现的问题 - 幻读：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行\n- InnoDB 和 Falcon 存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题\n\n#### 序列化：Serializable\n\n- 这是最高的隔离级别\n- 它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁\n- 在这个级别，可能导致大量的超时现象和锁竞争\n\n\n\n> Read More：\n>\n> [数据库事物隔离级别通俗理解](https://www.oschina.net/question/258230_134502)\n>\n> [数据库事务](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607?fr=aladdin)\n>\n> [事务隔离级别](https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2638091?fr=aladdin)\n>\n> [更改MySQL的默认事务隔离级别](http://blog.csdn.net/u012712087/article/details/46402433)\n>\n> [数据库事务的四大特性以及事务的隔离级别](http://www.cnblogs.com/fjdingsd/p/5273008.html)\n>\n> [[MySQL]--通过例子理解事务的4中隔离级别](http://www.cnblogs.com/snsdzjlz320/p/5761387.html)\n\n","source":"_posts/mysqltransaction.md","raw":"---\ntitle: 数据库事物及其隔离级别\ndate: 2017-08-28 19:52:05\ntags: \n - 数据库\n - 事物\n - 事物隔离\ncategories:\n - 数据库\n---\n\n学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了事务的四中隔离级别。\n\n### 事务 ACID 特性\n\n#### 原子性：Atomicity\n\n事务必须是原子工作单元；对于其执行的数据修改操作，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。\n\n#### 一致性：Consistency\n\n事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n#### 隔离性：Isolation\n\n由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为隔离性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。\n\n即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n#### 持久性：Durability\n\n事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。\n\n例如我们在操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n以上介绍完事务的 ACID 特性，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n### 并发事务的问题\n\n#### 丢失更新\n\n当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。\n\n例如，两个编辑人员制作了同一文档的电子复本。每个编辑人员独立地更改其复本，然后保存更改后的复本，这样就覆盖了原始文档。最后保存其更改复本的编辑人员覆盖了第一个编辑人员所做的更改。如果在第一个编辑人员完成之后第二个编辑人员才能进行更改，则可以避免该问题。\n\n#### 脏读\n\n读“脏”数据是指事务 T1 修改某一数据，并将其写回磁盘，事务 T2 读取同一数据后，T1 由于某种原因被除撤消，而此时T1 把已修改过的数据又恢复原值，T2 读到的数据与数据库的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。简单来说就是，事务 T2 读取了事务 T1 还未提交的更新。\n\n例如：一个编辑人员正在更改电子文档。在更改过程中，另一个编辑人员复制了该文档（该复本包含到目前为止所做的全部更改）并将其分发给预期的用户。此后，第一个编辑人员认为所做的更改是错误的，于是删除了所做的编辑并保存了文档。分发给用户的文档包含不再存在的编辑内容，并且这些编辑内容应认为从未存在过。如果在第一个编辑人员确定最终更改前任何人都不能读取更改的文档，则可以避免该问题。\n\n#### 不可重复读\n\n指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法读取前一次结果。\n\n#### 幻读\n\n按一定条件从数据库中读取了某些记录后，T2 删除了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录消失；T1 按一定条件从数据库中读取某些数据记录后，T2 插入了一些记录，当 T1 再次按相同条件读取数据时，发现多了一些记录。\n\n### 事务隔离级别\n\n#### 读取未提交内容：Read Uncommitted\n\n- 所有事务都可以看到其他未提交事务的执行结果\n- 一个事物更新的时候不允许另一更新，但允许另一事务读取，不会出现丢失更新\n- 该级别引发的问题是 - 脏读：读取到了未提交的数据\n\n该隔离级别可以通过“排他写锁”实现。\n\n#### 读取提交内容：Read Committed\n\n- 这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）\n- 一个事物更新的时候不允许读取，必须等到更新事物提交后才能读取\n- 这种隔离级别出现的问题是 - 不可重复读：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：\n  - 有一个交叉的事务有新的commit，导致了数据的改变\n  - 一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit\n\n#### 可重复读：Repeatable Read\n\n- 这是 MySQL 的默认事务隔离级别\n- 一个事物读取时，不允许更新，但允许插入\n- 此级别可能出现的问题 - 幻读：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行\n- InnoDB 和 Falcon 存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题\n\n#### 序列化：Serializable\n\n- 这是最高的隔离级别\n- 它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁\n- 在这个级别，可能导致大量的超时现象和锁竞争\n\n\n\n> Read More：\n>\n> [数据库事物隔离级别通俗理解](https://www.oschina.net/question/258230_134502)\n>\n> [数据库事务](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607?fr=aladdin)\n>\n> [事务隔离级别](https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2638091?fr=aladdin)\n>\n> [更改MySQL的默认事务隔离级别](http://blog.csdn.net/u012712087/article/details/46402433)\n>\n> [数据库事务的四大特性以及事务的隔离级别](http://www.cnblogs.com/fjdingsd/p/5273008.html)\n>\n> [[MySQL]--通过例子理解事务的4中隔离级别](http://www.cnblogs.com/snsdzjlz320/p/5761387.html)\n\n","slug":"mysqltransaction","published":1,"updated":"2020-10-25T06:43:32.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6p009nmolc8clyvnun","content":"<p>学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了事务的四中隔离级别。</p>\n<h3 id=\"事务-ACID-特性\"><a href=\"#事务-ACID-特性\" class=\"headerlink\" title=\"事务 ACID 特性\"></a>事务 ACID 特性</h3><h4 id=\"原子性：Atomicity\"><a href=\"#原子性：Atomicity\" class=\"headerlink\" title=\"原子性：Atomicity\"></a>原子性：Atomicity</h4><p>事务必须是原子工作单元；对于其执行的数据修改操作，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p>\n<h4 id=\"一致性：Consistency\"><a href=\"#一致性：Consistency\" class=\"headerlink\" title=\"一致性：Consistency\"></a>一致性：Consistency</h4><p>事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h4 id=\"隔离性：Isolation\"><a href=\"#隔离性：Isolation\" class=\"headerlink\" title=\"隔离性：Isolation\"></a>隔离性：Isolation</h4><p>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为隔离性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。</p>\n<p>即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<h4 id=\"持久性：Durability\"><a href=\"#持久性：Durability\" class=\"headerlink\" title=\"持久性：Durability\"></a>持久性：Durability</h4><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p>\n<p>例如我们在操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>以上介绍完事务的 ACID 特性，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h3 id=\"并发事务的问题\"><a href=\"#并发事务的问题\" class=\"headerlink\" title=\"并发事务的问题\"></a>并发事务的问题</h3><h4 id=\"丢失更新\"><a href=\"#丢失更新\" class=\"headerlink\" title=\"丢失更新\"></a>丢失更新</h4><p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。</p>\n<p>例如，两个编辑人员制作了同一文档的电子复本。每个编辑人员独立地更改其复本，然后保存更改后的复本，这样就覆盖了原始文档。最后保存其更改复本的编辑人员覆盖了第一个编辑人员所做的更改。如果在第一个编辑人员完成之后第二个编辑人员才能进行更改，则可以避免该问题。</p>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><p>读“脏”数据是指事务 T1 修改某一数据，并将其写回磁盘，事务 T2 读取同一数据后，T1 由于某种原因被除撤消，而此时T1 把已修改过的数据又恢复原值，T2 读到的数据与数据库的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。简单来说就是，事务 T2 读取了事务 T1 还未提交的更新。</p>\n<p>例如：一个编辑人员正在更改电子文档。在更改过程中，另一个编辑人员复制了该文档（该复本包含到目前为止所做的全部更改）并将其分发给预期的用户。此后，第一个编辑人员认为所做的更改是错误的，于是删除了所做的编辑并保存了文档。分发给用户的文档包含不再存在的编辑内容，并且这些编辑内容应认为从未存在过。如果在第一个编辑人员确定最终更改前任何人都不能读取更改的文档，则可以避免该问题。</p>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法读取前一次结果。</p>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><p>按一定条件从数据库中读取了某些记录后，T2 删除了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录消失；T1 按一定条件从数据库中读取某些数据记录后，T2 插入了一些记录，当 T1 再次按相同条件读取数据时，发现多了一些记录。</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><h4 id=\"读取未提交内容：Read-Uncommitted\"><a href=\"#读取未提交内容：Read-Uncommitted\" class=\"headerlink\" title=\"读取未提交内容：Read Uncommitted\"></a>读取未提交内容：Read Uncommitted</h4><ul>\n<li>所有事务都可以看到其他未提交事务的执行结果</li>\n<li>一个事物更新的时候不允许另一更新，但允许另一事务读取，不会出现丢失更新</li>\n<li>该级别引发的问题是 - 脏读：读取到了未提交的数据</li>\n</ul>\n<p>该隔离级别可以通过“排他写锁”实现。</p>\n<h4 id=\"读取提交内容：Read-Committed\"><a href=\"#读取提交内容：Read-Committed\" class=\"headerlink\" title=\"读取提交内容：Read Committed\"></a>读取提交内容：Read Committed</h4><ul>\n<li>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）</li>\n<li>一个事物更新的时候不允许读取，必须等到更新事物提交后才能读取</li>\n<li>这种隔离级别出现的问题是 - 不可重复读：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：<ul>\n<li>有一个交叉的事务有新的commit，导致了数据的改变</li>\n<li>一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"可重复读：Repeatable-Read\"><a href=\"#可重复读：Repeatable-Read\" class=\"headerlink\" title=\"可重复读：Repeatable Read\"></a>可重复读：Repeatable Read</h4><ul>\n<li>这是 MySQL 的默认事务隔离级别</li>\n<li>一个事物读取时，不允许更新，但允许插入</li>\n<li>此级别可能出现的问题 - 幻读：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行</li>\n<li>InnoDB 和 Falcon 存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题</li>\n</ul>\n<h4 id=\"序列化：Serializable\"><a href=\"#序列化：Serializable\" class=\"headerlink\" title=\"序列化：Serializable\"></a>序列化：Serializable</h4><ul>\n<li>这是最高的隔离级别</li>\n<li>它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁</li>\n<li>在这个级别，可能导致大量的超时现象和锁竞争</li>\n</ul>\n<blockquote>\n<p>Read More：</p>\n<p><a href=\"https://www.oschina.net/question/258230_134502\" target=\"_blank\" rel=\"noopener\">数据库事物隔离级别通俗理解</a></p>\n<p><a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607?fr=aladdin\" target=\"_blank\" rel=\"noopener\">数据库事务</a></p>\n<p><a href=\"https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2638091?fr=aladdin\" target=\"_blank\" rel=\"noopener\">事务隔离级别</a></p>\n<p><a href=\"http://blog.csdn.net/u012712087/article/details/46402433\" target=\"_blank\" rel=\"noopener\">更改MySQL的默认事务隔离级别</a></p>\n<p><a href=\"http://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">数据库事务的四大特性以及事务的隔离级别</a></p>\n<p><a href=\"http://www.cnblogs.com/snsdzjlz320/p/5761387.html\" target=\"_blank\" rel=\"noopener\">[MySQL]–通过例子理解事务的4中隔离级别</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了事务的四中隔离级别。</p>\n<h3 id=\"事务-ACID-特性\"><a href=\"#事务-ACID-特性\" class=\"headerlink\" title=\"事务 ACID 特性\"></a>事务 ACID 特性</h3><h4 id=\"原子性：Atomicity\"><a href=\"#原子性：Atomicity\" class=\"headerlink\" title=\"原子性：Atomicity\"></a>原子性：Atomicity</h4><p>事务必须是原子工作单元；对于其执行的数据修改操作，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p>\n<h4 id=\"一致性：Consistency\"><a href=\"#一致性：Consistency\" class=\"headerlink\" title=\"一致性：Consistency\"></a>一致性：Consistency</h4><p>事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h4 id=\"隔离性：Isolation\"><a href=\"#隔离性：Isolation\" class=\"headerlink\" title=\"隔离性：Isolation\"></a>隔离性：Isolation</h4><p>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为隔离性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。</p>\n<p>即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<h4 id=\"持久性：Durability\"><a href=\"#持久性：Durability\" class=\"headerlink\" title=\"持久性：Durability\"></a>持久性：Durability</h4><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p>\n<p>例如我们在操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>以上介绍完事务的 ACID 特性，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h3 id=\"并发事务的问题\"><a href=\"#并发事务的问题\" class=\"headerlink\" title=\"并发事务的问题\"></a>并发事务的问题</h3><h4 id=\"丢失更新\"><a href=\"#丢失更新\" class=\"headerlink\" title=\"丢失更新\"></a>丢失更新</h4><p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。</p>\n<p>例如，两个编辑人员制作了同一文档的电子复本。每个编辑人员独立地更改其复本，然后保存更改后的复本，这样就覆盖了原始文档。最后保存其更改复本的编辑人员覆盖了第一个编辑人员所做的更改。如果在第一个编辑人员完成之后第二个编辑人员才能进行更改，则可以避免该问题。</p>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><p>读“脏”数据是指事务 T1 修改某一数据，并将其写回磁盘，事务 T2 读取同一数据后，T1 由于某种原因被除撤消，而此时T1 把已修改过的数据又恢复原值，T2 读到的数据与数据库的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。简单来说就是，事务 T2 读取了事务 T1 还未提交的更新。</p>\n<p>例如：一个编辑人员正在更改电子文档。在更改过程中，另一个编辑人员复制了该文档（该复本包含到目前为止所做的全部更改）并将其分发给预期的用户。此后，第一个编辑人员认为所做的更改是错误的，于是删除了所做的编辑并保存了文档。分发给用户的文档包含不再存在的编辑内容，并且这些编辑内容应认为从未存在过。如果在第一个编辑人员确定最终更改前任何人都不能读取更改的文档，则可以避免该问题。</p>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法读取前一次结果。</p>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><p>按一定条件从数据库中读取了某些记录后，T2 删除了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录消失；T1 按一定条件从数据库中读取某些数据记录后，T2 插入了一些记录，当 T1 再次按相同条件读取数据时，发现多了一些记录。</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><h4 id=\"读取未提交内容：Read-Uncommitted\"><a href=\"#读取未提交内容：Read-Uncommitted\" class=\"headerlink\" title=\"读取未提交内容：Read Uncommitted\"></a>读取未提交内容：Read Uncommitted</h4><ul>\n<li>所有事务都可以看到其他未提交事务的执行结果</li>\n<li>一个事物更新的时候不允许另一更新，但允许另一事务读取，不会出现丢失更新</li>\n<li>该级别引发的问题是 - 脏读：读取到了未提交的数据</li>\n</ul>\n<p>该隔离级别可以通过“排他写锁”实现。</p>\n<h4 id=\"读取提交内容：Read-Committed\"><a href=\"#读取提交内容：Read-Committed\" class=\"headerlink\" title=\"读取提交内容：Read Committed\"></a>读取提交内容：Read Committed</h4><ul>\n<li>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）</li>\n<li>一个事物更新的时候不允许读取，必须等到更新事物提交后才能读取</li>\n<li>这种隔离级别出现的问题是 - 不可重复读：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：<ul>\n<li>有一个交叉的事务有新的commit，导致了数据的改变</li>\n<li>一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"可重复读：Repeatable-Read\"><a href=\"#可重复读：Repeatable-Read\" class=\"headerlink\" title=\"可重复读：Repeatable Read\"></a>可重复读：Repeatable Read</h4><ul>\n<li>这是 MySQL 的默认事务隔离级别</li>\n<li>一个事物读取时，不允许更新，但允许插入</li>\n<li>此级别可能出现的问题 - 幻读：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行</li>\n<li>InnoDB 和 Falcon 存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题</li>\n</ul>\n<h4 id=\"序列化：Serializable\"><a href=\"#序列化：Serializable\" class=\"headerlink\" title=\"序列化：Serializable\"></a>序列化：Serializable</h4><ul>\n<li>这是最高的隔离级别</li>\n<li>它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁</li>\n<li>在这个级别，可能导致大量的超时现象和锁竞争</li>\n</ul>\n<blockquote>\n<p>Read More：</p>\n<p><a href=\"https://www.oschina.net/question/258230_134502\" target=\"_blank\" rel=\"noopener\">数据库事物隔离级别通俗理解</a></p>\n<p><a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607?fr=aladdin\" target=\"_blank\" rel=\"noopener\">数据库事务</a></p>\n<p><a href=\"https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2638091?fr=aladdin\" target=\"_blank\" rel=\"noopener\">事务隔离级别</a></p>\n<p><a href=\"http://blog.csdn.net/u012712087/article/details/46402433\" target=\"_blank\" rel=\"noopener\">更改MySQL的默认事务隔离级别</a></p>\n<p><a href=\"http://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">数据库事务的四大特性以及事务的隔离级别</a></p>\n<p><a href=\"http://www.cnblogs.com/snsdzjlz320/p/5761387.html\" target=\"_blank\" rel=\"noopener\">[MySQL]–通过例子理解事务的4中隔离级别</a></p>\n</blockquote>\n"},{"title":"项目部署Nginx+Tornado+Supervisor","date":"2017-09-03T08:21:00.000Z","_content":"\n在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。\n\n[Supervisor](http://supervisord.org/) 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。\n\n总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。\n\n#### Tornado\n\nTornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 [epoll](http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi) 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。\n\n程序入口：\n\n```\n# -*- coding: utf-8 -*-\nimport os.path\n\nimport tornado.escape\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.httpserver import HTTPServer\nfrom tornado.options import define, options\n\nfrom handlers import stream_handler\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"debug\", default=False, help=\"run in debug mode\")\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            # (r\"/\", main_handler.MainHandler),\n            (r\"/stream.*?\", stream_handler.StreamHandler),\n        ]\n        settings = dict(\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            debug=options.debug,\n        )\n        super(Application, self).__init__(handlers, **settings)\n\n    pass\n\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n执行以下命令运行：\n\n```\npython27 app.py --port=8081\n```\n\n**注意：** 因为我的机器上安装了不同版本的 Python 解释器，`python27` 是我为 Python 2.7.13 创建的软连接。\n\n以下一行代码必须有：\n\n```\ntornado.options.parse_command_line()\n```\n\n因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。\n\n#### Supervisor 管理 Tornado 进程\n\nSupervisor 的安装可以在官方文章中找到，可使用 `yum pip easy_insatll` 等方法。最简单的就是：\n\n```\npip27 install supervisor \n```\n\n**注意：** 因为我的机器上安装了不同版本的 pip 包，`pip27` 是我为 Python 2.7.13 使用的。\n\n创建文件夹：\n\n```\nmkdir /etc/supervisor\n```\n\n创建配置文件：\n\n```\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n修改 `/etc/supervisor/supervisord.conf` 文件内容，在文件结尾 `[include]` 节点处\n\n```\n; [include]\n; files = relative/directory/*.ini\n\n=>\n\n[include]\nfiles = conf.d/*.conf\n```\n\n保存并退出\n\n在 `/etc/supervisor/` 下创建 `conf.d ` 文件夹，及 `ProjectName.conf` (以项目名称命名的，例如：tornados.conf)\n\n执行：\n\n```\nvi tornados.conf\n```\n\n添加以下内容：\n\n```\n[group:tornados]\nprograms=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7\n\n[program:tornado-0]\n# 执行的命令\ncommand=python27 /home/ly/analysisweb/app.py --port=8020\n# 项目目录\ndirectory=/home/ly/analysisweb/\n# 用户\nuser=root\n# 自动重启\nautorestart=true\nredirect_stderr=true\n# log文件路径\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log\n# log级别\nloglevel=info\n\n[program:tornado-1]\ncommand=python27 /home/ly/analysisweb/app.py --port=8021\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log\nloglevel=info\n\n[program:tornado-2]\ncommand=python27 /home/ly/analysisweb/app.py --port=8022\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log\nloglevel=info\n\n[program:tornado-3]\ncommand=python27 /home/ly/analysisweb/app.py --port=8023\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log\nloglevel=info\n\n[program:tornado-4]\ncommand=python27 /home/ly/analysisweb/app.py --port=8024\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log\nloglevel=info\n\n[program:tornado-5]\ncommand=python27 /home/ly/analysisweb/app.py --port=8025\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log\nloglevel=info\n\n[program:tornado-6]\ncommand=python27 /home/ly/analysisweb/app.py --port=8026\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log\nloglevel=info\n\n[program:tornado-7]\ncommand=python27 /home/ly/analysisweb/app.py --port=8027\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log\nloglevel=info\n```\n\n保存并退出\n\n执行以下命令启动 Supervisor ：\n\n```\nsupervisord -c /etc/supervisor/supervisord.conf\n```\n\n> 坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h\n>\n> 解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 `ps -ef | grep supervisor` 查看进程，杀掉 supervisor 的所有进程，重新运行 [参考这里](https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that) \n>\n> 坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock \n>\n> 解决办法：执行 `unlink /tmp/supervisor.sock` [参考这里](https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down) \n\n如果执行成功，`ps -ef | grep python` 结果如下：\n\n```\nroot     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021\nroot     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020\nroot     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022\nroot     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025\nroot     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024\nroot     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027\nroot     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026\n```\n\n#### Nginx 作反向代理\n\n![2017-9-1 161933](/images/2017-9-1 161933.jpg)\n\n安装好 Nginx 后，编辑 nginx.conf 文件：\n\n```\nhttp {\n    # 我启动了8个Tornado实例，配置不同端口\n    upstream tornados {\n        server 127.0.0.1:8020;\n        server 127.0.0.1:8021;\n        server 127.0.0.1:8022;\n        server 127.0.0.1:8023;\n        server 127.0.0.1:8024;\n        server 127.0.0.1:8025;\n        server 127.0.0.1:8026;\n        server 127.0.0.1:8027;\n    }\n    \n    proxy_next_upstream error;\n\n    server {\n        # nginx 监听8081端口\n        listen       8081;\n\t\t\n\t\t# 静态文件的路径\n        location /static/{\n            alias /home/ly/analysisweb/static/;\n            expires 24h;\n        }\n\n        location / {\n            proxy_pass_header Server;\n            proxy_set_header Host $http_host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_pass http://tornados;\n        }\n\n    }\n\n    server {\n        ......\n    }\n}\n```\n\n可参考 [运行和部署](http://tornado-zh.readthedocs.io/zh/latest/guide/running.html) \n\n以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）","source":"_posts/nginxtornadosupervisor.md","raw":"---\ntitle: 项目部署Nginx+Tornado+Supervisor\ndate: 2017-09-03 16:21:00\ntags:\n - Nginx\n - Tornado\n - Supervisor\n - 项目部署\ncategories:\n - 工程\n---\n\n在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。\n\n[Supervisor](http://supervisord.org/) 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。\n\n总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。\n\n#### Tornado\n\nTornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 [epoll](http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi) 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。\n\n程序入口：\n\n```\n# -*- coding: utf-8 -*-\nimport os.path\n\nimport tornado.escape\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.httpserver import HTTPServer\nfrom tornado.options import define, options\n\nfrom handlers import stream_handler\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"debug\", default=False, help=\"run in debug mode\")\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            # (r\"/\", main_handler.MainHandler),\n            (r\"/stream.*?\", stream_handler.StreamHandler),\n        ]\n        settings = dict(\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            debug=options.debug,\n        )\n        super(Application, self).__init__(handlers, **settings)\n\n    pass\n\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n执行以下命令运行：\n\n```\npython27 app.py --port=8081\n```\n\n**注意：** 因为我的机器上安装了不同版本的 Python 解释器，`python27` 是我为 Python 2.7.13 创建的软连接。\n\n以下一行代码必须有：\n\n```\ntornado.options.parse_command_line()\n```\n\n因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。\n\n#### Supervisor 管理 Tornado 进程\n\nSupervisor 的安装可以在官方文章中找到，可使用 `yum pip easy_insatll` 等方法。最简单的就是：\n\n```\npip27 install supervisor \n```\n\n**注意：** 因为我的机器上安装了不同版本的 pip 包，`pip27` 是我为 Python 2.7.13 使用的。\n\n创建文件夹：\n\n```\nmkdir /etc/supervisor\n```\n\n创建配置文件：\n\n```\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n修改 `/etc/supervisor/supervisord.conf` 文件内容，在文件结尾 `[include]` 节点处\n\n```\n; [include]\n; files = relative/directory/*.ini\n\n=>\n\n[include]\nfiles = conf.d/*.conf\n```\n\n保存并退出\n\n在 `/etc/supervisor/` 下创建 `conf.d ` 文件夹，及 `ProjectName.conf` (以项目名称命名的，例如：tornados.conf)\n\n执行：\n\n```\nvi tornados.conf\n```\n\n添加以下内容：\n\n```\n[group:tornados]\nprograms=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7\n\n[program:tornado-0]\n# 执行的命令\ncommand=python27 /home/ly/analysisweb/app.py --port=8020\n# 项目目录\ndirectory=/home/ly/analysisweb/\n# 用户\nuser=root\n# 自动重启\nautorestart=true\nredirect_stderr=true\n# log文件路径\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log\n# log级别\nloglevel=info\n\n[program:tornado-1]\ncommand=python27 /home/ly/analysisweb/app.py --port=8021\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log\nloglevel=info\n\n[program:tornado-2]\ncommand=python27 /home/ly/analysisweb/app.py --port=8022\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log\nloglevel=info\n\n[program:tornado-3]\ncommand=python27 /home/ly/analysisweb/app.py --port=8023\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log\nloglevel=info\n\n[program:tornado-4]\ncommand=python27 /home/ly/analysisweb/app.py --port=8024\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log\nloglevel=info\n\n[program:tornado-5]\ncommand=python27 /home/ly/analysisweb/app.py --port=8025\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log\nloglevel=info\n\n[program:tornado-6]\ncommand=python27 /home/ly/analysisweb/app.py --port=8026\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log\nloglevel=info\n\n[program:tornado-7]\ncommand=python27 /home/ly/analysisweb/app.py --port=8027\ndirectory=/home/ly/analysisweb/\nuser=root\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log\nloglevel=info\n```\n\n保存并退出\n\n执行以下命令启动 Supervisor ：\n\n```\nsupervisord -c /etc/supervisor/supervisord.conf\n```\n\n> 坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h\n>\n> 解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 `ps -ef | grep supervisor` 查看进程，杀掉 supervisor 的所有进程，重新运行 [参考这里](https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that) \n>\n> 坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock \n>\n> 解决办法：执行 `unlink /tmp/supervisor.sock` [参考这里](https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down) \n\n如果执行成功，`ps -ef | grep python` 结果如下：\n\n```\nroot     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf\nroot     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021\nroot     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020\nroot     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023\nroot     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022\nroot     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025\nroot     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024\nroot     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027\nroot     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026\n```\n\n#### Nginx 作反向代理\n\n![2017-9-1 161933](/images/2017-9-1 161933.jpg)\n\n安装好 Nginx 后，编辑 nginx.conf 文件：\n\n```\nhttp {\n    # 我启动了8个Tornado实例，配置不同端口\n    upstream tornados {\n        server 127.0.0.1:8020;\n        server 127.0.0.1:8021;\n        server 127.0.0.1:8022;\n        server 127.0.0.1:8023;\n        server 127.0.0.1:8024;\n        server 127.0.0.1:8025;\n        server 127.0.0.1:8026;\n        server 127.0.0.1:8027;\n    }\n    \n    proxy_next_upstream error;\n\n    server {\n        # nginx 监听8081端口\n        listen       8081;\n\t\t\n\t\t# 静态文件的路径\n        location /static/{\n            alias /home/ly/analysisweb/static/;\n            expires 24h;\n        }\n\n        location / {\n            proxy_pass_header Server;\n            proxy_set_header Host $http_host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_pass http://tornados;\n        }\n\n    }\n\n    server {\n        ......\n    }\n}\n```\n\n可参考 [运行和部署](http://tornado-zh.readthedocs.io/zh/latest/guide/running.html) \n\n以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）","slug":"nginxtornadosupervisor","published":1,"updated":"2020-10-25T06:43:32.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6r009pmolctkfw40rj","content":"<p>在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。</p>\n<p><a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">Supervisor</a> 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。</p>\n<p>总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。</p>\n<h4 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h4><p>Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 <a href=\"http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi\" target=\"_blank\" rel=\"noopener\">epoll</a> 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。</p>\n<p>程序入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import os.path</span><br><span class=\"line\"></span><br><span class=\"line\">import tornado.escape</span><br><span class=\"line\">import tornado.ioloop</span><br><span class=\"line\">import tornado.web</span><br><span class=\"line\">from tornado.httpserver import HTTPServer</span><br><span class=\"line\">from tornado.options import define, options</span><br><span class=\"line\"></span><br><span class=\"line\">from handlers import stream_handler</span><br><span class=\"line\"></span><br><span class=\"line\">define(&quot;port&quot;, default=8888, help=&quot;run on the given port&quot;, type=int)</span><br><span class=\"line\">define(&quot;debug&quot;, default=False, help=&quot;run in debug mode&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Application(tornado.web.Application):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        handlers = [</span><br><span class=\"line\">            # (r&quot;/&quot;, main_handler.MainHandler),</span><br><span class=\"line\">            (r&quot;/stream.*?&quot;, stream_handler.StreamHandler),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        settings = dict(</span><br><span class=\"line\">            template_path=os.path.join(os.path.dirname(__file__), &quot;templates&quot;),</span><br><span class=\"line\">            static_path=os.path.join(os.path.dirname(__file__), &quot;static&quot;),</span><br><span class=\"line\">            debug=options.debug,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        super(Application, self).__init__(handlers, **settings)</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    tornado.options.parse_command_line()</span><br><span class=\"line\">    http_server = HTTPServer(Application())</span><br><span class=\"line\">    http_server.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>执行以下命令运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python27 app.py --port=8081</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 Python 解释器，<code>python27</code> 是我为 Python 2.7.13 创建的软连接。</p>\n<p>以下一行代码必须有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tornado.options.parse_command_line()</span><br></pre></td></tr></table></figure>\n<p>因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。</p>\n<h4 id=\"Supervisor-管理-Tornado-进程\"><a href=\"#Supervisor-管理-Tornado-进程\" class=\"headerlink\" title=\"Supervisor 管理 Tornado 进程\"></a>Supervisor 管理 Tornado 进程</h4><p>Supervisor 的安装可以在官方文章中找到，可使用 <code>yum pip easy_insatll</code> 等方法。最简单的就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip27 install supervisor</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 pip 包，<code>pip27</code> 是我为 Python 2.7.13 使用的。</p>\n<p>创建文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/supervisor</span><br></pre></td></tr></table></figure>\n<p>创建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>修改 <code>/etc/supervisor/supervisord.conf</code> 文件内容，在文件结尾 <code>[include]</code> 节点处</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; [include]</span><br><span class=\"line\">; files = relative/directory/*.ini</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>保存并退出</p>\n<p>在 <code>/etc/supervisor/</code> 下创建 <code>conf.d</code> 文件夹，及 <code>ProjectName.conf</code> (以项目名称命名的，例如：tornados.conf)</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi tornados.conf</span><br></pre></td></tr></table></figure>\n<p>添加以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group:tornados]</span><br><span class=\"line\">programs=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-0]</span><br><span class=\"line\"># 执行的命令</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\"># 项目目录</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\"># 用户</span><br><span class=\"line\">user=root</span><br><span class=\"line\"># 自动重启</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\"># log文件路径</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log</span><br><span class=\"line\"># log级别</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-1]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-2]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-3]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-4]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8024</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-5]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8025</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-6]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8026</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-7]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8027</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log</span><br><span class=\"line\">loglevel=info</span><br></pre></td></tr></table></figure>\n<p>保存并退出</p>\n<p>执行以下命令启动 Supervisor ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h</p>\n<p>解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 <code>ps -ef | grep supervisor</code> 查看进程，杀掉 supervisor 的所有进程，重新运行 <a href=\"https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that\" target=\"_blank\" rel=\"noopener\">参考这里</a> </p>\n<p>坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock </p>\n<p>解决办法：执行 <code>unlink /tmp/supervisor.sock</code> <a href=\"https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down\" target=\"_blank\" rel=\"noopener\">参考这里</a> </p>\n</blockquote>\n<p>如果执行成功，<code>ps -ef | grep python</code> 结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">root     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025</span><br><span class=\"line\">root     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024</span><br><span class=\"line\">root     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027</span><br><span class=\"line\">root     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026</span><br></pre></td></tr></table></figure>\n<h4 id=\"Nginx-作反向代理\"><a href=\"#Nginx-作反向代理\" class=\"headerlink\" title=\"Nginx 作反向代理\"></a>Nginx 作反向代理</h4><p><img src=\"/images/2017-9-1 161933.jpg\" alt=\"2017-9-1 161933\"></p>\n<p>安装好 Nginx 后，编辑 nginx.conf 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    # 我启动了8个Tornado实例，配置不同端口</span><br><span class=\"line\">    upstream tornados &#123;</span><br><span class=\"line\">        server 127.0.0.1:8020;</span><br><span class=\"line\">        server 127.0.0.1:8021;</span><br><span class=\"line\">        server 127.0.0.1:8022;</span><br><span class=\"line\">        server 127.0.0.1:8023;</span><br><span class=\"line\">        server 127.0.0.1:8024;</span><br><span class=\"line\">        server 127.0.0.1:8025;</span><br><span class=\"line\">        server 127.0.0.1:8026;</span><br><span class=\"line\">        server 127.0.0.1:8027;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy_next_upstream error;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # nginx 监听8081端口</span><br><span class=\"line\">        listen       8081;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t# 静态文件的路径</span><br><span class=\"line\">        location /static/&#123;</span><br><span class=\"line\">            alias /home/ly/analysisweb/static/;</span><br><span class=\"line\">            expires 24h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass_header Server;</span><br><span class=\"line\">            proxy_set_header Host $http_host;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_pass http://tornados;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可参考 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/guide/running.html\" target=\"_blank\" rel=\"noopener\">运行和部署</a> </p>\n<p>以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。</p>\n<p><a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">Supervisor</a> 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。</p>\n<p>总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。</p>\n<h4 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h4><p>Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 <a href=\"http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi\" target=\"_blank\" rel=\"noopener\">epoll</a> 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。</p>\n<p>程序入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import os.path</span><br><span class=\"line\"></span><br><span class=\"line\">import tornado.escape</span><br><span class=\"line\">import tornado.ioloop</span><br><span class=\"line\">import tornado.web</span><br><span class=\"line\">from tornado.httpserver import HTTPServer</span><br><span class=\"line\">from tornado.options import define, options</span><br><span class=\"line\"></span><br><span class=\"line\">from handlers import stream_handler</span><br><span class=\"line\"></span><br><span class=\"line\">define(&quot;port&quot;, default=8888, help=&quot;run on the given port&quot;, type=int)</span><br><span class=\"line\">define(&quot;debug&quot;, default=False, help=&quot;run in debug mode&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Application(tornado.web.Application):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        handlers = [</span><br><span class=\"line\">            # (r&quot;/&quot;, main_handler.MainHandler),</span><br><span class=\"line\">            (r&quot;/stream.*?&quot;, stream_handler.StreamHandler),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        settings = dict(</span><br><span class=\"line\">            template_path=os.path.join(os.path.dirname(__file__), &quot;templates&quot;),</span><br><span class=\"line\">            static_path=os.path.join(os.path.dirname(__file__), &quot;static&quot;),</span><br><span class=\"line\">            debug=options.debug,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        super(Application, self).__init__(handlers, **settings)</span><br><span class=\"line\"></span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    tornado.options.parse_command_line()</span><br><span class=\"line\">    http_server = HTTPServer(Application())</span><br><span class=\"line\">    http_server.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>执行以下命令运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python27 app.py --port=8081</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 Python 解释器，<code>python27</code> 是我为 Python 2.7.13 创建的软连接。</p>\n<p>以下一行代码必须有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tornado.options.parse_command_line()</span><br></pre></td></tr></table></figure>\n<p>因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。</p>\n<h4 id=\"Supervisor-管理-Tornado-进程\"><a href=\"#Supervisor-管理-Tornado-进程\" class=\"headerlink\" title=\"Supervisor 管理 Tornado 进程\"></a>Supervisor 管理 Tornado 进程</h4><p>Supervisor 的安装可以在官方文章中找到，可使用 <code>yum pip easy_insatll</code> 等方法。最简单的就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip27 install supervisor</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 pip 包，<code>pip27</code> 是我为 Python 2.7.13 使用的。</p>\n<p>创建文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/supervisor</span><br></pre></td></tr></table></figure>\n<p>创建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>修改 <code>/etc/supervisor/supervisord.conf</code> 文件内容，在文件结尾 <code>[include]</code> 节点处</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; [include]</span><br><span class=\"line\">; files = relative/directory/*.ini</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>保存并退出</p>\n<p>在 <code>/etc/supervisor/</code> 下创建 <code>conf.d</code> 文件夹，及 <code>ProjectName.conf</code> (以项目名称命名的，例如：tornados.conf)</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi tornados.conf</span><br></pre></td></tr></table></figure>\n<p>添加以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group:tornados]</span><br><span class=\"line\">programs=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-0]</span><br><span class=\"line\"># 执行的命令</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\"># 项目目录</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\"># 用户</span><br><span class=\"line\">user=root</span><br><span class=\"line\"># 自动重启</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\"># log文件路径</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log</span><br><span class=\"line\"># log级别</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-1]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-2]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-3]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-4]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8024</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-5]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8025</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-6]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8026</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log</span><br><span class=\"line\">loglevel=info</span><br><span class=\"line\"></span><br><span class=\"line\">[program:tornado-7]</span><br><span class=\"line\">command=python27 /home/ly/analysisweb/app.py --port=8027</span><br><span class=\"line\">directory=/home/ly/analysisweb/</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log</span><br><span class=\"line\">loglevel=info</span><br></pre></td></tr></table></figure>\n<p>保存并退出</p>\n<p>执行以下命令启动 Supervisor ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h</p>\n<p>解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 <code>ps -ef | grep supervisor</code> 查看进程，杀掉 supervisor 的所有进程，重新运行 <a href=\"https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that\" target=\"_blank\" rel=\"noopener\">参考这里</a> </p>\n<p>坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock </p>\n<p>解决办法：执行 <code>unlink /tmp/supervisor.sock</code> <a href=\"https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down\" target=\"_blank\" rel=\"noopener\">参考这里</a> </p>\n</blockquote>\n<p>如果执行成功，<code>ps -ef | grep python</code> 结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">root     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021</span><br><span class=\"line\">root     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020</span><br><span class=\"line\">root     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</span><br><span class=\"line\">root     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</span><br><span class=\"line\">root     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025</span><br><span class=\"line\">root     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024</span><br><span class=\"line\">root     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027</span><br><span class=\"line\">root     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026</span><br></pre></td></tr></table></figure>\n<h4 id=\"Nginx-作反向代理\"><a href=\"#Nginx-作反向代理\" class=\"headerlink\" title=\"Nginx 作反向代理\"></a>Nginx 作反向代理</h4><p><img src=\"/images/2017-9-1 161933.jpg\" alt=\"2017-9-1 161933\"></p>\n<p>安装好 Nginx 后，编辑 nginx.conf 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    # 我启动了8个Tornado实例，配置不同端口</span><br><span class=\"line\">    upstream tornados &#123;</span><br><span class=\"line\">        server 127.0.0.1:8020;</span><br><span class=\"line\">        server 127.0.0.1:8021;</span><br><span class=\"line\">        server 127.0.0.1:8022;</span><br><span class=\"line\">        server 127.0.0.1:8023;</span><br><span class=\"line\">        server 127.0.0.1:8024;</span><br><span class=\"line\">        server 127.0.0.1:8025;</span><br><span class=\"line\">        server 127.0.0.1:8026;</span><br><span class=\"line\">        server 127.0.0.1:8027;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy_next_upstream error;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # nginx 监听8081端口</span><br><span class=\"line\">        listen       8081;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t# 静态文件的路径</span><br><span class=\"line\">        location /static/&#123;</span><br><span class=\"line\">            alias /home/ly/analysisweb/static/;</span><br><span class=\"line\">            expires 24h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass_header Server;</span><br><span class=\"line\">            proxy_set_header Host $http_host;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_pass http://tornados;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可参考 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/guide/running.html\" target=\"_blank\" rel=\"noopener\">运行和部署</a> </p>\n<p>以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）</p>\n"},{"title":"PHP关键字之self,final,static,this,parent","date":"2017-04-08T07:53:31.000Z","_content":"\n最近在看PHP手册，看到类和对象的时候，有一个“后期静态绑定”的内容，self，static，parent这几个关键字弄的我云里雾里，索性查了一些资料，看看self，final，static，this，parent这些关键字到底是什么意思。\n\n[官方文档解释：后期静态绑定](http://php.net/manual/zh/language.oop5.late-static-bindings.php)\n\n> 自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。\n>\n> 准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 :: 运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call()。可用 get_called_class() 函数来得到被调用的方法所在的类名，static:: 则指出了其范围。\n>\n> 该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。\n\n因为存在继承和不存在继承的情况下，self，static，parent关键字的作用不同，而this和final是不受继承限制的，我们先来看看this，final。\n\n### 关键字this\n\n```\nclass name                              //建立了一个名为name的类\n{\n    private $name;                      //定义属性，私有\n\n    //定义构造函数，用于初始化赋值\n    function __construct($name)\n    {\n        $this->name = $name;            //这里已经使用了this指针语句(1)\n    }\n\n    //析构函数\n    function __destruct()\n    {\n    }\n\n    //打印用户名成员函数\n    function print_name()\n    {\n        print($this->name);             //再次使用了this指针语句(2)\n    }\n}\n\n$obj1 = new name(\"PHP_Home\");            //实例化对象 语句(3)\n\n//执行打印\n$obj1->print_name();                    //输出:PBPHome\n\n//第二次实例化对象\n$obj2 = new name(\"PHP\");\n\n//执行打印\n$obj2->print_name();                    //输出：PHP\n```\n\n**Note**：上面的类分别在语句(1)和语句(2)使用了 this 指针，那么当时 this 是指向谁呢？其实 **this 是在实例化的时候来确定指向谁**，比如第一次实例化对象的时候（语句(3)），那么当时 this 就是指向 \\$obj1 对象，那么执行语句(2)的打印时就把\n\n```\nprint($this->name) \n```\n\n变成了 \n\n```\nprint($obj1->name)\n```\n\n那么当然就输出了\"PHP_Home\"。\n\n第二个实例的时候，\n\n```\nprint($this->name )\n```\n\n变成了\n\n```\nprint( $obj2->name)\n```\n\n于是就输出了\"PHP\"。所以说，**this 是指向当前对象实例的指针，不指向任何其他对象或类**。\n\n### 关键字final\n\n**如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承**。\n\nfinal 方法示例：\n\n```\nclass BaseClass {\n   public function test() {\n       echo \"BaseClass::test() called\\n\";\n   }\n   \n   final public function moreTesting() {\n       echo \"BaseClass::moreTesting() called\\n\";\n   }\n}\n\nclass ChildClass extends BaseClass {\n   public function moreTesting() {\n       echo \"ChildClass::moreTesting() called\\n\";\n   }\n}\n\n// 产生Fatal error: Cannot override final method BaseClass::moreTesting()\n```\n\nfinal 类示例：\n\n```\nfinal class BaseClass {\n   public function test() {\n       echo \"BaseClass::test() called\\n\";\n   }\n   \n   // 这里无论你是否将方法声明为final，都没有关系\n   final public function moreTesting() {\n       echo \"BaseClass::moreTesting() called\\n\";\n   }\n}\n\nclass ChildClass extends BaseClass {\n}\n\n// 产生 Fatal error: Class ChildClass may not inherit from final class (BaseClass)\n```\n\n**Note**：属性不能被定义为 final，只有类和方法才能被定义为 final。\n\n下面我们在存在继承和不存在继承两种情况下看看self，static，parent关键字的作用。\n\n### 不存在继承的时候\n\n顾名思义，不存在继承就是书写一个单独的类来使用。self 和 static 在范围解析操作符 （::） 的使用上，并无区别。\n\n在静态函数中，self 和 static 可以调用静态属性和静态函数（没有实例化类，因此不能调用非静态的属性和函数）。\n在非静态函数中，self 和 static 可以调用静态属性和静态函数以及非静态函数。\n不存在继承的情况下，self 和 static 的作用是一样的，同时可替换为 **类名::** 的方式调用。\n\n```\nclass Demo {\n    public static $static;\n    public $Nostatic;\n\n    public function __construct() {\n        self::$static = \"static\";\n        $this->Nostatic = \"Nostatic\";\n    }\n\n    public static function get() {\n        return __CLASS__;\n    }\n\n    public function show() {\n        return \"this is function show with \" . $this->Nostatic;\n    }\n\n    public function test() {\n        echo Demo::$static . \"<br/>\";   //使用类名调用静态属性\n        echo Demo::get() . \"<br/>\";     //使用类名调用静态属性\n        echo Demo::show() . \"<br/>\";    //使用类名调用静态属性\n        echo self::$static . \"<br/>\";   //self调用静态属性\n        echo self::show() . \"<br/>\";    //self调用非静态方法\n        echo self::get() . \"<br/>\";     //self调用静态方法\n        echo static::$static . \"<br/>\"; //static调用静态属性\n        echo static::show() . \"<br/>\";  //static调用非静态方法\n        echo static::get() . \"<br/>\";   //static调用静态方法\n    }\n}\n\n$obj = new Demo();\n$obj->test();\n```\n\n输出结果为：\n\n```\nstatic\nDemo\nthis is function show with Nostatic\nstatic\nthis is function show with Nostatic\nDemo\nstatic\nthis is function show with Nostatic\nDemo\n```\n\n### 存在继承的时候\n\n示例1：\n\n```\nclass A {\n    static function getClassName() {\n        return \"this is class A\";\n    }\n\n    static function testSelf() {\n        echo self::getClassName();\n    }\n\n    static function testStatic() {\n        echo static::getClassName();\n    }\n}\n\nclass B extends A {\n    static function getClassName() {\n        return \"this is class B\";\n    }\n}\n\nB::testSelf();\nB::testStatic();\n```\n\n输出结果为：\n\n```\nthis is class A\nthis is class B\n```\n\nNote：self 调用的静态方法或属性始终表示其在使用的时候的当前类（A）的方法或属性，可以替换为其类名，static 调用的静态方法或属性会在继承中被其子类重写覆盖，应该替换为对应的子类名（B）。\n\n对于parent关键字，用于调用父类的方法和属性。在静态方法中，可以调用父类的静态方法和属性；在非静态方法中，可以调用父类的方法和属性。\n\n```\nclass A {\n    public static $static;\n    public $Nostatic;\n\n    public function __construct() {\n        self::$static = \"static\";\n        $this->Nostatic = \"Nostatic\";\n    }\n\n    public static function staticFun() {\n        return self::$static;\n    }\n\n    public function noStaticFun() {\n        return \"this is function show with \" . $this->Nostatic;\n    }\n}\n\nclass B extends A {\n    static function testS() {\n        echo parent::staticFun();\n    }\n\n    function testNoS() {\n        echo parent::noStaticFun();\n    }\n}\n\n$obj = new B();\n$obj->testS();\n$obj->testNoS();\n```\n\n输出结果为：\n\n```\nstatic\nthis is function show with Nostatic\n```\n\n### PHP手册中的例子\n\n```\nclass A {\n    public static function foo() {\n        static::who();\n    }\n\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nclass B extends A {\n    public static function test() {\n        A::foo();\n        parent::foo();\n        self::foo();\n    }\n\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nclass C extends B {\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nC::test();\n```\n\n输出结果为：\n\n```\nA\nC\nC\n```\n\n我们分析 test() 方法：\n\n```\npublic static function test() {\n        A::foo();\n        parent::foo();\n        self::foo();\n}\n```\n\nA::foo()；这个语句是可以在任何地方执行的，它表示使用A去调用静态方法 foo() 得到“A”。 \n\nparent::foo()；C 的 parent 是 B ， B 的parent是A，回溯找到了A 的 foo 方法；static::who()；语句中的 static:: 调用的方法会被子类覆盖，所以优先调用 C 的 who() 方法，如果 C 的 who 方法不存在会调用 B 的 who 方法，如果 B 的 who 方法不存在会调用 A 的 who 方法。所以，输出结果是\"C\"。\n\nself::foo()；这个 self:: 是在 B 中使用的，所以 self:: 等价于 B:: ，但是 B 没有实现 foo() 方法，B 又继承自 A，所以我们实际上调用了 A::foo() 这个方法。foo() 方法使用了static::who() 语句，导致我们又调用了 C 的 who 函数。\n\n\n\n> 参考文章：\n>\n> [PHP中this,self,parent的区别](http://www.cnblogs.com/myjavawork/articles/1793664.html)  [Final 关键字](http://php.net/manual/zh/language.oop5.final.php)   [后期静态绑定](http://php.net/manual/zh/language.oop5.late-static-bindings.php)  [PHP中的self、static、parent关键字](http://blog.csdn.net/koastal/article/details/52166246)","source":"_posts/phpkeywords1.md","raw":"---\ntitle: PHP关键字之self,final,static,this,parent\ndate: 2017-04-08 15:53:31\ntags:\n - PHP\n - self\n - final\n - this\n - parent\n - static\ncategories:\n - PHP\n---\n\n最近在看PHP手册，看到类和对象的时候，有一个“后期静态绑定”的内容，self，static，parent这几个关键字弄的我云里雾里，索性查了一些资料，看看self，final，static，this，parent这些关键字到底是什么意思。\n\n[官方文档解释：后期静态绑定](http://php.net/manual/zh/language.oop5.late-static-bindings.php)\n\n> 自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。\n>\n> 准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 :: 运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call()。可用 get_called_class() 函数来得到被调用的方法所在的类名，static:: 则指出了其范围。\n>\n> 该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。\n\n因为存在继承和不存在继承的情况下，self，static，parent关键字的作用不同，而this和final是不受继承限制的，我们先来看看this，final。\n\n### 关键字this\n\n```\nclass name                              //建立了一个名为name的类\n{\n    private $name;                      //定义属性，私有\n\n    //定义构造函数，用于初始化赋值\n    function __construct($name)\n    {\n        $this->name = $name;            //这里已经使用了this指针语句(1)\n    }\n\n    //析构函数\n    function __destruct()\n    {\n    }\n\n    //打印用户名成员函数\n    function print_name()\n    {\n        print($this->name);             //再次使用了this指针语句(2)\n    }\n}\n\n$obj1 = new name(\"PHP_Home\");            //实例化对象 语句(3)\n\n//执行打印\n$obj1->print_name();                    //输出:PBPHome\n\n//第二次实例化对象\n$obj2 = new name(\"PHP\");\n\n//执行打印\n$obj2->print_name();                    //输出：PHP\n```\n\n**Note**：上面的类分别在语句(1)和语句(2)使用了 this 指针，那么当时 this 是指向谁呢？其实 **this 是在实例化的时候来确定指向谁**，比如第一次实例化对象的时候（语句(3)），那么当时 this 就是指向 \\$obj1 对象，那么执行语句(2)的打印时就把\n\n```\nprint($this->name) \n```\n\n变成了 \n\n```\nprint($obj1->name)\n```\n\n那么当然就输出了\"PHP_Home\"。\n\n第二个实例的时候，\n\n```\nprint($this->name )\n```\n\n变成了\n\n```\nprint( $obj2->name)\n```\n\n于是就输出了\"PHP\"。所以说，**this 是指向当前对象实例的指针，不指向任何其他对象或类**。\n\n### 关键字final\n\n**如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承**。\n\nfinal 方法示例：\n\n```\nclass BaseClass {\n   public function test() {\n       echo \"BaseClass::test() called\\n\";\n   }\n   \n   final public function moreTesting() {\n       echo \"BaseClass::moreTesting() called\\n\";\n   }\n}\n\nclass ChildClass extends BaseClass {\n   public function moreTesting() {\n       echo \"ChildClass::moreTesting() called\\n\";\n   }\n}\n\n// 产生Fatal error: Cannot override final method BaseClass::moreTesting()\n```\n\nfinal 类示例：\n\n```\nfinal class BaseClass {\n   public function test() {\n       echo \"BaseClass::test() called\\n\";\n   }\n   \n   // 这里无论你是否将方法声明为final，都没有关系\n   final public function moreTesting() {\n       echo \"BaseClass::moreTesting() called\\n\";\n   }\n}\n\nclass ChildClass extends BaseClass {\n}\n\n// 产生 Fatal error: Class ChildClass may not inherit from final class (BaseClass)\n```\n\n**Note**：属性不能被定义为 final，只有类和方法才能被定义为 final。\n\n下面我们在存在继承和不存在继承两种情况下看看self，static，parent关键字的作用。\n\n### 不存在继承的时候\n\n顾名思义，不存在继承就是书写一个单独的类来使用。self 和 static 在范围解析操作符 （::） 的使用上，并无区别。\n\n在静态函数中，self 和 static 可以调用静态属性和静态函数（没有实例化类，因此不能调用非静态的属性和函数）。\n在非静态函数中，self 和 static 可以调用静态属性和静态函数以及非静态函数。\n不存在继承的情况下，self 和 static 的作用是一样的，同时可替换为 **类名::** 的方式调用。\n\n```\nclass Demo {\n    public static $static;\n    public $Nostatic;\n\n    public function __construct() {\n        self::$static = \"static\";\n        $this->Nostatic = \"Nostatic\";\n    }\n\n    public static function get() {\n        return __CLASS__;\n    }\n\n    public function show() {\n        return \"this is function show with \" . $this->Nostatic;\n    }\n\n    public function test() {\n        echo Demo::$static . \"<br/>\";   //使用类名调用静态属性\n        echo Demo::get() . \"<br/>\";     //使用类名调用静态属性\n        echo Demo::show() . \"<br/>\";    //使用类名调用静态属性\n        echo self::$static . \"<br/>\";   //self调用静态属性\n        echo self::show() . \"<br/>\";    //self调用非静态方法\n        echo self::get() . \"<br/>\";     //self调用静态方法\n        echo static::$static . \"<br/>\"; //static调用静态属性\n        echo static::show() . \"<br/>\";  //static调用非静态方法\n        echo static::get() . \"<br/>\";   //static调用静态方法\n    }\n}\n\n$obj = new Demo();\n$obj->test();\n```\n\n输出结果为：\n\n```\nstatic\nDemo\nthis is function show with Nostatic\nstatic\nthis is function show with Nostatic\nDemo\nstatic\nthis is function show with Nostatic\nDemo\n```\n\n### 存在继承的时候\n\n示例1：\n\n```\nclass A {\n    static function getClassName() {\n        return \"this is class A\";\n    }\n\n    static function testSelf() {\n        echo self::getClassName();\n    }\n\n    static function testStatic() {\n        echo static::getClassName();\n    }\n}\n\nclass B extends A {\n    static function getClassName() {\n        return \"this is class B\";\n    }\n}\n\nB::testSelf();\nB::testStatic();\n```\n\n输出结果为：\n\n```\nthis is class A\nthis is class B\n```\n\nNote：self 调用的静态方法或属性始终表示其在使用的时候的当前类（A）的方法或属性，可以替换为其类名，static 调用的静态方法或属性会在继承中被其子类重写覆盖，应该替换为对应的子类名（B）。\n\n对于parent关键字，用于调用父类的方法和属性。在静态方法中，可以调用父类的静态方法和属性；在非静态方法中，可以调用父类的方法和属性。\n\n```\nclass A {\n    public static $static;\n    public $Nostatic;\n\n    public function __construct() {\n        self::$static = \"static\";\n        $this->Nostatic = \"Nostatic\";\n    }\n\n    public static function staticFun() {\n        return self::$static;\n    }\n\n    public function noStaticFun() {\n        return \"this is function show with \" . $this->Nostatic;\n    }\n}\n\nclass B extends A {\n    static function testS() {\n        echo parent::staticFun();\n    }\n\n    function testNoS() {\n        echo parent::noStaticFun();\n    }\n}\n\n$obj = new B();\n$obj->testS();\n$obj->testNoS();\n```\n\n输出结果为：\n\n```\nstatic\nthis is function show with Nostatic\n```\n\n### PHP手册中的例子\n\n```\nclass A {\n    public static function foo() {\n        static::who();\n    }\n\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nclass B extends A {\n    public static function test() {\n        A::foo();\n        parent::foo();\n        self::foo();\n    }\n\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nclass C extends B {\n    public static function who() {\n        echo __CLASS__ . \"\\n\";\n    }\n}\n\nC::test();\n```\n\n输出结果为：\n\n```\nA\nC\nC\n```\n\n我们分析 test() 方法：\n\n```\npublic static function test() {\n        A::foo();\n        parent::foo();\n        self::foo();\n}\n```\n\nA::foo()；这个语句是可以在任何地方执行的，它表示使用A去调用静态方法 foo() 得到“A”。 \n\nparent::foo()；C 的 parent 是 B ， B 的parent是A，回溯找到了A 的 foo 方法；static::who()；语句中的 static:: 调用的方法会被子类覆盖，所以优先调用 C 的 who() 方法，如果 C 的 who 方法不存在会调用 B 的 who 方法，如果 B 的 who 方法不存在会调用 A 的 who 方法。所以，输出结果是\"C\"。\n\nself::foo()；这个 self:: 是在 B 中使用的，所以 self:: 等价于 B:: ，但是 B 没有实现 foo() 方法，B 又继承自 A，所以我们实际上调用了 A::foo() 这个方法。foo() 方法使用了static::who() 语句，导致我们又调用了 C 的 who 函数。\n\n\n\n> 参考文章：\n>\n> [PHP中this,self,parent的区别](http://www.cnblogs.com/myjavawork/articles/1793664.html)  [Final 关键字](http://php.net/manual/zh/language.oop5.final.php)   [后期静态绑定](http://php.net/manual/zh/language.oop5.late-static-bindings.php)  [PHP中的self、static、parent关键字](http://blog.csdn.net/koastal/article/details/52166246)","slug":"phpkeywords1","published":1,"updated":"2020-10-25T06:43:32.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6u009tmolcd9voy6e0","content":"<p>最近在看PHP手册，看到类和对象的时候，有一个“后期静态绑定”的内容，self，static，parent这几个关键字弄的我云里雾里，索性查了一些资料，看看self，final，static，this，parent这些关键字到底是什么意思。</p>\n<p><a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php\" target=\"_blank\" rel=\"noopener\">官方文档解释：后期静态绑定</a></p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。</p>\n<p>准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 :: 运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call()。可用 get_called_class() 函数来得到被调用的方法所在的类名，static:: 则指出了其范围。</p>\n<p>该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。</p>\n</blockquote>\n<p>因为存在继承和不存在继承的情况下，self，static，parent关键字的作用不同，而this和final是不受继承限制的，我们先来看看this，final。</p>\n<h3 id=\"关键字this\"><a href=\"#关键字this\" class=\"headerlink\" title=\"关键字this\"></a>关键字this</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class name                              //建立了一个名为name的类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $name;                      //定义属性，私有</span><br><span class=\"line\"></span><br><span class=\"line\">    //定义构造函数，用于初始化赋值</span><br><span class=\"line\">    function __construct($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;name = $name;            //这里已经使用了this指针语句(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //析构函数</span><br><span class=\"line\">    function __destruct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //打印用户名成员函数</span><br><span class=\"line\">    function print_name()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print($this-&gt;name);             //再次使用了this指针语句(2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj1 = new name(&quot;PHP_Home&quot;);            //实例化对象 语句(3)</span><br><span class=\"line\"></span><br><span class=\"line\">//执行打印</span><br><span class=\"line\">$obj1-&gt;print_name();                    //输出:PBPHome</span><br><span class=\"line\"></span><br><span class=\"line\">//第二次实例化对象</span><br><span class=\"line\">$obj2 = new name(&quot;PHP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//执行打印</span><br><span class=\"line\">$obj2-&gt;print_name();                    //输出：PHP</span><br></pre></td></tr></table></figure>\n<p><strong>Note</strong>：上面的类分别在语句(1)和语句(2)使用了 this 指针，那么当时 this 是指向谁呢？其实 <strong>this 是在实例化的时候来确定指向谁</strong>，比如第一次实例化对象的时候（语句(3)），那么当时 this 就是指向 \\$obj1 对象，那么执行语句(2)的打印时就把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($this-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>变成了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($obj1-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>那么当然就输出了”PHP_Home”。</p>\n<p>第二个实例的时候，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($this-&gt;name )</span><br></pre></td></tr></table></figure>\n<p>变成了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print( $obj2-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>于是就输出了”PHP”。所以说，<strong>this 是指向当前对象实例的指针，不指向任何其他对象或类</strong>。</p>\n<h3 id=\"关键字final\"><a href=\"#关键字final\" class=\"headerlink\" title=\"关键字final\"></a>关键字final</h3><p><strong>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承</strong>。</p>\n<p>final 方法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseClass &#123;</span><br><span class=\"line\">   public function test() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::test() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   final public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ChildClass extends BaseClass &#123;</span><br><span class=\"line\">   public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;ChildClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 产生Fatal error: Cannot override final method BaseClass::moreTesting()</span><br></pre></td></tr></table></figure>\n<p>final 类示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final class BaseClass &#123;</span><br><span class=\"line\">   public function test() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::test() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   // 这里无论你是否将方法声明为final，都没有关系</span><br><span class=\"line\">   final public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ChildClass extends BaseClass &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 产生 Fatal error: Class ChildClass may not inherit from final class (BaseClass)</span><br></pre></td></tr></table></figure>\n<p><strong>Note</strong>：属性不能被定义为 final，只有类和方法才能被定义为 final。</p>\n<p>下面我们在存在继承和不存在继承两种情况下看看self，static，parent关键字的作用。</p>\n<h3 id=\"不存在继承的时候\"><a href=\"#不存在继承的时候\" class=\"headerlink\" title=\"不存在继承的时候\"></a>不存在继承的时候</h3><p>顾名思义，不存在继承就是书写一个单独的类来使用。self 和 static 在范围解析操作符 （::） 的使用上，并无区别。</p>\n<p>在静态函数中，self 和 static 可以调用静态属性和静态函数（没有实例化类，因此不能调用非静态的属性和函数）。<br>在非静态函数中，self 和 static 可以调用静态属性和静态函数以及非静态函数。<br>不存在继承的情况下，self 和 static 的作用是一样的，同时可替换为 <strong>类名::</strong> 的方式调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    public static $static;</span><br><span class=\"line\">    public $Nostatic;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        self::$static = &quot;static&quot;;</span><br><span class=\"line\">        $this-&gt;Nostatic = &quot;Nostatic&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function get() &#123;</span><br><span class=\"line\">        return __CLASS__;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function show() &#123;</span><br><span class=\"line\">        return &quot;this is function show with &quot; . $this-&gt;Nostatic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function test() &#123;</span><br><span class=\"line\">        echo Demo::$static . &quot;&lt;br/&gt;&quot;;   //使用类名调用静态属性</span><br><span class=\"line\">        echo Demo::get() . &quot;&lt;br/&gt;&quot;;     //使用类名调用静态属性</span><br><span class=\"line\">        echo Demo::show() . &quot;&lt;br/&gt;&quot;;    //使用类名调用静态属性</span><br><span class=\"line\">        echo self::$static . &quot;&lt;br/&gt;&quot;;   //self调用静态属性</span><br><span class=\"line\">        echo self::show() . &quot;&lt;br/&gt;&quot;;    //self调用非静态方法</span><br><span class=\"line\">        echo self::get() . &quot;&lt;br/&gt;&quot;;     //self调用静态方法</span><br><span class=\"line\">        echo static::$static . &quot;&lt;br/&gt;&quot;; //static调用静态属性</span><br><span class=\"line\">        echo static::show() . &quot;&lt;br/&gt;&quot;;  //static调用非静态方法</span><br><span class=\"line\">        echo static::get() . &quot;&lt;br/&gt;&quot;;   //static调用静态方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new Demo();</span><br><span class=\"line\">$obj-&gt;test();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static</span><br><span class=\"line\">Demo</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">Demo</span><br><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">Demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"存在继承的时候\"><a href=\"#存在继承的时候\" class=\"headerlink\" title=\"存在继承的时候\"></a>存在继承的时候</h3><p>示例1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    static function getClassName() &#123;</span><br><span class=\"line\">        return &quot;this is class A&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function testSelf() &#123;</span><br><span class=\"line\">        echo self::getClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function testStatic() &#123;</span><br><span class=\"line\">        echo static::getClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    static function getClassName() &#123;</span><br><span class=\"line\">        return &quot;this is class B&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B::testSelf();</span><br><span class=\"line\">B::testStatic();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is class A</span><br><span class=\"line\">this is class B</span><br></pre></td></tr></table></figure>\n<p>Note：self 调用的静态方法或属性始终表示其在使用的时候的当前类（A）的方法或属性，可以替换为其类名，static 调用的静态方法或属性会在继承中被其子类重写覆盖，应该替换为对应的子类名（B）。</p>\n<p>对于parent关键字，用于调用父类的方法和属性。在静态方法中，可以调用父类的静态方法和属性；在非静态方法中，可以调用父类的方法和属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    public static $static;</span><br><span class=\"line\">    public $Nostatic;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        self::$static = &quot;static&quot;;</span><br><span class=\"line\">        $this-&gt;Nostatic = &quot;Nostatic&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function staticFun() &#123;</span><br><span class=\"line\">        return self::$static;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function noStaticFun() &#123;</span><br><span class=\"line\">        return &quot;this is function show with &quot; . $this-&gt;Nostatic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    static function testS() &#123;</span><br><span class=\"line\">        echo parent::staticFun();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function testNoS() &#123;</span><br><span class=\"line\">        echo parent::noStaticFun();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new B();</span><br><span class=\"line\">$obj-&gt;testS();</span><br><span class=\"line\">$obj-&gt;testNoS();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP手册中的例子\"><a href=\"#PHP手册中的例子\" class=\"headerlink\" title=\"PHP手册中的例子\"></a>PHP手册中的例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    public static function foo() &#123;</span><br><span class=\"line\">        static::who();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    public static function test() &#123;</span><br><span class=\"line\">        A::foo();</span><br><span class=\"line\">        parent::foo();</span><br><span class=\"line\">        self::foo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C extends B &#123;</span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">C::test();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n<p>我们分析 test() 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function test() &#123;</span><br><span class=\"line\">        A::foo();</span><br><span class=\"line\">        parent::foo();</span><br><span class=\"line\">        self::foo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A::foo()；这个语句是可以在任何地方执行的，它表示使用A去调用静态方法 foo() 得到“A”。 </p>\n<p>parent::foo()；C 的 parent 是 B ， B 的parent是A，回溯找到了A 的 foo 方法；static::who()；语句中的 static:: 调用的方法会被子类覆盖，所以优先调用 C 的 who() 方法，如果 C 的 who 方法不存在会调用 B 的 who 方法，如果 B 的 who 方法不存在会调用 A 的 who 方法。所以，输出结果是”C”。</p>\n<p>self::foo()；这个 self:: 是在 B 中使用的，所以 self:: 等价于 B:: ，但是 B 没有实现 foo() 方法，B 又继承自 A，所以我们实际上调用了 A::foo() 这个方法。foo() 方法使用了static::who() 语句，导致我们又调用了 C 的 who 函数。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/myjavawork/articles/1793664.html\" target=\"_blank\" rel=\"noopener\">PHP中this,self,parent的区别</a>  <a href=\"http://php.net/manual/zh/language.oop5.final.php\" target=\"_blank\" rel=\"noopener\">Final 关键字</a>   <a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php\" target=\"_blank\" rel=\"noopener\">后期静态绑定</a>  <a href=\"http://blog.csdn.net/koastal/article/details/52166246\" target=\"_blank\" rel=\"noopener\">PHP中的self、static、parent关键字</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在看PHP手册，看到类和对象的时候，有一个“后期静态绑定”的内容，self，static，parent这几个关键字弄的我云里雾里，索性查了一些资料，看看self，final，static，this，parent这些关键字到底是什么意思。</p>\n<p><a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php\" target=\"_blank\" rel=\"noopener\">官方文档解释：后期静态绑定</a></p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。</p>\n<p>准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在 :: 运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call()。可用 get_called_class() 函数来得到被调用的方法所在的类名，static:: 则指出了其范围。</p>\n<p>该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。</p>\n</blockquote>\n<p>因为存在继承和不存在继承的情况下，self，static，parent关键字的作用不同，而this和final是不受继承限制的，我们先来看看this，final。</p>\n<h3 id=\"关键字this\"><a href=\"#关键字this\" class=\"headerlink\" title=\"关键字this\"></a>关键字this</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class name                              //建立了一个名为name的类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $name;                      //定义属性，私有</span><br><span class=\"line\"></span><br><span class=\"line\">    //定义构造函数，用于初始化赋值</span><br><span class=\"line\">    function __construct($name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;name = $name;            //这里已经使用了this指针语句(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //析构函数</span><br><span class=\"line\">    function __destruct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //打印用户名成员函数</span><br><span class=\"line\">    function print_name()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print($this-&gt;name);             //再次使用了this指针语句(2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj1 = new name(&quot;PHP_Home&quot;);            //实例化对象 语句(3)</span><br><span class=\"line\"></span><br><span class=\"line\">//执行打印</span><br><span class=\"line\">$obj1-&gt;print_name();                    //输出:PBPHome</span><br><span class=\"line\"></span><br><span class=\"line\">//第二次实例化对象</span><br><span class=\"line\">$obj2 = new name(&quot;PHP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//执行打印</span><br><span class=\"line\">$obj2-&gt;print_name();                    //输出：PHP</span><br></pre></td></tr></table></figure>\n<p><strong>Note</strong>：上面的类分别在语句(1)和语句(2)使用了 this 指针，那么当时 this 是指向谁呢？其实 <strong>this 是在实例化的时候来确定指向谁</strong>，比如第一次实例化对象的时候（语句(3)），那么当时 this 就是指向 \\$obj1 对象，那么执行语句(2)的打印时就把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($this-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>变成了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($obj1-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>那么当然就输出了”PHP_Home”。</p>\n<p>第二个实例的时候，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print($this-&gt;name )</span><br></pre></td></tr></table></figure>\n<p>变成了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print( $obj2-&gt;name)</span><br></pre></td></tr></table></figure>\n<p>于是就输出了”PHP”。所以说，<strong>this 是指向当前对象实例的指针，不指向任何其他对象或类</strong>。</p>\n<h3 id=\"关键字final\"><a href=\"#关键字final\" class=\"headerlink\" title=\"关键字final\"></a>关键字final</h3><p><strong>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承</strong>。</p>\n<p>final 方法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseClass &#123;</span><br><span class=\"line\">   public function test() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::test() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   final public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ChildClass extends BaseClass &#123;</span><br><span class=\"line\">   public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;ChildClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 产生Fatal error: Cannot override final method BaseClass::moreTesting()</span><br></pre></td></tr></table></figure>\n<p>final 类示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final class BaseClass &#123;</span><br><span class=\"line\">   public function test() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::test() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   // 这里无论你是否将方法声明为final，都没有关系</span><br><span class=\"line\">   final public function moreTesting() &#123;</span><br><span class=\"line\">       echo &quot;BaseClass::moreTesting() called\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ChildClass extends BaseClass &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 产生 Fatal error: Class ChildClass may not inherit from final class (BaseClass)</span><br></pre></td></tr></table></figure>\n<p><strong>Note</strong>：属性不能被定义为 final，只有类和方法才能被定义为 final。</p>\n<p>下面我们在存在继承和不存在继承两种情况下看看self，static，parent关键字的作用。</p>\n<h3 id=\"不存在继承的时候\"><a href=\"#不存在继承的时候\" class=\"headerlink\" title=\"不存在继承的时候\"></a>不存在继承的时候</h3><p>顾名思义，不存在继承就是书写一个单独的类来使用。self 和 static 在范围解析操作符 （::） 的使用上，并无区别。</p>\n<p>在静态函数中，self 和 static 可以调用静态属性和静态函数（没有实例化类，因此不能调用非静态的属性和函数）。<br>在非静态函数中，self 和 static 可以调用静态属性和静态函数以及非静态函数。<br>不存在继承的情况下，self 和 static 的作用是一样的，同时可替换为 <strong>类名::</strong> 的方式调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Demo &#123;</span><br><span class=\"line\">    public static $static;</span><br><span class=\"line\">    public $Nostatic;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        self::$static = &quot;static&quot;;</span><br><span class=\"line\">        $this-&gt;Nostatic = &quot;Nostatic&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function get() &#123;</span><br><span class=\"line\">        return __CLASS__;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function show() &#123;</span><br><span class=\"line\">        return &quot;this is function show with &quot; . $this-&gt;Nostatic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function test() &#123;</span><br><span class=\"line\">        echo Demo::$static . &quot;&lt;br/&gt;&quot;;   //使用类名调用静态属性</span><br><span class=\"line\">        echo Demo::get() . &quot;&lt;br/&gt;&quot;;     //使用类名调用静态属性</span><br><span class=\"line\">        echo Demo::show() . &quot;&lt;br/&gt;&quot;;    //使用类名调用静态属性</span><br><span class=\"line\">        echo self::$static . &quot;&lt;br/&gt;&quot;;   //self调用静态属性</span><br><span class=\"line\">        echo self::show() . &quot;&lt;br/&gt;&quot;;    //self调用非静态方法</span><br><span class=\"line\">        echo self::get() . &quot;&lt;br/&gt;&quot;;     //self调用静态方法</span><br><span class=\"line\">        echo static::$static . &quot;&lt;br/&gt;&quot;; //static调用静态属性</span><br><span class=\"line\">        echo static::show() . &quot;&lt;br/&gt;&quot;;  //static调用非静态方法</span><br><span class=\"line\">        echo static::get() . &quot;&lt;br/&gt;&quot;;   //static调用静态方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new Demo();</span><br><span class=\"line\">$obj-&gt;test();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static</span><br><span class=\"line\">Demo</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">Demo</span><br><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br><span class=\"line\">Demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"存在继承的时候\"><a href=\"#存在继承的时候\" class=\"headerlink\" title=\"存在继承的时候\"></a>存在继承的时候</h3><p>示例1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    static function getClassName() &#123;</span><br><span class=\"line\">        return &quot;this is class A&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function testSelf() &#123;</span><br><span class=\"line\">        echo self::getClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static function testStatic() &#123;</span><br><span class=\"line\">        echo static::getClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    static function getClassName() &#123;</span><br><span class=\"line\">        return &quot;this is class B&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B::testSelf();</span><br><span class=\"line\">B::testStatic();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is class A</span><br><span class=\"line\">this is class B</span><br></pre></td></tr></table></figure>\n<p>Note：self 调用的静态方法或属性始终表示其在使用的时候的当前类（A）的方法或属性，可以替换为其类名，static 调用的静态方法或属性会在继承中被其子类重写覆盖，应该替换为对应的子类名（B）。</p>\n<p>对于parent关键字，用于调用父类的方法和属性。在静态方法中，可以调用父类的静态方法和属性；在非静态方法中，可以调用父类的方法和属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    public static $static;</span><br><span class=\"line\">    public $Nostatic;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct() &#123;</span><br><span class=\"line\">        self::$static = &quot;static&quot;;</span><br><span class=\"line\">        $this-&gt;Nostatic = &quot;Nostatic&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function staticFun() &#123;</span><br><span class=\"line\">        return self::$static;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function noStaticFun() &#123;</span><br><span class=\"line\">        return &quot;this is function show with &quot; . $this-&gt;Nostatic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    static function testS() &#123;</span><br><span class=\"line\">        echo parent::staticFun();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function testNoS() &#123;</span><br><span class=\"line\">        echo parent::noStaticFun();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new B();</span><br><span class=\"line\">$obj-&gt;testS();</span><br><span class=\"line\">$obj-&gt;testNoS();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static</span><br><span class=\"line\">this is function show with Nostatic</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP手册中的例子\"><a href=\"#PHP手册中的例子\" class=\"headerlink\" title=\"PHP手册中的例子\"></a>PHP手册中的例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">    public static function foo() &#123;</span><br><span class=\"line\">        static::who();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B extends A &#123;</span><br><span class=\"line\">    public static function test() &#123;</span><br><span class=\"line\">        A::foo();</span><br><span class=\"line\">        parent::foo();</span><br><span class=\"line\">        self::foo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C extends B &#123;</span><br><span class=\"line\">    public static function who() &#123;</span><br><span class=\"line\">        echo __CLASS__ . &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">C::test();</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\">C</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n<p>我们分析 test() 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function test() &#123;</span><br><span class=\"line\">        A::foo();</span><br><span class=\"line\">        parent::foo();</span><br><span class=\"line\">        self::foo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A::foo()；这个语句是可以在任何地方执行的，它表示使用A去调用静态方法 foo() 得到“A”。 </p>\n<p>parent::foo()；C 的 parent 是 B ， B 的parent是A，回溯找到了A 的 foo 方法；static::who()；语句中的 static:: 调用的方法会被子类覆盖，所以优先调用 C 的 who() 方法，如果 C 的 who 方法不存在会调用 B 的 who 方法，如果 B 的 who 方法不存在会调用 A 的 who 方法。所以，输出结果是”C”。</p>\n<p>self::foo()；这个 self:: 是在 B 中使用的，所以 self:: 等价于 B:: ，但是 B 没有实现 foo() 方法，B 又继承自 A，所以我们实际上调用了 A::foo() 这个方法。foo() 方法使用了static::who() 语句，导致我们又调用了 C 的 who 函数。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/myjavawork/articles/1793664.html\" target=\"_blank\" rel=\"noopener\">PHP中this,self,parent的区别</a>  <a href=\"http://php.net/manual/zh/language.oop5.final.php\" target=\"_blank\" rel=\"noopener\">Final 关键字</a>   <a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php\" target=\"_blank\" rel=\"noopener\">后期静态绑定</a>  <a href=\"http://blog.csdn.net/koastal/article/details/52166246\" target=\"_blank\" rel=\"noopener\">PHP中的self、static、parent关键字</a></p>\n</blockquote>\n"},{"title":"PHP新的垃圾回收机制","date":"2017-04-15T09:02:41.000Z","_content":"\n### 概述\n\n在5.2及更早版本的PHP中，没有专门的垃圾回收器GC（Garbage Collection），引擎在判断一个变量空间是否能够被释放的时候是依据这个变量的zval的refcount的值，如果refcount为0，那么变量的空间可以被释放，否则就不释放，这是一种非常简单的GC实现。\n\n然而在这种简单的GC实现方案中，出现了意想不到的变量内存泄漏情况（[Bug](http://bugs.php.net/bug.php?id=33595)），引擎将无法回收这些内存，于是在PHP 5.3中出现了新的GC，新的GC有专门的机制负责清理垃圾数据，防止内存泄漏。\n\n手册中相关内容：[垃圾回收机制](http://php.net/manual/zh/features.gc.php)  在介绍这个新的GC之前，读者必须先了解PHP中变量的内部存储相关知识，请先阅读  [PHP内核探索：变量的内部存储（值和类型）](https://runnerliu.github.io/2017/04/15/phpvarinternstore1/)  [PHP内核探索：变量的内部存储（引用和计数）](https://runnerliu.github.io/2017/04/15/phpvarinternstore2/)\n\n### 什么算垃圾\n\n首先我们需要定义一下“垃圾”的概念，新的GC负责清理的垃圾是指变量的容器zval还存在，但是又没有任何变量名指向此zval。因此GC判断是否为垃圾的一个重要标准是有没有变量名指向变量容器zval。\n假设我们有一段PHP代码，使用了一个临时变量`$tmp`存储了一个字符串，在处理完字符串之后，就不需要这个`$tmp`变量了，`$tmp`变量对于我们来说可以算是一个“垃圾”了，但是对于GC来说，`$tmp`其实并不是一个垃圾，`$tmp`变量对我们没有意义，但是这个变量实际还存在，`$tmp`符号依然指向它所对应的zval，GC会认为PHP代码中可能还会使用到此变量，所以不会将其定义为垃圾。\n\n那么如果我们在PHP代码中使用完`$tmp`后，调用unset删除这个变量，那么`$tmp`是不是就成为一个垃圾了呢。很可惜，GC仍然不认为`$tmp`是一个垃圾，因为`$tmp`在unset之后，refcount减少1变成了0(这里假设没有别的变量和`$tmp`指向相同的zval)，这个时候GC会直接将`$tmp`对应的zval的内存空间释放，`$tmp`和其对应的zval就根本不存在了。此时的`$tmp`也不是新的GC所要对付的那种“垃圾”。那么新的GC究竟要对付什么样的垃圾呢，下面我们将生产一个这样的垃圾。  \n\n### 顽固垃圾的产生过程\n\n如果读者已经阅读了变量内部存储相关的内容，想必对refcount和is\\_ref这些变量内部的信息有了一定的了解。这里我们将结合手册中的一个例子来介绍垃圾的产生过程：\n\n```\n<?php\n$a = array('one');\n$a[] = &$a;\nxdebug_debug_zval('a');\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 135755](/images/2017-4-15 135755.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的\"...\"说明发生了递归操作，显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 \"1\" 所指向的变量容器的引用次数减1，从\"2\"变成\"1\"。下例可以说明：\n\n```\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 140001](/images/2017-4-15 140001.png)\n\n那么问题也就产生了，a已经不在符号表中了，用户无法再访问此变量，但是a之前指向的zval的refcount变为1而不是0，因此不能被回收，这样产生了内存泄露，这样，这么一个zval就成为了一个真是意义的垃圾了，新的GC要做的工作就是清理这种垃圾。\n\n### 新的GC算法\n\n在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为 [计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)](http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf) ，这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：\n\n首先我们有几个基本的准则：\n\n1. 如果一个zval的refcount增加，那么此zval还在使用，不属于垃圾；\n2. 如果一个zval的refcount减少到0， 那么zval可以被释放掉，不属于垃圾；\n3. 如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾。\n\n只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。那么如何判断这么一个变量是否为真正的垃圾呢？\n\n简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount=0，那么这个zval就是一个垃圾。这个原理看起来很简单，但是又不是那么容易理解，起初笔者也无法理解其含义，直到挖掘了源代码之后才算是了解。如果你现在不理解没有关系，后面会详细介绍，这里先把这算法的几个步骤描叙一下，首先引用手册中的一张图：\n\n![2017-4-15 172459](/images/2017-4-15 172459.png)\n\nA：为了避免每次变量的refcount减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。\n\nB：当缓冲区满了之后，算法以深度优先对每一个节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。需要强调的是，这个步骤中，起初节点zval本身不做减1操作，但是如果节点zval中包含的zval又指向了节点zval（环形引用），那么这个时候需要对节点zval进行减1操作。\n\nC：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色（zval的默认颜色属性）\n\nD：遍历zval节点，将C中标记成白色的节点zval释放掉。\n\n比如还是前面那个变成垃圾的数组a对应的zval，命名为zval\\_a,  如果没有执行unset， zval\\_a的refcount为2，分别由a和a中的索引1指向这个zval。  用算法对这个数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，由于索引1对应的就是zval\\_a，所以这个时候zval\\_a的refcount应该变成了1，这样zva\\_a就不是一个垃圾。如果执行了unset操作，zval\\_a的refcount就是1，由zval\\_a中的索引1指向zval\\_a，用算法对数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，这样zval\\_a的refcount就会变成0，于是就发现zval\\_a是一个垃圾了。 算法就这样发现了顽固的垃圾数据。\n\n对于一个包含环形引用的数组，对数组中包含的每个元素的zval进行减1操作，之后如果发现数组自身的zval的refcount变成了0，那么可以判断这个数组是一个垃圾。\n\n这个道理其实很简单，假设数组a的refcount等于m，a中有n个元素又指向a，如果m等于n，那么算法的结果是m减n，m-n=0，那么a就是垃圾，如果m>n，那么算法的结果m-n>0，所以a就不是垃圾了。\n\nm=n代表什么？代表a的refcount都来自数组a自身包含的zval元素，代表a之外没有任何变量指向它，代表用户代码空间中无法再访问到a所对应的zval，代表a是泄漏的内存，因此GC将a这个垃圾回收了。\n\n### 新的GC算法的性能\n\n#### 防止泄漏节省内存\n\n新的GC算法的目的就是为了防止循环引用的变量引起的内存泄漏问题，在PHP中GC算法，当节点缓冲区满了之后，垃圾分析算法会启动，并且会释放掉发现的垃圾，从而回收内存，在PHP手册上给了一段代码和内存使用状况图：\n\n```\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\n$baseMemory = memory_get_usage();\n\nfor ( $i = 0; $i <= 100000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n    if ( $i % 500 === 0 )\n    {\n        echo sprintf( '%8d: ', $i ), memory_get_usage() - $baseMemory, \"/n\";\n    }\n}\n?>\n```\n\n![2017-4-15 173341](/images/2017-4-15 173341.png)\n\n这段代码的循环体中，新建了一个对象变量，并且用对象的一个成员指向了自己，这样就形成了一个循环引用，当进入下一次循环的时候，又一次给对象变量重新赋值，这样会导致之前的对象变量内存泄漏，在这个例子里面有两个变量泄漏了，一个是对象本身，另外一个是对象中的成员self，但是这两个变量只有对象会作为垃圾收集器的节点被放入缓冲区(因为重新赋值相当于对它进行了unset操作，满足前面的准则3)。在这里我们进行了100,000次循环，而GC在缓冲区中有10,000节点的时候会启动垃圾分析算法，所以这里一共会进行10次的垃圾分析算法。从图中可以清晰的看到，在5.3版本PHP中，每次GC的垃圾分析算法被触发后，内存会有一个明显的减少。而在5.2版本的PHP中，内存使用量会一直增加。\n\n#### 运行效率影响\n\n 启用了新的GC后，垃圾分析算法将是一个比较耗时的操作，手册中给了一段测试代码：\n\n```\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\nfor ( $i = 0; $i <= 1000000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n}\n\necho memory_get_peak_usage(), \"/n\";\n?>\n```\n\n然后分别在GC开启和关闭的情况下执行这段代码：\n\n```\ntime php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php\n# and\ntime php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php\n```\n\n最终在该机器上，第一次执行大概使用10.7秒，第二次执行大概使用11.4秒，性能大约降低7%，不过内存的使用量降低了98%，从931M降低到了10M。当然这并不是一个比较科学的测试方法，但是也能说明一定的问题。这种代码测试的是一种极端恶劣条件，实际代码中，特别是在WEB的应用中，很难出现大量循环引用，GC的分析算法的启动不会这么频繁，小规模的代码中甚至很少有机会启动GC分析算法。\n\n#### 总结\n\n当GC的垃圾分析算法执行的时候，PHP脚本的效率会受到一定的影响，但是小规模的代码一般不会有这个机会运行这个算法。如果一旦脚本中GC分析算法开始运行了，那么将花费少量的时间节省出来了大量的内存，是一件非常划算的事情。新的GC对一些长期运行的PHP脚本效果更好，比如PHP的DAEMON守护进程，或则PHP-GTK进程等等。\n\n\n\n> 参考文章：\n>\n> [PHP新的垃圾回收机制:Zend GC详解](http://blog.csdn.net/phpkernel/article/details/5734743)  [回收周期(Collecting Cycles)](http://php.net/manual/zh/features.gc.collecting-cycles.php)","source":"_posts/phpnewgc.md","raw":"---\ntitle: PHP新的垃圾回收机制\ndate: 2017-04-15 17:02:41\ntags:\n - PHP\n - 垃圾回收\ncategories:\n - PHP\n---\n\n### 概述\n\n在5.2及更早版本的PHP中，没有专门的垃圾回收器GC（Garbage Collection），引擎在判断一个变量空间是否能够被释放的时候是依据这个变量的zval的refcount的值，如果refcount为0，那么变量的空间可以被释放，否则就不释放，这是一种非常简单的GC实现。\n\n然而在这种简单的GC实现方案中，出现了意想不到的变量内存泄漏情况（[Bug](http://bugs.php.net/bug.php?id=33595)），引擎将无法回收这些内存，于是在PHP 5.3中出现了新的GC，新的GC有专门的机制负责清理垃圾数据，防止内存泄漏。\n\n手册中相关内容：[垃圾回收机制](http://php.net/manual/zh/features.gc.php)  在介绍这个新的GC之前，读者必须先了解PHP中变量的内部存储相关知识，请先阅读  [PHP内核探索：变量的内部存储（值和类型）](https://runnerliu.github.io/2017/04/15/phpvarinternstore1/)  [PHP内核探索：变量的内部存储（引用和计数）](https://runnerliu.github.io/2017/04/15/phpvarinternstore2/)\n\n### 什么算垃圾\n\n首先我们需要定义一下“垃圾”的概念，新的GC负责清理的垃圾是指变量的容器zval还存在，但是又没有任何变量名指向此zval。因此GC判断是否为垃圾的一个重要标准是有没有变量名指向变量容器zval。\n假设我们有一段PHP代码，使用了一个临时变量`$tmp`存储了一个字符串，在处理完字符串之后，就不需要这个`$tmp`变量了，`$tmp`变量对于我们来说可以算是一个“垃圾”了，但是对于GC来说，`$tmp`其实并不是一个垃圾，`$tmp`变量对我们没有意义，但是这个变量实际还存在，`$tmp`符号依然指向它所对应的zval，GC会认为PHP代码中可能还会使用到此变量，所以不会将其定义为垃圾。\n\n那么如果我们在PHP代码中使用完`$tmp`后，调用unset删除这个变量，那么`$tmp`是不是就成为一个垃圾了呢。很可惜，GC仍然不认为`$tmp`是一个垃圾，因为`$tmp`在unset之后，refcount减少1变成了0(这里假设没有别的变量和`$tmp`指向相同的zval)，这个时候GC会直接将`$tmp`对应的zval的内存空间释放，`$tmp`和其对应的zval就根本不存在了。此时的`$tmp`也不是新的GC所要对付的那种“垃圾”。那么新的GC究竟要对付什么样的垃圾呢，下面我们将生产一个这样的垃圾。  \n\n### 顽固垃圾的产生过程\n\n如果读者已经阅读了变量内部存储相关的内容，想必对refcount和is\\_ref这些变量内部的信息有了一定的了解。这里我们将结合手册中的一个例子来介绍垃圾的产生过程：\n\n```\n<?php\n$a = array('one');\n$a[] = &$a;\nxdebug_debug_zval('a');\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 135755](/images/2017-4-15 135755.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的\"...\"说明发生了递归操作，显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 \"1\" 所指向的变量容器的引用次数减1，从\"2\"变成\"1\"。下例可以说明：\n\n```\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 140001](/images/2017-4-15 140001.png)\n\n那么问题也就产生了，a已经不在符号表中了，用户无法再访问此变量，但是a之前指向的zval的refcount变为1而不是0，因此不能被回收，这样产生了内存泄露，这样，这么一个zval就成为了一个真是意义的垃圾了，新的GC要做的工作就是清理这种垃圾。\n\n### 新的GC算法\n\n在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为 [计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)](http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf) ，这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：\n\n首先我们有几个基本的准则：\n\n1. 如果一个zval的refcount增加，那么此zval还在使用，不属于垃圾；\n2. 如果一个zval的refcount减少到0， 那么zval可以被释放掉，不属于垃圾；\n3. 如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾。\n\n只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。那么如何判断这么一个变量是否为真正的垃圾呢？\n\n简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount=0，那么这个zval就是一个垃圾。这个原理看起来很简单，但是又不是那么容易理解，起初笔者也无法理解其含义，直到挖掘了源代码之后才算是了解。如果你现在不理解没有关系，后面会详细介绍，这里先把这算法的几个步骤描叙一下，首先引用手册中的一张图：\n\n![2017-4-15 172459](/images/2017-4-15 172459.png)\n\nA：为了避免每次变量的refcount减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。\n\nB：当缓冲区满了之后，算法以深度优先对每一个节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。需要强调的是，这个步骤中，起初节点zval本身不做减1操作，但是如果节点zval中包含的zval又指向了节点zval（环形引用），那么这个时候需要对节点zval进行减1操作。\n\nC：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色（zval的默认颜色属性）\n\nD：遍历zval节点，将C中标记成白色的节点zval释放掉。\n\n比如还是前面那个变成垃圾的数组a对应的zval，命名为zval\\_a,  如果没有执行unset， zval\\_a的refcount为2，分别由a和a中的索引1指向这个zval。  用算法对这个数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，由于索引1对应的就是zval\\_a，所以这个时候zval\\_a的refcount应该变成了1，这样zva\\_a就不是一个垃圾。如果执行了unset操作，zval\\_a的refcount就是1，由zval\\_a中的索引1指向zval\\_a，用算法对数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，这样zval\\_a的refcount就会变成0，于是就发现zval\\_a是一个垃圾了。 算法就这样发现了顽固的垃圾数据。\n\n对于一个包含环形引用的数组，对数组中包含的每个元素的zval进行减1操作，之后如果发现数组自身的zval的refcount变成了0，那么可以判断这个数组是一个垃圾。\n\n这个道理其实很简单，假设数组a的refcount等于m，a中有n个元素又指向a，如果m等于n，那么算法的结果是m减n，m-n=0，那么a就是垃圾，如果m>n，那么算法的结果m-n>0，所以a就不是垃圾了。\n\nm=n代表什么？代表a的refcount都来自数组a自身包含的zval元素，代表a之外没有任何变量指向它，代表用户代码空间中无法再访问到a所对应的zval，代表a是泄漏的内存，因此GC将a这个垃圾回收了。\n\n### 新的GC算法的性能\n\n#### 防止泄漏节省内存\n\n新的GC算法的目的就是为了防止循环引用的变量引起的内存泄漏问题，在PHP中GC算法，当节点缓冲区满了之后，垃圾分析算法会启动，并且会释放掉发现的垃圾，从而回收内存，在PHP手册上给了一段代码和内存使用状况图：\n\n```\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\n$baseMemory = memory_get_usage();\n\nfor ( $i = 0; $i <= 100000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n    if ( $i % 500 === 0 )\n    {\n        echo sprintf( '%8d: ', $i ), memory_get_usage() - $baseMemory, \"/n\";\n    }\n}\n?>\n```\n\n![2017-4-15 173341](/images/2017-4-15 173341.png)\n\n这段代码的循环体中，新建了一个对象变量，并且用对象的一个成员指向了自己，这样就形成了一个循环引用，当进入下一次循环的时候，又一次给对象变量重新赋值，这样会导致之前的对象变量内存泄漏，在这个例子里面有两个变量泄漏了，一个是对象本身，另外一个是对象中的成员self，但是这两个变量只有对象会作为垃圾收集器的节点被放入缓冲区(因为重新赋值相当于对它进行了unset操作，满足前面的准则3)。在这里我们进行了100,000次循环，而GC在缓冲区中有10,000节点的时候会启动垃圾分析算法，所以这里一共会进行10次的垃圾分析算法。从图中可以清晰的看到，在5.3版本PHP中，每次GC的垃圾分析算法被触发后，内存会有一个明显的减少。而在5.2版本的PHP中，内存使用量会一直增加。\n\n#### 运行效率影响\n\n 启用了新的GC后，垃圾分析算法将是一个比较耗时的操作，手册中给了一段测试代码：\n\n```\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\nfor ( $i = 0; $i <= 1000000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n}\n\necho memory_get_peak_usage(), \"/n\";\n?>\n```\n\n然后分别在GC开启和关闭的情况下执行这段代码：\n\n```\ntime php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php\n# and\ntime php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php\n```\n\n最终在该机器上，第一次执行大概使用10.7秒，第二次执行大概使用11.4秒，性能大约降低7%，不过内存的使用量降低了98%，从931M降低到了10M。当然这并不是一个比较科学的测试方法，但是也能说明一定的问题。这种代码测试的是一种极端恶劣条件，实际代码中，特别是在WEB的应用中，很难出现大量循环引用，GC的分析算法的启动不会这么频繁，小规模的代码中甚至很少有机会启动GC分析算法。\n\n#### 总结\n\n当GC的垃圾分析算法执行的时候，PHP脚本的效率会受到一定的影响，但是小规模的代码一般不会有这个机会运行这个算法。如果一旦脚本中GC分析算法开始运行了，那么将花费少量的时间节省出来了大量的内存，是一件非常划算的事情。新的GC对一些长期运行的PHP脚本效果更好，比如PHP的DAEMON守护进程，或则PHP-GTK进程等等。\n\n\n\n> 参考文章：\n>\n> [PHP新的垃圾回收机制:Zend GC详解](http://blog.csdn.net/phpkernel/article/details/5734743)  [回收周期(Collecting Cycles)](http://php.net/manual/zh/features.gc.collecting-cycles.php)","slug":"phpnewgc","published":1,"updated":"2020-10-25T06:43:32.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6w009vmolc2gb5napj","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在5.2及更早版本的PHP中，没有专门的垃圾回收器GC（Garbage Collection），引擎在判断一个变量空间是否能够被释放的时候是依据这个变量的zval的refcount的值，如果refcount为0，那么变量的空间可以被释放，否则就不释放，这是一种非常简单的GC实现。</p>\n<p>然而在这种简单的GC实现方案中，出现了意想不到的变量内存泄漏情况（<a href=\"http://bugs.php.net/bug.php?id=33595\" target=\"_blank\" rel=\"noopener\">Bug</a>），引擎将无法回收这些内存，于是在PHP 5.3中出现了新的GC，新的GC有专门的机制负责清理垃圾数据，防止内存泄漏。</p>\n<p>手册中相关内容：<a href=\"http://php.net/manual/zh/features.gc.php\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>  在介绍这个新的GC之前，读者必须先了解PHP中变量的内部存储相关知识，请先阅读  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore1/\">PHP内核探索：变量的内部存储（值和类型）</a>  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore2/\">PHP内核探索：变量的内部存储（引用和计数）</a></p>\n<h3 id=\"什么算垃圾\"><a href=\"#什么算垃圾\" class=\"headerlink\" title=\"什么算垃圾\"></a>什么算垃圾</h3><p>首先我们需要定义一下“垃圾”的概念，新的GC负责清理的垃圾是指变量的容器zval还存在，但是又没有任何变量名指向此zval。因此GC判断是否为垃圾的一个重要标准是有没有变量名指向变量容器zval。<br>假设我们有一段PHP代码，使用了一个临时变量<code>$tmp</code>存储了一个字符串，在处理完字符串之后，就不需要这个<code>$tmp</code>变量了，<code>$tmp</code>变量对于我们来说可以算是一个“垃圾”了，但是对于GC来说，<code>$tmp</code>其实并不是一个垃圾，<code>$tmp</code>变量对我们没有意义，但是这个变量实际还存在，<code>$tmp</code>符号依然指向它所对应的zval，GC会认为PHP代码中可能还会使用到此变量，所以不会将其定义为垃圾。</p>\n<p>那么如果我们在PHP代码中使用完<code>$tmp</code>后，调用unset删除这个变量，那么<code>$tmp</code>是不是就成为一个垃圾了呢。很可惜，GC仍然不认为<code>$tmp</code>是一个垃圾，因为<code>$tmp</code>在unset之后，refcount减少1变成了0(这里假设没有别的变量和<code>$tmp</code>指向相同的zval)，这个时候GC会直接将<code>$tmp</code>对应的zval的内存空间释放，<code>$tmp</code>和其对应的zval就根本不存在了。此时的<code>$tmp</code>也不是新的GC所要对付的那种“垃圾”。那么新的GC究竟要对付什么样的垃圾呢，下面我们将生产一个这样的垃圾。  </p>\n<h3 id=\"顽固垃圾的产生过程\"><a href=\"#顽固垃圾的产生过程\" class=\"headerlink\" title=\"顽固垃圾的产生过程\"></a>顽固垃圾的产生过程</h3><p>如果读者已经阅读了变量内部存储相关的内容，想必对refcount和is_ref这些变量内部的信息有了一定的了解。这里我们将结合手册中的一个例子来介绍垃圾的产生过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array(&apos;one&apos;);</span><br><span class=\"line\">$a[] = &amp;$a;</span><br><span class=\"line\">xdebug_debug_zval(&apos;a&apos;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=2, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135755.png\" alt=\"2017-4-15 135755\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的”…”说明发生了递归操作，显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 “1” 所指向的变量容器的引用次数减1，从”2”变成”1”。下例可以说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=1, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=1, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 140001.png\" alt=\"2017-4-15 140001\"></p>\n<p>那么问题也就产生了，a已经不在符号表中了，用户无法再访问此变量，但是a之前指向的zval的refcount变为1而不是0，因此不能被回收，这样产生了内存泄露，这样，这么一个zval就成为了一个真是意义的垃圾了，新的GC要做的工作就是清理这种垃圾。</p>\n<h3 id=\"新的GC算法\"><a href=\"#新的GC算法\" class=\"headerlink\" title=\"新的GC算法\"></a>新的GC算法</h3><p>在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为 <a href=\"http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf\" target=\"_blank\" rel=\"noopener\">计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)</a> ，这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：</p>\n<p>首先我们有几个基本的准则：</p>\n<ol>\n<li>如果一个zval的refcount增加，那么此zval还在使用，不属于垃圾；</li>\n<li>如果一个zval的refcount减少到0， 那么zval可以被释放掉，不属于垃圾；</li>\n<li>如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾。</li>\n</ol>\n<p>只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。那么如何判断这么一个变量是否为真正的垃圾呢？</p>\n<p>简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount=0，那么这个zval就是一个垃圾。这个原理看起来很简单，但是又不是那么容易理解，起初笔者也无法理解其含义，直到挖掘了源代码之后才算是了解。如果你现在不理解没有关系，后面会详细介绍，这里先把这算法的几个步骤描叙一下，首先引用手册中的一张图：</p>\n<p><img src=\"/images/2017-4-15 172459.png\" alt=\"2017-4-15 172459\"></p>\n<p>A：为了避免每次变量的refcount减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。</p>\n<p>B：当缓冲区满了之后，算法以深度优先对每一个节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。需要强调的是，这个步骤中，起初节点zval本身不做减1操作，但是如果节点zval中包含的zval又指向了节点zval（环形引用），那么这个时候需要对节点zval进行减1操作。</p>\n<p>C：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色（zval的默认颜色属性）</p>\n<p>D：遍历zval节点，将C中标记成白色的节点zval释放掉。</p>\n<p>比如还是前面那个变成垃圾的数组a对应的zval，命名为zval_a,  如果没有执行unset， zval_a的refcount为2，分别由a和a中的索引1指向这个zval。  用算法对这个数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，由于索引1对应的就是zval_a，所以这个时候zval_a的refcount应该变成了1，这样zva_a就不是一个垃圾。如果执行了unset操作，zval_a的refcount就是1，由zval_a中的索引1指向zval_a，用算法对数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，这样zval_a的refcount就会变成0，于是就发现zval_a是一个垃圾了。 算法就这样发现了顽固的垃圾数据。</p>\n<p>对于一个包含环形引用的数组，对数组中包含的每个元素的zval进行减1操作，之后如果发现数组自身的zval的refcount变成了0，那么可以判断这个数组是一个垃圾。</p>\n<p>这个道理其实很简单，假设数组a的refcount等于m，a中有n个元素又指向a，如果m等于n，那么算法的结果是m减n，m-n=0，那么a就是垃圾，如果m&gt;n，那么算法的结果m-n&gt;0，所以a就不是垃圾了。</p>\n<p>m=n代表什么？代表a的refcount都来自数组a自身包含的zval元素，代表a之外没有任何变量指向它，代表用户代码空间中无法再访问到a所对应的zval，代表a是泄漏的内存，因此GC将a这个垃圾回收了。</p>\n<h3 id=\"新的GC算法的性能\"><a href=\"#新的GC算法的性能\" class=\"headerlink\" title=\"新的GC算法的性能\"></a>新的GC算法的性能</h3><h4 id=\"防止泄漏节省内存\"><a href=\"#防止泄漏节省内存\" class=\"headerlink\" title=\"防止泄漏节省内存\"></a>防止泄漏节省内存</h4><p>新的GC算法的目的就是为了防止循环引用的变量引起的内存泄漏问题，在PHP中GC算法，当节点缓冲区满了之后，垃圾分析算法会启动，并且会释放掉发现的垃圾，从而回收内存，在PHP手册上给了一段代码和内存使用状况图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Foo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $var = &apos;3.1415962654&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$baseMemory = memory_get_usage();</span><br><span class=\"line\"></span><br><span class=\"line\">for ( $i = 0; $i &lt;= 100000; $i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = new Foo;</span><br><span class=\"line\">    $a-&gt;self = $a;</span><br><span class=\"line\">    if ( $i % 500 === 0 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo sprintf( &apos;%8d: &apos;, $i ), memory_get_usage() - $baseMemory, &quot;/n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-4-15 173341.png\" alt=\"2017-4-15 173341\"></p>\n<p>这段代码的循环体中，新建了一个对象变量，并且用对象的一个成员指向了自己，这样就形成了一个循环引用，当进入下一次循环的时候，又一次给对象变量重新赋值，这样会导致之前的对象变量内存泄漏，在这个例子里面有两个变量泄漏了，一个是对象本身，另外一个是对象中的成员self，但是这两个变量只有对象会作为垃圾收集器的节点被放入缓冲区(因为重新赋值相当于对它进行了unset操作，满足前面的准则3)。在这里我们进行了100,000次循环，而GC在缓冲区中有10,000节点的时候会启动垃圾分析算法，所以这里一共会进行10次的垃圾分析算法。从图中可以清晰的看到，在5.3版本PHP中，每次GC的垃圾分析算法被触发后，内存会有一个明显的减少。而在5.2版本的PHP中，内存使用量会一直增加。</p>\n<h4 id=\"运行效率影响\"><a href=\"#运行效率影响\" class=\"headerlink\" title=\"运行效率影响\"></a>运行效率影响</h4><p> 启用了新的GC后，垃圾分析算法将是一个比较耗时的操作，手册中给了一段测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Foo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $var = &apos;3.1415962654&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for ( $i = 0; $i &lt;= 1000000; $i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = new Foo;</span><br><span class=\"line\">    $a-&gt;self = $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo memory_get_peak_usage(), &quot;/n&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>然后分别在GC开启和关闭的情况下执行这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php</span><br><span class=\"line\"># and</span><br><span class=\"line\">time php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php</span><br></pre></td></tr></table></figure>\n<p>最终在该机器上，第一次执行大概使用10.7秒，第二次执行大概使用11.4秒，性能大约降低7%，不过内存的使用量降低了98%，从931M降低到了10M。当然这并不是一个比较科学的测试方法，但是也能说明一定的问题。这种代码测试的是一种极端恶劣条件，实际代码中，特别是在WEB的应用中，很难出现大量循环引用，GC的分析算法的启动不会这么频繁，小规模的代码中甚至很少有机会启动GC分析算法。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当GC的垃圾分析算法执行的时候，PHP脚本的效率会受到一定的影响，但是小规模的代码一般不会有这个机会运行这个算法。如果一旦脚本中GC分析算法开始运行了，那么将花费少量的时间节省出来了大量的内存，是一件非常划算的事情。新的GC对一些长期运行的PHP脚本效果更好，比如PHP的DAEMON守护进程，或则PHP-GTK进程等等。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/phpkernel/article/details/5734743\" target=\"_blank\" rel=\"noopener\">PHP新的垃圾回收机制:Zend GC详解</a>  <a href=\"http://php.net/manual/zh/features.gc.collecting-cycles.php\" target=\"_blank\" rel=\"noopener\">回收周期(Collecting Cycles)</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在5.2及更早版本的PHP中，没有专门的垃圾回收器GC（Garbage Collection），引擎在判断一个变量空间是否能够被释放的时候是依据这个变量的zval的refcount的值，如果refcount为0，那么变量的空间可以被释放，否则就不释放，这是一种非常简单的GC实现。</p>\n<p>然而在这种简单的GC实现方案中，出现了意想不到的变量内存泄漏情况（<a href=\"http://bugs.php.net/bug.php?id=33595\" target=\"_blank\" rel=\"noopener\">Bug</a>），引擎将无法回收这些内存，于是在PHP 5.3中出现了新的GC，新的GC有专门的机制负责清理垃圾数据，防止内存泄漏。</p>\n<p>手册中相关内容：<a href=\"http://php.net/manual/zh/features.gc.php\" target=\"_blank\" rel=\"noopener\">垃圾回收机制</a>  在介绍这个新的GC之前，读者必须先了解PHP中变量的内部存储相关知识，请先阅读  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore1/\">PHP内核探索：变量的内部存储（值和类型）</a>  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore2/\">PHP内核探索：变量的内部存储（引用和计数）</a></p>\n<h3 id=\"什么算垃圾\"><a href=\"#什么算垃圾\" class=\"headerlink\" title=\"什么算垃圾\"></a>什么算垃圾</h3><p>首先我们需要定义一下“垃圾”的概念，新的GC负责清理的垃圾是指变量的容器zval还存在，但是又没有任何变量名指向此zval。因此GC判断是否为垃圾的一个重要标准是有没有变量名指向变量容器zval。<br>假设我们有一段PHP代码，使用了一个临时变量<code>$tmp</code>存储了一个字符串，在处理完字符串之后，就不需要这个<code>$tmp</code>变量了，<code>$tmp</code>变量对于我们来说可以算是一个“垃圾”了，但是对于GC来说，<code>$tmp</code>其实并不是一个垃圾，<code>$tmp</code>变量对我们没有意义，但是这个变量实际还存在，<code>$tmp</code>符号依然指向它所对应的zval，GC会认为PHP代码中可能还会使用到此变量，所以不会将其定义为垃圾。</p>\n<p>那么如果我们在PHP代码中使用完<code>$tmp</code>后，调用unset删除这个变量，那么<code>$tmp</code>是不是就成为一个垃圾了呢。很可惜，GC仍然不认为<code>$tmp</code>是一个垃圾，因为<code>$tmp</code>在unset之后，refcount减少1变成了0(这里假设没有别的变量和<code>$tmp</code>指向相同的zval)，这个时候GC会直接将<code>$tmp</code>对应的zval的内存空间释放，<code>$tmp</code>和其对应的zval就根本不存在了。此时的<code>$tmp</code>也不是新的GC所要对付的那种“垃圾”。那么新的GC究竟要对付什么样的垃圾呢，下面我们将生产一个这样的垃圾。  </p>\n<h3 id=\"顽固垃圾的产生过程\"><a href=\"#顽固垃圾的产生过程\" class=\"headerlink\" title=\"顽固垃圾的产生过程\"></a>顽固垃圾的产生过程</h3><p>如果读者已经阅读了变量内部存储相关的内容，想必对refcount和is_ref这些变量内部的信息有了一定的了解。这里我们将结合手册中的一个例子来介绍垃圾的产生过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array(&apos;one&apos;);</span><br><span class=\"line\">$a[] = &amp;$a;</span><br><span class=\"line\">xdebug_debug_zval(&apos;a&apos;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=2, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135755.png\" alt=\"2017-4-15 135755\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的”…”说明发生了递归操作，显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 “1” 所指向的变量容器的引用次数减1，从”2”变成”1”。下例可以说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=1, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=1, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 140001.png\" alt=\"2017-4-15 140001\"></p>\n<p>那么问题也就产生了，a已经不在符号表中了，用户无法再访问此变量，但是a之前指向的zval的refcount变为1而不是0，因此不能被回收，这样产生了内存泄露，这样，这么一个zval就成为了一个真是意义的垃圾了，新的GC要做的工作就是清理这种垃圾。</p>\n<h3 id=\"新的GC算法\"><a href=\"#新的GC算法\" class=\"headerlink\" title=\"新的GC算法\"></a>新的GC算法</h3><p>在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为 <a href=\"http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf\" target=\"_blank\" rel=\"noopener\">计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)</a> ，这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：</p>\n<p>首先我们有几个基本的准则：</p>\n<ol>\n<li>如果一个zval的refcount增加，那么此zval还在使用，不属于垃圾；</li>\n<li>如果一个zval的refcount减少到0， 那么zval可以被释放掉，不属于垃圾；</li>\n<li>如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾。</li>\n</ol>\n<p>只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。那么如何判断这么一个变量是否为真正的垃圾呢？</p>\n<p>简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount=0，那么这个zval就是一个垃圾。这个原理看起来很简单，但是又不是那么容易理解，起初笔者也无法理解其含义，直到挖掘了源代码之后才算是了解。如果你现在不理解没有关系，后面会详细介绍，这里先把这算法的几个步骤描叙一下，首先引用手册中的一张图：</p>\n<p><img src=\"/images/2017-4-15 172459.png\" alt=\"2017-4-15 172459\"></p>\n<p>A：为了避免每次变量的refcount减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。</p>\n<p>B：当缓冲区满了之后，算法以深度优先对每一个节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。需要强调的是，这个步骤中，起初节点zval本身不做减1操作，但是如果节点zval中包含的zval又指向了节点zval（环形引用），那么这个时候需要对节点zval进行减1操作。</p>\n<p>C：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色（zval的默认颜色属性）</p>\n<p>D：遍历zval节点，将C中标记成白色的节点zval释放掉。</p>\n<p>比如还是前面那个变成垃圾的数组a对应的zval，命名为zval_a,  如果没有执行unset， zval_a的refcount为2，分别由a和a中的索引1指向这个zval。  用算法对这个数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，由于索引1对应的就是zval_a，所以这个时候zval_a的refcount应该变成了1，这样zva_a就不是一个垃圾。如果执行了unset操作，zval_a的refcount就是1，由zval_a中的索引1指向zval_a，用算法对数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，这样zval_a的refcount就会变成0，于是就发现zval_a是一个垃圾了。 算法就这样发现了顽固的垃圾数据。</p>\n<p>对于一个包含环形引用的数组，对数组中包含的每个元素的zval进行减1操作，之后如果发现数组自身的zval的refcount变成了0，那么可以判断这个数组是一个垃圾。</p>\n<p>这个道理其实很简单，假设数组a的refcount等于m，a中有n个元素又指向a，如果m等于n，那么算法的结果是m减n，m-n=0，那么a就是垃圾，如果m&gt;n，那么算法的结果m-n&gt;0，所以a就不是垃圾了。</p>\n<p>m=n代表什么？代表a的refcount都来自数组a自身包含的zval元素，代表a之外没有任何变量指向它，代表用户代码空间中无法再访问到a所对应的zval，代表a是泄漏的内存，因此GC将a这个垃圾回收了。</p>\n<h3 id=\"新的GC算法的性能\"><a href=\"#新的GC算法的性能\" class=\"headerlink\" title=\"新的GC算法的性能\"></a>新的GC算法的性能</h3><h4 id=\"防止泄漏节省内存\"><a href=\"#防止泄漏节省内存\" class=\"headerlink\" title=\"防止泄漏节省内存\"></a>防止泄漏节省内存</h4><p>新的GC算法的目的就是为了防止循环引用的变量引起的内存泄漏问题，在PHP中GC算法，当节点缓冲区满了之后，垃圾分析算法会启动，并且会释放掉发现的垃圾，从而回收内存，在PHP手册上给了一段代码和内存使用状况图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Foo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $var = &apos;3.1415962654&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$baseMemory = memory_get_usage();</span><br><span class=\"line\"></span><br><span class=\"line\">for ( $i = 0; $i &lt;= 100000; $i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = new Foo;</span><br><span class=\"line\">    $a-&gt;self = $a;</span><br><span class=\"line\">    if ( $i % 500 === 0 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo sprintf( &apos;%8d: &apos;, $i ), memory_get_usage() - $baseMemory, &quot;/n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-4-15 173341.png\" alt=\"2017-4-15 173341\"></p>\n<p>这段代码的循环体中，新建了一个对象变量，并且用对象的一个成员指向了自己，这样就形成了一个循环引用，当进入下一次循环的时候，又一次给对象变量重新赋值，这样会导致之前的对象变量内存泄漏，在这个例子里面有两个变量泄漏了，一个是对象本身，另外一个是对象中的成员self，但是这两个变量只有对象会作为垃圾收集器的节点被放入缓冲区(因为重新赋值相当于对它进行了unset操作，满足前面的准则3)。在这里我们进行了100,000次循环，而GC在缓冲区中有10,000节点的时候会启动垃圾分析算法，所以这里一共会进行10次的垃圾分析算法。从图中可以清晰的看到，在5.3版本PHP中，每次GC的垃圾分析算法被触发后，内存会有一个明显的减少。而在5.2版本的PHP中，内存使用量会一直增加。</p>\n<h4 id=\"运行效率影响\"><a href=\"#运行效率影响\" class=\"headerlink\" title=\"运行效率影响\"></a>运行效率影响</h4><p> 启用了新的GC后，垃圾分析算法将是一个比较耗时的操作，手册中给了一段测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Foo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $var = &apos;3.1415962654&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for ( $i = 0; $i &lt;= 1000000; $i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = new Foo;</span><br><span class=\"line\">    $a-&gt;self = $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo memory_get_peak_usage(), &quot;/n&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>然后分别在GC开启和关闭的情况下执行这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php</span><br><span class=\"line\"># and</span><br><span class=\"line\">time php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php</span><br></pre></td></tr></table></figure>\n<p>最终在该机器上，第一次执行大概使用10.7秒，第二次执行大概使用11.4秒，性能大约降低7%，不过内存的使用量降低了98%，从931M降低到了10M。当然这并不是一个比较科学的测试方法，但是也能说明一定的问题。这种代码测试的是一种极端恶劣条件，实际代码中，特别是在WEB的应用中，很难出现大量循环引用，GC的分析算法的启动不会这么频繁，小规模的代码中甚至很少有机会启动GC分析算法。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当GC的垃圾分析算法执行的时候，PHP脚本的效率会受到一定的影响，但是小规模的代码一般不会有这个机会运行这个算法。如果一旦脚本中GC分析算法开始运行了，那么将花费少量的时间节省出来了大量的内存，是一件非常划算的事情。新的GC对一些长期运行的PHP脚本效果更好，比如PHP的DAEMON守护进程，或则PHP-GTK进程等等。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://blog.csdn.net/phpkernel/article/details/5734743\" target=\"_blank\" rel=\"noopener\">PHP新的垃圾回收机制:Zend GC详解</a>  <a href=\"http://php.net/manual/zh/features.gc.collecting-cycles.php\" target=\"_blank\" rel=\"noopener\">回收周期(Collecting Cycles)</a></p>\n</blockquote>\n"},{"title":"PHP内核探索：变量的内部存储（引用和计数）","date":"2017-04-15T05:29:51.000Z","_content":"\n在  [PHP内核探索：变量的内部存储（值和类型）](https://runnerliu.github.io/2017/04/15/phpvarinternstore1/#more)  中介绍了PHP变量在引擎中是如何存储以及PHP如何实现其弱类型功能的。本文将从引用和计数的角度继续介绍变量的内部存储。\n\n### 引用计数基本知识\n\n每个php变量存在一个叫\"zval\"的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是\"is\\_ref\"(此字段在5.3.2版本中是is\\_ref\\_\\_gc)，是个bool值，用来标识这个变量是否是属于引用集合。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是\"refcount\"(此字段在5.3.2版本中是refcount\\_\\_gc)，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。\n\n当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：\n\n**Example \\#1** 生成一个新的zval容器\n\n```\n<?php\n$a = \"new string\";\n?>\n```\n\n在上例中，新的变量a，是在当前作用域中生成的。并且生成了类型为 string 和值为new string的变量容器。在额外的两个字节信息中，\"is\\_ref\"被默认设置为 FALSE，因为没有任何自定义的引用生成。\"refcount\" 被设定为 1，因为这里只有一个变量使用这个变量容器， 注意到当\"refcount\"的值是1时，\"is\\_ref\"的值总是FALSE。如果你已经安装了Xdebug，你能通过调用函数 xdebug\\_debug\\_zval()显示\"refcount\"和\"is\\_ref\"的值。\n\n**Example \\#2 **显示zval信息\n\n```\n<?php\nxdebug_debug_zval('a');\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=1, is_ref=0)='new string'\n```\n\n把一个变量赋值给另一变量将增加引用次数(refcount)。\n\n**Example \\#3 **增加一个zval的引用计数\n\n```\n<?php\n$a = \"new string\";\n$b = $a;\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=2, is_ref=0)='new string'\n```\n\n这时，引用次数是2，因为同一个变量容器被变量a 和变量 b关联。当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 unset()时，”refcount“就会减1，下面的例子就能说明：\n\n**Example \\#4 **减少引用计数\n\n```\n<?php\n$a = \"new string\";\n$c = $b = $a;\nxdebug_debug_zval( 'a' );\nunset( $b, $c );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=3, is_ref=0)='new string'\na: (refcount=1, is_ref=0)='new string'\n```\n\n如果我们现在执行 unset($a)，包含类型和值的这个变量容器就会从内存中删除。\n\n### 复合类型\n\n当考虑像 array和object这样的复合类型时，事情就稍微有点复杂。与 标量类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。\n\n**Example \\#5** Creating a array zval\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=1, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42\n)\n```\n\n图示：\n\n![2017-4-15 135317](/images/2017-4-15 135317.png)\n\n这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样。下面， 我们在数组中再添加一个元素，并且把它的值设为数组中已存在元素的值：\n\n**Example \\#6 **添加一个已经存在的元素到数组中\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\n$a['life'] = $a['meaning'];\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=2, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42,\n   'life' => (refcount=2, is_ref=0)='life'\n)\n```\n\n图示：\n\n![2017-4-15 135507](/images/2017-4-15 135507.png)\n\n从以上的Xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个\"refcount\"为2的zval变量容器. 尽管 Xdebug的输出显示两个值为'life'的 zval 变量容器，其实是同一个。 函数xdebug\\_debug\\_zval()不显示这个信息，但是你能通过显示内存指针信息来看到。\n\n删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：\n\n**Example \\#7 **从数组中删除一个元素\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\n$a['life'] = $a['meaning'];\nunset( $a['meaning'], $a['number'] );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'life' => (refcount=1, is_ref=0)='life'\n)\n```\n\n现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。\n\n**Example \\#8 **把数组作为一个元素添加到自己\n\n```\n<?php\n$a = array( 'one' );\n$a[] =& $a;\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 135755](/images/2017-4-15 135755.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的\"...\"说明发生了递归操作, 显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 \"1\" 所指向的变量容器的引用次数减1，从\"2\"变成\"1\"。下例可以说明：\n\n**Example \\#9 **Unsetting a\n\n```\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 140001](/images/2017-4-15 140001.png)\n\n### 清理变量容器的问题\n\n尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。\n\n如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程或者单元测试中的大的套件中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。\n\n**这就涉及到了PHP中的垃圾回收机制**，将在下一篇博客中介绍。\n\n### 写时复制机制（Copy on write）\n\n考虑以下示例：\n\n```\n<?php  \n$a = \"Hello world\";  \n$b = $a;  \n$b = \"new string\";  \necho $a;  \necho $b;  \n?>  \n```\n\na和b明明是指向同一个zval，为什么修改了b，a还能保持不变呢，这就是copy on write（写时复制）技术，简单的说，当重新给b赋值的时候，会将b从之前的zval中分离出来。分离之后，a和b分别是指向不同的zval了。\n\n> 写时复制技术的一个比较有名的应用是在unix类操作系统内核中，当一个进程调用fork函数生成一个子进程的时候，父子进程拥有相同的地址空间内容，在老版本的系统中，子进程是在fork的时候就将父进程的地址空间中的内容都拷贝一份，对于规模较大的程序这个过程可能会有着很大的开销，更崩溃的是，很多进程在fork之后，直接在子进程中调用exec执行另外一个程序，这样原来花了大量时间从父进程复制的地址空间都还没来得及碰一下就被新的进程地址空间代替，这显然是对资源的极大浪费，所以在后来的系统中，就使用了写时复制技术，fork之后，子进程的地址空间还是简单的指向父进程的地址空间，只有当子进程需要写地址空间中的内容的时候，才会单独分离一份（一般以内存页为单位）给子进程，这样就算子进程马上调用exec函数也没关系，因为根本就不需要从父进程的地址空间中拷贝内容，这样节约了内存同时又提高了速度。\n\n当b从a指向的zval分离出来之后，zval的refcount就要减1，这样由之前的2变成了1，表示这个zval还有一个变量指向它，就是a。b变量指向了一个新的zval，新的zval的refcount为1，值为字符串\"new string\"，大概过程如下：\n\n```\n$a = \"Hello world\"\t//a：(refcount=1, is_ref=0)=\"Hello world\"\n$b = $a\t\t\t//a，b： (refcount=2, is_ref=0)=\"Hello world\"\n$b = \"new string\"\t//a： (refcount=1, is_ref=0)=\"Hello world\"   b: (refcount=1, is_ref=0)=\"new string\"(发生分离操作)\n```\n\n这个分离逻辑可以表叙为：\n对一个一般变量a（is\\_ref=0）进行一般赋值操作，如果a所指向的zval的计数refcount大于1,那么需要为a重新分配一个新的zval，并且把之前的zval的计数refcount减少1。\n\n以上为普通赋值的情况，如果是引用赋值，我们看看这个变化过程：\n\n```\n$a = \"Hello world\"\t//a： (refcount=1, is_ref=0)=\"Hello world\"\n$b = &$a\t\t//a，b： (refcount=2, is_ref=1)=\"Hello world\"\n$b = \"new string\"\t//a，b： (refcount=2, is_ref=1)=\"new string\"\n```\n\n可以看出来，对一个引用类型的zval进行赋值是不会进行分离操作的，实际上我们再产生一个引用变量的时候是可能出现一个分离操作的，只是时机有些不同：\n\n1. 在普通赋值的情况下，分离操作发生在`$b=\"new string\"`这一步，也就是在对变量赋新的值的时候，才会进行zval分离操作；\n2. 在引用赋值的情况下，分离操作有可能发生在`$b = &$a`这一步，也就是在生成引用变量的时候。\n\n情况1就不多解释了，情况2中强调是有可能发生分离，以前面的这代码为例子，是否进行分离与a当前指向的zval的refcount有关系，代码中`$b = &$a` 的时候，a指向的zval的refcount=1，这个时候不需要进行分离操作，但是如果refcount=2，那么就需要分离一个zval出来。比如如下代码：\n\n```\n<?php  \n$a = \"Hello world\";  \n$c = $a;  \n$b = &$a;  \n$b = \"new string\";  \n?>  \n```\n\n在执行引用赋值的时候，a指向的zval的refcount=2，因为a和c同时指向了这个zval，所以在`$b=&$a`的时候，就需要进行一个分离操作，这个分离操作生成了一个ref=1的zval，并且计数为2，因为a，b两个变量指向分离出来的zval，原来的zval的refcount减少1，所以最终只有c指向一个值为\"Hello world\"，ref=0的zval1，a和b指向一个值为\"Hello world\"，ref=1的zval2。 这样我们对c的修改时在操作zval1，对a和b的修改都是在操作zval2，这样就符合引用的特性了。\n\n此过程大致如下：\n\n```\n$a = \"Hello world\";\t//a: (refcount=1, is_ref=0)=\"Hello world\"\n$c = $a;\t\t// a,c: (refcount=2, is_ref=0)=\"Hello world\"\n$b = &$a;\t\t// c: (refcount=1, is_ref=0)=\"Hello world\" a,b: (refcount=2, is_ref=1)=\"Hello world\" (发生分离操作)\n$b = \"new string\";\t// c: (refcount=1, is_ref=0)=\"Hello world\" a,b: (refcount=2, is_ref=1)=\"new string\"\n```\n\n试想一下如果不进行这个分离会有什么后果？\n如果不进行分离，a，b，c都指向了同一个zval，对b的修改也会影响到c，这显然是不符合PHP语言特性的。\n\n这个分离逻辑可以表述为：\n将一个一般变量a(is\\_ref=0)的引用赋给另外一个变量b的时候，如果a的refcount大于1，那么需要对a进行一次分离操作，分离之后的 zval 的is\\_ref等于1，refcount等于2。\n\n### unset的作用\n\nunset()并非一个函数，而是一种语言结构，主要的操作时从当前符号表中删除参数中的符号，比如在全局代码中执行`unset($a)`，那么将会在全局符号表中删除a这个符号。全局符号表是一张哈希表，建立这张表的时候会提供一个表中的项的析构函数，当我们从符号表中删除a的时候，会对符号a指向的项（这里是zval的指针）调用这个析构函数，这个析构函数的主要功能是将a对应的zval的refcount减1，如果refcount变成了0，那么释放这个zval。所以当我们调用unset的时候，不一定能释放变量所占的内存空间，只有当这个变量对应的zval没有别的变量指向它的时候，才会释放掉zval，否则只是对refcount进行减1操作。\n\n### 继续Example\n\n```\n如果将代码：  \n<?php    \n$a = \"Hello world\";    \n$c = $a;    \n$b = &$a;    \n$b = \"new string\";    \n?>   \n  \n改为：  \n  \n<?php    \n$a = \"Hello world\";    \n$c = &$a;         \n$b = &$a;    \n$b = \"new string\";    \n?>   \n```\n\n执行以上示例，会发现，输出的a，b，c都是“new string”：\n\n此过程大致如下：\n\n```\n$a = \"Hello world\";\t\t//a：(refcount=1, is_ref=0)=\"Hello world\"\n$c = &$a;\t\t\t//a，c:(refcount=2, is_ref=1)=\"hello world\"\n$b = &$a;\t\t\t//a，b，c:(refcount=3, is_ref=1)=\"hello world\"\n$b = \"new string\";\t\t//a，b，c:(refcount=3, is_ref=1)=\"new string\"\n```\n\n我们发现，如果都是引用赋值的话，PHP是不会进行分离的，这种情况与上述情况2还是有区别的。\n\n\n\n> 参考文章：\n>\n> [引用计数基本知识](http://php.net/manual/zh/features.gc.refcounting-basics.php)  [变量的内部存储：引用和计数](http://blog.csdn.net/phpkernel/article/details/5732784)  ","source":"_posts/phpvarinternstore2.md","raw":"---\ntitle: PHP内核探索：变量的内部存储（引用和计数）\ndate: 2017-04-15 13:29:51\ntags:\n - PHP\n - 变量的内部存储\ncategories:\n - PHP\n---\n\n在  [PHP内核探索：变量的内部存储（值和类型）](https://runnerliu.github.io/2017/04/15/phpvarinternstore1/#more)  中介绍了PHP变量在引擎中是如何存储以及PHP如何实现其弱类型功能的。本文将从引用和计数的角度继续介绍变量的内部存储。\n\n### 引用计数基本知识\n\n每个php变量存在一个叫\"zval\"的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是\"is\\_ref\"(此字段在5.3.2版本中是is\\_ref\\_\\_gc)，是个bool值，用来标识这个变量是否是属于引用集合。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是\"refcount\"(此字段在5.3.2版本中是refcount\\_\\_gc)，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。\n\n当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：\n\n**Example \\#1** 生成一个新的zval容器\n\n```\n<?php\n$a = \"new string\";\n?>\n```\n\n在上例中，新的变量a，是在当前作用域中生成的。并且生成了类型为 string 和值为new string的变量容器。在额外的两个字节信息中，\"is\\_ref\"被默认设置为 FALSE，因为没有任何自定义的引用生成。\"refcount\" 被设定为 1，因为这里只有一个变量使用这个变量容器， 注意到当\"refcount\"的值是1时，\"is\\_ref\"的值总是FALSE。如果你已经安装了Xdebug，你能通过调用函数 xdebug\\_debug\\_zval()显示\"refcount\"和\"is\\_ref\"的值。\n\n**Example \\#2 **显示zval信息\n\n```\n<?php\nxdebug_debug_zval('a');\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=1, is_ref=0)='new string'\n```\n\n把一个变量赋值给另一变量将增加引用次数(refcount)。\n\n**Example \\#3 **增加一个zval的引用计数\n\n```\n<?php\n$a = \"new string\";\n$b = $a;\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=2, is_ref=0)='new string'\n```\n\n这时，引用次数是2，因为同一个变量容器被变量a 和变量 b关联。当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 unset()时，”refcount“就会减1，下面的例子就能说明：\n\n**Example \\#4 **减少引用计数\n\n```\n<?php\n$a = \"new string\";\n$c = $b = $a;\nxdebug_debug_zval( 'a' );\nunset( $b, $c );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程会输出：\n\n```\na: (refcount=3, is_ref=0)='new string'\na: (refcount=1, is_ref=0)='new string'\n```\n\n如果我们现在执行 unset($a)，包含类型和值的这个变量容器就会从内存中删除。\n\n### 复合类型\n\n当考虑像 array和object这样的复合类型时，事情就稍微有点复杂。与 标量类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。\n\n**Example \\#5** Creating a array zval\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=1, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42\n)\n```\n\n图示：\n\n![2017-4-15 135317](/images/2017-4-15 135317.png)\n\n这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样。下面， 我们在数组中再添加一个元素，并且把它的值设为数组中已存在元素的值：\n\n**Example \\#6 **添加一个已经存在的元素到数组中\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\n$a['life'] = $a['meaning'];\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=2, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42,\n   'life' => (refcount=2, is_ref=0)='life'\n)\n```\n\n图示：\n\n![2017-4-15 135507](/images/2017-4-15 135507.png)\n\n从以上的Xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个\"refcount\"为2的zval变量容器. 尽管 Xdebug的输出显示两个值为'life'的 zval 变量容器，其实是同一个。 函数xdebug\\_debug\\_zval()不显示这个信息，但是你能通过显示内存指针信息来看到。\n\n删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：\n\n**Example \\#7 **从数组中删除一个元素\n\n```\n<?php\n$a = array( 'meaning' => 'life', 'number' => 42 );\n$a['life'] = $a['meaning'];\nunset( $a['meaning'], $a['number'] );\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=1, is_ref=0)=array (\n   'life' => (refcount=1, is_ref=0)='life'\n)\n```\n\n现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。\n\n**Example \\#8 **把数组作为一个元素添加到自己\n\n```\n<?php\n$a = array( 'one' );\n$a[] =& $a;\nxdebug_debug_zval( 'a' );\n?>\n```\n\n以上例程的输出类似于：\n\n```\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 135755](/images/2017-4-15 135755.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的\"...\"说明发生了递归操作, 显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 \"1\" 所指向的变量容器的引用次数减1，从\"2\"变成\"1\"。下例可以说明：\n\n**Example \\#9 **Unsetting a\n\n```\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![2017-4-15 140001](/images/2017-4-15 140001.png)\n\n### 清理变量容器的问题\n\n尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。\n\n如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程或者单元测试中的大的套件中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。\n\n**这就涉及到了PHP中的垃圾回收机制**，将在下一篇博客中介绍。\n\n### 写时复制机制（Copy on write）\n\n考虑以下示例：\n\n```\n<?php  \n$a = \"Hello world\";  \n$b = $a;  \n$b = \"new string\";  \necho $a;  \necho $b;  \n?>  \n```\n\na和b明明是指向同一个zval，为什么修改了b，a还能保持不变呢，这就是copy on write（写时复制）技术，简单的说，当重新给b赋值的时候，会将b从之前的zval中分离出来。分离之后，a和b分别是指向不同的zval了。\n\n> 写时复制技术的一个比较有名的应用是在unix类操作系统内核中，当一个进程调用fork函数生成一个子进程的时候，父子进程拥有相同的地址空间内容，在老版本的系统中，子进程是在fork的时候就将父进程的地址空间中的内容都拷贝一份，对于规模较大的程序这个过程可能会有着很大的开销，更崩溃的是，很多进程在fork之后，直接在子进程中调用exec执行另外一个程序，这样原来花了大量时间从父进程复制的地址空间都还没来得及碰一下就被新的进程地址空间代替，这显然是对资源的极大浪费，所以在后来的系统中，就使用了写时复制技术，fork之后，子进程的地址空间还是简单的指向父进程的地址空间，只有当子进程需要写地址空间中的内容的时候，才会单独分离一份（一般以内存页为单位）给子进程，这样就算子进程马上调用exec函数也没关系，因为根本就不需要从父进程的地址空间中拷贝内容，这样节约了内存同时又提高了速度。\n\n当b从a指向的zval分离出来之后，zval的refcount就要减1，这样由之前的2变成了1，表示这个zval还有一个变量指向它，就是a。b变量指向了一个新的zval，新的zval的refcount为1，值为字符串\"new string\"，大概过程如下：\n\n```\n$a = \"Hello world\"\t//a：(refcount=1, is_ref=0)=\"Hello world\"\n$b = $a\t\t\t//a，b： (refcount=2, is_ref=0)=\"Hello world\"\n$b = \"new string\"\t//a： (refcount=1, is_ref=0)=\"Hello world\"   b: (refcount=1, is_ref=0)=\"new string\"(发生分离操作)\n```\n\n这个分离逻辑可以表叙为：\n对一个一般变量a（is\\_ref=0）进行一般赋值操作，如果a所指向的zval的计数refcount大于1,那么需要为a重新分配一个新的zval，并且把之前的zval的计数refcount减少1。\n\n以上为普通赋值的情况，如果是引用赋值，我们看看这个变化过程：\n\n```\n$a = \"Hello world\"\t//a： (refcount=1, is_ref=0)=\"Hello world\"\n$b = &$a\t\t//a，b： (refcount=2, is_ref=1)=\"Hello world\"\n$b = \"new string\"\t//a，b： (refcount=2, is_ref=1)=\"new string\"\n```\n\n可以看出来，对一个引用类型的zval进行赋值是不会进行分离操作的，实际上我们再产生一个引用变量的时候是可能出现一个分离操作的，只是时机有些不同：\n\n1. 在普通赋值的情况下，分离操作发生在`$b=\"new string\"`这一步，也就是在对变量赋新的值的时候，才会进行zval分离操作；\n2. 在引用赋值的情况下，分离操作有可能发生在`$b = &$a`这一步，也就是在生成引用变量的时候。\n\n情况1就不多解释了，情况2中强调是有可能发生分离，以前面的这代码为例子，是否进行分离与a当前指向的zval的refcount有关系，代码中`$b = &$a` 的时候，a指向的zval的refcount=1，这个时候不需要进行分离操作，但是如果refcount=2，那么就需要分离一个zval出来。比如如下代码：\n\n```\n<?php  \n$a = \"Hello world\";  \n$c = $a;  \n$b = &$a;  \n$b = \"new string\";  \n?>  \n```\n\n在执行引用赋值的时候，a指向的zval的refcount=2，因为a和c同时指向了这个zval，所以在`$b=&$a`的时候，就需要进行一个分离操作，这个分离操作生成了一个ref=1的zval，并且计数为2，因为a，b两个变量指向分离出来的zval，原来的zval的refcount减少1，所以最终只有c指向一个值为\"Hello world\"，ref=0的zval1，a和b指向一个值为\"Hello world\"，ref=1的zval2。 这样我们对c的修改时在操作zval1，对a和b的修改都是在操作zval2，这样就符合引用的特性了。\n\n此过程大致如下：\n\n```\n$a = \"Hello world\";\t//a: (refcount=1, is_ref=0)=\"Hello world\"\n$c = $a;\t\t// a,c: (refcount=2, is_ref=0)=\"Hello world\"\n$b = &$a;\t\t// c: (refcount=1, is_ref=0)=\"Hello world\" a,b: (refcount=2, is_ref=1)=\"Hello world\" (发生分离操作)\n$b = \"new string\";\t// c: (refcount=1, is_ref=0)=\"Hello world\" a,b: (refcount=2, is_ref=1)=\"new string\"\n```\n\n试想一下如果不进行这个分离会有什么后果？\n如果不进行分离，a，b，c都指向了同一个zval，对b的修改也会影响到c，这显然是不符合PHP语言特性的。\n\n这个分离逻辑可以表述为：\n将一个一般变量a(is\\_ref=0)的引用赋给另外一个变量b的时候，如果a的refcount大于1，那么需要对a进行一次分离操作，分离之后的 zval 的is\\_ref等于1，refcount等于2。\n\n### unset的作用\n\nunset()并非一个函数，而是一种语言结构，主要的操作时从当前符号表中删除参数中的符号，比如在全局代码中执行`unset($a)`，那么将会在全局符号表中删除a这个符号。全局符号表是一张哈希表，建立这张表的时候会提供一个表中的项的析构函数，当我们从符号表中删除a的时候，会对符号a指向的项（这里是zval的指针）调用这个析构函数，这个析构函数的主要功能是将a对应的zval的refcount减1，如果refcount变成了0，那么释放这个zval。所以当我们调用unset的时候，不一定能释放变量所占的内存空间，只有当这个变量对应的zval没有别的变量指向它的时候，才会释放掉zval，否则只是对refcount进行减1操作。\n\n### 继续Example\n\n```\n如果将代码：  \n<?php    \n$a = \"Hello world\";    \n$c = $a;    \n$b = &$a;    \n$b = \"new string\";    \n?>   \n  \n改为：  \n  \n<?php    \n$a = \"Hello world\";    \n$c = &$a;         \n$b = &$a;    \n$b = \"new string\";    \n?>   \n```\n\n执行以上示例，会发现，输出的a，b，c都是“new string”：\n\n此过程大致如下：\n\n```\n$a = \"Hello world\";\t\t//a：(refcount=1, is_ref=0)=\"Hello world\"\n$c = &$a;\t\t\t//a，c:(refcount=2, is_ref=1)=\"hello world\"\n$b = &$a;\t\t\t//a，b，c:(refcount=3, is_ref=1)=\"hello world\"\n$b = \"new string\";\t\t//a，b，c:(refcount=3, is_ref=1)=\"new string\"\n```\n\n我们发现，如果都是引用赋值的话，PHP是不会进行分离的，这种情况与上述情况2还是有区别的。\n\n\n\n> 参考文章：\n>\n> [引用计数基本知识](http://php.net/manual/zh/features.gc.refcounting-basics.php)  [变量的内部存储：引用和计数](http://blog.csdn.net/phpkernel/article/details/5732784)  ","slug":"phpvarinternstore2","published":1,"updated":"2020-10-25T06:43:32.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq6z009xmolc2extmipw","content":"<p>在  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore1/#more\">PHP内核探索：变量的内部存储（值和类型）</a>  中介绍了PHP变量在引擎中是如何存储以及PHP如何实现其弱类型功能的。本文将从引用和计数的角度继续介绍变量的内部存储。</p>\n<h3 id=\"引用计数基本知识\"><a href=\"#引用计数基本知识\" class=\"headerlink\" title=\"引用计数基本知识\"></a>引用计数基本知识</h3><p>每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”(此字段在5.3.2版本中是is_ref__gc)，是个bool值，用来标识这个变量是否是属于引用集合。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是”refcount”(此字段在5.3.2版本中是refcount__gc)，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。</p>\n<p>当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：</p>\n<p><strong>Example #1</strong> 生成一个新的zval容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中，新的变量a，是在当前作用域中生成的。并且生成了类型为 string 和值为new string的变量容器。在额外的两个字节信息中，”is_ref”被默认设置为 FALSE，因为没有任何自定义的引用生成。”refcount” 被设定为 1，因为这里只有一个变量使用这个变量容器， 注意到当”refcount”的值是1时，”is_ref”的值总是FALSE。如果你已经安装了Xdebug，你能通过调用函数 xdebug_debug_zval()显示”refcount”和”is_ref”的值。</p>\n<p><strong>Example #2 </strong>显示zval信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">xdebug_debug_zval(&apos;a&apos;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>把一个变量赋值给另一变量将增加引用次数(refcount)。</p>\n<p><strong>Example #3 </strong>增加一个zval的引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">$b = $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>这时，引用次数是2，因为同一个变量容器被变量a 和变量 b关联。当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 unset()时，”refcount“就会减1，下面的例子就能说明：</p>\n<p><strong>Example #4 </strong>减少引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">$c = $b = $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">unset( $b, $c );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=3, is_ref=0)=&apos;new string&apos;</span><br><span class=\"line\">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>如果我们现在执行 unset($a)，包含类型和值的这个变量容器就会从内存中删除。</p>\n<h3 id=\"复合类型\"><a href=\"#复合类型\" class=\"headerlink\" title=\"复合类型\"></a>复合类型</h3><p>当考虑像 array和object这样的复合类型时，事情就稍微有点复杂。与 标量类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。</p>\n<p><strong>Example #5</strong> Creating a array zval</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;meaning&apos; =&gt; (refcount=1, is_ref=0)=&apos;life&apos;,</span><br><span class=\"line\">   &apos;number&apos; =&gt; (refcount=1, is_ref=0)=42</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135317.png\" alt=\"2017-4-15 135317\"></p>\n<p>这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样。下面， 我们在数组中再添加一个元素，并且把它的值设为数组中已存在元素的值：</p>\n<p><strong>Example #6 </strong>添加一个已经存在的元素到数组中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">$a[&apos;life&apos;] = $a[&apos;meaning&apos;];</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;meaning&apos; =&gt; (refcount=2, is_ref=0)=&apos;life&apos;,</span><br><span class=\"line\">   &apos;number&apos; =&gt; (refcount=1, is_ref=0)=42,</span><br><span class=\"line\">   &apos;life&apos; =&gt; (refcount=2, is_ref=0)=&apos;life&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135507.png\" alt=\"2017-4-15 135507\"></p>\n<p>从以上的Xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个”refcount”为2的zval变量容器. 尽管 Xdebug的输出显示两个值为’life’的 zval 变量容器，其实是同一个。 函数xdebug_debug_zval()不显示这个信息，但是你能通过显示内存指针信息来看到。</p>\n<p>删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：</p>\n<p><strong>Example #7 </strong>从数组中删除一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">$a[&apos;life&apos;] = $a[&apos;meaning&apos;];</span><br><span class=\"line\">unset( $a[&apos;meaning&apos;], $a[&apos;number&apos;] );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;life&apos; =&gt; (refcount=1, is_ref=0)=&apos;life&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。</p>\n<p><strong>Example #8 </strong>把数组作为一个元素添加到自己</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;one&apos; );</span><br><span class=\"line\">$a[] =&amp; $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=2, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135755.png\" alt=\"2017-4-15 135755\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的”…”说明发生了递归操作, 显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 “1” 所指向的变量容器的引用次数减1，从”2”变成”1”。下例可以说明：</p>\n<p><strong>Example #9 </strong>Unsetting a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=1, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=1, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 140001.png\" alt=\"2017-4-15 140001\"></p>\n<h3 id=\"清理变量容器的问题\"><a href=\"#清理变量容器的问题\" class=\"headerlink\" title=\"清理变量容器的问题\"></a>清理变量容器的问题</h3><p>尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。</p>\n<p>如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程或者单元测试中的大的套件中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。</p>\n<p><strong>这就涉及到了PHP中的垃圾回收机制</strong>，将在下一篇博客中介绍。</p>\n<h3 id=\"写时复制机制（Copy-on-write）\"><a href=\"#写时复制机制（Copy-on-write）\" class=\"headerlink\" title=\"写时复制机制（Copy on write）\"></a>写时复制机制（Copy on write）</h3><p>考虑以下示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = &quot;Hello world&quot;;  </span><br><span class=\"line\">$b = $a;  </span><br><span class=\"line\">$b = &quot;new string&quot;;  </span><br><span class=\"line\">echo $a;  </span><br><span class=\"line\">echo $b;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>a和b明明是指向同一个zval，为什么修改了b，a还能保持不变呢，这就是copy on write（写时复制）技术，简单的说，当重新给b赋值的时候，会将b从之前的zval中分离出来。分离之后，a和b分别是指向不同的zval了。</p>\n<blockquote>\n<p>写时复制技术的一个比较有名的应用是在unix类操作系统内核中，当一个进程调用fork函数生成一个子进程的时候，父子进程拥有相同的地址空间内容，在老版本的系统中，子进程是在fork的时候就将父进程的地址空间中的内容都拷贝一份，对于规模较大的程序这个过程可能会有着很大的开销，更崩溃的是，很多进程在fork之后，直接在子进程中调用exec执行另外一个程序，这样原来花了大量时间从父进程复制的地址空间都还没来得及碰一下就被新的进程地址空间代替，这显然是对资源的极大浪费，所以在后来的系统中，就使用了写时复制技术，fork之后，子进程的地址空间还是简单的指向父进程的地址空间，只有当子进程需要写地址空间中的内容的时候，才会单独分离一份（一般以内存页为单位）给子进程，这样就算子进程马上调用exec函数也没关系，因为根本就不需要从父进程的地址空间中拷贝内容，这样节约了内存同时又提高了速度。</p>\n</blockquote>\n<p>当b从a指向的zval分离出来之后，zval的refcount就要减1，这样由之前的2变成了1，表示这个zval还有一个变量指向它，就是a。b变量指向了一个新的zval，新的zval的refcount为1，值为字符串”new string”，大概过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;\t//a：(refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = $a\t\t\t//a，b： (refcount=2, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;\t//a： (refcount=1, is_ref=0)=&quot;Hello world&quot;   b: (refcount=1, is_ref=0)=&quot;new string&quot;(发生分离操作)</span><br></pre></td></tr></table></figure>\n<p>这个分离逻辑可以表叙为：<br>对一个一般变量a（is_ref=0）进行一般赋值操作，如果a所指向的zval的计数refcount大于1,那么需要为a重新分配一个新的zval，并且把之前的zval的计数refcount减少1。</p>\n<p>以上为普通赋值的情况，如果是引用赋值，我们看看这个变化过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;\t//a： (refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &amp;$a\t\t//a，b： (refcount=2, is_ref=1)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;\t//a，b： (refcount=2, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，对一个引用类型的zval进行赋值是不会进行分离操作的，实际上我们再产生一个引用变量的时候是可能出现一个分离操作的，只是时机有些不同：</p>\n<ol>\n<li>在普通赋值的情况下，分离操作发生在<code>$b=&quot;new string&quot;</code>这一步，也就是在对变量赋新的值的时候，才会进行zval分离操作；</li>\n<li>在引用赋值的情况下，分离操作有可能发生在<code>$b = &amp;$a</code>这一步，也就是在生成引用变量的时候。</li>\n</ol>\n<p>情况1就不多解释了，情况2中强调是有可能发生分离，以前面的这代码为例子，是否进行分离与a当前指向的zval的refcount有关系，代码中<code>$b = &amp;$a</code> 的时候，a指向的zval的refcount=1，这个时候不需要进行分离操作，但是如果refcount=2，那么就需要分离一个zval出来。比如如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = &quot;Hello world&quot;;  </span><br><span class=\"line\">$c = $a;  </span><br><span class=\"line\">$b = &amp;$a;  </span><br><span class=\"line\">$b = &quot;new string&quot;;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在执行引用赋值的时候，a指向的zval的refcount=2，因为a和c同时指向了这个zval，所以在<code>$b=&amp;$a</code>的时候，就需要进行一个分离操作，这个分离操作生成了一个ref=1的zval，并且计数为2，因为a，b两个变量指向分离出来的zval，原来的zval的refcount减少1，所以最终只有c指向一个值为”Hello world”，ref=0的zval1，a和b指向一个值为”Hello world”，ref=1的zval2。 这样我们对c的修改时在操作zval1，对a和b的修改都是在操作zval2，这样就符合引用的特性了。</p>\n<p>此过程大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;;\t//a: (refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$c = $a;\t\t// a,c: (refcount=2, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &amp;$a;\t\t// c: (refcount=1, is_ref=0)=&quot;Hello world&quot; a,b: (refcount=2, is_ref=1)=&quot;Hello world&quot; (发生分离操作)</span><br><span class=\"line\">$b = &quot;new string&quot;;\t// c: (refcount=1, is_ref=0)=&quot;Hello world&quot; a,b: (refcount=2, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>试想一下如果不进行这个分离会有什么后果？<br>如果不进行分离，a，b，c都指向了同一个zval，对b的修改也会影响到c，这显然是不符合PHP语言特性的。</p>\n<p>这个分离逻辑可以表述为：<br>将一个一般变量a(is_ref=0)的引用赋给另外一个变量b的时候，如果a的refcount大于1，那么需要对a进行一次分离操作，分离之后的 zval 的is_ref等于1，refcount等于2。</p>\n<h3 id=\"unset的作用\"><a href=\"#unset的作用\" class=\"headerlink\" title=\"unset的作用\"></a>unset的作用</h3><p>unset()并非一个函数，而是一种语言结构，主要的操作时从当前符号表中删除参数中的符号，比如在全局代码中执行<code>unset($a)</code>，那么将会在全局符号表中删除a这个符号。全局符号表是一张哈希表，建立这张表的时候会提供一个表中的项的析构函数，当我们从符号表中删除a的时候，会对符号a指向的项（这里是zval的指针）调用这个析构函数，这个析构函数的主要功能是将a对应的zval的refcount减1，如果refcount变成了0，那么释放这个zval。所以当我们调用unset的时候，不一定能释放变量所占的内存空间，只有当这个变量对应的zval没有别的变量指向它的时候，才会释放掉zval，否则只是对refcount进行减1操作。</p>\n<h3 id=\"继续Example\"><a href=\"#继续Example\" class=\"headerlink\" title=\"继续Example\"></a>继续Example</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果将代码：  </span><br><span class=\"line\">&lt;?php    </span><br><span class=\"line\">$a = &quot;Hello world&quot;;    </span><br><span class=\"line\">$c = $a;    </span><br><span class=\"line\">$b = &amp;$a;    </span><br><span class=\"line\">$b = &quot;new string&quot;;    </span><br><span class=\"line\">?&gt;   </span><br><span class=\"line\">  </span><br><span class=\"line\">改为：  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;?php    </span><br><span class=\"line\">$a = &quot;Hello world&quot;;    </span><br><span class=\"line\">$c = &amp;$a;         </span><br><span class=\"line\">$b = &amp;$a;    </span><br><span class=\"line\">$b = &quot;new string&quot;;    </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>执行以上示例，会发现，输出的a，b，c都是“new string”：</p>\n<p>此过程大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;;\t\t//a：(refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$c = &amp;$a;\t\t\t//a，c:(refcount=2, is_ref=1)=&quot;hello world&quot;</span><br><span class=\"line\">$b = &amp;$a;\t\t\t//a，b，c:(refcount=3, is_ref=1)=&quot;hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;;\t\t//a，b，c:(refcount=3, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>我们发现，如果都是引用赋值的话，PHP是不会进行分离的，这种情况与上述情况2还是有区别的。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://php.net/manual/zh/features.gc.refcounting-basics.php\" target=\"_blank\" rel=\"noopener\">引用计数基本知识</a>  <a href=\"http://blog.csdn.net/phpkernel/article/details/5732784\" target=\"_blank\" rel=\"noopener\">变量的内部存储：引用和计数</a>  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在  <a href=\"https://runnerliu.github.io/2017/04/15/phpvarinternstore1/#more\">PHP内核探索：变量的内部存储（值和类型）</a>  中介绍了PHP变量在引擎中是如何存储以及PHP如何实现其弱类型功能的。本文将从引用和计数的角度继续介绍变量的内部存储。</p>\n<h3 id=\"引用计数基本知识\"><a href=\"#引用计数基本知识\" class=\"headerlink\" title=\"引用计数基本知识\"></a>引用计数基本知识</h3><p>每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”(此字段在5.3.2版本中是is_ref__gc)，是个bool值，用来标识这个变量是否是属于引用集合。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是”refcount”(此字段在5.3.2版本中是refcount__gc)，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。</p>\n<p>当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：</p>\n<p><strong>Example #1</strong> 生成一个新的zval容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在上例中，新的变量a，是在当前作用域中生成的。并且生成了类型为 string 和值为new string的变量容器。在额外的两个字节信息中，”is_ref”被默认设置为 FALSE，因为没有任何自定义的引用生成。”refcount” 被设定为 1，因为这里只有一个变量使用这个变量容器， 注意到当”refcount”的值是1时，”is_ref”的值总是FALSE。如果你已经安装了Xdebug，你能通过调用函数 xdebug_debug_zval()显示”refcount”和”is_ref”的值。</p>\n<p><strong>Example #2 </strong>显示zval信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">xdebug_debug_zval(&apos;a&apos;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>把一个变量赋值给另一变量将增加引用次数(refcount)。</p>\n<p><strong>Example #3 </strong>增加一个zval的引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">$b = $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>这时，引用次数是2，因为同一个变量容器被变量a 和变量 b关联。当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 unset()时，”refcount“就会减1，下面的例子就能说明：</p>\n<p><strong>Example #4 </strong>减少引用计数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = &quot;new string&quot;;</span><br><span class=\"line\">$c = $b = $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">unset( $b, $c );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=3, is_ref=0)=&apos;new string&apos;</span><br><span class=\"line\">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure>\n<p>如果我们现在执行 unset($a)，包含类型和值的这个变量容器就会从内存中删除。</p>\n<h3 id=\"复合类型\"><a href=\"#复合类型\" class=\"headerlink\" title=\"复合类型\"></a>复合类型</h3><p>当考虑像 array和object这样的复合类型时，事情就稍微有点复杂。与 标量类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。</p>\n<p><strong>Example #5</strong> Creating a array zval</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;meaning&apos; =&gt; (refcount=1, is_ref=0)=&apos;life&apos;,</span><br><span class=\"line\">   &apos;number&apos; =&gt; (refcount=1, is_ref=0)=42</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135317.png\" alt=\"2017-4-15 135317\"></p>\n<p>这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样。下面， 我们在数组中再添加一个元素，并且把它的值设为数组中已存在元素的值：</p>\n<p><strong>Example #6 </strong>添加一个已经存在的元素到数组中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">$a[&apos;life&apos;] = $a[&apos;meaning&apos;];</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;meaning&apos; =&gt; (refcount=2, is_ref=0)=&apos;life&apos;,</span><br><span class=\"line\">   &apos;number&apos; =&gt; (refcount=1, is_ref=0)=42,</span><br><span class=\"line\">   &apos;life&apos; =&gt; (refcount=2, is_ref=0)=&apos;life&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135507.png\" alt=\"2017-4-15 135507\"></p>\n<p>从以上的Xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个”refcount”为2的zval变量容器. 尽管 Xdebug的输出显示两个值为’life’的 zval 变量容器，其实是同一个。 函数xdebug_debug_zval()不显示这个信息，但是你能通过显示内存指针信息来看到。</p>\n<p>删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：</p>\n<p><strong>Example #7 </strong>从数组中删除一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;meaning&apos; =&gt; &apos;life&apos;, &apos;number&apos; =&gt; 42 );</span><br><span class=\"line\">$a[&apos;life&apos;] = $a[&apos;meaning&apos;];</span><br><span class=\"line\">unset( $a[&apos;meaning&apos;], $a[&apos;number&apos;] );</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=1, is_ref=0)=array (</span><br><span class=\"line\">   &apos;life&apos; =&gt; (refcount=1, is_ref=0)=&apos;life&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。</p>\n<p><strong>Example #8 </strong>把数组作为一个元素添加到自己</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = array( &apos;one&apos; );</span><br><span class=\"line\">$a[] =&amp; $a;</span><br><span class=\"line\">xdebug_debug_zval( &apos;a&apos; );</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=2, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=2, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 135755.png\" alt=\"2017-4-15 135755\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的”…”说明发生了递归操作, 显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量a调用unset，那么变量 a 和数组元素 “1” 所指向的变量容器的引用次数减1，从”2”变成”1”。下例可以说明：</p>\n<p><strong>Example #9 </strong>Unsetting a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=1, is_ref=1)=array (</span><br><span class=\"line\">   0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class=\"line\">   1 =&gt; (refcount=1, is_ref=1)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>图示：</p>\n<p><img src=\"/images/2017-4-15 140001.png\" alt=\"2017-4-15 140001\"></p>\n<h3 id=\"清理变量容器的问题\"><a href=\"#清理变量容器的问题\" class=\"headerlink\" title=\"清理变量容器的问题\"></a>清理变量容器的问题</h3><p>尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。</p>\n<p>如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程或者单元测试中的大的套件中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。</p>\n<p><strong>这就涉及到了PHP中的垃圾回收机制</strong>，将在下一篇博客中介绍。</p>\n<h3 id=\"写时复制机制（Copy-on-write）\"><a href=\"#写时复制机制（Copy-on-write）\" class=\"headerlink\" title=\"写时复制机制（Copy on write）\"></a>写时复制机制（Copy on write）</h3><p>考虑以下示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = &quot;Hello world&quot;;  </span><br><span class=\"line\">$b = $a;  </span><br><span class=\"line\">$b = &quot;new string&quot;;  </span><br><span class=\"line\">echo $a;  </span><br><span class=\"line\">echo $b;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>a和b明明是指向同一个zval，为什么修改了b，a还能保持不变呢，这就是copy on write（写时复制）技术，简单的说，当重新给b赋值的时候，会将b从之前的zval中分离出来。分离之后，a和b分别是指向不同的zval了。</p>\n<blockquote>\n<p>写时复制技术的一个比较有名的应用是在unix类操作系统内核中，当一个进程调用fork函数生成一个子进程的时候，父子进程拥有相同的地址空间内容，在老版本的系统中，子进程是在fork的时候就将父进程的地址空间中的内容都拷贝一份，对于规模较大的程序这个过程可能会有着很大的开销，更崩溃的是，很多进程在fork之后，直接在子进程中调用exec执行另外一个程序，这样原来花了大量时间从父进程复制的地址空间都还没来得及碰一下就被新的进程地址空间代替，这显然是对资源的极大浪费，所以在后来的系统中，就使用了写时复制技术，fork之后，子进程的地址空间还是简单的指向父进程的地址空间，只有当子进程需要写地址空间中的内容的时候，才会单独分离一份（一般以内存页为单位）给子进程，这样就算子进程马上调用exec函数也没关系，因为根本就不需要从父进程的地址空间中拷贝内容，这样节约了内存同时又提高了速度。</p>\n</blockquote>\n<p>当b从a指向的zval分离出来之后，zval的refcount就要减1，这样由之前的2变成了1，表示这个zval还有一个变量指向它，就是a。b变量指向了一个新的zval，新的zval的refcount为1，值为字符串”new string”，大概过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;\t//a：(refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = $a\t\t\t//a，b： (refcount=2, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;\t//a： (refcount=1, is_ref=0)=&quot;Hello world&quot;   b: (refcount=1, is_ref=0)=&quot;new string&quot;(发生分离操作)</span><br></pre></td></tr></table></figure>\n<p>这个分离逻辑可以表叙为：<br>对一个一般变量a（is_ref=0）进行一般赋值操作，如果a所指向的zval的计数refcount大于1,那么需要为a重新分配一个新的zval，并且把之前的zval的计数refcount减少1。</p>\n<p>以上为普通赋值的情况，如果是引用赋值，我们看看这个变化过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;\t//a： (refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &amp;$a\t\t//a，b： (refcount=2, is_ref=1)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;\t//a，b： (refcount=2, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，对一个引用类型的zval进行赋值是不会进行分离操作的，实际上我们再产生一个引用变量的时候是可能出现一个分离操作的，只是时机有些不同：</p>\n<ol>\n<li>在普通赋值的情况下，分离操作发生在<code>$b=&quot;new string&quot;</code>这一步，也就是在对变量赋新的值的时候，才会进行zval分离操作；</li>\n<li>在引用赋值的情况下，分离操作有可能发生在<code>$b = &amp;$a</code>这一步，也就是在生成引用变量的时候。</li>\n</ol>\n<p>情况1就不多解释了，情况2中强调是有可能发生分离，以前面的这代码为例子，是否进行分离与a当前指向的zval的refcount有关系，代码中<code>$b = &amp;$a</code> 的时候，a指向的zval的refcount=1，这个时候不需要进行分离操作，但是如果refcount=2，那么就需要分离一个zval出来。比如如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = &quot;Hello world&quot;;  </span><br><span class=\"line\">$c = $a;  </span><br><span class=\"line\">$b = &amp;$a;  </span><br><span class=\"line\">$b = &quot;new string&quot;;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在执行引用赋值的时候，a指向的zval的refcount=2，因为a和c同时指向了这个zval，所以在<code>$b=&amp;$a</code>的时候，就需要进行一个分离操作，这个分离操作生成了一个ref=1的zval，并且计数为2，因为a，b两个变量指向分离出来的zval，原来的zval的refcount减少1，所以最终只有c指向一个值为”Hello world”，ref=0的zval1，a和b指向一个值为”Hello world”，ref=1的zval2。 这样我们对c的修改时在操作zval1，对a和b的修改都是在操作zval2，这样就符合引用的特性了。</p>\n<p>此过程大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;;\t//a: (refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$c = $a;\t\t// a,c: (refcount=2, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$b = &amp;$a;\t\t// c: (refcount=1, is_ref=0)=&quot;Hello world&quot; a,b: (refcount=2, is_ref=1)=&quot;Hello world&quot; (发生分离操作)</span><br><span class=\"line\">$b = &quot;new string&quot;;\t// c: (refcount=1, is_ref=0)=&quot;Hello world&quot; a,b: (refcount=2, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>试想一下如果不进行这个分离会有什么后果？<br>如果不进行分离，a，b，c都指向了同一个zval，对b的修改也会影响到c，这显然是不符合PHP语言特性的。</p>\n<p>这个分离逻辑可以表述为：<br>将一个一般变量a(is_ref=0)的引用赋给另外一个变量b的时候，如果a的refcount大于1，那么需要对a进行一次分离操作，分离之后的 zval 的is_ref等于1，refcount等于2。</p>\n<h3 id=\"unset的作用\"><a href=\"#unset的作用\" class=\"headerlink\" title=\"unset的作用\"></a>unset的作用</h3><p>unset()并非一个函数，而是一种语言结构，主要的操作时从当前符号表中删除参数中的符号，比如在全局代码中执行<code>unset($a)</code>，那么将会在全局符号表中删除a这个符号。全局符号表是一张哈希表，建立这张表的时候会提供一个表中的项的析构函数，当我们从符号表中删除a的时候，会对符号a指向的项（这里是zval的指针）调用这个析构函数，这个析构函数的主要功能是将a对应的zval的refcount减1，如果refcount变成了0，那么释放这个zval。所以当我们调用unset的时候，不一定能释放变量所占的内存空间，只有当这个变量对应的zval没有别的变量指向它的时候，才会释放掉zval，否则只是对refcount进行减1操作。</p>\n<h3 id=\"继续Example\"><a href=\"#继续Example\" class=\"headerlink\" title=\"继续Example\"></a>继续Example</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果将代码：  </span><br><span class=\"line\">&lt;?php    </span><br><span class=\"line\">$a = &quot;Hello world&quot;;    </span><br><span class=\"line\">$c = $a;    </span><br><span class=\"line\">$b = &amp;$a;    </span><br><span class=\"line\">$b = &quot;new string&quot;;    </span><br><span class=\"line\">?&gt;   </span><br><span class=\"line\">  </span><br><span class=\"line\">改为：  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;?php    </span><br><span class=\"line\">$a = &quot;Hello world&quot;;    </span><br><span class=\"line\">$c = &amp;$a;         </span><br><span class=\"line\">$b = &amp;$a;    </span><br><span class=\"line\">$b = &quot;new string&quot;;    </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>执行以上示例，会发现，输出的a，b，c都是“new string”：</p>\n<p>此过程大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = &quot;Hello world&quot;;\t\t//a：(refcount=1, is_ref=0)=&quot;Hello world&quot;</span><br><span class=\"line\">$c = &amp;$a;\t\t\t//a，c:(refcount=2, is_ref=1)=&quot;hello world&quot;</span><br><span class=\"line\">$b = &amp;$a;\t\t\t//a，b，c:(refcount=3, is_ref=1)=&quot;hello world&quot;</span><br><span class=\"line\">$b = &quot;new string&quot;;\t\t//a，b，c:(refcount=3, is_ref=1)=&quot;new string&quot;</span><br></pre></td></tr></table></figure>\n<p>我们发现，如果都是引用赋值的话，PHP是不会进行分离的，这种情况与上述情况2还是有区别的。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://php.net/manual/zh/features.gc.refcounting-basics.php\" target=\"_blank\" rel=\"noopener\">引用计数基本知识</a>  <a href=\"http://blog.csdn.net/phpkernel/article/details/5732784\" target=\"_blank\" rel=\"noopener\">变量的内部存储：引用和计数</a>  </p>\n</blockquote>\n"},{"title":"进程与线程的关系","date":"2017-04-04T03:19:49.000Z","_content":"\n写这篇文章是想总结一下在操作系统中，进程和线程到底是什么样的，它们之间有什么区别和联系，虽然在实践中使用过多线程和多进程，但也只是了解了皮毛，故在此总结一下，因为操作系统是一个比较复杂的东西，通过进程和线程可以推演出各种复杂的概念和情况，所以文章只是在现有水平下的一点解释。\n\n### 从操作系统说起\n\n操作系统 (Operating System，OS) 是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。\n\n操作系统的功能主要包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其它应用软件提供支持，让计算机系统所有资源最大限度地发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其它软件的开发提供必要的服务和相应的接口等。\n\n实际上，用户是不用接触操作系统的，操作系统管理着计算机硬件资源，同时按照应用程序的资源请求，分配资源，如：划分CPU时间，内存空间的开辟，调用打印机等。\n\n我们的计算机由硬件和软件两个部分组成。硬件部分包括控制器、运算器、存储器、输入设备、输出设备；软件部分包括系统软件和应用软件。而在计算机运行过程中最最重要的就是控制器和运算器，他们构成了计算机的核心：CPU。简而言之，CPU+RAM+各种资源 (比如显卡，光驱，键盘，GPS, 等等外设) 构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。\n\n目前计算机的软硬件发展太快，CPU的运行速度也是直线上升，而寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来？或者谁优先级高谁来？不管怎么样的策略，一句话就是：在CPU看来就是轮流着来。\n\n### 搞清楚几个概念\n\n**进程** 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，是一个动态的概念；\n\n**线程**是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针PC，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行；\n\n**程序**只是一组指令的有序集合，是一个静态的概念；\n\n**任务**是指由软件完成的一个活动。一个任务既可以是一个进程，也可以是一个线程。它指的是一系列共同达到某一目的的操作。例如，读取数据并将数据放入内存中。这个任务可以作为一个进程来实现，也可以作为一个线程来实现。\n\n### 任务调度\n\n目前大部分的操作系统的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。\n\n任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态，等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发。多任务运行过程的示意图如下：\n\n![2017-4-4 132812](/images/2017-4-4 132812.png)\n\n当执行一段程序代码，实现一个功能的过程时，得到CPU时间片的时候，相关的资源必须也已经就位，比如显卡等资源，然后CPU开始执行。这时除了CPU以外所有的其他资源就构成了这个程序的执行环境，也就是我们所说的程序上下文。当这个程序执行完了，或者分配给他的CPU时间片用完了，那它就要被切换出去，等待下一次CPU的**临幸**。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。\n\n具体的轮流执行方法就是：先加载程序 A 的上下文，然后开始执行 A ，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B ，保存程序 B 的上下文......循环执行。\n\n### 进程\n\n计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。\n\n进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块 (PCB) 包含进程的描述信息和控制信息，是进程存在的唯一标志。\n\n程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为**进程**。\n\n**进程具有的特征**：\n**动态性**：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；\n**并发性**：任何进程都可以同其他进程一起并发执行；\n**独立性**：进程是系统进行资源分配和调度的一个独立单位；\n**结构性**：进程由程序、数据和进程控制块三部分组成。\n\n### 线程\n\n在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。\n\n随着计算机的发展，对 CPU 的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间（也就是所在进程的内存空间）。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间（代码、数据、进程空间、打开的文件）和一个或多个线程组成。\n\n**为什么需要线程**\n\n进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。\n\n进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。\n\n**线程的优点**\n\n进程属于在处理器这一层上提供的抽象；线程则属于在进程这个层次上再提供了一层并发的抽象。如果我们进入计算机体系结构里，就会发现，流水线提供的也是一种并发，不过是指令级的并发。这样，流水线、线程、进程就从低到高在三个层次上提供我们所迫切需要的并发。\n\n除了提高进程的并发度，线程还有个好处，就是可以有效地利用多处理器和多核计算机。现在的处理器有个趋势就是朝着多核方向发展，在没有线程之前，多核并不能让一个进程的执行速度提高，原因还是上面所有的两点限制。但如果讲一个进程分解为若干个线程，则可以让不同的线程运行在不同的核上，从而提高了进程的执行速度。\n\n例如：我们经常使用微软的Word进行文字排版，实际上就打开了多个线程。这些线程一个负责显示，一个接受键盘的输入，一个进行存盘等等。这些线程一起运行，让我们感觉到我们输入和屏幕显示同时发生，而不是输入一些字符，过一段时间才能看到显示出来。在我们不经意间，还进行了自动存盘操作。这就是线程给我们带来的方便之处。\n\n### 进程间通信\n\n#### 无名管道通信\n\n管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\n\n#### 高级管道通信\n\n将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。\n\n#### 有名管道通信\n\n有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\n\n#### 消息队列通信\n\n消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n#### 信号量通信\n\n信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n\n#### 信号\n\n信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\n\n#### 共享内存通信\n\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n\n#### 套接字通信\n\n 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。\n\n### 线程间通信\n\n线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。\n\n#### 互斥锁\n\n提供了以排他方式阻止数据结构被并发修改的方法。\n\n#### 条件变量\n\n可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。\n\n#### 读写锁\n\n允许多个线程同时读共享数据，而对写操作时互斥的。\n\n#### 信号量机制\n\n包括无名线程信号量和命名线程信号量。\n\n#### 信号\n\n类似进程间的信号处理。\n\n### 进程与线程的区别\n\n一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\n\n资源分配给进程，同一进程的所有线程共享该进程的所有资源。\n\n处理机分给线程，即真正在处理机上运行的是线程。\n\n线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。\n\n划分尺度：线程更小，所以多线程程序并发性更高；\n\n资源分配：进程是资源分配的基本单位，同一进程内多个线程共享其资源；\n\n地址空间：进程拥有独立的地址空间，同一进程内多个线程共享其资源；\n\n处理器调度：线程是处理器调度的基本单位；\n\n执行：每个线程都有一个程序运行的入口，顺序执行序列和程序的出口，但线程不能单独执行，必须组成进程，一个进程至少有一个主线程。\n\n调度和切换：线程上下文切换比进程上下文切换要快得多；\n\n### 进程与程序的区别\n\n程序只是一组指令的有序集合，它本身没有任何运行的含义，它只是一个静态的实体。而进程则不同，它是程序在某个数据集上的执行。\n\n进程是一个动态的实体，它有自己的生命周期。它因创建而产生，因调度而运行，因等待资源或事件而被处于等待状态，因完成任务而被撤消。反映了一个程序在一定的数据集上运行的全部动态过程。\n\n进程和程序并不是一一对应的，一个程序执行在不同的数据集上就成为不同的进程，可以用进程控制块来唯一地标识每个进程。而这一点正是程序无法做到的，由于程序没有和数据产生直接的联系，既使是执行不同的数据的程序，他们的指令的集合依然是一样的，所以无法唯一地标识出这些运行于不同数据集上的程序。一般来说，一个进程肯定有一个与之对应的程序，而且只有一个。而一个程序有可能没有与之对应的进程（因为它没有执行），也有可能有多个进程与之对应（运行在几个不同的数据集上）。\n\n进程还具有并发性和交往性，这也与程序的封闭性不同。进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。\n\n**一个程序至少有一个进程，一个进程至少有一个线程。**\n\n\n\n\n\n**最后给初学者推荐一篇文章，[进程与线程的一个简单解释](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)**\n\n\n\n\n\n> 参考文章：\n>\n> [操作系统](http://baike.baidu.com/link?url=4fOde2n_NRgpRtqZoalXZ06Aayt58wQqHh2mObGpB1VMjxqC9mh9KOYyUUJYgxNYFn99uBslB2vi1FsJixsNVak3o9wzgXQp7mQXBYevW1NStO1VyvH8o4r0oLHJiQ9p)  [计算机组成](http://baike.baidu.com/link?url=vJj7GOmk5b7mmXDQ_2lqqrMiW9dQij-XKGOP3KpEW835yuIqIAsKbfalfXoBIVqSNQcUn0pEnsJ9rQTuf4AbFVvU-9T0weTo116bFk5B-3s0J8WEyIlut5Sc3kD6y8CnMgK6m5VSOy6DtlgHzynDLK)  [线程](http://baike.baidu.com/link?url=aVTgdRi8naSwdGTY_CWy9hFsphNKF7y7-CU3sANapR1ymm3M-tMMLF7Wu7JgHu_cVsHIVzzBLzu_ZfPNvPxV0dn1nH1Dr_QxEty0lhr1Zz3#6)  [进程](http://baike.baidu.com/link?url=F9FJKdccMHkGhOdEAFbGUyqttk1lf6zz5y2jjrgtacsMeHLeu38Uewn4asIvKyT46rxz2NpMm6Ha5CkzEQXgh2Fc1tlKYY7_qlXCm-W93a3)  [线程和进程的区别是什么？](https://www.zhihu.com/question/25532384/answer/81152571)  [进程间8种通信方式详解](http://blog.csdn.net/violet_echo_0908/article/details/51201278)  [程序、任务、进程和线程的联系与区别 ](http://blog.163.com/magicc_love/blog/static/185853662201111810300646/)  [操作系统专题——进程与线程的区别](http://blog.csdn.net/cowena/article/details/47132675)  [进程与线程的一个简单解释](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)","source":"_posts/processthread.md","raw":"---\ntitle: 进程与线程的关系\ndate: 2017-04-04 11:19:49\ntags:\n - 进程\n - 线程\n - 程序\n - Linux\ncategories:\n - 进程/线程\n---\n\n写这篇文章是想总结一下在操作系统中，进程和线程到底是什么样的，它们之间有什么区别和联系，虽然在实践中使用过多线程和多进程，但也只是了解了皮毛，故在此总结一下，因为操作系统是一个比较复杂的东西，通过进程和线程可以推演出各种复杂的概念和情况，所以文章只是在现有水平下的一点解释。\n\n### 从操作系统说起\n\n操作系统 (Operating System，OS) 是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。\n\n操作系统的功能主要包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其它应用软件提供支持，让计算机系统所有资源最大限度地发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其它软件的开发提供必要的服务和相应的接口等。\n\n实际上，用户是不用接触操作系统的，操作系统管理着计算机硬件资源，同时按照应用程序的资源请求，分配资源，如：划分CPU时间，内存空间的开辟，调用打印机等。\n\n我们的计算机由硬件和软件两个部分组成。硬件部分包括控制器、运算器、存储器、输入设备、输出设备；软件部分包括系统软件和应用软件。而在计算机运行过程中最最重要的就是控制器和运算器，他们构成了计算机的核心：CPU。简而言之，CPU+RAM+各种资源 (比如显卡，光驱，键盘，GPS, 等等外设) 构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。\n\n目前计算机的软硬件发展太快，CPU的运行速度也是直线上升，而寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来？或者谁优先级高谁来？不管怎么样的策略，一句话就是：在CPU看来就是轮流着来。\n\n### 搞清楚几个概念\n\n**进程** 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，是一个动态的概念；\n\n**线程**是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针PC，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行；\n\n**程序**只是一组指令的有序集合，是一个静态的概念；\n\n**任务**是指由软件完成的一个活动。一个任务既可以是一个进程，也可以是一个线程。它指的是一系列共同达到某一目的的操作。例如，读取数据并将数据放入内存中。这个任务可以作为一个进程来实现，也可以作为一个线程来实现。\n\n### 任务调度\n\n目前大部分的操作系统的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。\n\n任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态，等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发。多任务运行过程的示意图如下：\n\n![2017-4-4 132812](/images/2017-4-4 132812.png)\n\n当执行一段程序代码，实现一个功能的过程时，得到CPU时间片的时候，相关的资源必须也已经就位，比如显卡等资源，然后CPU开始执行。这时除了CPU以外所有的其他资源就构成了这个程序的执行环境，也就是我们所说的程序上下文。当这个程序执行完了，或者分配给他的CPU时间片用完了，那它就要被切换出去，等待下一次CPU的**临幸**。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。\n\n具体的轮流执行方法就是：先加载程序 A 的上下文，然后开始执行 A ，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B ，保存程序 B 的上下文......循环执行。\n\n### 进程\n\n计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。\n\n进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块 (PCB) 包含进程的描述信息和控制信息，是进程存在的唯一标志。\n\n程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为**进程**。\n\n**进程具有的特征**：\n**动态性**：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；\n**并发性**：任何进程都可以同其他进程一起并发执行；\n**独立性**：进程是系统进行资源分配和调度的一个独立单位；\n**结构性**：进程由程序、数据和进程控制块三部分组成。\n\n### 线程\n\n在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。\n\n随着计算机的发展，对 CPU 的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间（也就是所在进程的内存空间）。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间（代码、数据、进程空间、打开的文件）和一个或多个线程组成。\n\n**为什么需要线程**\n\n进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。\n\n进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。\n\n**线程的优点**\n\n进程属于在处理器这一层上提供的抽象；线程则属于在进程这个层次上再提供了一层并发的抽象。如果我们进入计算机体系结构里，就会发现，流水线提供的也是一种并发，不过是指令级的并发。这样，流水线、线程、进程就从低到高在三个层次上提供我们所迫切需要的并发。\n\n除了提高进程的并发度，线程还有个好处，就是可以有效地利用多处理器和多核计算机。现在的处理器有个趋势就是朝着多核方向发展，在没有线程之前，多核并不能让一个进程的执行速度提高，原因还是上面所有的两点限制。但如果讲一个进程分解为若干个线程，则可以让不同的线程运行在不同的核上，从而提高了进程的执行速度。\n\n例如：我们经常使用微软的Word进行文字排版，实际上就打开了多个线程。这些线程一个负责显示，一个接受键盘的输入，一个进行存盘等等。这些线程一起运行，让我们感觉到我们输入和屏幕显示同时发生，而不是输入一些字符，过一段时间才能看到显示出来。在我们不经意间，还进行了自动存盘操作。这就是线程给我们带来的方便之处。\n\n### 进程间通信\n\n#### 无名管道通信\n\n管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\n\n#### 高级管道通信\n\n将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。\n\n#### 有名管道通信\n\n有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。\n\n#### 消息队列通信\n\n消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n#### 信号量通信\n\n信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n\n#### 信号\n\n信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\n\n#### 共享内存通信\n\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n\n#### 套接字通信\n\n 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。\n\n### 线程间通信\n\n线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。\n\n#### 互斥锁\n\n提供了以排他方式阻止数据结构被并发修改的方法。\n\n#### 条件变量\n\n可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。\n\n#### 读写锁\n\n允许多个线程同时读共享数据，而对写操作时互斥的。\n\n#### 信号量机制\n\n包括无名线程信号量和命名线程信号量。\n\n#### 信号\n\n类似进程间的信号处理。\n\n### 进程与线程的区别\n\n一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\n\n资源分配给进程，同一进程的所有线程共享该进程的所有资源。\n\n处理机分给线程，即真正在处理机上运行的是线程。\n\n线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。\n\n划分尺度：线程更小，所以多线程程序并发性更高；\n\n资源分配：进程是资源分配的基本单位，同一进程内多个线程共享其资源；\n\n地址空间：进程拥有独立的地址空间，同一进程内多个线程共享其资源；\n\n处理器调度：线程是处理器调度的基本单位；\n\n执行：每个线程都有一个程序运行的入口，顺序执行序列和程序的出口，但线程不能单独执行，必须组成进程，一个进程至少有一个主线程。\n\n调度和切换：线程上下文切换比进程上下文切换要快得多；\n\n### 进程与程序的区别\n\n程序只是一组指令的有序集合，它本身没有任何运行的含义，它只是一个静态的实体。而进程则不同，它是程序在某个数据集上的执行。\n\n进程是一个动态的实体，它有自己的生命周期。它因创建而产生，因调度而运行，因等待资源或事件而被处于等待状态，因完成任务而被撤消。反映了一个程序在一定的数据集上运行的全部动态过程。\n\n进程和程序并不是一一对应的，一个程序执行在不同的数据集上就成为不同的进程，可以用进程控制块来唯一地标识每个进程。而这一点正是程序无法做到的，由于程序没有和数据产生直接的联系，既使是执行不同的数据的程序，他们的指令的集合依然是一样的，所以无法唯一地标识出这些运行于不同数据集上的程序。一般来说，一个进程肯定有一个与之对应的程序，而且只有一个。而一个程序有可能没有与之对应的进程（因为它没有执行），也有可能有多个进程与之对应（运行在几个不同的数据集上）。\n\n进程还具有并发性和交往性，这也与程序的封闭性不同。进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。\n\n**一个程序至少有一个进程，一个进程至少有一个线程。**\n\n\n\n\n\n**最后给初学者推荐一篇文章，[进程与线程的一个简单解释](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)**\n\n\n\n\n\n> 参考文章：\n>\n> [操作系统](http://baike.baidu.com/link?url=4fOde2n_NRgpRtqZoalXZ06Aayt58wQqHh2mObGpB1VMjxqC9mh9KOYyUUJYgxNYFn99uBslB2vi1FsJixsNVak3o9wzgXQp7mQXBYevW1NStO1VyvH8o4r0oLHJiQ9p)  [计算机组成](http://baike.baidu.com/link?url=vJj7GOmk5b7mmXDQ_2lqqrMiW9dQij-XKGOP3KpEW835yuIqIAsKbfalfXoBIVqSNQcUn0pEnsJ9rQTuf4AbFVvU-9T0weTo116bFk5B-3s0J8WEyIlut5Sc3kD6y8CnMgK6m5VSOy6DtlgHzynDLK)  [线程](http://baike.baidu.com/link?url=aVTgdRi8naSwdGTY_CWy9hFsphNKF7y7-CU3sANapR1ymm3M-tMMLF7Wu7JgHu_cVsHIVzzBLzu_ZfPNvPxV0dn1nH1Dr_QxEty0lhr1Zz3#6)  [进程](http://baike.baidu.com/link?url=F9FJKdccMHkGhOdEAFbGUyqttk1lf6zz5y2jjrgtacsMeHLeu38Uewn4asIvKyT46rxz2NpMm6Ha5CkzEQXgh2Fc1tlKYY7_qlXCm-W93a3)  [线程和进程的区别是什么？](https://www.zhihu.com/question/25532384/answer/81152571)  [进程间8种通信方式详解](http://blog.csdn.net/violet_echo_0908/article/details/51201278)  [程序、任务、进程和线程的联系与区别 ](http://blog.163.com/magicc_love/blog/static/185853662201111810300646/)  [操作系统专题——进程与线程的区别](http://blog.csdn.net/cowena/article/details/47132675)  [进程与线程的一个简单解释](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)","slug":"processthread","published":1,"updated":"2020-10-25T06:43:32.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq7400a2molc9uuhmst4","content":"<p>写这篇文章是想总结一下在操作系统中，进程和线程到底是什么样的，它们之间有什么区别和联系，虽然在实践中使用过多线程和多进程，但也只是了解了皮毛，故在此总结一下，因为操作系统是一个比较复杂的东西，通过进程和线程可以推演出各种复杂的概念和情况，所以文章只是在现有水平下的一点解释。</p>\n<h3 id=\"从操作系统说起\"><a href=\"#从操作系统说起\" class=\"headerlink\" title=\"从操作系统说起\"></a>从操作系统说起</h3><p>操作系统 (Operating System，OS) 是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。</p>\n<p>操作系统的功能主要包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其它应用软件提供支持，让计算机系统所有资源最大限度地发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其它软件的开发提供必要的服务和相应的接口等。</p>\n<p>实际上，用户是不用接触操作系统的，操作系统管理着计算机硬件资源，同时按照应用程序的资源请求，分配资源，如：划分CPU时间，内存空间的开辟，调用打印机等。</p>\n<p>我们的计算机由硬件和软件两个部分组成。硬件部分包括控制器、运算器、存储器、输入设备、输出设备；软件部分包括系统软件和应用软件。而在计算机运行过程中最最重要的就是控制器和运算器，他们构成了计算机的核心：CPU。简而言之，CPU+RAM+各种资源 (比如显卡，光驱，键盘，GPS, 等等外设) 构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。</p>\n<p>目前计算机的软硬件发展太快，CPU的运行速度也是直线上升，而寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来？或者谁优先级高谁来？不管怎么样的策略，一句话就是：在CPU看来就是轮流着来。</p>\n<h3 id=\"搞清楚几个概念\"><a href=\"#搞清楚几个概念\" class=\"headerlink\" title=\"搞清楚几个概念\"></a>搞清楚几个概念</h3><p><strong>进程</strong> 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，是一个动态的概念；</p>\n<p><strong>线程</strong>是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针PC，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行；</p>\n<p><strong>程序</strong>只是一组指令的有序集合，是一个静态的概念；</p>\n<p><strong>任务</strong>是指由软件完成的一个活动。一个任务既可以是一个进程，也可以是一个线程。它指的是一系列共同达到某一目的的操作。例如，读取数据并将数据放入内存中。这个任务可以作为一个进程来实现，也可以作为一个线程来实现。</p>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>目前大部分的操作系统的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。</p>\n<p>任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态，等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发。多任务运行过程的示意图如下：</p>\n<p><img src=\"/images/2017-4-4 132812.png\" alt=\"2017-4-4 132812\"></p>\n<p>当执行一段程序代码，实现一个功能的过程时，得到CPU时间片的时候，相关的资源必须也已经就位，比如显卡等资源，然后CPU开始执行。这时除了CPU以外所有的其他资源就构成了这个程序的执行环境，也就是我们所说的程序上下文。当这个程序执行完了，或者分配给他的CPU时间片用完了，那它就要被切换出去，等待下一次CPU的<strong>临幸</strong>。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。</p>\n<p>具体的轮流执行方法就是：先加载程序 A 的上下文，然后开始执行 A ，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B ，保存程序 B 的上下文……循环执行。</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。</p>\n<p>进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块 (PCB) 包含进程的描述信息和控制信息，是进程存在的唯一标志。</p>\n<p>程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为<strong>进程</strong>。</p>\n<p><strong>进程具有的特征</strong>：<br><strong>动态性</strong>：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；<br><strong>并发性</strong>：任何进程都可以同其他进程一起并发执行；<br><strong>独立性</strong>：进程是系统进行资源分配和调度的一个独立单位；<br><strong>结构性</strong>：进程由程序、数据和进程控制块三部分组成。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p>\n<p>随着计算机的发展，对 CPU 的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间（也就是所在进程的内存空间）。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间（代码、数据、进程空间、打开的文件）和一个或多个线程组成。</p>\n<p><strong>为什么需要线程</strong></p>\n<p>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</p>\n<p>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</p>\n<p><strong>线程的优点</strong></p>\n<p>进程属于在处理器这一层上提供的抽象；线程则属于在进程这个层次上再提供了一层并发的抽象。如果我们进入计算机体系结构里，就会发现，流水线提供的也是一种并发，不过是指令级的并发。这样，流水线、线程、进程就从低到高在三个层次上提供我们所迫切需要的并发。</p>\n<p>除了提高进程的并发度，线程还有个好处，就是可以有效地利用多处理器和多核计算机。现在的处理器有个趋势就是朝着多核方向发展，在没有线程之前，多核并不能让一个进程的执行速度提高，原因还是上面所有的两点限制。但如果讲一个进程分解为若干个线程，则可以让不同的线程运行在不同的核上，从而提高了进程的执行速度。</p>\n<p>例如：我们经常使用微软的Word进行文字排版，实际上就打开了多个线程。这些线程一个负责显示，一个接受键盘的输入，一个进行存盘等等。这些线程一起运行，让我们感觉到我们输入和屏幕显示同时发生，而不是输入一些字符，过一段时间才能看到显示出来。在我们不经意间，还进行了自动存盘操作。这就是线程给我们带来的方便之处。</p>\n<h3 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h3><h4 id=\"无名管道通信\"><a href=\"#无名管道通信\" class=\"headerlink\" title=\"无名管道通信\"></a>无名管道通信</h4><p>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>\n<h4 id=\"高级管道通信\"><a href=\"#高级管道通信\" class=\"headerlink\" title=\"高级管道通信\"></a>高级管道通信</h4><p>将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>\n<h4 id=\"有名管道通信\"><a href=\"#有名管道通信\" class=\"headerlink\" title=\"有名管道通信\"></a>有名管道通信</h4><p>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>\n<h4 id=\"消息队列通信\"><a href=\"#消息队列通信\" class=\"headerlink\" title=\"消息队列通信\"></a>消息队列通信</h4><p>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n<h4 id=\"信号量通信\"><a href=\"#信号量通信\" class=\"headerlink\" title=\"信号量通信\"></a>信号量通信</h4><p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n<h4 id=\"共享内存通信\"><a href=\"#共享内存通信\" class=\"headerlink\" title=\"共享内存通信\"></a>共享内存通信</h4><p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</p>\n<h4 id=\"套接字通信\"><a href=\"#套接字通信\" class=\"headerlink\" title=\"套接字通信\"></a>套接字通信</h4><p> 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>\n<h3 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h3><p>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p>\n<h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><p>提供了以排他方式阻止数据结构被并发修改的方法。</p>\n<h4 id=\"条件变量\"><a href=\"#条件变量\" class=\"headerlink\" title=\"条件变量\"></a>条件变量</h4><p>可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><p>允许多个线程同时读共享数据，而对写操作时互斥的。</p>\n<h4 id=\"信号量机制\"><a href=\"#信号量机制\" class=\"headerlink\" title=\"信号量机制\"></a>信号量机制</h4><p>包括无名线程信号量和命名线程信号量。</p>\n<h4 id=\"信号-1\"><a href=\"#信号-1\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>类似进程间的信号处理。</p>\n<h3 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h3><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>\n<p>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</p>\n<p>处理机分给线程，即真正在处理机上运行的是线程。</p>\n<p>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p>\n<p>划分尺度：线程更小，所以多线程程序并发性更高；</p>\n<p>资源分配：进程是资源分配的基本单位，同一进程内多个线程共享其资源；</p>\n<p>地址空间：进程拥有独立的地址空间，同一进程内多个线程共享其资源；</p>\n<p>处理器调度：线程是处理器调度的基本单位；</p>\n<p>执行：每个线程都有一个程序运行的入口，顺序执行序列和程序的出口，但线程不能单独执行，必须组成进程，一个进程至少有一个主线程。</p>\n<p>调度和切换：线程上下文切换比进程上下文切换要快得多；</p>\n<h3 id=\"进程与程序的区别\"><a href=\"#进程与程序的区别\" class=\"headerlink\" title=\"进程与程序的区别\"></a>进程与程序的区别</h3><p>程序只是一组指令的有序集合，它本身没有任何运行的含义，它只是一个静态的实体。而进程则不同，它是程序在某个数据集上的执行。</p>\n<p>进程是一个动态的实体，它有自己的生命周期。它因创建而产生，因调度而运行，因等待资源或事件而被处于等待状态，因完成任务而被撤消。反映了一个程序在一定的数据集上运行的全部动态过程。</p>\n<p>进程和程序并不是一一对应的，一个程序执行在不同的数据集上就成为不同的进程，可以用进程控制块来唯一地标识每个进程。而这一点正是程序无法做到的，由于程序没有和数据产生直接的联系，既使是执行不同的数据的程序，他们的指令的集合依然是一样的，所以无法唯一地标识出这些运行于不同数据集上的程序。一般来说，一个进程肯定有一个与之对应的程序，而且只有一个。而一个程序有可能没有与之对应的进程（因为它没有执行），也有可能有多个进程与之对应（运行在几个不同的数据集上）。</p>\n<p>进程还具有并发性和交往性，这也与程序的封闭性不同。进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。</p>\n<p><strong>一个程序至少有一个进程，一个进程至少有一个线程。</strong></p>\n<p><strong>最后给初学者推荐一篇文章，<a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与线程的一个简单解释</a></strong></p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://baike.baidu.com/link?url=4fOde2n_NRgpRtqZoalXZ06Aayt58wQqHh2mObGpB1VMjxqC9mh9KOYyUUJYgxNYFn99uBslB2vi1FsJixsNVak3o9wzgXQp7mQXBYevW1NStO1VyvH8o4r0oLHJiQ9p\" target=\"_blank\" rel=\"noopener\">操作系统</a>  <a href=\"http://baike.baidu.com/link?url=vJj7GOmk5b7mmXDQ_2lqqrMiW9dQij-XKGOP3KpEW835yuIqIAsKbfalfXoBIVqSNQcUn0pEnsJ9rQTuf4AbFVvU-9T0weTo116bFk5B-3s0J8WEyIlut5Sc3kD6y8CnMgK6m5VSOy6DtlgHzynDLK\" target=\"_blank\" rel=\"noopener\">计算机组成</a>  <a href=\"http://baike.baidu.com/link?url=aVTgdRi8naSwdGTY_CWy9hFsphNKF7y7-CU3sANapR1ymm3M-tMMLF7Wu7JgHu_cVsHIVzzBLzu_ZfPNvPxV0dn1nH1Dr_QxEty0lhr1Zz3#6\" target=\"_blank\" rel=\"noopener\">线程</a>  <a href=\"http://baike.baidu.com/link?url=F9FJKdccMHkGhOdEAFbGUyqttk1lf6zz5y2jjrgtacsMeHLeu38Uewn4asIvKyT46rxz2NpMm6Ha5CkzEQXgh2Fc1tlKYY7_qlXCm-W93a3\" target=\"_blank\" rel=\"noopener\">进程</a>  <a href=\"https://www.zhihu.com/question/25532384/answer/81152571\" target=\"_blank\" rel=\"noopener\">线程和进程的区别是什么？</a>  <a href=\"http://blog.csdn.net/violet_echo_0908/article/details/51201278\" target=\"_blank\" rel=\"noopener\">进程间8种通信方式详解</a>  <a href=\"http://blog.163.com/magicc_love/blog/static/185853662201111810300646/\" target=\"_blank\" rel=\"noopener\">程序、任务、进程和线程的联系与区别 </a>  <a href=\"http://blog.csdn.net/cowena/article/details/47132675\" target=\"_blank\" rel=\"noopener\">操作系统专题——进程与线程的区别</a>  <a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与线程的一个简单解释</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>写这篇文章是想总结一下在操作系统中，进程和线程到底是什么样的，它们之间有什么区别和联系，虽然在实践中使用过多线程和多进程，但也只是了解了皮毛，故在此总结一下，因为操作系统是一个比较复杂的东西，通过进程和线程可以推演出各种复杂的概念和情况，所以文章只是在现有水平下的一点解释。</p>\n<h3 id=\"从操作系统说起\"><a href=\"#从操作系统说起\" class=\"headerlink\" title=\"从操作系统说起\"></a>从操作系统说起</h3><p>操作系统 (Operating System，OS) 是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。</p>\n<p>操作系统的功能主要包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其它应用软件提供支持，让计算机系统所有资源最大限度地发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其它软件的开发提供必要的服务和相应的接口等。</p>\n<p>实际上，用户是不用接触操作系统的，操作系统管理着计算机硬件资源，同时按照应用程序的资源请求，分配资源，如：划分CPU时间，内存空间的开辟，调用打印机等。</p>\n<p>我们的计算机由硬件和软件两个部分组成。硬件部分包括控制器、运算器、存储器、输入设备、输出设备；软件部分包括系统软件和应用软件。而在计算机运行过程中最最重要的就是控制器和运算器，他们构成了计算机的核心：CPU。简而言之，CPU+RAM+各种资源 (比如显卡，光驱，键盘，GPS, 等等外设) 构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。</p>\n<p>目前计算机的软硬件发展太快，CPU的运行速度也是直线上升，而寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来？或者谁优先级高谁来？不管怎么样的策略，一句话就是：在CPU看来就是轮流着来。</p>\n<h3 id=\"搞清楚几个概念\"><a href=\"#搞清楚几个概念\" class=\"headerlink\" title=\"搞清楚几个概念\"></a>搞清楚几个概念</h3><p><strong>进程</strong> 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，是一个动态的概念；</p>\n<p><strong>线程</strong>是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针PC，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行；</p>\n<p><strong>程序</strong>只是一组指令的有序集合，是一个静态的概念；</p>\n<p><strong>任务</strong>是指由软件完成的一个活动。一个任务既可以是一个进程，也可以是一个线程。它指的是一系列共同达到某一目的的操作。例如，读取数据并将数据放入内存中。这个任务可以作为一个进程来实现，也可以作为一个线程来实现。</p>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>目前大部分的操作系统的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。</p>\n<p>任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态，等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发。多任务运行过程的示意图如下：</p>\n<p><img src=\"/images/2017-4-4 132812.png\" alt=\"2017-4-4 132812\"></p>\n<p>当执行一段程序代码，实现一个功能的过程时，得到CPU时间片的时候，相关的资源必须也已经就位，比如显卡等资源，然后CPU开始执行。这时除了CPU以外所有的其他资源就构成了这个程序的执行环境，也就是我们所说的程序上下文。当这个程序执行完了，或者分配给他的CPU时间片用完了，那它就要被切换出去，等待下一次CPU的<strong>临幸</strong>。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。</p>\n<p>具体的轮流执行方法就是：先加载程序 A 的上下文，然后开始执行 A ，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B ，保存程序 B 的上下文……循环执行。</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序侧是具有某种功能的程序，程序是运行于操作系统之上的。</p>\n<p>进程一般由程序、数据集合和进程控制块三部分组成。程序用于描述进程要完成的功能，是控制进程执行的指令集；数据集合是程序在执行时所需要的数据和工作区；程序控制块 (PCB) 包含进程的描述信息和控制信息，是进程存在的唯一标志。</p>\n<p>程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为<strong>进程</strong>。</p>\n<p><strong>进程具有的特征</strong>：<br><strong>动态性</strong>：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；<br><strong>并发性</strong>：任何进程都可以同其他进程一起并发执行；<br><strong>独立性</strong>：进程是系统进行资源分配和调度的一个独立单位；<br><strong>结构性</strong>：进程由程序、数据和进程控制块三部分组成。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p>\n<p>随着计算机的发展，对 CPU 的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间（也就是所在进程的内存空间）。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间（代码、数据、进程空间、打开的文件）和一个或多个线程组成。</p>\n<p><strong>为什么需要线程</strong></p>\n<p>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</p>\n<p>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</p>\n<p><strong>线程的优点</strong></p>\n<p>进程属于在处理器这一层上提供的抽象；线程则属于在进程这个层次上再提供了一层并发的抽象。如果我们进入计算机体系结构里，就会发现，流水线提供的也是一种并发，不过是指令级的并发。这样，流水线、线程、进程就从低到高在三个层次上提供我们所迫切需要的并发。</p>\n<p>除了提高进程的并发度，线程还有个好处，就是可以有效地利用多处理器和多核计算机。现在的处理器有个趋势就是朝着多核方向发展，在没有线程之前，多核并不能让一个进程的执行速度提高，原因还是上面所有的两点限制。但如果讲一个进程分解为若干个线程，则可以让不同的线程运行在不同的核上，从而提高了进程的执行速度。</p>\n<p>例如：我们经常使用微软的Word进行文字排版，实际上就打开了多个线程。这些线程一个负责显示，一个接受键盘的输入，一个进行存盘等等。这些线程一起运行，让我们感觉到我们输入和屏幕显示同时发生，而不是输入一些字符，过一段时间才能看到显示出来。在我们不经意间，还进行了自动存盘操作。这就是线程给我们带来的方便之处。</p>\n<h3 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h3><h4 id=\"无名管道通信\"><a href=\"#无名管道通信\" class=\"headerlink\" title=\"无名管道通信\"></a>无名管道通信</h4><p>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>\n<h4 id=\"高级管道通信\"><a href=\"#高级管道通信\" class=\"headerlink\" title=\"高级管道通信\"></a>高级管道通信</h4><p>将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>\n<h4 id=\"有名管道通信\"><a href=\"#有名管道通信\" class=\"headerlink\" title=\"有名管道通信\"></a>有名管道通信</h4><p>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>\n<h4 id=\"消息队列通信\"><a href=\"#消息队列通信\" class=\"headerlink\" title=\"消息队列通信\"></a>消息队列通信</h4><p>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n<h4 id=\"信号量通信\"><a href=\"#信号量通信\" class=\"headerlink\" title=\"信号量通信\"></a>信号量通信</h4><p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n<h4 id=\"共享内存通信\"><a href=\"#共享内存通信\" class=\"headerlink\" title=\"共享内存通信\"></a>共享内存通信</h4><p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</p>\n<h4 id=\"套接字通信\"><a href=\"#套接字通信\" class=\"headerlink\" title=\"套接字通信\"></a>套接字通信</h4><p> 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>\n<h3 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h3><p>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p>\n<h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><p>提供了以排他方式阻止数据结构被并发修改的方法。</p>\n<h4 id=\"条件变量\"><a href=\"#条件变量\" class=\"headerlink\" title=\"条件变量\"></a>条件变量</h4><p>可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><p>允许多个线程同时读共享数据，而对写操作时互斥的。</p>\n<h4 id=\"信号量机制\"><a href=\"#信号量机制\" class=\"headerlink\" title=\"信号量机制\"></a>信号量机制</h4><p>包括无名线程信号量和命名线程信号量。</p>\n<h4 id=\"信号-1\"><a href=\"#信号-1\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>类似进程间的信号处理。</p>\n<h3 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h3><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>\n<p>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</p>\n<p>处理机分给线程，即真正在处理机上运行的是线程。</p>\n<p>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p>\n<p>划分尺度：线程更小，所以多线程程序并发性更高；</p>\n<p>资源分配：进程是资源分配的基本单位，同一进程内多个线程共享其资源；</p>\n<p>地址空间：进程拥有独立的地址空间，同一进程内多个线程共享其资源；</p>\n<p>处理器调度：线程是处理器调度的基本单位；</p>\n<p>执行：每个线程都有一个程序运行的入口，顺序执行序列和程序的出口，但线程不能单独执行，必须组成进程，一个进程至少有一个主线程。</p>\n<p>调度和切换：线程上下文切换比进程上下文切换要快得多；</p>\n<h3 id=\"进程与程序的区别\"><a href=\"#进程与程序的区别\" class=\"headerlink\" title=\"进程与程序的区别\"></a>进程与程序的区别</h3><p>程序只是一组指令的有序集合，它本身没有任何运行的含义，它只是一个静态的实体。而进程则不同，它是程序在某个数据集上的执行。</p>\n<p>进程是一个动态的实体，它有自己的生命周期。它因创建而产生，因调度而运行，因等待资源或事件而被处于等待状态，因完成任务而被撤消。反映了一个程序在一定的数据集上运行的全部动态过程。</p>\n<p>进程和程序并不是一一对应的，一个程序执行在不同的数据集上就成为不同的进程，可以用进程控制块来唯一地标识每个进程。而这一点正是程序无法做到的，由于程序没有和数据产生直接的联系，既使是执行不同的数据的程序，他们的指令的集合依然是一样的，所以无法唯一地标识出这些运行于不同数据集上的程序。一般来说，一个进程肯定有一个与之对应的程序，而且只有一个。而一个程序有可能没有与之对应的进程（因为它没有执行），也有可能有多个进程与之对应（运行在几个不同的数据集上）。</p>\n<p>进程还具有并发性和交往性，这也与程序的封闭性不同。进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。</p>\n<p><strong>一个程序至少有一个进程，一个进程至少有一个线程。</strong></p>\n<p><strong>最后给初学者推荐一篇文章，<a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与线程的一个简单解释</a></strong></p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://baike.baidu.com/link?url=4fOde2n_NRgpRtqZoalXZ06Aayt58wQqHh2mObGpB1VMjxqC9mh9KOYyUUJYgxNYFn99uBslB2vi1FsJixsNVak3o9wzgXQp7mQXBYevW1NStO1VyvH8o4r0oLHJiQ9p\" target=\"_blank\" rel=\"noopener\">操作系统</a>  <a href=\"http://baike.baidu.com/link?url=vJj7GOmk5b7mmXDQ_2lqqrMiW9dQij-XKGOP3KpEW835yuIqIAsKbfalfXoBIVqSNQcUn0pEnsJ9rQTuf4AbFVvU-9T0weTo116bFk5B-3s0J8WEyIlut5Sc3kD6y8CnMgK6m5VSOy6DtlgHzynDLK\" target=\"_blank\" rel=\"noopener\">计算机组成</a>  <a href=\"http://baike.baidu.com/link?url=aVTgdRi8naSwdGTY_CWy9hFsphNKF7y7-CU3sANapR1ymm3M-tMMLF7Wu7JgHu_cVsHIVzzBLzu_ZfPNvPxV0dn1nH1Dr_QxEty0lhr1Zz3#6\" target=\"_blank\" rel=\"noopener\">线程</a>  <a href=\"http://baike.baidu.com/link?url=F9FJKdccMHkGhOdEAFbGUyqttk1lf6zz5y2jjrgtacsMeHLeu38Uewn4asIvKyT46rxz2NpMm6Ha5CkzEQXgh2Fc1tlKYY7_qlXCm-W93a3\" target=\"_blank\" rel=\"noopener\">进程</a>  <a href=\"https://www.zhihu.com/question/25532384/answer/81152571\" target=\"_blank\" rel=\"noopener\">线程和进程的区别是什么？</a>  <a href=\"http://blog.csdn.net/violet_echo_0908/article/details/51201278\" target=\"_blank\" rel=\"noopener\">进程间8种通信方式详解</a>  <a href=\"http://blog.163.com/magicc_love/blog/static/185853662201111810300646/\" target=\"_blank\" rel=\"noopener\">程序、任务、进程和线程的联系与区别 </a>  <a href=\"http://blog.csdn.net/cowena/article/details/47132675\" target=\"_blank\" rel=\"noopener\">操作系统专题——进程与线程的区别</a>  <a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与线程的一个简单解释</a></p>\n</blockquote>\n"},{"title":"HTTP1.0、HTTP1.1、HTTP2.0的区别","date":"2020-10-25T06:52:48.000Z","_content":"\n### HTTP发展史\n\n![2020-10-25T150500.png](/images/2020-10-25T150500.png)\n\n### HTTP的优化\n\n影响一个HTTP网络请求的因素主要有两个：带宽和延迟。\n\n**带宽**\n\n现在的网络基础建设已使得带宽得到极大的提升，在影响网速的因素中，带宽所占比重越来越少。\n\n**延迟**\n\n浏览器阻塞：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。\n\nDNS 解析：浏览器需要知道目标服务器的 IP 才能建立连接。此过程为DNS解析，可参考[从输入 URL 到页面展示到底发生了什么](https://runnerliu.github.io/2017/06/22/urlrequestprocess/)，这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n\n建立连接：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能携带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n\n### HTTP1.0、HTTP1.1\n\nHTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别体现在：\n\n**缓存处理**\n\n在HTTP1.0中主要使用header里的If-Modified-Since、Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag、If-Unmodified-Since、If-Match、If-None-Match等更多可供选择的缓存头来控制缓存策略。\n\n**带宽优化及网络连接**\n\nHTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n\n**错误通知的管理**\n\n在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突、410（Gone）表示服务器上的某个资源被永久性的删除。\n\n**Host头处理**\n\n在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。\n\n**长连接**\n\nHTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。\n\n### HTTPS、HTTP的区别\n\n- HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费\n- HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的\n- HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443\n- HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题\n\n![2020-10-25T152300.png](/images/2020-10-25T152300.png)\n\n### 说说SPDY\n\n其实 SPDY 并不是新的一种协议，而是在 HTTP 之前做了一层会话层。\n\n![2020-10-25T152800.png](/images/2020-10-25T152800.png)\n\nSPDY是一个由 Google 主导的研究项目发明的HTTP替代协议。SPDY位于HTTP之下、TCP/SSL之上，这样可以轻松兼容老版本的HTTP协议，同时可以使用已有的SSL功能。SPDY优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性，具体如下：\n\n**降低延迟**\n\n针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。\n\n**请求优先级**\n\n多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。\n\n**header压缩**\n\n前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。\n\n**传输协议**\n\n基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。\n\n**服务端推送**\n\n采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。\n\n### HTTP2.0\n\nHTTP2.0是基于SPDY设计的，但与SPDY 仍有不同的地方，如下：\n\n- HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS\n- HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE\n\n#### HTTP2.0的新特性\n\n##### 二进制分帧\n\nHTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n\n![2020-10-25T154700.png](/images/2020-10-25T154700.png)\n\n在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。\n\n##### 多路复用\n\n即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。\n\n![2020-10-25T154800.png](/images/2020-10-25T154800.png)\n\n##### header压缩\n\n如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n\n![2020-10-25T154900.png](/images/2020-10-25T154900.png)\n\n##### 服务端推送\n\n同SPDY一样，HTTP2.0也具有server push功能。\n\n客户端请求的过程：\n\n![2020-10-25T155200.png](/images/2020-10-25T155200.png)\n\n服务端推送的过程：\n\n![2020-10-25T155300.png](/images/2020-10-25T155300.png)\n\n### 总结\n\n- HTTP1.0到HTTP1.1，是无连接到长连接的发展\n\n- HTTP1.x到HTTP2.0，是二进制分帧、多路复用的发展\n\n\n\n参考：\n\n> [HTTP1.0、HTTP1.1和HTTP2.0的区别](https://www.jianshu.com/p/be29d679cbff)\n>\n> [HTTP1.0，HTTP1.1，HTTPS和HTTP2.0的区别](https://juejin.im/post/6844903824390537230)\n>\n> [HTTP 的前世今生：一次性搞懂 HTTP、HTTPS、SPDY、HTTP2](https://juejin.im/post/6844903712113360903)\n>\n> [HTTP/2](https://zh.wikipedia.org/wiki/HTTP/2)\n\n","source":"_posts/tcpdiff.md","raw":"---\ntitle: HTTP1.0、HTTP1.1、HTTP2.0的区别\ndate: 2020-10-25 14:52:48\ntags:\n - HTTP\ncategories:\n - HTTP\n---\n\n### HTTP发展史\n\n![2020-10-25T150500.png](/images/2020-10-25T150500.png)\n\n### HTTP的优化\n\n影响一个HTTP网络请求的因素主要有两个：带宽和延迟。\n\n**带宽**\n\n现在的网络基础建设已使得带宽得到极大的提升，在影响网速的因素中，带宽所占比重越来越少。\n\n**延迟**\n\n浏览器阻塞：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。\n\nDNS 解析：浏览器需要知道目标服务器的 IP 才能建立连接。此过程为DNS解析，可参考[从输入 URL 到页面展示到底发生了什么](https://runnerliu.github.io/2017/06/22/urlrequestprocess/)，这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n\n建立连接：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能携带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n\n### HTTP1.0、HTTP1.1\n\nHTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别体现在：\n\n**缓存处理**\n\n在HTTP1.0中主要使用header里的If-Modified-Since、Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag、If-Unmodified-Since、If-Match、If-None-Match等更多可供选择的缓存头来控制缓存策略。\n\n**带宽优化及网络连接**\n\nHTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n\n**错误通知的管理**\n\n在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突、410（Gone）表示服务器上的某个资源被永久性的删除。\n\n**Host头处理**\n\n在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。\n\n**长连接**\n\nHTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。\n\n### HTTPS、HTTP的区别\n\n- HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费\n- HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的\n- HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443\n- HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题\n\n![2020-10-25T152300.png](/images/2020-10-25T152300.png)\n\n### 说说SPDY\n\n其实 SPDY 并不是新的一种协议，而是在 HTTP 之前做了一层会话层。\n\n![2020-10-25T152800.png](/images/2020-10-25T152800.png)\n\nSPDY是一个由 Google 主导的研究项目发明的HTTP替代协议。SPDY位于HTTP之下、TCP/SSL之上，这样可以轻松兼容老版本的HTTP协议，同时可以使用已有的SSL功能。SPDY优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性，具体如下：\n\n**降低延迟**\n\n针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。\n\n**请求优先级**\n\n多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。\n\n**header压缩**\n\n前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。\n\n**传输协议**\n\n基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。\n\n**服务端推送**\n\n采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。\n\n### HTTP2.0\n\nHTTP2.0是基于SPDY设计的，但与SPDY 仍有不同的地方，如下：\n\n- HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS\n- HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE\n\n#### HTTP2.0的新特性\n\n##### 二进制分帧\n\nHTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n\n![2020-10-25T154700.png](/images/2020-10-25T154700.png)\n\n在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。\n\n##### 多路复用\n\n即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。\n\n![2020-10-25T154800.png](/images/2020-10-25T154800.png)\n\n##### header压缩\n\n如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n\n![2020-10-25T154900.png](/images/2020-10-25T154900.png)\n\n##### 服务端推送\n\n同SPDY一样，HTTP2.0也具有server push功能。\n\n客户端请求的过程：\n\n![2020-10-25T155200.png](/images/2020-10-25T155200.png)\n\n服务端推送的过程：\n\n![2020-10-25T155300.png](/images/2020-10-25T155300.png)\n\n### 总结\n\n- HTTP1.0到HTTP1.1，是无连接到长连接的发展\n\n- HTTP1.x到HTTP2.0，是二进制分帧、多路复用的发展\n\n\n\n参考：\n\n> [HTTP1.0、HTTP1.1和HTTP2.0的区别](https://www.jianshu.com/p/be29d679cbff)\n>\n> [HTTP1.0，HTTP1.1，HTTPS和HTTP2.0的区别](https://juejin.im/post/6844903824390537230)\n>\n> [HTTP 的前世今生：一次性搞懂 HTTP、HTTPS、SPDY、HTTP2](https://juejin.im/post/6844903712113360903)\n>\n> [HTTP/2](https://zh.wikipedia.org/wiki/HTTP/2)\n\n","slug":"tcpdiff","published":1,"updated":"2020-10-25T08:05:36.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq7800a5molcqwrvtudb","content":"<h3 id=\"HTTP发展史\"><a href=\"#HTTP发展史\" class=\"headerlink\" title=\"HTTP发展史\"></a>HTTP发展史</h3><p><img src=\"/images/2020-10-25T150500.png\" alt=\"2020-10-25T150500.png\"></p>\n<h3 id=\"HTTP的优化\"><a href=\"#HTTP的优化\" class=\"headerlink\" title=\"HTTP的优化\"></a>HTTP的优化</h3><p>影响一个HTTP网络请求的因素主要有两个：带宽和延迟。</p>\n<p><strong>带宽</strong></p>\n<p>现在的网络基础建设已使得带宽得到极大的提升，在影响网速的因素中，带宽所占比重越来越少。</p>\n<p><strong>延迟</strong></p>\n<p>浏览器阻塞：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。</p>\n<p>DNS 解析：浏览器需要知道目标服务器的 IP 才能建立连接。此过程为DNS解析，可参考<a href=\"https://runnerliu.github.io/2017/06/22/urlrequestprocess/\">从输入 URL 到页面展示到底发生了什么</a>，这个通常可以利用DNS缓存结果来达到减少这个时间的目的。</p>\n<p>建立连接：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能携带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。</p>\n<h3 id=\"HTTP1-0、HTTP1-1\"><a href=\"#HTTP1-0、HTTP1-1\" class=\"headerlink\" title=\"HTTP1.0、HTTP1.1\"></a>HTTP1.0、HTTP1.1</h3><p>HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别体现在：</p>\n<p><strong>缓存处理</strong></p>\n<p>在HTTP1.0中主要使用header里的If-Modified-Since、Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag、If-Unmodified-Since、If-Match、If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>\n<p><strong>带宽优化及网络连接</strong></p>\n<p>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>\n<p><strong>错误通知的管理</strong></p>\n<p>在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突、410（Gone）表示服务器上的某个资源被永久性的删除。</p>\n<p><strong>Host头处理</strong></p>\n<p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p>\n<p><strong>长连接</strong></p>\n<p>HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>\n<h3 id=\"HTTPS、HTTP的区别\"><a href=\"#HTTPS、HTTP的区别\" class=\"headerlink\" title=\"HTTPS、HTTP的区别\"></a>HTTPS、HTTP的区别</h3><ul>\n<li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费</li>\n<li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的</li>\n<li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443</li>\n<li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题</li>\n</ul>\n<p><img src=\"/images/2020-10-25T152300.png\" alt=\"2020-10-25T152300.png\"></p>\n<h3 id=\"说说SPDY\"><a href=\"#说说SPDY\" class=\"headerlink\" title=\"说说SPDY\"></a>说说SPDY</h3><p>其实 SPDY 并不是新的一种协议，而是在 HTTP 之前做了一层会话层。</p>\n<p><img src=\"/images/2020-10-25T152800.png\" alt=\"2020-10-25T152800.png\"></p>\n<p>SPDY是一个由 Google 主导的研究项目发明的HTTP替代协议。SPDY位于HTTP之下、TCP/SSL之上，这样可以轻松兼容老版本的HTTP协议，同时可以使用已有的SSL功能。SPDY优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性，具体如下：</p>\n<p><strong>降低延迟</strong></p>\n<p>针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。</p>\n<p><strong>请求优先级</strong></p>\n<p>多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p>\n<p><strong>header压缩</strong></p>\n<p>前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</p>\n<p><strong>传输协议</strong></p>\n<p>基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。</p>\n<p><strong>服务端推送</strong></p>\n<p>采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</p>\n<h3 id=\"HTTP2-0\"><a href=\"#HTTP2-0\" class=\"headerlink\" title=\"HTTP2.0\"></a>HTTP2.0</h3><p>HTTP2.0是基于SPDY设计的，但与SPDY 仍有不同的地方，如下：</p>\n<ul>\n<li>HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li>\n<li>HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</li>\n</ul>\n<h4 id=\"HTTP2-0的新特性\"><a href=\"#HTTP2-0的新特性\" class=\"headerlink\" title=\"HTTP2.0的新特性\"></a>HTTP2.0的新特性</h4><h5 id=\"二进制分帧\"><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h5><p>HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p><img src=\"/images/2020-10-25T154700.png\" alt=\"2020-10-25T154700.png\"></p>\n<p>在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。</p>\n<h5 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h5><p>即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n<p><img src=\"/images/2020-10-25T154800.png\" alt=\"2020-10-25T154800.png\"></p>\n<h5 id=\"header压缩\"><a href=\"#header压缩\" class=\"headerlink\" title=\"header压缩\"></a>header压缩</h5><p>如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n<p><img src=\"/images/2020-10-25T154900.png\" alt=\"2020-10-25T154900.png\"></p>\n<h5 id=\"服务端推送\"><a href=\"#服务端推送\" class=\"headerlink\" title=\"服务端推送\"></a>服务端推送</h5><p>同SPDY一样，HTTP2.0也具有server push功能。</p>\n<p>客户端请求的过程：</p>\n<p><img src=\"/images/2020-10-25T155200.png\" alt=\"2020-10-25T155200.png\"></p>\n<p>服务端推送的过程：</p>\n<p><img src=\"/images/2020-10-25T155300.png\" alt=\"2020-10-25T155300.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>HTTP1.0到HTTP1.1，是无连接到长连接的发展</p>\n</li>\n<li><p>HTTP1.x到HTTP2.0，是二进制分帧、多路复用的发展</p>\n</li>\n</ul>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/be29d679cbff\" target=\"_blank\" rel=\"noopener\">HTTP1.0、HTTP1.1和HTTP2.0的区别</a></p>\n<p><a href=\"https://juejin.im/post/6844903824390537230\" target=\"_blank\" rel=\"noopener\">HTTP1.0，HTTP1.1，HTTPS和HTTP2.0的区别</a></p>\n<p><a href=\"https://juejin.im/post/6844903712113360903\" target=\"_blank\" rel=\"noopener\">HTTP 的前世今生：一次性搞懂 HTTP、HTTPS、SPDY、HTTP2</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP/2\" target=\"_blank\" rel=\"noopener\">HTTP/2</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HTTP发展史\"><a href=\"#HTTP发展史\" class=\"headerlink\" title=\"HTTP发展史\"></a>HTTP发展史</h3><p><img src=\"/images/2020-10-25T150500.png\" alt=\"2020-10-25T150500.png\"></p>\n<h3 id=\"HTTP的优化\"><a href=\"#HTTP的优化\" class=\"headerlink\" title=\"HTTP的优化\"></a>HTTP的优化</h3><p>影响一个HTTP网络请求的因素主要有两个：带宽和延迟。</p>\n<p><strong>带宽</strong></p>\n<p>现在的网络基础建设已使得带宽得到极大的提升，在影响网速的因素中，带宽所占比重越来越少。</p>\n<p><strong>延迟</strong></p>\n<p>浏览器阻塞：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。</p>\n<p>DNS 解析：浏览器需要知道目标服务器的 IP 才能建立连接。此过程为DNS解析，可参考<a href=\"https://runnerliu.github.io/2017/06/22/urlrequestprocess/\">从输入 URL 到页面展示到底发生了什么</a>，这个通常可以利用DNS缓存结果来达到减少这个时间的目的。</p>\n<p>建立连接：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能携带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。</p>\n<h3 id=\"HTTP1-0、HTTP1-1\"><a href=\"#HTTP1-0、HTTP1-1\" class=\"headerlink\" title=\"HTTP1.0、HTTP1.1\"></a>HTTP1.0、HTTP1.1</h3><p>HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别体现在：</p>\n<p><strong>缓存处理</strong></p>\n<p>在HTTP1.0中主要使用header里的If-Modified-Since、Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag、If-Unmodified-Since、If-Match、If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>\n<p><strong>带宽优化及网络连接</strong></p>\n<p>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>\n<p><strong>错误通知的管理</strong></p>\n<p>在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突、410（Gone）表示服务器上的某个资源被永久性的删除。</p>\n<p><strong>Host头处理</strong></p>\n<p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p>\n<p><strong>长连接</strong></p>\n<p>HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>\n<h3 id=\"HTTPS、HTTP的区别\"><a href=\"#HTTPS、HTTP的区别\" class=\"headerlink\" title=\"HTTPS、HTTP的区别\"></a>HTTPS、HTTP的区别</h3><ul>\n<li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费</li>\n<li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的</li>\n<li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443</li>\n<li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题</li>\n</ul>\n<p><img src=\"/images/2020-10-25T152300.png\" alt=\"2020-10-25T152300.png\"></p>\n<h3 id=\"说说SPDY\"><a href=\"#说说SPDY\" class=\"headerlink\" title=\"说说SPDY\"></a>说说SPDY</h3><p>其实 SPDY 并不是新的一种协议，而是在 HTTP 之前做了一层会话层。</p>\n<p><img src=\"/images/2020-10-25T152800.png\" alt=\"2020-10-25T152800.png\"></p>\n<p>SPDY是一个由 Google 主导的研究项目发明的HTTP替代协议。SPDY位于HTTP之下、TCP/SSL之上，这样可以轻松兼容老版本的HTTP协议，同时可以使用已有的SSL功能。SPDY优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性，具体如下：</p>\n<p><strong>降低延迟</strong></p>\n<p>针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。</p>\n<p><strong>请求优先级</strong></p>\n<p>多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p>\n<p><strong>header压缩</strong></p>\n<p>前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</p>\n<p><strong>传输协议</strong></p>\n<p>基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。</p>\n<p><strong>服务端推送</strong></p>\n<p>采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</p>\n<h3 id=\"HTTP2-0\"><a href=\"#HTTP2-0\" class=\"headerlink\" title=\"HTTP2.0\"></a>HTTP2.0</h3><p>HTTP2.0是基于SPDY设计的，但与SPDY 仍有不同的地方，如下：</p>\n<ul>\n<li>HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li>\n<li>HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</li>\n</ul>\n<h4 id=\"HTTP2-0的新特性\"><a href=\"#HTTP2-0的新特性\" class=\"headerlink\" title=\"HTTP2.0的新特性\"></a>HTTP2.0的新特性</h4><h5 id=\"二进制分帧\"><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h5><p>HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p><img src=\"/images/2020-10-25T154700.png\" alt=\"2020-10-25T154700.png\"></p>\n<p>在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。</p>\n<h5 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h5><p>即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p>\n<p><img src=\"/images/2020-10-25T154800.png\" alt=\"2020-10-25T154800.png\"></p>\n<h5 id=\"header压缩\"><a href=\"#header压缩\" class=\"headerlink\" title=\"header压缩\"></a>header压缩</h5><p>如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>\n<p><img src=\"/images/2020-10-25T154900.png\" alt=\"2020-10-25T154900.png\"></p>\n<h5 id=\"服务端推送\"><a href=\"#服务端推送\" class=\"headerlink\" title=\"服务端推送\"></a>服务端推送</h5><p>同SPDY一样，HTTP2.0也具有server push功能。</p>\n<p>客户端请求的过程：</p>\n<p><img src=\"/images/2020-10-25T155200.png\" alt=\"2020-10-25T155200.png\"></p>\n<p>服务端推送的过程：</p>\n<p><img src=\"/images/2020-10-25T155300.png\" alt=\"2020-10-25T155300.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>HTTP1.0到HTTP1.1，是无连接到长连接的发展</p>\n</li>\n<li><p>HTTP1.x到HTTP2.0，是二进制分帧、多路复用的发展</p>\n</li>\n</ul>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/be29d679cbff\" target=\"_blank\" rel=\"noopener\">HTTP1.0、HTTP1.1和HTTP2.0的区别</a></p>\n<p><a href=\"https://juejin.im/post/6844903824390537230\" target=\"_blank\" rel=\"noopener\">HTTP1.0，HTTP1.1，HTTPS和HTTP2.0的区别</a></p>\n<p><a href=\"https://juejin.im/post/6844903712113360903\" target=\"_blank\" rel=\"noopener\">HTTP 的前世今生：一次性搞懂 HTTP、HTTPS、SPDY、HTTP2</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP/2\" target=\"_blank\" rel=\"noopener\">HTTP/2</a></p>\n</blockquote>\n"},{"title":"Tornado5.0.2翻译文档 - 协程","date":"2018-06-18T05:36:42.000Z","_content":"\nTornado中推荐使用 **协程** 编写异步代码，协程使用了Python的 `yield` 关键字代替链式回调来将程序挂起和恢复执行(像在 [gevent](http://www.gevent.org/) 中出现的轻量级线程合作方式有时也被称为协程，但是在Tornado中所有的协程使用明确的上下文切换，并被称为异步函数)。\n\n使用协程几乎像写同步代码一样简单，并且不需要浪费额外的线程。它们还通过减少上下文切换来 [使并发编程更简单](https://glyph.twistedmatrix.com/2014/02/unyielding.html) 。\n\n例子：\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n### Python 3.5: `async` 和 `await`\n\nPython 3.5 引入了 `async` 和 `await` 关键字(使用这些关键字的函数也被称为”原生协程”)。从Tornado 4.3，你可以用它们代替 `yield` 为基础的协程。只需要简单的使用 `async def foo()` 在函数定义的时候代替 `@gen.coroutine` 装饰器，用 `await` 代替 yield。本文档的其他部分会继续使用 `yield` 的风格来和旧版本的Python兼容，但是如果 `async` 和 `await` 可用的话，它们运行起来会更快：\n\n```\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n`await` 关键字比 `yield` 关键字功能要少一些。例如，在一个使用 `yield` 的协程中，你可以得到 `Futures` 列表，但是在原生协程中，你必须把列表用 [`tornado.gen.multi`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.multi) 包起来。同时也去掉了与 [`concurrent.futures`](https://docs.python.org/3.6/library/concurrent.futures.html#module-concurrent.futures) 的集成。你也可以使用 [`tornado.gen.convert_yielded`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.convert_yielded) 来把任何使用 `yield` 工作的代码转换成使用 `await` 的形式：\n\n```\nasync def f():\n    executor = concurrent.futures.ThreadPoolExecutor()\n    await tornado.gen.convert_yielded(executor.submit(g))\n```\n\n### 它如何工作\n\n包含了 `yield` 关键字的函数是一个 **生成器(generator)** 。所有的生成器都是异步的；当调用它们的时候，会返回一个生成器对象，而不是一个执行完的结果。 `@gen.coroutine` 装饰器通过 `yield` 表达式和生成器进行交流，而且通过返回一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 与协程的调用方进行交互。\n\n下面是一个协程装饰器内部循环的简单版本：\n\n```\n# Simplified inner loop of tornado.gen.Runner\ndef run(self):\n    # send(x) makes the current yield return x.\n    # It returns when the next yield is reached\n    future = self.gen.send(self.next)\n    def callback(f):\n        self.next = f.result()\n        self.run()\n    future.add_done_callback(callback)\n```\n\n装饰器从生成器接收一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象，等待(非阻塞的)这个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象执行完成，然后“解开(unwraps)” 这个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象，并把结果作为 `yield` 表达式的结果传回给生成器。大多数异步代码从来不会直接接触 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 类 除非 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 立即通过异步函数返回给 `yield` 表达式。\n\n### 如何调用协程\n\n协程一般不会抛出异常：它们抛出的任何异常将被 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 捕获直到它被得到，这意味着用正确的方式调用协程是重要的，否则你可能有被忽略的错误：\n\n```\n@gen.coroutine\ndef divide(x, y):\n    return x / y\n\ndef bad_call():\n    # This should raise a ZeroDivisionError, but it won't because\n    # the coroutine is called incorrectly.\n    divide(1, 0)\n```\n\n几乎所有的情况下，任何一个调用协程的函数都必须是协程它自身，并且在调用的时候使用 `yield` 关键字。当你重写超类中的方法，请参阅文档，看看协程是否支持(文档应该会写该方法 “可能是一个协程” 或者 “可能返回 一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) ”)：\n\n```\n@gen.coroutine\ndef good_call():\n    # yield will unwrap the Future returned by divide() and raise\n    # the exception.\n    yield divide(1, 0)\n```\n\n有时你可能想要对一个协程”一劳永逸”而且不等待它的结果。在这种情况下，建议使用 [`IOLoop.spawn_callback`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，它使得 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 负责调用。如果它失败了， [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 会在日志中把调用栈记录下来：\n\n```\n# The IOLoop will catch the exception and print a stack trace in\n# the logs. Note that this doesn't look like a normal call, since\n# we pass the function object to be called by the IOLoop.\nIOLoop.current().spawn_callback(divide, 1, 0)\n```\n\n如果函数使用了 `@gen.coroutine` ，则推荐以上方式使用 [`IOLoop.spawn_callback`](http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，但如果函数使用 `async def` ，则必须使用以上方式(否则协程不会运行)。\n\n最后，在程序顶层，如果 IOLoop 尚未运行，你可以启动 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 执行协程，然后使用 [`IOLoop.run_sync`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.run_sync) 方法停止 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 。这通常被用来启动面向批处理程序的 `main` 函数：\n\n```\n# run_sync() doesn't take arguments, so we must wrap the\n# call in a lambda.\nIOLoop.current().run_sync(lambda: divide(1, 0))\n```\n\n### 协程模式\n\n#### 调用阻塞函数\n\n从一个协程调用阻塞函数最简单的方式是使用 `IOLoop.run_in_executor` ，它将返回和协程兼容的`Futures` ：\n\n```\n@gen.coroutine\ndef call_blocking():\n    yield IOLoop.current().run_in_executor(blocking_func, args)\n```\n\n#### 并行\n\n协程装饰器能识别列表或者字典对象中各自的 `Futures` ，并且并行的等待这些 `Futures` ：\n\n```\n@gen.coroutine\ndef parallel_fetch(url1, url2):\n    resp1, resp2 = yield [http_client.fetch(url1),\n                          http_client.fetch(url2)]\n\n@gen.coroutine\ndef parallel_fetch_many(urls):\n    responses = yield [http_client.fetch(url) for url in urls]\n    # responses is a list of HTTPResponses in the same order\n\n@gen.coroutine\ndef parallel_fetch_dict(urls):\n    responses = yield {url: http_client.fetch(url)\n                        for url in urls}\n    # responses is a dict {url: HTTPResponse}\n```\n\n如果使用 `await` 关键字，列表和字典必须使用 [`tornado.gen.multi`](http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.multi) 包装起来：\n\n```\nasync def parallel_fetch(url1, url2):\n    resp1, resp2 = await gen.multi([http_client.fetch(url1),\n                                    http_client.fetch(url2)])\n```\n\n#### 交叉存取\n\n有时候我们需要保存`Future` 而不是立即返回，所以可以在等待之前执行其他操作：\n\n```\n@gen.coroutine\ndef get(self):\n    fetch_future = self.fetch_next_chunk()\n    while True:\n        chunk = yield fetch_future\n        if chunk is None: break\n        self.write(chunk)\n        fetch_future = self.fetch_next_chunk()\n        yield self.flush()\n```\n\n这种模式最适用于 `@gen.coroutine` ，如果 `fetch_next_chunk()` 使用 `async def` ，则必须如下调用： `fetch_future = tornado.gen.convert_yielded(self.fetch_next_chunk())`才能启动后台进程。\n\n#### 循环\n\n在原生协程中，可以使用`aysnc for` 。在老版本的Python中，协程的循环是棘手的，因为没有办法在 `for` 循环或者 `while` 循环 `yield` 迭代器，并且捕获 yield 的结果。相反，你需要将循环条件从访问结果中分离出来，下面是一个使用 [Motor](http://motor.readthedocs.org/en/stable/) 的例子：\n\n```\nimport motor\ndb = motor.MotorClient().test\n\n@gen.coroutine\ndef loop_example(collection):\n    cursor = db.collection.find()\n    while (yield cursor.fetch_next):\n        doc = cursor.next_object()\n```\n\n#### 在后台运行\n\n[`PeriodicCallback`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.PeriodicCallback) 通常不使用协程。相反，一个协程可以包含一个 `while True:` 循环并使用[`tornado.gen.sleep`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.sleep) ：\n\n```\n@gen.coroutine\ndef minute_loop():\n    while True:\n        yield do_something()\n        yield gen.sleep(60)\n\n# Coroutines that loop forever are generally started with\n# spawn_callback().\nIOLoop.current().spawn_callback(minute_loop)\n```\n\n有时可能会遇到一个更复杂的循环。例如，上一个循环运行每次花费 `60+N` 秒，其中 `N` 是 `do_something()` 花费的时间。为了 准确的每60秒运行，使用上面的交叉模式：\n\n```\n@gen.coroutine\ndef minute_loop2():\n    while True:\n        nxt = gen.sleep(60)   # Start the clock.\n        yield do_something()  # Run while the clock is ticking.\n        yield nxt             # Wait for the timer to run out.\n```\n\n\n\nRead More:\n\n> [Coroutines](http://www.tornadoweb.org/en/stable/guide/coroutines.html) \n\n","source":"_posts/tornado502-coroutines.md","raw":"---\ntitle: Tornado5.0.2翻译文档 - 协程\ndate: 2018-06-18 13:36:42\ntags:\n - Tornado\n - 翻译文档\n - 协程\ncategories:\n - Tornado\n---\n\nTornado中推荐使用 **协程** 编写异步代码，协程使用了Python的 `yield` 关键字代替链式回调来将程序挂起和恢复执行(像在 [gevent](http://www.gevent.org/) 中出现的轻量级线程合作方式有时也被称为协程，但是在Tornado中所有的协程使用明确的上下文切换，并被称为异步函数)。\n\n使用协程几乎像写同步代码一样简单，并且不需要浪费额外的线程。它们还通过减少上下文切换来 [使并发编程更简单](https://glyph.twistedmatrix.com/2014/02/unyielding.html) 。\n\n例子：\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n### Python 3.5: `async` 和 `await`\n\nPython 3.5 引入了 `async` 和 `await` 关键字(使用这些关键字的函数也被称为”原生协程”)。从Tornado 4.3，你可以用它们代替 `yield` 为基础的协程。只需要简单的使用 `async def foo()` 在函数定义的时候代替 `@gen.coroutine` 装饰器，用 `await` 代替 yield。本文档的其他部分会继续使用 `yield` 的风格来和旧版本的Python兼容，但是如果 `async` 和 `await` 可用的话，它们运行起来会更快：\n\n```\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n`await` 关键字比 `yield` 关键字功能要少一些。例如，在一个使用 `yield` 的协程中，你可以得到 `Futures` 列表，但是在原生协程中，你必须把列表用 [`tornado.gen.multi`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.multi) 包起来。同时也去掉了与 [`concurrent.futures`](https://docs.python.org/3.6/library/concurrent.futures.html#module-concurrent.futures) 的集成。你也可以使用 [`tornado.gen.convert_yielded`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.convert_yielded) 来把任何使用 `yield` 工作的代码转换成使用 `await` 的形式：\n\n```\nasync def f():\n    executor = concurrent.futures.ThreadPoolExecutor()\n    await tornado.gen.convert_yielded(executor.submit(g))\n```\n\n### 它如何工作\n\n包含了 `yield` 关键字的函数是一个 **生成器(generator)** 。所有的生成器都是异步的；当调用它们的时候，会返回一个生成器对象，而不是一个执行完的结果。 `@gen.coroutine` 装饰器通过 `yield` 表达式和生成器进行交流，而且通过返回一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 与协程的调用方进行交互。\n\n下面是一个协程装饰器内部循环的简单版本：\n\n```\n# Simplified inner loop of tornado.gen.Runner\ndef run(self):\n    # send(x) makes the current yield return x.\n    # It returns when the next yield is reached\n    future = self.gen.send(self.next)\n    def callback(f):\n        self.next = f.result()\n        self.run()\n    future.add_done_callback(callback)\n```\n\n装饰器从生成器接收一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象，等待(非阻塞的)这个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象执行完成，然后“解开(unwraps)” 这个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 对象，并把结果作为 `yield` 表达式的结果传回给生成器。大多数异步代码从来不会直接接触 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 类 除非 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 立即通过异步函数返回给 `yield` 表达式。\n\n### 如何调用协程\n\n协程一般不会抛出异常：它们抛出的任何异常将被 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) 捕获直到它被得到，这意味着用正确的方式调用协程是重要的，否则你可能有被忽略的错误：\n\n```\n@gen.coroutine\ndef divide(x, y):\n    return x / y\n\ndef bad_call():\n    # This should raise a ZeroDivisionError, but it won't because\n    # the coroutine is called incorrectly.\n    divide(1, 0)\n```\n\n几乎所有的情况下，任何一个调用协程的函数都必须是协程它自身，并且在调用的时候使用 `yield` 关键字。当你重写超类中的方法，请参阅文档，看看协程是否支持(文档应该会写该方法 “可能是一个协程” 或者 “可能返回 一个 [`Future`](http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future) ”)：\n\n```\n@gen.coroutine\ndef good_call():\n    # yield will unwrap the Future returned by divide() and raise\n    # the exception.\n    yield divide(1, 0)\n```\n\n有时你可能想要对一个协程”一劳永逸”而且不等待它的结果。在这种情况下，建议使用 [`IOLoop.spawn_callback`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，它使得 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 负责调用。如果它失败了， [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 会在日志中把调用栈记录下来：\n\n```\n# The IOLoop will catch the exception and print a stack trace in\n# the logs. Note that this doesn't look like a normal call, since\n# we pass the function object to be called by the IOLoop.\nIOLoop.current().spawn_callback(divide, 1, 0)\n```\n\n如果函数使用了 `@gen.coroutine` ，则推荐以上方式使用 [`IOLoop.spawn_callback`](http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，但如果函数使用 `async def` ，则必须使用以上方式(否则协程不会运行)。\n\n最后，在程序顶层，如果 IOLoop 尚未运行，你可以启动 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 执行协程，然后使用 [`IOLoop.run_sync`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.run_sync) 方法停止 [`IOLoop`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop) 。这通常被用来启动面向批处理程序的 `main` 函数：\n\n```\n# run_sync() doesn't take arguments, so we must wrap the\n# call in a lambda.\nIOLoop.current().run_sync(lambda: divide(1, 0))\n```\n\n### 协程模式\n\n#### 调用阻塞函数\n\n从一个协程调用阻塞函数最简单的方式是使用 `IOLoop.run_in_executor` ，它将返回和协程兼容的`Futures` ：\n\n```\n@gen.coroutine\ndef call_blocking():\n    yield IOLoop.current().run_in_executor(blocking_func, args)\n```\n\n#### 并行\n\n协程装饰器能识别列表或者字典对象中各自的 `Futures` ，并且并行的等待这些 `Futures` ：\n\n```\n@gen.coroutine\ndef parallel_fetch(url1, url2):\n    resp1, resp2 = yield [http_client.fetch(url1),\n                          http_client.fetch(url2)]\n\n@gen.coroutine\ndef parallel_fetch_many(urls):\n    responses = yield [http_client.fetch(url) for url in urls]\n    # responses is a list of HTTPResponses in the same order\n\n@gen.coroutine\ndef parallel_fetch_dict(urls):\n    responses = yield {url: http_client.fetch(url)\n                        for url in urls}\n    # responses is a dict {url: HTTPResponse}\n```\n\n如果使用 `await` 关键字，列表和字典必须使用 [`tornado.gen.multi`](http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.multi) 包装起来：\n\n```\nasync def parallel_fetch(url1, url2):\n    resp1, resp2 = await gen.multi([http_client.fetch(url1),\n                                    http_client.fetch(url2)])\n```\n\n#### 交叉存取\n\n有时候我们需要保存`Future` 而不是立即返回，所以可以在等待之前执行其他操作：\n\n```\n@gen.coroutine\ndef get(self):\n    fetch_future = self.fetch_next_chunk()\n    while True:\n        chunk = yield fetch_future\n        if chunk is None: break\n        self.write(chunk)\n        fetch_future = self.fetch_next_chunk()\n        yield self.flush()\n```\n\n这种模式最适用于 `@gen.coroutine` ，如果 `fetch_next_chunk()` 使用 `async def` ，则必须如下调用： `fetch_future = tornado.gen.convert_yielded(self.fetch_next_chunk())`才能启动后台进程。\n\n#### 循环\n\n在原生协程中，可以使用`aysnc for` 。在老版本的Python中，协程的循环是棘手的，因为没有办法在 `for` 循环或者 `while` 循环 `yield` 迭代器，并且捕获 yield 的结果。相反，你需要将循环条件从访问结果中分离出来，下面是一个使用 [Motor](http://motor.readthedocs.org/en/stable/) 的例子：\n\n```\nimport motor\ndb = motor.MotorClient().test\n\n@gen.coroutine\ndef loop_example(collection):\n    cursor = db.collection.find()\n    while (yield cursor.fetch_next):\n        doc = cursor.next_object()\n```\n\n#### 在后台运行\n\n[`PeriodicCallback`](http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.PeriodicCallback) 通常不使用协程。相反，一个协程可以包含一个 `while True:` 循环并使用[`tornado.gen.sleep`](http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.sleep) ：\n\n```\n@gen.coroutine\ndef minute_loop():\n    while True:\n        yield do_something()\n        yield gen.sleep(60)\n\n# Coroutines that loop forever are generally started with\n# spawn_callback().\nIOLoop.current().spawn_callback(minute_loop)\n```\n\n有时可能会遇到一个更复杂的循环。例如，上一个循环运行每次花费 `60+N` 秒，其中 `N` 是 `do_something()` 花费的时间。为了 准确的每60秒运行，使用上面的交叉模式：\n\n```\n@gen.coroutine\ndef minute_loop2():\n    while True:\n        nxt = gen.sleep(60)   # Start the clock.\n        yield do_something()  # Run while the clock is ticking.\n        yield nxt             # Wait for the timer to run out.\n```\n\n\n\nRead More:\n\n> [Coroutines](http://www.tornadoweb.org/en/stable/guide/coroutines.html) \n\n","slug":"tornado502-coroutines","published":1,"updated":"2020-10-25T06:43:32.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq7b00aamolceit4fon0","content":"<p>Tornado中推荐使用 <strong>协程</strong> 编写异步代码，协程使用了Python的 <code>yield</code> 关键字代替链式回调来将程序挂起和恢复执行(像在 <a href=\"http://www.gevent.org/\" target=\"_blank\" rel=\"noopener\">gevent</a> 中出现的轻量级线程合作方式有时也被称为协程，但是在Tornado中所有的协程使用明确的上下文切换，并被称为异步函数)。</p>\n<p>使用协程几乎像写同步代码一样简单，并且不需要浪费额外的线程。它们还通过减少上下文切换来 <a href=\"https://glyph.twistedmatrix.com/2014/02/unyielding.html\" target=\"_blank\" rel=\"noopener\">使并发编程更简单</a> 。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    # In Python versions prior to 3.3, returning a value from</span><br><span class=\"line\">    # a generator is not allowed and you must use</span><br><span class=\"line\">    #   raise gen.Return(response.body)</span><br><span class=\"line\">    # instead.</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-3-5-async-和-await\"><a href=\"#Python-3-5-async-和-await\" class=\"headerlink\" title=\"Python 3.5: async 和 await\"></a>Python 3.5: <code>async</code> 和 <code>await</code></h3><p>Python 3.5 引入了 <code>async</code> 和 <code>await</code> 关键字(使用这些关键字的函数也被称为”原生协程”)。从Tornado 4.3，你可以用它们代替 <code>yield</code> 为基础的协程。只需要简单的使用 <code>async def foo()</code> 在函数定义的时候代替 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>装饰器，用</code>await<code>代替 yield。本文档的其他部分会继续使用</code>yield<code>的风格来和旧版本的Python兼容，但是如果</code>async<code>和</code>await` 可用的话，它们运行起来会更快：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = await http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<p><code>await</code> 关键字比 <code>yield</code> 关键字功能要少一些。例如，在一个使用 <code>yield</code> 的协程中，你可以得到 <code>Futures</code> 列表，但是在原生协程中，你必须把列表用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.multi\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.multi</code></a> 包起来。同时也去掉了与 <a href=\"https://docs.python.org/3.6/library/concurrent.futures.html#module-concurrent.futures\" target=\"_blank\" rel=\"noopener\"><code>concurrent.futures</code></a> 的集成。你也可以使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.convert_yielded\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.convert_yielded</code></a> 来把任何使用 <code>yield</code> 工作的代码转换成使用 <code>await</code> 的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def f():</span><br><span class=\"line\">    executor = concurrent.futures.ThreadPoolExecutor()</span><br><span class=\"line\">    await tornado.gen.convert_yielded(executor.submit(g))</span><br></pre></td></tr></table></figure>\n<h3 id=\"它如何工作\"><a href=\"#它如何工作\" class=\"headerlink\" title=\"它如何工作\"></a>它如何工作</h3><p>包含了 <code>yield</code> 关键字的函数是一个 <strong>生成器(generator)</strong> 。所有的生成器都是异步的；当调用它们的时候，会返回一个生成器对象，而不是一个执行完的结果。 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>装饰器通过</code>yield<code>表达式和生成器进行交流，而且通过返回一个 [</code>Future`](<a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\">http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future</a>) 与协程的调用方进行交互。</p>\n<p>下面是一个协程装饰器内部循环的简单版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Simplified inner loop of tornado.gen.Runner</span><br><span class=\"line\">def run(self):</span><br><span class=\"line\">    # send(x) makes the current yield return x.</span><br><span class=\"line\">    # It returns when the next yield is reached</span><br><span class=\"line\">    future = self.gen.send(self.next)</span><br><span class=\"line\">    def callback(f):</span><br><span class=\"line\">        self.next = f.result()</span><br><span class=\"line\">        self.run()</span><br><span class=\"line\">    future.add_done_callback(callback)</span><br></pre></td></tr></table></figure>\n<p>装饰器从生成器接收一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象，等待(非阻塞的)这个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象执行完成，然后“解开(unwraps)” 这个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象，并把结果作为 <code>yield</code> 表达式的结果传回给生成器。大多数异步代码从来不会直接接触 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 类 除非 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 立即通过异步函数返回给 <code>yield</code> 表达式。</p>\n<h3 id=\"如何调用协程\"><a href=\"#如何调用协程\" class=\"headerlink\" title=\"如何调用协程\"></a>如何调用协程</h3><p>协程一般不会抛出异常：它们抛出的任何异常将被 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 捕获直到它被得到，这意味着用正确的方式调用协程是重要的，否则你可能有被忽略的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def divide(x, y):</span><br><span class=\"line\">    return x / y</span><br><span class=\"line\"></span><br><span class=\"line\">def bad_call():</span><br><span class=\"line\">    # This should raise a ZeroDivisionError, but it won&apos;t because</span><br><span class=\"line\">    # the coroutine is called incorrectly.</span><br><span class=\"line\">    divide(1, 0)</span><br></pre></td></tr></table></figure>\n<p>几乎所有的情况下，任何一个调用协程的函数都必须是协程它自身，并且在调用的时候使用 <code>yield</code> 关键字。当你重写超类中的方法，请参阅文档，看看协程是否支持(文档应该会写该方法 “可能是一个协程” 或者 “可能返回 一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> ”)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def good_call():</span><br><span class=\"line\">    # yield will unwrap the Future returned by divide() and raise</span><br><span class=\"line\">    # the exception.</span><br><span class=\"line\">    yield divide(1, 0)</span><br></pre></td></tr></table></figure>\n<p>有时你可能想要对一个协程”一劳永逸”而且不等待它的结果。在这种情况下，建议使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.spawn_callback\" target=\"_blank\" rel=\"noopener\"><code>IOLoop.spawn_callback</code></a> ，它使得 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 负责调用。如果它失败了， <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 会在日志中把调用栈记录下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The IOLoop will catch the exception and print a stack trace in</span><br><span class=\"line\"># the logs. Note that this doesn&apos;t look like a normal call, since</span><br><span class=\"line\"># we pass the function object to be called by the IOLoop.</span><br><span class=\"line\">IOLoop.current().spawn_callback(divide, 1, 0)</span><br></pre></td></tr></table></figure>\n<p>如果函数使用了 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>，则推荐以上方式使用 [</code>IOLoop.spawn_callback<code>](http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，但如果函数使用</code>async def` ，则必须使用以上方式(否则协程不会运行)。</p>\n<p>最后，在程序顶层，如果 IOLoop 尚未运行，你可以启动 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 执行协程，然后使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.run_sync\" target=\"_blank\" rel=\"noopener\"><code>IOLoop.run_sync</code></a> 方法停止 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 。这通常被用来启动面向批处理程序的 <code>main</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># run_sync() doesn&apos;t take arguments, so we must wrap the</span><br><span class=\"line\"># call in a lambda.</span><br><span class=\"line\">IOLoop.current().run_sync(lambda: divide(1, 0))</span><br></pre></td></tr></table></figure>\n<h3 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h3><h4 id=\"调用阻塞函数\"><a href=\"#调用阻塞函数\" class=\"headerlink\" title=\"调用阻塞函数\"></a>调用阻塞函数</h4><p>从一个协程调用阻塞函数最简单的方式是使用 <code>IOLoop.run_in_executor</code> ，它将返回和协程兼容的<code>Futures</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def call_blocking():</span><br><span class=\"line\">    yield IOLoop.current().run_in_executor(blocking_func, args)</span><br></pre></td></tr></table></figure>\n<h4 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h4><p>协程装饰器能识别列表或者字典对象中各自的 <code>Futures</code> ，并且并行的等待这些 <code>Futures</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch(url1, url2):</span><br><span class=\"line\">    resp1, resp2 = yield [http_client.fetch(url1),</span><br><span class=\"line\">                          http_client.fetch(url2)]</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch_many(urls):</span><br><span class=\"line\">    responses = yield [http_client.fetch(url) for url in urls]</span><br><span class=\"line\">    # responses is a list of HTTPResponses in the same order</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch_dict(urls):</span><br><span class=\"line\">    responses = yield &#123;url: http_client.fetch(url)</span><br><span class=\"line\">                        for url in urls&#125;</span><br><span class=\"line\">    # responses is a dict &#123;url: HTTPResponse&#125;</span><br></pre></td></tr></table></figure>\n<p>如果使用 <code>await</code> 关键字，列表和字典必须使用 <a href=\"http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.multi\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.multi</code></a> 包装起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def parallel_fetch(url1, url2):</span><br><span class=\"line\">    resp1, resp2 = await gen.multi([http_client.fetch(url1),</span><br><span class=\"line\">                                    http_client.fetch(url2)])</span><br></pre></td></tr></table></figure>\n<h4 id=\"交叉存取\"><a href=\"#交叉存取\" class=\"headerlink\" title=\"交叉存取\"></a>交叉存取</h4><p>有时候我们需要保存<code>Future</code> 而不是立即返回，所以可以在等待之前执行其他操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def get(self):</span><br><span class=\"line\">    fetch_future = self.fetch_next_chunk()</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        chunk = yield fetch_future</span><br><span class=\"line\">        if chunk is None: break</span><br><span class=\"line\">        self.write(chunk)</span><br><span class=\"line\">        fetch_future = self.fetch_next_chunk()</span><br><span class=\"line\">        yield self.flush()</span><br></pre></td></tr></table></figure>\n<p>这种模式最适用于 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>，如果</code>fetch_next_chunk()<code>使用</code>async def<code>，则必须如下调用：</code>fetch_future = tornado.gen.convert_yielded(self.fetch_next_chunk())`才能启动后台进程。</p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>在原生协程中，可以使用<code>aysnc for</code> 。在老版本的Python中，协程的循环是棘手的，因为没有办法在 <code>for</code> 循环或者 <code>while</code> 循环 <code>yield</code> 迭代器，并且捕获 yield 的结果。相反，你需要将循环条件从访问结果中分离出来，下面是一个使用 <a href=\"http://motor.readthedocs.org/en/stable/\" target=\"_blank\" rel=\"noopener\">Motor</a> 的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import motor</span><br><span class=\"line\">db = motor.MotorClient().test</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def loop_example(collection):</span><br><span class=\"line\">    cursor = db.collection.find()</span><br><span class=\"line\">    while (yield cursor.fetch_next):</span><br><span class=\"line\">        doc = cursor.next_object()</span><br></pre></td></tr></table></figure>\n<h4 id=\"在后台运行\"><a href=\"#在后台运行\" class=\"headerlink\" title=\"在后台运行\"></a>在后台运行</h4><p><a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.PeriodicCallback\" target=\"_blank\" rel=\"noopener\"><code>PeriodicCallback</code></a> 通常不使用协程。相反，一个协程可以包含一个 <code>while True:</code> 循环并使用<a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.sleep\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.sleep</code></a> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def minute_loop():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        yield do_something()</span><br><span class=\"line\">        yield gen.sleep(60)</span><br><span class=\"line\"></span><br><span class=\"line\"># Coroutines that loop forever are generally started with</span><br><span class=\"line\"># spawn_callback().</span><br><span class=\"line\">IOLoop.current().spawn_callback(minute_loop)</span><br></pre></td></tr></table></figure>\n<p>有时可能会遇到一个更复杂的循环。例如，上一个循环运行每次花费 <code>60+N</code> 秒，其中 <code>N</code> 是 <code>do_something()</code> 花费的时间。为了 准确的每60秒运行，使用上面的交叉模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def minute_loop2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        nxt = gen.sleep(60)   # Start the clock.</span><br><span class=\"line\">        yield do_something()  # Run while the clock is ticking.</span><br><span class=\"line\">        yield nxt             # Wait for the timer to run out.</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/coroutines.html\" target=\"_blank\" rel=\"noopener\">Coroutines</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Tornado中推荐使用 <strong>协程</strong> 编写异步代码，协程使用了Python的 <code>yield</code> 关键字代替链式回调来将程序挂起和恢复执行(像在 <a href=\"http://www.gevent.org/\" target=\"_blank\" rel=\"noopener\">gevent</a> 中出现的轻量级线程合作方式有时也被称为协程，但是在Tornado中所有的协程使用明确的上下文切换，并被称为异步函数)。</p>\n<p>使用协程几乎像写同步代码一样简单，并且不需要浪费额外的线程。它们还通过减少上下文切换来 <a href=\"https://glyph.twistedmatrix.com/2014/02/unyielding.html\" target=\"_blank\" rel=\"noopener\">使并发编程更简单</a> 。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    # In Python versions prior to 3.3, returning a value from</span><br><span class=\"line\">    # a generator is not allowed and you must use</span><br><span class=\"line\">    #   raise gen.Return(response.body)</span><br><span class=\"line\">    # instead.</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-3-5-async-和-await\"><a href=\"#Python-3-5-async-和-await\" class=\"headerlink\" title=\"Python 3.5: async 和 await\"></a>Python 3.5: <code>async</code> 和 <code>await</code></h3><p>Python 3.5 引入了 <code>async</code> 和 <code>await</code> 关键字(使用这些关键字的函数也被称为”原生协程”)。从Tornado 4.3，你可以用它们代替 <code>yield</code> 为基础的协程。只需要简单的使用 <code>async def foo()</code> 在函数定义的时候代替 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>装饰器，用</code>await<code>代替 yield。本文档的其他部分会继续使用</code>yield<code>的风格来和旧版本的Python兼容，但是如果</code>async<code>和</code>await` 可用的话，它们运行起来会更快：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = await http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<p><code>await</code> 关键字比 <code>yield</code> 关键字功能要少一些。例如，在一个使用 <code>yield</code> 的协程中，你可以得到 <code>Futures</code> 列表，但是在原生协程中，你必须把列表用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.multi\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.multi</code></a> 包起来。同时也去掉了与 <a href=\"https://docs.python.org/3.6/library/concurrent.futures.html#module-concurrent.futures\" target=\"_blank\" rel=\"noopener\"><code>concurrent.futures</code></a> 的集成。你也可以使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.convert_yielded\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.convert_yielded</code></a> 来把任何使用 <code>yield</code> 工作的代码转换成使用 <code>await</code> 的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def f():</span><br><span class=\"line\">    executor = concurrent.futures.ThreadPoolExecutor()</span><br><span class=\"line\">    await tornado.gen.convert_yielded(executor.submit(g))</span><br></pre></td></tr></table></figure>\n<h3 id=\"它如何工作\"><a href=\"#它如何工作\" class=\"headerlink\" title=\"它如何工作\"></a>它如何工作</h3><p>包含了 <code>yield</code> 关键字的函数是一个 <strong>生成器(generator)</strong> 。所有的生成器都是异步的；当调用它们的时候，会返回一个生成器对象，而不是一个执行完的结果。 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>装饰器通过</code>yield<code>表达式和生成器进行交流，而且通过返回一个 [</code>Future`](<a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\">http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future</a>) 与协程的调用方进行交互。</p>\n<p>下面是一个协程装饰器内部循环的简单版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Simplified inner loop of tornado.gen.Runner</span><br><span class=\"line\">def run(self):</span><br><span class=\"line\">    # send(x) makes the current yield return x.</span><br><span class=\"line\">    # It returns when the next yield is reached</span><br><span class=\"line\">    future = self.gen.send(self.next)</span><br><span class=\"line\">    def callback(f):</span><br><span class=\"line\">        self.next = f.result()</span><br><span class=\"line\">        self.run()</span><br><span class=\"line\">    future.add_done_callback(callback)</span><br></pre></td></tr></table></figure>\n<p>装饰器从生成器接收一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象，等待(非阻塞的)这个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象执行完成，然后“解开(unwraps)” 这个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 对象，并把结果作为 <code>yield</code> 表达式的结果传回给生成器。大多数异步代码从来不会直接接触 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 类 除非 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 立即通过异步函数返回给 <code>yield</code> 表达式。</p>\n<h3 id=\"如何调用协程\"><a href=\"#如何调用协程\" class=\"headerlink\" title=\"如何调用协程\"></a>如何调用协程</h3><p>协程一般不会抛出异常：它们抛出的任何异常将被 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> 捕获直到它被得到，这意味着用正确的方式调用协程是重要的，否则你可能有被忽略的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def divide(x, y):</span><br><span class=\"line\">    return x / y</span><br><span class=\"line\"></span><br><span class=\"line\">def bad_call():</span><br><span class=\"line\">    # This should raise a ZeroDivisionError, but it won&apos;t because</span><br><span class=\"line\">    # the coroutine is called incorrectly.</span><br><span class=\"line\">    divide(1, 0)</span><br></pre></td></tr></table></figure>\n<p>几乎所有的情况下，任何一个调用协程的函数都必须是协程它自身，并且在调用的时候使用 <code>yield</code> 关键字。当你重写超类中的方法，请参阅文档，看看协程是否支持(文档应该会写该方法 “可能是一个协程” 或者 “可能返回 一个 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/concurrent.html#tornado.concurrent.Future\" target=\"_blank\" rel=\"noopener\"><code>Future</code></a> ”)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def good_call():</span><br><span class=\"line\">    # yield will unwrap the Future returned by divide() and raise</span><br><span class=\"line\">    # the exception.</span><br><span class=\"line\">    yield divide(1, 0)</span><br></pre></td></tr></table></figure>\n<p>有时你可能想要对一个协程”一劳永逸”而且不等待它的结果。在这种情况下，建议使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.spawn_callback\" target=\"_blank\" rel=\"noopener\"><code>IOLoop.spawn_callback</code></a> ，它使得 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 负责调用。如果它失败了， <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 会在日志中把调用栈记录下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The IOLoop will catch the exception and print a stack trace in</span><br><span class=\"line\"># the logs. Note that this doesn&apos;t look like a normal call, since</span><br><span class=\"line\"># we pass the function object to be called by the IOLoop.</span><br><span class=\"line\">IOLoop.current().spawn_callback(divide, 1, 0)</span><br></pre></td></tr></table></figure>\n<p>如果函数使用了 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>，则推荐以上方式使用 [</code>IOLoop.spawn_callback<code>](http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.spawn_callback) ，但如果函数使用</code>async def` ，则必须使用以上方式(否则协程不会运行)。</p>\n<p>最后，在程序顶层，如果 IOLoop 尚未运行，你可以启动 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 执行协程，然后使用 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop.run_sync\" target=\"_blank\" rel=\"noopener\"><code>IOLoop.run_sync</code></a> 方法停止 <a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.IOLoop\" target=\"_blank\" rel=\"noopener\"><code>IOLoop</code></a> 。这通常被用来启动面向批处理程序的 <code>main</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># run_sync() doesn&apos;t take arguments, so we must wrap the</span><br><span class=\"line\"># call in a lambda.</span><br><span class=\"line\">IOLoop.current().run_sync(lambda: divide(1, 0))</span><br></pre></td></tr></table></figure>\n<h3 id=\"协程模式\"><a href=\"#协程模式\" class=\"headerlink\" title=\"协程模式\"></a>协程模式</h3><h4 id=\"调用阻塞函数\"><a href=\"#调用阻塞函数\" class=\"headerlink\" title=\"调用阻塞函数\"></a>调用阻塞函数</h4><p>从一个协程调用阻塞函数最简单的方式是使用 <code>IOLoop.run_in_executor</code> ，它将返回和协程兼容的<code>Futures</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def call_blocking():</span><br><span class=\"line\">    yield IOLoop.current().run_in_executor(blocking_func, args)</span><br></pre></td></tr></table></figure>\n<h4 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h4><p>协程装饰器能识别列表或者字典对象中各自的 <code>Futures</code> ，并且并行的等待这些 <code>Futures</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch(url1, url2):</span><br><span class=\"line\">    resp1, resp2 = yield [http_client.fetch(url1),</span><br><span class=\"line\">                          http_client.fetch(url2)]</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch_many(urls):</span><br><span class=\"line\">    responses = yield [http_client.fetch(url) for url in urls]</span><br><span class=\"line\">    # responses is a list of HTTPResponses in the same order</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def parallel_fetch_dict(urls):</span><br><span class=\"line\">    responses = yield &#123;url: http_client.fetch(url)</span><br><span class=\"line\">                        for url in urls&#125;</span><br><span class=\"line\">    # responses is a dict &#123;url: HTTPResponse&#125;</span><br></pre></td></tr></table></figure>\n<p>如果使用 <code>await</code> 关键字，列表和字典必须使用 <a href=\"http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.multi\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.multi</code></a> 包装起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def parallel_fetch(url1, url2):</span><br><span class=\"line\">    resp1, resp2 = await gen.multi([http_client.fetch(url1),</span><br><span class=\"line\">                                    http_client.fetch(url2)])</span><br></pre></td></tr></table></figure>\n<h4 id=\"交叉存取\"><a href=\"#交叉存取\" class=\"headerlink\" title=\"交叉存取\"></a>交叉存取</h4><p>有时候我们需要保存<code>Future</code> 而不是立即返回，所以可以在等待之前执行其他操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def get(self):</span><br><span class=\"line\">    fetch_future = self.fetch_next_chunk()</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        chunk = yield fetch_future</span><br><span class=\"line\">        if chunk is None: break</span><br><span class=\"line\">        self.write(chunk)</span><br><span class=\"line\">        fetch_future = self.fetch_next_chunk()</span><br><span class=\"line\">        yield self.flush()</span><br></pre></td></tr></table></figure>\n<p>这种模式最适用于 <a href=\"mailto:`@gen.coroutine\" target=\"_blank\" rel=\"noopener\">`@gen.coroutine</a><code>，如果</code>fetch_next_chunk()<code>使用</code>async def<code>，则必须如下调用：</code>fetch_future = tornado.gen.convert_yielded(self.fetch_next_chunk())`才能启动后台进程。</p>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>在原生协程中，可以使用<code>aysnc for</code> 。在老版本的Python中，协程的循环是棘手的，因为没有办法在 <code>for</code> 循环或者 <code>while</code> 循环 <code>yield</code> 迭代器，并且捕获 yield 的结果。相反，你需要将循环条件从访问结果中分离出来，下面是一个使用 <a href=\"http://motor.readthedocs.org/en/stable/\" target=\"_blank\" rel=\"noopener\">Motor</a> 的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import motor</span><br><span class=\"line\">db = motor.MotorClient().test</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def loop_example(collection):</span><br><span class=\"line\">    cursor = db.collection.find()</span><br><span class=\"line\">    while (yield cursor.fetch_next):</span><br><span class=\"line\">        doc = cursor.next_object()</span><br></pre></td></tr></table></figure>\n<h4 id=\"在后台运行\"><a href=\"#在后台运行\" class=\"headerlink\" title=\"在后台运行\"></a>在后台运行</h4><p><a href=\"http://tornado-zh.readthedocs.io/zh/latest/ioloop.html#tornado.ioloop.PeriodicCallback\" target=\"_blank\" rel=\"noopener\"><code>PeriodicCallback</code></a> 通常不使用协程。相反，一个协程可以包含一个 <code>while True:</code> 循环并使用<a href=\"http://tornado-zh.readthedocs.io/zh/latest/gen.html#tornado.gen.sleep\" target=\"_blank\" rel=\"noopener\"><code>tornado.gen.sleep</code></a> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def minute_loop():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        yield do_something()</span><br><span class=\"line\">        yield gen.sleep(60)</span><br><span class=\"line\"></span><br><span class=\"line\"># Coroutines that loop forever are generally started with</span><br><span class=\"line\"># spawn_callback().</span><br><span class=\"line\">IOLoop.current().spawn_callback(minute_loop)</span><br></pre></td></tr></table></figure>\n<p>有时可能会遇到一个更复杂的循环。例如，上一个循环运行每次花费 <code>60+N</code> 秒，其中 <code>N</code> 是 <code>do_something()</code> 花费的时间。为了 准确的每60秒运行，使用上面的交叉模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def minute_loop2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        nxt = gen.sleep(60)   # Start the clock.</span><br><span class=\"line\">        yield do_something()  # Run while the clock is ticking.</span><br><span class=\"line\">        yield nxt             # Wait for the timer to run out.</span><br></pre></td></tr></table></figure>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"http://www.tornadoweb.org/en/stable/guide/coroutines.html\" target=\"_blank\" rel=\"noopener\">Coroutines</a> </p>\n</blockquote>\n"},{"title":"从输入 URL 到页面展示到底发生了什么","date":"2017-06-22T03:23:07.000Z","_content":"\n当我们在浏览器中输入 `www.google.com` 后，浏览器会给我们展示最终页面，本文就来讨论一下展示页面的过程到底是怎样的。\n\n### 输入网络地址\n\n当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 URL 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 URL，然后给出智能提示，让你可以补全 URL 地址。对于 google 的 Chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 Enter，页面就出来了。\n\n### DNS解析获取域名IP地址\n\n请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 IP 地址。\n\n如果在本地的 hosts 文件没有能够找到对应的 IP 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器 。本地 DNS 服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。\n\n查询你输入的网址的 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。\n\n根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。\n\n本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。\n\n最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。\n\n![2017-6-22 134442](/images/2017-6-22 134442.png)\n\n#### DNS缓存\n\nDNS 存在着多级缓存，从离浏览器的距离排序的话，有以下几种：浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。\n\n- 在你的 Chrome 浏览器中输入 chrome://dns/，你可以看到 Chrome 浏览器的 DNS 缓存\n- 系统缓存主要存在 /etc/hosts 中\n\n#### DNS负载均衡\n\n当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会宕掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询时，DNS 服务器对每个查询将以 DNS 文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。\n\n### 建立TCP连接\n\n获取域名对应的 IP 地址之后，浏览器会以一个随机端口，进入到网卡，然后是进入到内核的 TCP/IP 协议栈，还有可能要经过 NetFilter 防火墙（属于内核的模块）的过滤，最终到达 Web 程序，最终建立了 TCP/IP 的连接。\n\n因为 HTTP 报文是包裹在 TCP 报文中发送的，在发送 HTTP 请求之前需要客户端与服务器进行 TCP 连接以保证数据的正确稳定传输。TCP/IP协议可以参考 [TCP/IP协议入门篇](https://runnerliu.github.io/2017/04/03/tcpip/) \n\n### 发送HTTP请求\n\n发送 HTTP 请求的过程就是构建 HTTP 请求报文并通过 TCP 协议中发送到服务器指定端口(HTTP 协议80/8080, HTTPS 协议443)。HTTP 请求报文是由三部分组成：请求行, 请求报头和请求正文。\n\n#### 请求行\n\n格式如下:\nMethod Request-URL HTTP-Version CRLF\n\neg：GET index.html HTTP/1.1\n常用的方法有：GET、POST、PUT、DELETE、OPTIONS、HEAD。\n\n#### 请求报头\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\n\n客户端不一定特指浏览器，有时候也可使用 Linux 下的 CURL 命令以及 HTTP 客户端测试工具等。\n常见的请求报头有：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Type、Authorization、Cookie、User-Agent等。\n\n#### 请求正文\n\n当使用POST、PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如：现在的 Web 应用通常采用 Rest 架构，请求的数据格式一般为 JSON。这时就需要设置Content-Type:application/json。\n\n### 服务器永久重定向响应\n\n服务器给浏览器响应一个 301 永久重定向响应，这样浏览器就会访问 “http://www.google.com/”  而非 “http://google.com/”。\n\n为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像 http://www.yy.com/ 和 http://yy.com/ ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道 301 永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。\n\n#### 301和302的区别\n\n301 和 302 状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址 A 瞬间变成了另一个地址 B）——这是它们的共同点。\n\n他们的不同在于。301 表示旧地址 A 的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；\n\n302 表示旧地址 A 的资源还在（仍然可以访问），这个重定向只是临时地从旧地址 A 跳转到地址 B，搜索引擎会抓取新的内容而保存旧的网址。\n\n#### 重定向原因\n\n- 网站调整（如改变网页目录结构）；\n- 网页被移到一个新地址；\n- 网页扩展名改变(如应用需要把 .php 改成 .Html 或 .shtml )。\n\n这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个 404 页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。\n\n#### 跳转的时机\n\n当一个网站或者网页 24-48 小时内临时移动到一个新的位置，这时候就要进行 302 跳转，而使用301 跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。\n\n清晰明确而言：使用 301 跳转的大概场景如下：\n\n- 域名到期不想续费（或者发现了更适合网站的域名），想换个域名\n- 在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个\n- 空间服务器不稳定，换空间的时候\n\n### 浏览器跟踪重定向地址\n\n现在浏览器知道了 “http://www.google.com/” 才是要访问的正确地址，所以它会发送另一个http请求。\n\n### 服务器处理请求\n\n#### 数据的接收\n\n我们知道，IP 协议的作用是把 TCP 分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的 MAC 地址，也就是物理地址。IP 地址和 MAC 地址是一一对应的关系，一个网络设备的 IP 地址可以更换，但是 MAC 地址一般是固定不变的。ARP 协议可以将 IP 地址解析成对应的 MAC 地址。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n在找到对方的 MAC 地址后，就将数据发送到数据链路层传输。接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n#### 处理请求\n\n一些大一点的网站会将你的请求转到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过 HTTP 协议访问某网站应用服务器，而是先请求到 Nginx，Nginx 再请求应用服务器，然后将结果返回给客户端，这里 Nginx 的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。\n\n- 用户将 HTTP 请求发送给 Nginx 服务器；\n- Nginx 会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；\n- Nginx 会通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；\n- fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；\n- Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；\n- PHP 会将查询到的结果返回给 Nginx ；\n- Nginx 构造一个响应报文将结果返回给用户。\n\n### 返回HTTP响应\n\nHTTP 响应与 HTTP 请求相似，HTTP 响应也由3个部分构成，分别是：状态行、响应头、响应正文\n\n#### 状态行\n\n状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。\n\n格式:    HTTP-Version Status-Code Reason-Phrase CRLF\n\n例如:    HTTP/1.1 200 OK\n\n#### 响应头\n\n![2017-6-22 143353](/images/2017-6-22 143353.png)\n\n![2017-6-22 143420](/images/2017-6-22 143420.png)\n\n#### 响应正文\n\n服务器返回给浏览器的文本信息，通常 HTML、CSS、JS, 图片等文件就放在这一部分。\n\n### 页面渲染\n\n在浏览器没有完整接受全部 HTML 文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍 WebKit 的渲染过程，下图对应的就是 WebKit 渲染的过程，这个过程包括：\n\n解析 HTML 以构建 DOM 树 -> 构建 Render 树 -> 布局 Render 树 -> 绘制 Render 树\n\n![2017-6-22 143824](/images/2017-6-22 143824.png)\n\n浏览器在解析 HTML 文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的 CSS、iconfont 等，请求过程是异步的，并不会影响 HTML 文档进行加载。\n\n解析过程中，浏览器首先会解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念：reflow(回流)和 repain(重绘)。\n\nDOM 节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow；当盒模型的位置、大小以及其他属性，如颜色、字体等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n\n页面在首次加载时必然会经历 reflow 和 repain。reflow 和 repain 过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少 reflow 和 repain。\n\n![2017-6-22 144024](/images/2017-6-22 144024.png)\n\n当文档加载过程中遇到 JS 文件，HTML 文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中 JS 文件加载完毕，还要等待解析执行完毕，才可以恢复 HTML 文档的渲染线程。因为 JS 有可能会修改DOM，最为经典的document.write，这意味着，在 JS 执行完成前，后续所有资源的下载可能是没有必要的，这是 JS 阻塞后续资源下载的根本原因。所以我明平时的代码中， JS 是放在 HTML 文档末尾的。\n\nJS 的解析是由浏览器中的 JS 解析引擎完成的，比如谷歌的是V8。 JS 是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。\n\nJS 的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。\n\n在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n\n\n\n\n> 参考文章：\n>\n> [从输入URL到浏览器显示页面发生了什么](http://www.cnblogs.com/kongxy/p/4615226.html)  [从输入 URL 到页面展示到底发生了什么](https://www.feehi.com/view/5880)  [百度面试题：从输入url到显示网页，后台发生了什么？](http://www.cnblogs.com/rollenholt/archive/2012/03/23/2414345.html)  [从输入URL到页面加载发生了什么?](http://www.cnblogs.com/engeng/articles/5943382.html)  [HTTP 响应头信息](http://www.runoob.com/http/http-header-fields.html)  ","source":"_posts/urlrequestprocess.md","raw":"---\ntitle: 从输入 URL 到页面展示到底发生了什么\ndate: 2017-06-22 11:23:07\ntags:\n - HTTP\n - TCP/IP\n - 网络编程\n - Web\ncategories:\n - Web\n---\n\n当我们在浏览器中输入 `www.google.com` 后，浏览器会给我们展示最终页面，本文就来讨论一下展示页面的过程到底是怎样的。\n\n### 输入网络地址\n\n当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 URL 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 URL，然后给出智能提示，让你可以补全 URL 地址。对于 google 的 Chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 Enter，页面就出来了。\n\n### DNS解析获取域名IP地址\n\n请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 IP 地址。\n\n如果在本地的 hosts 文件没有能够找到对应的 IP 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器 。本地 DNS 服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。\n\n查询你输入的网址的 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。\n\n根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。\n\n本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。\n\n最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。\n\n![2017-6-22 134442](/images/2017-6-22 134442.png)\n\n#### DNS缓存\n\nDNS 存在着多级缓存，从离浏览器的距离排序的话，有以下几种：浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。\n\n- 在你的 Chrome 浏览器中输入 chrome://dns/，你可以看到 Chrome 浏览器的 DNS 缓存\n- 系统缓存主要存在 /etc/hosts 中\n\n#### DNS负载均衡\n\n当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会宕掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询时，DNS 服务器对每个查询将以 DNS 文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。\n\n### 建立TCP连接\n\n获取域名对应的 IP 地址之后，浏览器会以一个随机端口，进入到网卡，然后是进入到内核的 TCP/IP 协议栈，还有可能要经过 NetFilter 防火墙（属于内核的模块）的过滤，最终到达 Web 程序，最终建立了 TCP/IP 的连接。\n\n因为 HTTP 报文是包裹在 TCP 报文中发送的，在发送 HTTP 请求之前需要客户端与服务器进行 TCP 连接以保证数据的正确稳定传输。TCP/IP协议可以参考 [TCP/IP协议入门篇](https://runnerliu.github.io/2017/04/03/tcpip/) \n\n### 发送HTTP请求\n\n发送 HTTP 请求的过程就是构建 HTTP 请求报文并通过 TCP 协议中发送到服务器指定端口(HTTP 协议80/8080, HTTPS 协议443)。HTTP 请求报文是由三部分组成：请求行, 请求报头和请求正文。\n\n#### 请求行\n\n格式如下:\nMethod Request-URL HTTP-Version CRLF\n\neg：GET index.html HTTP/1.1\n常用的方法有：GET、POST、PUT、DELETE、OPTIONS、HEAD。\n\n#### 请求报头\n\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。\n\n客户端不一定特指浏览器，有时候也可使用 Linux 下的 CURL 命令以及 HTTP 客户端测试工具等。\n常见的请求报头有：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Type、Authorization、Cookie、User-Agent等。\n\n#### 请求正文\n\n当使用POST、PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如：现在的 Web 应用通常采用 Rest 架构，请求的数据格式一般为 JSON。这时就需要设置Content-Type:application/json。\n\n### 服务器永久重定向响应\n\n服务器给浏览器响应一个 301 永久重定向响应，这样浏览器就会访问 “http://www.google.com/”  而非 “http://google.com/”。\n\n为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像 http://www.yy.com/ 和 http://yy.com/ ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道 301 永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。\n\n#### 301和302的区别\n\n301 和 302 状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址 A 瞬间变成了另一个地址 B）——这是它们的共同点。\n\n他们的不同在于。301 表示旧地址 A 的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；\n\n302 表示旧地址 A 的资源还在（仍然可以访问），这个重定向只是临时地从旧地址 A 跳转到地址 B，搜索引擎会抓取新的内容而保存旧的网址。\n\n#### 重定向原因\n\n- 网站调整（如改变网页目录结构）；\n- 网页被移到一个新地址；\n- 网页扩展名改变(如应用需要把 .php 改成 .Html 或 .shtml )。\n\n这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个 404 页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。\n\n#### 跳转的时机\n\n当一个网站或者网页 24-48 小时内临时移动到一个新的位置，这时候就要进行 302 跳转，而使用301 跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。\n\n清晰明确而言：使用 301 跳转的大概场景如下：\n\n- 域名到期不想续费（或者发现了更适合网站的域名），想换个域名\n- 在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个\n- 空间服务器不稳定，换空间的时候\n\n### 浏览器跟踪重定向地址\n\n现在浏览器知道了 “http://www.google.com/” 才是要访问的正确地址，所以它会发送另一个http请求。\n\n### 服务器处理请求\n\n#### 数据的接收\n\n我们知道，IP 协议的作用是把 TCP 分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的 MAC 地址，也就是物理地址。IP 地址和 MAC 地址是一一对应的关系，一个网络设备的 IP 地址可以更换，但是 MAC 地址一般是固定不变的。ARP 协议可以将 IP 地址解析成对应的 MAC 地址。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n在找到对方的 MAC 地址后，就将数据发送到数据链路层传输。接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n#### 处理请求\n\n一些大一点的网站会将你的请求转到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过 HTTP 协议访问某网站应用服务器，而是先请求到 Nginx，Nginx 再请求应用服务器，然后将结果返回给客户端，这里 Nginx 的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。\n\n- 用户将 HTTP 请求发送给 Nginx 服务器；\n- Nginx 会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；\n- Nginx 会通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；\n- fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；\n- Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；\n- PHP 会将查询到的结果返回给 Nginx ；\n- Nginx 构造一个响应报文将结果返回给用户。\n\n### 返回HTTP响应\n\nHTTP 响应与 HTTP 请求相似，HTTP 响应也由3个部分构成，分别是：状态行、响应头、响应正文\n\n#### 状态行\n\n状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。\n\n格式:    HTTP-Version Status-Code Reason-Phrase CRLF\n\n例如:    HTTP/1.1 200 OK\n\n#### 响应头\n\n![2017-6-22 143353](/images/2017-6-22 143353.png)\n\n![2017-6-22 143420](/images/2017-6-22 143420.png)\n\n#### 响应正文\n\n服务器返回给浏览器的文本信息，通常 HTML、CSS、JS, 图片等文件就放在这一部分。\n\n### 页面渲染\n\n在浏览器没有完整接受全部 HTML 文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍 WebKit 的渲染过程，下图对应的就是 WebKit 渲染的过程，这个过程包括：\n\n解析 HTML 以构建 DOM 树 -> 构建 Render 树 -> 布局 Render 树 -> 绘制 Render 树\n\n![2017-6-22 143824](/images/2017-6-22 143824.png)\n\n浏览器在解析 HTML 文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的 CSS、iconfont 等，请求过程是异步的，并不会影响 HTML 文档进行加载。\n\n解析过程中，浏览器首先会解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念：reflow(回流)和 repain(重绘)。\n\nDOM 节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow；当盒模型的位置、大小以及其他属性，如颜色、字体等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n\n页面在首次加载时必然会经历 reflow 和 repain。reflow 和 repain 过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少 reflow 和 repain。\n\n![2017-6-22 144024](/images/2017-6-22 144024.png)\n\n当文档加载过程中遇到 JS 文件，HTML 文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中 JS 文件加载完毕，还要等待解析执行完毕，才可以恢复 HTML 文档的渲染线程。因为 JS 有可能会修改DOM，最为经典的document.write，这意味着，在 JS 执行完成前，后续所有资源的下载可能是没有必要的，这是 JS 阻塞后续资源下载的根本原因。所以我明平时的代码中， JS 是放在 HTML 文档末尾的。\n\nJS 的解析是由浏览器中的 JS 解析引擎完成的，比如谷歌的是V8。 JS 是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。\n\nJS 的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。\n\n在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n\n\n\n\n> 参考文章：\n>\n> [从输入URL到浏览器显示页面发生了什么](http://www.cnblogs.com/kongxy/p/4615226.html)  [从输入 URL 到页面展示到底发生了什么](https://www.feehi.com/view/5880)  [百度面试题：从输入url到显示网页，后台发生了什么？](http://www.cnblogs.com/rollenholt/archive/2012/03/23/2414345.html)  [从输入URL到页面加载发生了什么?](http://www.cnblogs.com/engeng/articles/5943382.html)  [HTTP 响应头信息](http://www.runoob.com/http/http-header-fields.html)  ","slug":"urlrequestprocess","published":1,"updated":"2020-10-25T06:43:32.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq7e00admolcficada4v","content":"<p>当我们在浏览器中输入 <code>www.google.com</code> 后，浏览器会给我们展示最终页面，本文就来讨论一下展示页面的过程到底是怎样的。</p>\n<h3 id=\"输入网络地址\"><a href=\"#输入网络地址\" class=\"headerlink\" title=\"输入网络地址\"></a>输入网络地址</h3><p>当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 URL 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 URL，然后给出智能提示，让你可以补全 URL 地址。对于 google 的 Chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 Enter，页面就出来了。</p>\n<h3 id=\"DNS解析获取域名IP地址\"><a href=\"#DNS解析获取域名IP地址\" class=\"headerlink\" title=\"DNS解析获取域名IP地址\"></a>DNS解析获取域名IP地址</h3><p>请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 IP 地址。</p>\n<p>如果在本地的 hosts 文件没有能够找到对应的 IP 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器 。本地 DNS 服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</p>\n<p>查询你输入的网址的 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。</p>\n<p>根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</p>\n<p>本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。</p>\n<p>最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p>\n<p><img src=\"/images/2017-6-22 134442.png\" alt=\"2017-6-22 134442\"></p>\n<h4 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h4><p>DNS 存在着多级缓存，从离浏览器的距离排序的话，有以下几种：浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>\n<ul>\n<li>在你的 Chrome 浏览器中输入 chrome://dns/，你可以看到 Chrome 浏览器的 DNS 缓存</li>\n<li>系统缓存主要存在 /etc/hosts 中</li>\n</ul>\n<h4 id=\"DNS负载均衡\"><a href=\"#DNS负载均衡\" class=\"headerlink\" title=\"DNS负载均衡\"></a>DNS负载均衡</h4><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会宕掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询时，DNS 服务器对每个查询将以 DNS 文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p>\n<h3 id=\"建立TCP连接\"><a href=\"#建立TCP连接\" class=\"headerlink\" title=\"建立TCP连接\"></a>建立TCP连接</h3><p>获取域名对应的 IP 地址之后，浏览器会以一个随机端口，进入到网卡，然后是进入到内核的 TCP/IP 协议栈，还有可能要经过 NetFilter 防火墙（属于内核的模块）的过滤，最终到达 Web 程序，最终建立了 TCP/IP 的连接。</p>\n<p>因为 HTTP 报文是包裹在 TCP 报文中发送的，在发送 HTTP 请求之前需要客户端与服务器进行 TCP 连接以保证数据的正确稳定传输。TCP/IP协议可以参考 <a href=\"https://runnerliu.github.io/2017/04/03/tcpip/\">TCP/IP协议入门篇</a> </p>\n<h3 id=\"发送HTTP请求\"><a href=\"#发送HTTP请求\" class=\"headerlink\" title=\"发送HTTP请求\"></a>发送HTTP请求</h3><p>发送 HTTP 请求的过程就是构建 HTTP 请求报文并通过 TCP 协议中发送到服务器指定端口(HTTP 协议80/8080, HTTPS 协议443)。HTTP 请求报文是由三部分组成：请求行, 请求报头和请求正文。</p>\n<h4 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h4><p>格式如下:<br>Method Request-URL HTTP-Version CRLF</p>\n<p>eg：GET index.html HTTP/1.1<br>常用的方法有：GET、POST、PUT、DELETE、OPTIONS、HEAD。</p>\n<h4 id=\"请求报头\"><a href=\"#请求报头\" class=\"headerlink\" title=\"请求报头\"></a>请求报头</h4><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。</p>\n<p>客户端不一定特指浏览器，有时候也可使用 Linux 下的 CURL 命令以及 HTTP 客户端测试工具等。<br>常见的请求报头有：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Type、Authorization、Cookie、User-Agent等。</p>\n<h4 id=\"请求正文\"><a href=\"#请求正文\" class=\"headerlink\" title=\"请求正文\"></a>请求正文</h4><p>当使用POST、PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如：现在的 Web 应用通常采用 Rest 架构，请求的数据格式一般为 JSON。这时就需要设置Content-Type:application/json。</p>\n<h3 id=\"服务器永久重定向响应\"><a href=\"#服务器永久重定向响应\" class=\"headerlink\" title=\"服务器永久重定向响应\"></a>服务器永久重定向响应</h3><p>服务器给浏览器响应一个 301 永久重定向响应，这样浏览器就会访问 “<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"noopener\">http://www.google.com/”</a>  而非 “<a href=\"http://google.com/”。\" target=\"_blank\" rel=\"noopener\">http://google.com/”。</a></p>\n<p>为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像 <a href=\"http://www.yy.com/\" target=\"_blank\" rel=\"noopener\">http://www.yy.com/</a> 和 <a href=\"http://yy.com/\" target=\"_blank\" rel=\"noopener\">http://yy.com/</a> ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道 301 永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p>\n<h4 id=\"301和302的区别\"><a href=\"#301和302的区别\" class=\"headerlink\" title=\"301和302的区别\"></a>301和302的区别</h4><p>301 和 302 状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址 A 瞬间变成了另一个地址 B）——这是它们的共同点。</p>\n<p>他们的不同在于。301 表示旧地址 A 的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；</p>\n<p>302 表示旧地址 A 的资源还在（仍然可以访问），这个重定向只是临时地从旧地址 A 跳转到地址 B，搜索引擎会抓取新的内容而保存旧的网址。</p>\n<h4 id=\"重定向原因\"><a href=\"#重定向原因\" class=\"headerlink\" title=\"重定向原因\"></a>重定向原因</h4><ul>\n<li>网站调整（如改变网页目录结构）；</li>\n<li>网页被移到一个新地址；</li>\n<li>网页扩展名改变(如应用需要把 .php 改成 .Html 或 .shtml )。</li>\n</ul>\n<p>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个 404 页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p>\n<h4 id=\"跳转的时机\"><a href=\"#跳转的时机\" class=\"headerlink\" title=\"跳转的时机\"></a>跳转的时机</h4><p>当一个网站或者网页 24-48 小时内临时移动到一个新的位置，这时候就要进行 302 跳转，而使用301 跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。</p>\n<p>清晰明确而言：使用 301 跳转的大概场景如下：</p>\n<ul>\n<li>域名到期不想续费（或者发现了更适合网站的域名），想换个域名</li>\n<li>在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个</li>\n<li>空间服务器不稳定，换空间的时候</li>\n</ul>\n<h3 id=\"浏览器跟踪重定向地址\"><a href=\"#浏览器跟踪重定向地址\" class=\"headerlink\" title=\"浏览器跟踪重定向地址\"></a>浏览器跟踪重定向地址</h3><p>现在浏览器知道了 “<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"noopener\">http://www.google.com/”</a> 才是要访问的正确地址，所以它会发送另一个http请求。</p>\n<h3 id=\"服务器处理请求\"><a href=\"#服务器处理请求\" class=\"headerlink\" title=\"服务器处理请求\"></a>服务器处理请求</h3><h4 id=\"数据的接收\"><a href=\"#数据的接收\" class=\"headerlink\" title=\"数据的接收\"></a>数据的接收</h4><p>我们知道，IP 协议的作用是把 TCP 分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的 MAC 地址，也就是物理地址。IP 地址和 MAC 地址是一一对应的关系，一个网络设备的 IP 地址可以更换，但是 MAC 地址一般是固定不变的。ARP 协议可以将 IP 地址解析成对应的 MAC 地址。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</p>\n<p>在找到对方的 MAC 地址后，就将数据发送到数据链路层传输。接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</p>\n<h4 id=\"处理请求\"><a href=\"#处理请求\" class=\"headerlink\" title=\"处理请求\"></a>处理请求</h4><p>一些大一点的网站会将你的请求转到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过 HTTP 协议访问某网站应用服务器，而是先请求到 Nginx，Nginx 再请求应用服务器，然后将结果返回给客户端，这里 Nginx 的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>\n<ul>\n<li>用户将 HTTP 请求发送给 Nginx 服务器；</li>\n<li>Nginx 会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；</li>\n<li>Nginx 会通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；</li>\n<li>fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；</li>\n<li>Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；</li>\n<li>PHP 会将查询到的结果返回给 Nginx ；</li>\n<li>Nginx 构造一个响应报文将结果返回给用户。</li>\n</ul>\n<h3 id=\"返回HTTP响应\"><a href=\"#返回HTTP响应\" class=\"headerlink\" title=\"返回HTTP响应\"></a>返回HTTP响应</h3><p>HTTP 响应与 HTTP 请求相似，HTTP 响应也由3个部分构成，分别是：状态行、响应头、响应正文</p>\n<h4 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h4><p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>\n<p>格式:    HTTP-Version Status-Code Reason-Phrase CRLF</p>\n<p>例如:    HTTP/1.1 200 OK</p>\n<h4 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h4><p><img src=\"/images/2017-6-22 143353.png\" alt=\"2017-6-22 143353\"></p>\n<p><img src=\"/images/2017-6-22 143420.png\" alt=\"2017-6-22 143420\"></p>\n<h4 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h4><p>服务器返回给浏览器的文本信息，通常 HTML、CSS、JS, 图片等文件就放在这一部分。</p>\n<h3 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h3><p>在浏览器没有完整接受全部 HTML 文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍 WebKit 的渲染过程，下图对应的就是 WebKit 渲染的过程，这个过程包括：</p>\n<p>解析 HTML 以构建 DOM 树 -&gt; 构建 Render 树 -&gt; 布局 Render 树 -&gt; 绘制 Render 树</p>\n<p><img src=\"/images/2017-6-22 143824.png\" alt=\"2017-6-22 143824\"></p>\n<p>浏览器在解析 HTML 文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的 CSS、iconfont 等，请求过程是异步的，并不会影响 HTML 文档进行加载。</p>\n<p>解析过程中，浏览器首先会解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念：reflow(回流)和 repain(重绘)。</p>\n<p>DOM 节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow；当盒模型的位置、大小以及其他属性，如颜色、字体等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</p>\n<p>页面在首次加载时必然会经历 reflow 和 repain。reflow 和 repain 过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少 reflow 和 repain。</p>\n<p><img src=\"/images/2017-6-22 144024.png\" alt=\"2017-6-22 144024\"></p>\n<p>当文档加载过程中遇到 JS 文件，HTML 文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中 JS 文件加载完毕，还要等待解析执行完毕，才可以恢复 HTML 文档的渲染线程。因为 JS 有可能会修改DOM，最为经典的document.write，这意味着，在 JS 执行完成前，后续所有资源的下载可能是没有必要的，这是 JS 阻塞后续资源下载的根本原因。所以我明平时的代码中， JS 是放在 HTML 文档末尾的。</p>\n<p>JS 的解析是由浏览器中的 JS 解析引擎完成的，比如谷歌的是V8。 JS 是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。</p>\n<p>JS 的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p>\n<p>在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/kongxy/p/4615226.html\" target=\"_blank\" rel=\"noopener\">从输入URL到浏览器显示页面发生了什么</a>  <a href=\"https://www.feehi.com/view/5880\" target=\"_blank\" rel=\"noopener\">从输入 URL 到页面展示到底发生了什么</a>  <a href=\"http://www.cnblogs.com/rollenholt/archive/2012/03/23/2414345.html\" target=\"_blank\" rel=\"noopener\">百度面试题：从输入url到显示网页，后台发生了什么？</a>  <a href=\"http://www.cnblogs.com/engeng/articles/5943382.html\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载发生了什么?</a>  <a href=\"http://www.runoob.com/http/http-header-fields.html\" target=\"_blank\" rel=\"noopener\">HTTP 响应头信息</a>  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>当我们在浏览器中输入 <code>www.google.com</code> 后，浏览器会给我们展示最终页面，本文就来讨论一下展示页面的过程到底是怎样的。</p>\n<h3 id=\"输入网络地址\"><a href=\"#输入网络地址\" class=\"headerlink\" title=\"输入网络地址\"></a>输入网络地址</h3><p>当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 URL 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 URL，然后给出智能提示，让你可以补全 URL 地址。对于 google 的 Chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 Enter，页面就出来了。</p>\n<h3 id=\"DNS解析获取域名IP地址\"><a href=\"#DNS解析获取域名IP地址\" class=\"headerlink\" title=\"DNS解析获取域名IP地址\"></a>DNS解析获取域名IP地址</h3><p>请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 IP 地址。</p>\n<p>如果在本地的 hosts 文件没有能够找到对应的 IP 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器 。本地 DNS 服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</p>\n<p>查询你输入的网址的 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。</p>\n<p>根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</p>\n<p>本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。</p>\n<p>最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p>\n<p><img src=\"/images/2017-6-22 134442.png\" alt=\"2017-6-22 134442\"></p>\n<h4 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h4><p>DNS 存在着多级缓存，从离浏览器的距离排序的话，有以下几种：浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>\n<ul>\n<li>在你的 Chrome 浏览器中输入 chrome://dns/，你可以看到 Chrome 浏览器的 DNS 缓存</li>\n<li>系统缓存主要存在 /etc/hosts 中</li>\n</ul>\n<h4 id=\"DNS负载均衡\"><a href=\"#DNS负载均衡\" class=\"headerlink\" title=\"DNS负载均衡\"></a>DNS负载均衡</h4><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会宕掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询时，DNS 服务器对每个查询将以 DNS 文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p>\n<h3 id=\"建立TCP连接\"><a href=\"#建立TCP连接\" class=\"headerlink\" title=\"建立TCP连接\"></a>建立TCP连接</h3><p>获取域名对应的 IP 地址之后，浏览器会以一个随机端口，进入到网卡，然后是进入到内核的 TCP/IP 协议栈，还有可能要经过 NetFilter 防火墙（属于内核的模块）的过滤，最终到达 Web 程序，最终建立了 TCP/IP 的连接。</p>\n<p>因为 HTTP 报文是包裹在 TCP 报文中发送的，在发送 HTTP 请求之前需要客户端与服务器进行 TCP 连接以保证数据的正确稳定传输。TCP/IP协议可以参考 <a href=\"https://runnerliu.github.io/2017/04/03/tcpip/\">TCP/IP协议入门篇</a> </p>\n<h3 id=\"发送HTTP请求\"><a href=\"#发送HTTP请求\" class=\"headerlink\" title=\"发送HTTP请求\"></a>发送HTTP请求</h3><p>发送 HTTP 请求的过程就是构建 HTTP 请求报文并通过 TCP 协议中发送到服务器指定端口(HTTP 协议80/8080, HTTPS 协议443)。HTTP 请求报文是由三部分组成：请求行, 请求报头和请求正文。</p>\n<h4 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h4><p>格式如下:<br>Method Request-URL HTTP-Version CRLF</p>\n<p>eg：GET index.html HTTP/1.1<br>常用的方法有：GET、POST、PUT、DELETE、OPTIONS、HEAD。</p>\n<h4 id=\"请求报头\"><a href=\"#请求报头\" class=\"headerlink\" title=\"请求报头\"></a>请求报头</h4><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。</p>\n<p>客户端不一定特指浏览器，有时候也可使用 Linux 下的 CURL 命令以及 HTTP 客户端测试工具等。<br>常见的请求报头有：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Type、Authorization、Cookie、User-Agent等。</p>\n<h4 id=\"请求正文\"><a href=\"#请求正文\" class=\"headerlink\" title=\"请求正文\"></a>请求正文</h4><p>当使用POST、PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如：现在的 Web 应用通常采用 Rest 架构，请求的数据格式一般为 JSON。这时就需要设置Content-Type:application/json。</p>\n<h3 id=\"服务器永久重定向响应\"><a href=\"#服务器永久重定向响应\" class=\"headerlink\" title=\"服务器永久重定向响应\"></a>服务器永久重定向响应</h3><p>服务器给浏览器响应一个 301 永久重定向响应，这样浏览器就会访问 “<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"noopener\">http://www.google.com/”</a>  而非 “<a href=\"http://google.com/”。\" target=\"_blank\" rel=\"noopener\">http://google.com/”。</a></p>\n<p>为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像 <a href=\"http://www.yy.com/\" target=\"_blank\" rel=\"noopener\">http://www.yy.com/</a> 和 <a href=\"http://yy.com/\" target=\"_blank\" rel=\"noopener\">http://yy.com/</a> ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道 301 永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p>\n<h4 id=\"301和302的区别\"><a href=\"#301和302的区别\" class=\"headerlink\" title=\"301和302的区别\"></a>301和302的区别</h4><p>301 和 302 状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址 A 瞬间变成了另一个地址 B）——这是它们的共同点。</p>\n<p>他们的不同在于。301 表示旧地址 A 的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；</p>\n<p>302 表示旧地址 A 的资源还在（仍然可以访问），这个重定向只是临时地从旧地址 A 跳转到地址 B，搜索引擎会抓取新的内容而保存旧的网址。</p>\n<h4 id=\"重定向原因\"><a href=\"#重定向原因\" class=\"headerlink\" title=\"重定向原因\"></a>重定向原因</h4><ul>\n<li>网站调整（如改变网页目录结构）；</li>\n<li>网页被移到一个新地址；</li>\n<li>网页扩展名改变(如应用需要把 .php 改成 .Html 或 .shtml )。</li>\n</ul>\n<p>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个 404 页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p>\n<h4 id=\"跳转的时机\"><a href=\"#跳转的时机\" class=\"headerlink\" title=\"跳转的时机\"></a>跳转的时机</h4><p>当一个网站或者网页 24-48 小时内临时移动到一个新的位置，这时候就要进行 302 跳转，而使用301 跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。</p>\n<p>清晰明确而言：使用 301 跳转的大概场景如下：</p>\n<ul>\n<li>域名到期不想续费（或者发现了更适合网站的域名），想换个域名</li>\n<li>在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个</li>\n<li>空间服务器不稳定，换空间的时候</li>\n</ul>\n<h3 id=\"浏览器跟踪重定向地址\"><a href=\"#浏览器跟踪重定向地址\" class=\"headerlink\" title=\"浏览器跟踪重定向地址\"></a>浏览器跟踪重定向地址</h3><p>现在浏览器知道了 “<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"noopener\">http://www.google.com/”</a> 才是要访问的正确地址，所以它会发送另一个http请求。</p>\n<h3 id=\"服务器处理请求\"><a href=\"#服务器处理请求\" class=\"headerlink\" title=\"服务器处理请求\"></a>服务器处理请求</h3><h4 id=\"数据的接收\"><a href=\"#数据的接收\" class=\"headerlink\" title=\"数据的接收\"></a>数据的接收</h4><p>我们知道，IP 协议的作用是把 TCP 分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的 MAC 地址，也就是物理地址。IP 地址和 MAC 地址是一一对应的关系，一个网络设备的 IP 地址可以更换，但是 MAC 地址一般是固定不变的。ARP 协议可以将 IP 地址解析成对应的 MAC 地址。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</p>\n<p>在找到对方的 MAC 地址后，就将数据发送到数据链路层传输。接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</p>\n<h4 id=\"处理请求\"><a href=\"#处理请求\" class=\"headerlink\" title=\"处理请求\"></a>处理请求</h4><p>一些大一点的网站会将你的请求转到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过 HTTP 协议访问某网站应用服务器，而是先请求到 Nginx，Nginx 再请求应用服务器，然后将结果返回给客户端，这里 Nginx 的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>\n<ul>\n<li>用户将 HTTP 请求发送给 Nginx 服务器；</li>\n<li>Nginx 会根据用户访问的 URL 和后缀对请求进行判断，如果请求的是静态资源（HTML页面）会直接返回，如果请求的是动态资源，执行下一步；</li>\n<li>Nginx 会通过 fastcgi_pass 将用户的请求发送给 PHP-FPM；</li>\n<li>fastcgi_pass 将动态资源交给 PHP-FPM 后，PHP-FPM 会将资源转给 PHP 脚本解析服务器的 Wrapper；</li>\n<li>Wrapper 收到 PHP-FPM 转过来的请求后，Wrapper 会生成一个新的线程调用 PHP 动态程序解析服务器；</li>\n<li>PHP 会将查询到的结果返回给 Nginx ；</li>\n<li>Nginx 构造一个响应报文将结果返回给用户。</li>\n</ul>\n<h3 id=\"返回HTTP响应\"><a href=\"#返回HTTP响应\" class=\"headerlink\" title=\"返回HTTP响应\"></a>返回HTTP响应</h3><p>HTTP 响应与 HTTP 请求相似，HTTP 响应也由3个部分构成，分别是：状态行、响应头、响应正文</p>\n<h4 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h4><p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>\n<p>格式:    HTTP-Version Status-Code Reason-Phrase CRLF</p>\n<p>例如:    HTTP/1.1 200 OK</p>\n<h4 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h4><p><img src=\"/images/2017-6-22 143353.png\" alt=\"2017-6-22 143353\"></p>\n<p><img src=\"/images/2017-6-22 143420.png\" alt=\"2017-6-22 143420\"></p>\n<h4 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h4><p>服务器返回给浏览器的文本信息，通常 HTML、CSS、JS, 图片等文件就放在这一部分。</p>\n<h3 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h3><p>在浏览器没有完整接受全部 HTML 文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍 WebKit 的渲染过程，下图对应的就是 WebKit 渲染的过程，这个过程包括：</p>\n<p>解析 HTML 以构建 DOM 树 -&gt; 构建 Render 树 -&gt; 布局 Render 树 -&gt; 绘制 Render 树</p>\n<p><img src=\"/images/2017-6-22 143824.png\" alt=\"2017-6-22 143824\"></p>\n<p>浏览器在解析 HTML 文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的 CSS、iconfont 等，请求过程是异步的，并不会影响 HTML 文档进行加载。</p>\n<p>解析过程中，浏览器首先会解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念：reflow(回流)和 repain(重绘)。</p>\n<p>DOM 节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow；当盒模型的位置、大小以及其他属性，如颜色、字体等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</p>\n<p>页面在首次加载时必然会经历 reflow 和 repain。reflow 和 repain 过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少 reflow 和 repain。</p>\n<p><img src=\"/images/2017-6-22 144024.png\" alt=\"2017-6-22 144024\"></p>\n<p>当文档加载过程中遇到 JS 文件，HTML 文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中 JS 文件加载完毕，还要等待解析执行完毕，才可以恢复 HTML 文档的渲染线程。因为 JS 有可能会修改DOM，最为经典的document.write，这意味着，在 JS 执行完成前，后续所有资源的下载可能是没有必要的，这是 JS 阻塞后续资源下载的根本原因。所以我明平时的代码中， JS 是放在 HTML 文档末尾的。</p>\n<p>JS 的解析是由浏览器中的 JS 解析引擎完成的，比如谷歌的是V8。 JS 是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。</p>\n<p>JS 的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p>\n<p>在浏览器还没接收到完整的 HTML 文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送 HTTP 请求重复上述的步骤。在收到 CSS 文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.cnblogs.com/kongxy/p/4615226.html\" target=\"_blank\" rel=\"noopener\">从输入URL到浏览器显示页面发生了什么</a>  <a href=\"https://www.feehi.com/view/5880\" target=\"_blank\" rel=\"noopener\">从输入 URL 到页面展示到底发生了什么</a>  <a href=\"http://www.cnblogs.com/rollenholt/archive/2012/03/23/2414345.html\" target=\"_blank\" rel=\"noopener\">百度面试题：从输入url到显示网页，后台发生了什么？</a>  <a href=\"http://www.cnblogs.com/engeng/articles/5943382.html\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载发生了什么?</a>  <a href=\"http://www.runoob.com/http/http-header-fields.html\" target=\"_blank\" rel=\"noopener\">HTTP 响应头信息</a>  </p>\n</blockquote>\n"},{"title":"Laravel学习笔记-Laravel5.3后台用户认证","date":"2017-05-05T10:54:35.000Z","_content":"\n### 简介\n\nLaravel 5.3 的 Auth 认证在 5.2 的基础上又有一些改变，本文说明如何在 Laravel 5.3 下做不同用户表的登录认证。\n\n### Auth 认证原理简述\n\nLaravel 的认证是使用 guard 与 provider 配合完成， guard 负责认证的业务逻辑，认证信息的服务端保存等； provider 负责提供认证信息的持久化数据提供。 \n请求提交给 guard， guard 从 provider 里取出数据（类似用户名、密码等），验证输入数据与服务器端存储的数据是否吻合。如果提交的数据正确，再做 session 等业务的处理（如有需要）。\n\n### 认证脚手架\n\n首先我们导入 Laravel 的自带的认证脚手架\n\n```\nphp artisan make:auth\n```\n\n执行数据库迁移\n\n```\nphp artisan migrate\n```\n\n修改 Auth 认证的配置文件 config/auth.php，在 gurads 处，添加 admin guard 用于后台管理员认证\n\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'admin' => [\n            'driver' => 'session',\n            'provider' => 'admins',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n        ],\n    ],\n```\n\n在 providers 处添加 admins provider，使用 Admin 模型\n\n```\n'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        'admins' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\Admin::class,\n        ],\n    ],\n```\n\n**注意：**本文将所有的 Model 都存放在 App\\Models\\ 目录下。\n\n### 创建后台管理员模型\n\n我们再创建一个 Admin 模型，用于后台管理员登录验证\n\n```\nphp artisan make:model Admin -m\n```\n\n> -m 参数会同时生成数据库迁移文件 xxxx_create_admins_table\n\n修改 app/Admin.php 模型文件\n\n```\n<?php\n\nnamespace App;\n\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass Admin extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'name', 'password',\n    ];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [\n        'password', 'remember_token',\n    ];\n}\n```\n\n编辑 xxxx_create_admins_table 文件，后台管理员模型结构与前台用户差不多，去掉 email 字段，name 字段设为 unique()，后台用户登录使用用户名、密码的形式，如果需要 email ，也可以不去掉。\n\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateAdminsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('admins', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name')->unique();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('admins');\n    }\n}\n```\n\n### 管理员模型填充数据\n\n定义一个数据模型工厂，在 database/factories/ModelFactory.php 中添加如下代码\n\n```\n$factory->define(App\\Admin::class, function (Faker\\Generator $faker) {\n    static $password;\n\n    return [\n        'name' => $faker->firstName,\n        'password' => $password ?: $password = bcrypt('secret'),\n        'remember_token' => str_random(10),\n    ];\n});\n```\n\n> 使用 Faker 随机填充用户名\n\n在 database/seeds 目录下生成 AdminsTableSeeder.php 文件\n\n```\nphp artisan make:seeder AdminsTableSeeder\n```\n\n编辑 database/seeds/AdminsTableSeeder.php 文件的 run 方法，添加3个管理员用户，密码为 123456\n\n```\npublic function run()\n    {\n        factory('App\\Admin', 3)->create([\n            'password' => bcrypt('123456')\n            ]);\n    }\n```\n\n在 database/seeds/DatabaseSeeder.php 的 run 方法里调用 AdminsTableSeeder 类\n\n```\npublic function run()\n    {\n        $this->call(AdminsTableSeeder::class);\n    }\n```\n\n执行数据库迁移命令\n\n```\nphp artisan migrate --seed\n```\n\n数据库里会创建 admins 表，并且生成了3条数据：\n\n| id   | name   | password        | remember_token | created_at          | updated_at          |\n| ---- | ------ | --------------- | -------------- | ------------------- | ------------------- |\n| 1    | John   | $2y$10$AYD4MoW… | 9p7bycJ5Wn     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n| 2    | Ransom | $2y$10$AYD4MoW… | Ct8W5nmTsg     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n| 3    | Dulce  | $2y$10$AYD4MoW… | I8RJpxwVrk     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n\n### 创建后台页面\n\n#### 创建控制器\n\n```\nphp artisan make:controller Admin/LoginController    \nphp artisan make:controller Admin/IndexController\n```\n\n其中， Admin/LoginController 负责登录逻辑； Admin/IndexController 管理登录后的首页。\n\n编辑 Admin/LoginController.php\n\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n\nclass LoginController extends Controller\n{\n    /*\n    |--------------------------------------------------------------------------\n    | Login Controller\n    |--------------------------------------------------------------------------\n    |\n    | This controller handles authenticating users for the application and\n    | redirecting them to your home screen. The controller uses a trait\n    | to conveniently provide its functionality to your applications.\n    |\n    */\n\n    use AuthenticatesUsers;\n\n    /**\n     * Where to redirect users after login / registration.\n     *\n     * @var string\n     */\n    protected $redirectTo = '/admin';\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        $this->middleware('guest.admin', ['except' => 'logout']);\n    }\n\n    /**\n     * 显示后台登录模板\n     */\n    public function showLoginForm()\n    {\n        return view('admin.login');\n    }\n\n    /**\n     * 使用 admin guard\n     */\n    protected function guard()\n    {\n        return auth()->guard('admin');\n    }\n}\n```\n\n编辑 Admin/IndexController.php\n\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass IndexController extends Controller\n{\n    /**\n     * 显示后台管理模板首页\n     */\n    public function index()\n    {\n        return view('admin.index');\n    }\n}\n```\n\n#### 后台显示模板\n\n复制 views/layouts/app.blade.php 成 views/layouts/admin.blade.php。\n\n编辑后台管理布局模板\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <!-- CSRF Token -->\n    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n\n    <title>{{ config('app.name', 'Laravel') }} - Admin</title>\n\n    <!-- Styles -->\n    <link href=\"/css/app.css\" rel=\"stylesheet\">\n\n    <!-- Scripts -->\n    <script>\n        window.Laravel = <?php echo json_encode([\n            'csrfToken' => csrf_token(),\n        ]); ?>\n    </script>\n</head>\n<body>\n    <nav class=\"navbar navbar-default navbar-static-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n\n                <!-- Collapsed Hamburger -->\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#app-navbar-collapse\">\n                    <span class=\"sr-only\">Toggle Navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n\n                <!-- Branding Image -->\n                <a class=\"navbar-brand\" href=\"{{ url('/') }}\">\n                    {{ config('app.name', 'Laravel') }}\n                </a>\n            </div>\n\n            <div class=\"collapse navbar-collapse\" id=\"app-navbar-collapse\">\n                <!-- Left Side Of Navbar -->\n                <ul class=\"nav navbar-nav\">\n                    &nbsp;\n                </ul>\n\n                <!-- Right Side Of Navbar -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <!-- Authentication Links -->\n                    @if (auth()->guard('admin')->guest())\n                        <li><a href=\"{{ url('/admin/login') }}\">Login</a></li>\n                    @else\n                        <li class=\"dropdown\">\n                            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n                                {{ auth()->guard('admin')->user()->name }} <span class=\"caret\"></span>\n                            </a>\n\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li>\n                                    <a href=\"{{ url('/admin/logout') }}\"\n                                        onclick=\"event.preventDefault();\n                                                 document.getElementById('logout-form').submit();\">\n                                        Logout\n                                    </a>\n\n                                    <form id=\"logout-form\" action=\"{{ url('/admin/logout') }}\" method=\"POST\" style=\"display: none;\">\n                                        {{ csrf_field() }}\n                                    </form>\n                                </li>\n                            </ul>\n                        </li>\n                    @endif\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    @yield('content')\n\n    <!-- Scripts -->\n    <script src=\"/js/app.js\"></script>\n</body>\n</html>\n```\n\n复制 views/auth/login.blade.php 成 views/admin/login.blade.php。\n\n编辑该模板，更改布局文件为 layouts.admin， 把表单的提交 url 改为 admin/login，email 字段改成 name 字段，去掉找回密码的部分\n\n```\n@extends('layouts.admin')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Admin Login</div>\n                <div class=\"panel-body\">\n                    <form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/admin/login') }}\">\n                        {{ csrf_field() }}\n\n                        <div class=\"form-group{{ $errors->has('name') ? ' has-error' : '' }}\">\n                            <label for=\"name\" class=\"col-md-4 control-label\">Name</label>\n\n                            <div class=\"col-md-6\">\n                                <input id=\"name\" type=\"text\" class=\"form-control\" name=\"name\" value=\"{{ old('name') }}\" required autofocus>\n\n                                @if ($errors->has('name'))\n                                    <span class=\"help-block\">\n                                        <strong>{{ $errors->first('name') }}</strong>\n                                    </span>\n                                @endif\n                            </div>\n                        </div>\n\n                        <div class=\"form-group{{ $errors->has('password') ? ' has-error' : '' }}\">\n                            <label for=\"password\" class=\"col-md-4 control-label\">Password</label>\n\n                            <div class=\"col-md-6\">\n                                <input id=\"password\" type=\"password\" class=\"form-control\" name=\"password\" required>\n\n                                @if ($errors->has('password'))\n                                    <span class=\"help-block\">\n                                        <strong>{{ $errors->first('password') }}</strong>\n                                    </span>\n                                @endif\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <div class=\"col-md-6 col-md-offset-4\">\n                                <div class=\"checkbox\">\n                                    <label>\n                                        <input type=\"checkbox\" name=\"remember\"> Remember Me\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <div class=\"col-md-8 col-md-offset-4\">\n                                <button type=\"submit\" class=\"btn btn-primary\">\n                                    Login\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n```\n\n复制 views/home.blade.php 成 views/admins/index.blade.php。\n\n编辑该模板\n\n```\n@extends('layouts.admin')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Dashboard</div>\n\n                <div class=\"panel-body\">\n                    You are logged in admin dashboard!\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n```\n\n#### 添加后台路由\n\n编辑 routes/web.php， 添加以下内容\n\n```\nRoute::group(['prefix' => 'admin'], function () {\n    Route::group(['middleware' => 'auth.admin'], function () {\n        Route::get('/', 'Admin\\IndexController@index');\n    });\n\n    Route::get('login', 'Admin\\LoginController@showLoginForm')->name('admin.login');\n    Route::post('login', 'Admin\\LoginController@login');\n    Route::post('logout', 'Admin\\LoginController@logout');\n});\n```\n\n#### 后台管理认证中间件\n\n创建后台管理认证中间件\n\n```\nphp artisan make:middleware AuthAdmin\n```\n\n编辑 AuthAdmin\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass AuthAdmin\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if (auth()->guard('admin')->guest()) {\n            if ($request->ajax() || $request->wantsJson()) {\n                return response('Unauthorized.', 401);\n            } else {\n                return redirect()->guest('admin/login');\n            }\n        }\n\n        return $next($request);\n    }\n}\n```\n\n创建后台管理登录跳转中间件，用于有些操作在登录之后的跳转\n\n```\nphp artisan make:middleware GuestAdmin\n```\n\n编辑该中间件的 handle 方法\n\n```\npublic function handle($request, Closure $next)\n    {\n        if (auth()->guard('admin')->check()) {\n            return redirect('/admin');\n        }\n\n        return $next($request);\n    }\n```\n\n在 app/Http/Kernel.php 中注册以上中间件\n\n```\nprotected $routeMiddleware = [\n    ......\n    'auth.admin' => \\App\\Http\\Middleware\\AuthAdmin::class,\n    'guest.admin' => \\App\\Http\\Middleware\\GuestAdmin::class,\n    ......\n];\n```\n\n#### 处理注销\n\n经过上面的步骤，已经实现了前后台分离登录，但是不管是在前台注销，还是在后台注销，都销毁了所有的 session，导致前后台注销连在一起。所以我们还要对注销的方法处理一下。\n\n原来的 logout 方法是这样写的，在 Illuminate\\Foundation\\Auth\\AuthenticatesUsers 里\n\n```\npublic function logout(Request $request)\n    {\n        $this->guard()->logout();\n\n        $request->session()->flush();\n\n        $request->session()->regenerate();\n\n        return redirect('/');\n    }\n```\n\n注意这一句\n\n```\n$request->session()->flush();\n```\n\n将所有的 session 全部清除，这里不分前台、后台，所以要对这里进行改造。\n\n因为前台、后台注销都要修改，所以我们新建一个 trait，前后台都可以使用。\n\n新建一个文件 app/Extensions/AuthenticatesLogout.php **这里需要新建 Extensions 文件夹，在Laravel5.3中是没有这个文件夹的**\n\n```\n<?php\nnamespace App\\Extensions;\n\nuse Illuminate\\Http\\Request;\n\n\ntrait AuthenticatesLogout\n{\n    public function logout(Request $request)\n    {\n        $this->guard()->logout();\n\n        $request->session()->forget($this->guard()->getName());\n\n        $request->session()->regenerate();\n\n        return redirect('/');\n    }\n}\n```\n\n我们将\n\n```\n$request->session()->flush();\n```\n\n改成\n\n```\n$request->session()->forget($this->guard()->getName());\n```\n\n只是删除掉当前 guard 所创建的 session，这样就达到了分别注销的目的。\n\n修改 Auth/LoginController.php 和 Admin/LoginController.php，将\n\n```\nuse AuthenticatesUsers;\n```\n\n改掉，在文件的前面别忘了加上 use 语句\n\n```\nuse App\\Extensions\\AuthenticatesLogout;\n\n...\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, AuthenticatesLogout {\n        AuthenticatesLogout::logout insteadof AuthenticatesUsers;\n    }\n...\n```\n\n到这里，就完成了整个不同用户表登录认证的过程。\n\n\n\n> 参考文章：\n>\n> [Laravel 5.3 不同用户表登录认证](http://www.fullstack.pub/doc/1)","source":"_posts/laraveladminlogin.md","raw":"---\ntitle: Laravel学习笔记-Laravel5.3后台用户认证\ndate: 2017-05-05 18:54:35\ntags:\n - Laravel\n - 后台用户认证\ncategories:\n - Laravel\n---\n\n### 简介\n\nLaravel 5.3 的 Auth 认证在 5.2 的基础上又有一些改变，本文说明如何在 Laravel 5.3 下做不同用户表的登录认证。\n\n### Auth 认证原理简述\n\nLaravel 的认证是使用 guard 与 provider 配合完成， guard 负责认证的业务逻辑，认证信息的服务端保存等； provider 负责提供认证信息的持久化数据提供。 \n请求提交给 guard， guard 从 provider 里取出数据（类似用户名、密码等），验证输入数据与服务器端存储的数据是否吻合。如果提交的数据正确，再做 session 等业务的处理（如有需要）。\n\n### 认证脚手架\n\n首先我们导入 Laravel 的自带的认证脚手架\n\n```\nphp artisan make:auth\n```\n\n执行数据库迁移\n\n```\nphp artisan migrate\n```\n\n修改 Auth 认证的配置文件 config/auth.php，在 gurads 处，添加 admin guard 用于后台管理员认证\n\n```\n'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'admin' => [\n            'driver' => 'session',\n            'provider' => 'admins',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n        ],\n    ],\n```\n\n在 providers 处添加 admins provider，使用 Admin 模型\n\n```\n'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        'admins' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\Admin::class,\n        ],\n    ],\n```\n\n**注意：**本文将所有的 Model 都存放在 App\\Models\\ 目录下。\n\n### 创建后台管理员模型\n\n我们再创建一个 Admin 模型，用于后台管理员登录验证\n\n```\nphp artisan make:model Admin -m\n```\n\n> -m 参数会同时生成数据库迁移文件 xxxx_create_admins_table\n\n修改 app/Admin.php 模型文件\n\n```\n<?php\n\nnamespace App;\n\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass Admin extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'name', 'password',\n    ];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [\n        'password', 'remember_token',\n    ];\n}\n```\n\n编辑 xxxx_create_admins_table 文件，后台管理员模型结构与前台用户差不多，去掉 email 字段，name 字段设为 unique()，后台用户登录使用用户名、密码的形式，如果需要 email ，也可以不去掉。\n\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateAdminsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('admins', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name')->unique();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('admins');\n    }\n}\n```\n\n### 管理员模型填充数据\n\n定义一个数据模型工厂，在 database/factories/ModelFactory.php 中添加如下代码\n\n```\n$factory->define(App\\Admin::class, function (Faker\\Generator $faker) {\n    static $password;\n\n    return [\n        'name' => $faker->firstName,\n        'password' => $password ?: $password = bcrypt('secret'),\n        'remember_token' => str_random(10),\n    ];\n});\n```\n\n> 使用 Faker 随机填充用户名\n\n在 database/seeds 目录下生成 AdminsTableSeeder.php 文件\n\n```\nphp artisan make:seeder AdminsTableSeeder\n```\n\n编辑 database/seeds/AdminsTableSeeder.php 文件的 run 方法，添加3个管理员用户，密码为 123456\n\n```\npublic function run()\n    {\n        factory('App\\Admin', 3)->create([\n            'password' => bcrypt('123456')\n            ]);\n    }\n```\n\n在 database/seeds/DatabaseSeeder.php 的 run 方法里调用 AdminsTableSeeder 类\n\n```\npublic function run()\n    {\n        $this->call(AdminsTableSeeder::class);\n    }\n```\n\n执行数据库迁移命令\n\n```\nphp artisan migrate --seed\n```\n\n数据库里会创建 admins 表，并且生成了3条数据：\n\n| id   | name   | password        | remember_token | created_at          | updated_at          |\n| ---- | ------ | --------------- | -------------- | ------------------- | ------------------- |\n| 1    | John   | $2y$10$AYD4MoW… | 9p7bycJ5Wn     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n| 2    | Ransom | $2y$10$AYD4MoW… | Ct8W5nmTsg     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n| 3    | Dulce  | $2y$10$AYD4MoW… | I8RJpxwVrk     | 2017-05-05 15:12:37 | 2017-05-05 15:12:37 |\n\n### 创建后台页面\n\n#### 创建控制器\n\n```\nphp artisan make:controller Admin/LoginController    \nphp artisan make:controller Admin/IndexController\n```\n\n其中， Admin/LoginController 负责登录逻辑； Admin/IndexController 管理登录后的首页。\n\n编辑 Admin/LoginController.php\n\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n\nclass LoginController extends Controller\n{\n    /*\n    |--------------------------------------------------------------------------\n    | Login Controller\n    |--------------------------------------------------------------------------\n    |\n    | This controller handles authenticating users for the application and\n    | redirecting them to your home screen. The controller uses a trait\n    | to conveniently provide its functionality to your applications.\n    |\n    */\n\n    use AuthenticatesUsers;\n\n    /**\n     * Where to redirect users after login / registration.\n     *\n     * @var string\n     */\n    protected $redirectTo = '/admin';\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        $this->middleware('guest.admin', ['except' => 'logout']);\n    }\n\n    /**\n     * 显示后台登录模板\n     */\n    public function showLoginForm()\n    {\n        return view('admin.login');\n    }\n\n    /**\n     * 使用 admin guard\n     */\n    protected function guard()\n    {\n        return auth()->guard('admin');\n    }\n}\n```\n\n编辑 Admin/IndexController.php\n\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass IndexController extends Controller\n{\n    /**\n     * 显示后台管理模板首页\n     */\n    public function index()\n    {\n        return view('admin.index');\n    }\n}\n```\n\n#### 后台显示模板\n\n复制 views/layouts/app.blade.php 成 views/layouts/admin.blade.php。\n\n编辑后台管理布局模板\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <!-- CSRF Token -->\n    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n\n    <title>{{ config('app.name', 'Laravel') }} - Admin</title>\n\n    <!-- Styles -->\n    <link href=\"/css/app.css\" rel=\"stylesheet\">\n\n    <!-- Scripts -->\n    <script>\n        window.Laravel = <?php echo json_encode([\n            'csrfToken' => csrf_token(),\n        ]); ?>\n    </script>\n</head>\n<body>\n    <nav class=\"navbar navbar-default navbar-static-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n\n                <!-- Collapsed Hamburger -->\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#app-navbar-collapse\">\n                    <span class=\"sr-only\">Toggle Navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n\n                <!-- Branding Image -->\n                <a class=\"navbar-brand\" href=\"{{ url('/') }}\">\n                    {{ config('app.name', 'Laravel') }}\n                </a>\n            </div>\n\n            <div class=\"collapse navbar-collapse\" id=\"app-navbar-collapse\">\n                <!-- Left Side Of Navbar -->\n                <ul class=\"nav navbar-nav\">\n                    &nbsp;\n                </ul>\n\n                <!-- Right Side Of Navbar -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <!-- Authentication Links -->\n                    @if (auth()->guard('admin')->guest())\n                        <li><a href=\"{{ url('/admin/login') }}\">Login</a></li>\n                    @else\n                        <li class=\"dropdown\">\n                            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n                                {{ auth()->guard('admin')->user()->name }} <span class=\"caret\"></span>\n                            </a>\n\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li>\n                                    <a href=\"{{ url('/admin/logout') }}\"\n                                        onclick=\"event.preventDefault();\n                                                 document.getElementById('logout-form').submit();\">\n                                        Logout\n                                    </a>\n\n                                    <form id=\"logout-form\" action=\"{{ url('/admin/logout') }}\" method=\"POST\" style=\"display: none;\">\n                                        {{ csrf_field() }}\n                                    </form>\n                                </li>\n                            </ul>\n                        </li>\n                    @endif\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    @yield('content')\n\n    <!-- Scripts -->\n    <script src=\"/js/app.js\"></script>\n</body>\n</html>\n```\n\n复制 views/auth/login.blade.php 成 views/admin/login.blade.php。\n\n编辑该模板，更改布局文件为 layouts.admin， 把表单的提交 url 改为 admin/login，email 字段改成 name 字段，去掉找回密码的部分\n\n```\n@extends('layouts.admin')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Admin Login</div>\n                <div class=\"panel-body\">\n                    <form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/admin/login') }}\">\n                        {{ csrf_field() }}\n\n                        <div class=\"form-group{{ $errors->has('name') ? ' has-error' : '' }}\">\n                            <label for=\"name\" class=\"col-md-4 control-label\">Name</label>\n\n                            <div class=\"col-md-6\">\n                                <input id=\"name\" type=\"text\" class=\"form-control\" name=\"name\" value=\"{{ old('name') }}\" required autofocus>\n\n                                @if ($errors->has('name'))\n                                    <span class=\"help-block\">\n                                        <strong>{{ $errors->first('name') }}</strong>\n                                    </span>\n                                @endif\n                            </div>\n                        </div>\n\n                        <div class=\"form-group{{ $errors->has('password') ? ' has-error' : '' }}\">\n                            <label for=\"password\" class=\"col-md-4 control-label\">Password</label>\n\n                            <div class=\"col-md-6\">\n                                <input id=\"password\" type=\"password\" class=\"form-control\" name=\"password\" required>\n\n                                @if ($errors->has('password'))\n                                    <span class=\"help-block\">\n                                        <strong>{{ $errors->first('password') }}</strong>\n                                    </span>\n                                @endif\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <div class=\"col-md-6 col-md-offset-4\">\n                                <div class=\"checkbox\">\n                                    <label>\n                                        <input type=\"checkbox\" name=\"remember\"> Remember Me\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <div class=\"col-md-8 col-md-offset-4\">\n                                <button type=\"submit\" class=\"btn btn-primary\">\n                                    Login\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n```\n\n复制 views/home.blade.php 成 views/admins/index.blade.php。\n\n编辑该模板\n\n```\n@extends('layouts.admin')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 col-md-offset-2\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Dashboard</div>\n\n                <div class=\"panel-body\">\n                    You are logged in admin dashboard!\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n```\n\n#### 添加后台路由\n\n编辑 routes/web.php， 添加以下内容\n\n```\nRoute::group(['prefix' => 'admin'], function () {\n    Route::group(['middleware' => 'auth.admin'], function () {\n        Route::get('/', 'Admin\\IndexController@index');\n    });\n\n    Route::get('login', 'Admin\\LoginController@showLoginForm')->name('admin.login');\n    Route::post('login', 'Admin\\LoginController@login');\n    Route::post('logout', 'Admin\\LoginController@logout');\n});\n```\n\n#### 后台管理认证中间件\n\n创建后台管理认证中间件\n\n```\nphp artisan make:middleware AuthAdmin\n```\n\n编辑 AuthAdmin\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass AuthAdmin\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if (auth()->guard('admin')->guest()) {\n            if ($request->ajax() || $request->wantsJson()) {\n                return response('Unauthorized.', 401);\n            } else {\n                return redirect()->guest('admin/login');\n            }\n        }\n\n        return $next($request);\n    }\n}\n```\n\n创建后台管理登录跳转中间件，用于有些操作在登录之后的跳转\n\n```\nphp artisan make:middleware GuestAdmin\n```\n\n编辑该中间件的 handle 方法\n\n```\npublic function handle($request, Closure $next)\n    {\n        if (auth()->guard('admin')->check()) {\n            return redirect('/admin');\n        }\n\n        return $next($request);\n    }\n```\n\n在 app/Http/Kernel.php 中注册以上中间件\n\n```\nprotected $routeMiddleware = [\n    ......\n    'auth.admin' => \\App\\Http\\Middleware\\AuthAdmin::class,\n    'guest.admin' => \\App\\Http\\Middleware\\GuestAdmin::class,\n    ......\n];\n```\n\n#### 处理注销\n\n经过上面的步骤，已经实现了前后台分离登录，但是不管是在前台注销，还是在后台注销，都销毁了所有的 session，导致前后台注销连在一起。所以我们还要对注销的方法处理一下。\n\n原来的 logout 方法是这样写的，在 Illuminate\\Foundation\\Auth\\AuthenticatesUsers 里\n\n```\npublic function logout(Request $request)\n    {\n        $this->guard()->logout();\n\n        $request->session()->flush();\n\n        $request->session()->regenerate();\n\n        return redirect('/');\n    }\n```\n\n注意这一句\n\n```\n$request->session()->flush();\n```\n\n将所有的 session 全部清除，这里不分前台、后台，所以要对这里进行改造。\n\n因为前台、后台注销都要修改，所以我们新建一个 trait，前后台都可以使用。\n\n新建一个文件 app/Extensions/AuthenticatesLogout.php **这里需要新建 Extensions 文件夹，在Laravel5.3中是没有这个文件夹的**\n\n```\n<?php\nnamespace App\\Extensions;\n\nuse Illuminate\\Http\\Request;\n\n\ntrait AuthenticatesLogout\n{\n    public function logout(Request $request)\n    {\n        $this->guard()->logout();\n\n        $request->session()->forget($this->guard()->getName());\n\n        $request->session()->regenerate();\n\n        return redirect('/');\n    }\n}\n```\n\n我们将\n\n```\n$request->session()->flush();\n```\n\n改成\n\n```\n$request->session()->forget($this->guard()->getName());\n```\n\n只是删除掉当前 guard 所创建的 session，这样就达到了分别注销的目的。\n\n修改 Auth/LoginController.php 和 Admin/LoginController.php，将\n\n```\nuse AuthenticatesUsers;\n```\n\n改掉，在文件的前面别忘了加上 use 语句\n\n```\nuse App\\Extensions\\AuthenticatesLogout;\n\n...\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, AuthenticatesLogout {\n        AuthenticatesLogout::logout insteadof AuthenticatesUsers;\n    }\n...\n```\n\n到这里，就完成了整个不同用户表登录认证的过程。\n\n\n\n> 参考文章：\n>\n> [Laravel 5.3 不同用户表登录认证](http://www.fullstack.pub/doc/1)","slug":"laraveladminlogin","published":1,"updated":"2020-10-25T06:43:32.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq9u00clmolcjcyga86d","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Laravel 5.3 的 Auth 认证在 5.2 的基础上又有一些改变，本文说明如何在 Laravel 5.3 下做不同用户表的登录认证。</p>\n<h3 id=\"Auth-认证原理简述\"><a href=\"#Auth-认证原理简述\" class=\"headerlink\" title=\"Auth 认证原理简述\"></a>Auth 认证原理简述</h3><p>Laravel 的认证是使用 guard 与 provider 配合完成， guard 负责认证的业务逻辑，认证信息的服务端保存等； provider 负责提供认证信息的持久化数据提供。<br>请求提交给 guard， guard 从 provider 里取出数据（类似用户名、密码等），验证输入数据与服务器端存储的数据是否吻合。如果提交的数据正确，再做 session 等业务的处理（如有需要）。</p>\n<h3 id=\"认证脚手架\"><a href=\"#认证脚手架\" class=\"headerlink\" title=\"认证脚手架\"></a>认证脚手架</h3><p>首先我们导入 Laravel 的自带的认证脚手架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>执行数据库迁移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>修改 Auth 认证的配置文件 config/auth.php，在 gurads 处，添加 admin guard 用于后台管理员认证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;guards&apos; =&gt; [</span><br><span class=\"line\">        &apos;web&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admin&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;admins&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;api&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;token&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>在 providers 处添加 admins provider，使用 Admin 模型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;providers&apos; =&gt; [</span><br><span class=\"line\">        &apos;users&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;eloquent&apos;,</span><br><span class=\"line\">            &apos;model&apos; =&gt; App\\Models\\User::class,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admins&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;eloquent&apos;,</span><br><span class=\"line\">            &apos;model&apos; =&gt; App\\Models\\Admin::class,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>本文将所有的 Model 都存放在 App\\Models\\ 目录下。</p>\n<h3 id=\"创建后台管理员模型\"><a href=\"#创建后台管理员模型\" class=\"headerlink\" title=\"创建后台管理员模型\"></a>创建后台管理员模型</h3><p>我们再创建一个 Admin 模型，用于后台管理员登录验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Admin -m</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-m 参数会同时生成数据库迁移文件 xxxx_create_admins_table</p>\n</blockquote>\n<p>修改 app/Admin.php 模型文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Notifications\\Notifiable;</span><br><span class=\"line\">use Illuminate\\Foundation\\Auth\\User as Authenticatable;</span><br><span class=\"line\"></span><br><span class=\"line\">class Admin extends Authenticatable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Notifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The attributes that are mass assignable.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $fillable = [</span><br><span class=\"line\">        &apos;name&apos;, &apos;password&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The attributes that should be hidden for arrays.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $hidden = [</span><br><span class=\"line\">        &apos;password&apos;, &apos;remember_token&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑 xxxx_create_admins_table 文件，后台管理员模型结构与前台用户差不多，去掉 email 字段，name 字段设为 unique()，后台用户登录使用用户名、密码的形式，如果需要 email ，也可以不去掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Support\\Facades\\Schema;</span><br><span class=\"line\">use Illuminate\\Database\\Schema\\Blueprint;</span><br><span class=\"line\">use Illuminate\\Database\\Migrations\\Migration;</span><br><span class=\"line\"></span><br><span class=\"line\">class CreateAdminsTable extends Migration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Run the migrations.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function up()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Schema::create(&apos;admins&apos;, function (Blueprint $table) &#123;</span><br><span class=\"line\">            $table-&gt;increments(&apos;id&apos;);</span><br><span class=\"line\">            $table-&gt;string(&apos;name&apos;)-&gt;unique();</span><br><span class=\"line\">            $table-&gt;string(&apos;password&apos;);</span><br><span class=\"line\">            $table-&gt;rememberToken();</span><br><span class=\"line\">            $table-&gt;timestamps();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Reverse the migrations.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function down()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Schema::dropIfExists(&apos;admins&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"管理员模型填充数据\"><a href=\"#管理员模型填充数据\" class=\"headerlink\" title=\"管理员模型填充数据\"></a>管理员模型填充数据</h3><p>定义一个数据模型工厂，在 database/factories/ModelFactory.php 中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$factory-&gt;define(App\\Admin::class, function (Faker\\Generator $faker) &#123;</span><br><span class=\"line\">    static $password;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [</span><br><span class=\"line\">        &apos;name&apos; =&gt; $faker-&gt;firstName,</span><br><span class=\"line\">        &apos;password&apos; =&gt; $password ?: $password = bcrypt(&apos;secret&apos;),</span><br><span class=\"line\">        &apos;remember_token&apos; =&gt; str_random(10),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Faker 随机填充用户名</p>\n</blockquote>\n<p>在 database/seeds 目录下生成 AdminsTableSeeder.php 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:seeder AdminsTableSeeder</span><br></pre></td></tr></table></figure>\n<p>编辑 database/seeds/AdminsTableSeeder.php 文件的 run 方法，添加3个管理员用户，密码为 123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function run()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factory(&apos;App\\Admin&apos;, 3)-&gt;create([</span><br><span class=\"line\">            &apos;password&apos; =&gt; bcrypt(&apos;123456&apos;)</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在 database/seeds/DatabaseSeeder.php 的 run 方法里调用 AdminsTableSeeder 类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function run()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;call(AdminsTableSeeder::class);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行数据库迁移命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate --seed</span><br></pre></td></tr></table></figure>\n<p>数据库里会创建 admins 表，并且生成了3条数据：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>password</th>\n<th>remember_token</th>\n<th>created_at</th>\n<th>updated_at</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>John</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>9p7bycJ5Wn</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ransom</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>Ct8W5nmTsg</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Dulce</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>I8RJpxwVrk</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建后台页面\"><a href=\"#创建后台页面\" class=\"headerlink\" title=\"创建后台页面\"></a>创建后台页面</h3><h4 id=\"创建控制器\"><a href=\"#创建控制器\" class=\"headerlink\" title=\"创建控制器\"></a>创建控制器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:controller Admin/LoginController    </span><br><span class=\"line\">php artisan make:controller Admin/IndexController</span><br></pre></td></tr></table></figure>\n<p>其中， Admin/LoginController 负责登录逻辑； Admin/IndexController 管理登录后的首页。</p>\n<p>编辑 Admin/LoginController.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Controllers\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Http\\Controllers\\Controller;</span><br><span class=\"line\">use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    |--------------------------------------------------------------------------</span><br><span class=\"line\">    | Login Controller</span><br><span class=\"line\">    |--------------------------------------------------------------------------</span><br><span class=\"line\">    |</span><br><span class=\"line\">    | This controller handles authenticating users for the application and</span><br><span class=\"line\">    | redirecting them to your home screen. The controller uses a trait</span><br><span class=\"line\">    | to conveniently provide its functionality to your applications.</span><br><span class=\"line\">    |</span><br><span class=\"line\">    */</span><br><span class=\"line\"></span><br><span class=\"line\">    use AuthenticatesUsers;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Where to redirect users after login / registration.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var string</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $redirectTo = &apos;/admin&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new controller instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;middleware(&apos;guest.admin&apos;, [&apos;except&apos; =&gt; &apos;logout&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 显示后台登录模板</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function showLoginForm()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;admin.login&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用 admin guard</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected function guard()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return auth()-&gt;guard(&apos;admin&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑 Admin/IndexController.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Controllers\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Http\\Requests;</span><br><span class=\"line\">use App\\Http\\Controllers\\Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class IndexController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 显示后台管理模板首页</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;admin.index&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台显示模板\"><a href=\"#后台显示模板\" class=\"headerlink\" title=\"后台显示模板\"></a>后台显示模板</h4><p>复制 views/layouts/app.blade.php 成 views/layouts/admin.blade.php。</p>\n<p>编辑后台管理布局模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- CSRF Token --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;title&gt;&#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125; - Admin&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Styles --&gt;</span><br><span class=\"line\">    &lt;link href=&quot;/css/app.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Scripts --&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        window.Laravel = &lt;?php echo json_encode([</span><br><span class=\"line\">            &apos;csrfToken&apos; =&gt; csrf_token(),</span><br><span class=\"line\">        ]); ?&gt;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;nav class=&quot;navbar navbar-default navbar-static-top&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;navbar-header&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Collapsed Hamburger --&gt;</span><br><span class=\"line\">                &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#app-navbar-collapse&quot;&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;sr-only&quot;&gt;Toggle Navigation&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Branding Image --&gt;</span><br><span class=\"line\">                &lt;a class=&quot;navbar-brand&quot; href=&quot;&#123;&#123; url(&apos;/&apos;) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                    &#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125;</span><br><span class=\"line\">                &lt;/a&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;app-navbar-collapse&quot;&gt;</span><br><span class=\"line\">                &lt;!-- Left Side Of Navbar --&gt;</span><br><span class=\"line\">                &lt;ul class=&quot;nav navbar-nav&quot;&gt;</span><br><span class=\"line\">                    &amp;nbsp;</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Right Side Of Navbar --&gt;</span><br><span class=\"line\">                &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</span><br><span class=\"line\">                    &lt;!-- Authentication Links --&gt;</span><br><span class=\"line\">                    @if (auth()-&gt;guard(&apos;admin&apos;)-&gt;guest())</span><br><span class=\"line\">                        &lt;li&gt;&lt;a href=&quot;&#123;&#123; url(&apos;/admin/login&apos;) &#125;&#125;&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">                    @else</span><br><span class=\"line\">                        &lt;li class=&quot;dropdown&quot;&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot;&gt;</span><br><span class=\"line\">                                &#123;&#123; auth()-&gt;guard(&apos;admin&apos;)-&gt;user()-&gt;name &#125;&#125; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt;</span><br><span class=\"line\">                                &lt;li&gt;</span><br><span class=\"line\">                                    &lt;a href=&quot;&#123;&#123; url(&apos;/admin/logout&apos;) &#125;&#125;&quot;</span><br><span class=\"line\">                                        onclick=&quot;event.preventDefault();</span><br><span class=\"line\">                                                 document.getElementById(&apos;logout-form&apos;).submit();&quot;&gt;</span><br><span class=\"line\">                                        Logout</span><br><span class=\"line\">                                    &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    &lt;form id=&quot;logout-form&quot; action=&quot;&#123;&#123; url(&apos;/admin/logout&apos;) &#125;&#125;&quot; method=&quot;POST&quot; style=&quot;display: none;&quot;&gt;</span><br><span class=\"line\">                                        &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\">                                    &lt;/form&gt;</span><br><span class=\"line\">                                &lt;/li&gt;</span><br><span class=\"line\">                            &lt;/ul&gt;</span><br><span class=\"line\">                        &lt;/li&gt;</span><br><span class=\"line\">                    @endif</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @yield(&apos;content&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Scripts --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>复制 views/auth/login.blade.php 成 views/admin/login.blade.php。</p>\n<p>编辑该模板，更改布局文件为 layouts.admin， 把表单的提交 url 改为 admin/login，email 字段改成 name 字段，去掉找回密码的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@extends(&apos;layouts.admin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&apos;content&apos;)</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-heading&quot;&gt;Admin Login&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class=\"line\">                    &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; method=&quot;POST&quot; action=&quot;&#123;&#123; url(&apos;/admin/login&apos;) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                        &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&#123;&#123; $errors-&gt;has(&apos;name&apos;) ? &apos; has-error&apos; : &apos;&apos; &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                            &lt;label for=&quot;name&quot; class=&quot;col-md-4 control-label&quot;&gt;Name&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">                                &lt;input id=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;name&quot; value=&quot;&#123;&#123; old(&apos;name&apos;) &#125;&#125;&quot; required autofocus&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                @if ($errors-&gt;has(&apos;name&apos;))</span><br><span class=\"line\">                                    &lt;span class=&quot;help-block&quot;&gt;</span><br><span class=\"line\">                                        &lt;strong&gt;&#123;&#123; $errors-&gt;first(&apos;name&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">                                    &lt;/span&gt;</span><br><span class=\"line\">                                @endif</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&#123;&#123; $errors-&gt;has(&apos;password&apos;) ? &apos; has-error&apos; : &apos;&apos; &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                            &lt;label for=&quot;password&quot; class=&quot;col-md-4 control-label&quot;&gt;Password&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">                                &lt;input id=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; required&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                @if ($errors-&gt;has(&apos;password&apos;))</span><br><span class=\"line\">                                    &lt;span class=&quot;help-block&quot;&gt;</span><br><span class=\"line\">                                        &lt;strong&gt;&#123;&#123; $errors-&gt;first(&apos;password&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">                                    &lt;/span&gt;</span><br><span class=\"line\">                                @endif</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6 col-md-offset-4&quot;&gt;</span><br><span class=\"line\">                                &lt;div class=&quot;checkbox&quot;&gt;</span><br><span class=\"line\">                                    &lt;label&gt;</span><br><span class=\"line\">                                        &lt;input type=&quot;checkbox&quot; name=&quot;remember&quot;&gt; Remember Me</span><br><span class=\"line\">                                    &lt;/label&gt;</span><br><span class=\"line\">                                &lt;/div&gt;</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                            &lt;div class=&quot;col-md-8 col-md-offset-4&quot;&gt;</span><br><span class=\"line\">                                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class=\"line\">                                    Login</span><br><span class=\"line\">                                &lt;/button&gt;</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/form&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></table></figure>\n<p>复制 views/home.blade.php 成 views/admins/index.blade.php。</p>\n<p>编辑该模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@extends(&apos;layouts.admin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&apos;content&apos;)</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-heading&quot;&gt;Dashboard&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class=\"line\">                    You are logged in admin dashboard!</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加后台路由\"><a href=\"#添加后台路由\" class=\"headerlink\" title=\"添加后台路由\"></a>添加后台路由</h4><p>编辑 routes/web.php， 添加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([&apos;prefix&apos; =&gt; &apos;admin&apos;], function () &#123;</span><br><span class=\"line\">    Route::group([&apos;middleware&apos; =&gt; &apos;auth.admin&apos;], function () &#123;</span><br><span class=\"line\">        Route::get(&apos;/&apos;, &apos;Admin\\IndexController@index&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Route::get(&apos;login&apos;, &apos;Admin\\LoginController@showLoginForm&apos;)-&gt;name(&apos;admin.login&apos;);</span><br><span class=\"line\">    Route::post(&apos;login&apos;, &apos;Admin\\LoginController@login&apos;);</span><br><span class=\"line\">    Route::post(&apos;logout&apos;, &apos;Admin\\LoginController@logout&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台管理认证中间件\"><a href=\"#后台管理认证中间件\" class=\"headerlink\" title=\"后台管理认证中间件\"></a>后台管理认证中间件</h4><p>创建后台管理认证中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:middleware AuthAdmin</span><br></pre></td></tr></table></figure>\n<p>编辑 AuthAdmin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Middleware;</span><br><span class=\"line\"></span><br><span class=\"line\">use Closure;</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthAdmin</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Handle an incoming request.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</span><br><span class=\"line\">     * @param  \\Closure  $next</span><br><span class=\"line\">     * @return mixed</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle($request, Closure $next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (auth()-&gt;guard(&apos;admin&apos;)-&gt;guest()) &#123;</span><br><span class=\"line\">            if ($request-&gt;ajax() || $request-&gt;wantsJson()) &#123;</span><br><span class=\"line\">                return response(&apos;Unauthorized.&apos;, 401);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                return redirect()-&gt;guest(&apos;admin/login&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $next($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建后台管理登录跳转中间件，用于有些操作在登录之后的跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:middleware GuestAdmin</span><br></pre></td></tr></table></figure>\n<p>编辑该中间件的 handle 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function handle($request, Closure $next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (auth()-&gt;guard(&apos;admin&apos;)-&gt;check()) &#123;</span><br><span class=\"line\">            return redirect(&apos;/admin&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $next($request);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在 app/Http/Kernel.php 中注册以上中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected $routeMiddleware = [</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &apos;auth.admin&apos; =&gt; \\App\\Http\\Middleware\\AuthAdmin::class,</span><br><span class=\"line\">    &apos;guest.admin&apos; =&gt; \\App\\Http\\Middleware\\GuestAdmin::class,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h4 id=\"处理注销\"><a href=\"#处理注销\" class=\"headerlink\" title=\"处理注销\"></a>处理注销</h4><p>经过上面的步骤，已经实现了前后台分离登录，但是不管是在前台注销，还是在后台注销，都销毁了所有的 session，导致前后台注销连在一起。所以我们还要对注销的方法处理一下。</p>\n<p>原来的 logout 方法是这样写的，在 Illuminate\\Foundation\\Auth\\AuthenticatesUsers 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function logout(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;guard()-&gt;logout();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;flush();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;regenerate();</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&apos;/&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>注意这一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;flush();</span><br></pre></td></tr></table></figure>\n<p>将所有的 session 全部清除，这里不分前台、后台，所以要对这里进行改造。</p>\n<p>因为前台、后台注销都要修改，所以我们新建一个 trait，前后台都可以使用。</p>\n<p>新建一个文件 app/Extensions/AuthenticatesLogout.php <strong>这里需要新建 Extensions 文件夹，在Laravel5.3中是没有这个文件夹的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App\\Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">trait AuthenticatesLogout</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function logout(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;guard()-&gt;logout();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;forget($this-&gt;guard()-&gt;getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;regenerate();</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&apos;/&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;flush();</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;forget($this-&gt;guard()-&gt;getName());</span><br></pre></td></tr></table></figure>\n<p>只是删除掉当前 guard 所创建的 session，这样就达到了分别注销的目的。</p>\n<p>修改 Auth/LoginController.php 和 Admin/LoginController.php，将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use AuthenticatesUsers;</span><br></pre></td></tr></table></figure>\n<p>改掉，在文件的前面别忘了加上 use 语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use App\\Extensions\\AuthenticatesLogout;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use AuthenticatesUsers, AuthenticatesLogout &#123;</span><br><span class=\"line\">        AuthenticatesLogout::logout insteadof AuthenticatesUsers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>到这里，就完成了整个不同用户表登录认证的过程。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.fullstack.pub/doc/1\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 不同用户表登录认证</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Laravel 5.3 的 Auth 认证在 5.2 的基础上又有一些改变，本文说明如何在 Laravel 5.3 下做不同用户表的登录认证。</p>\n<h3 id=\"Auth-认证原理简述\"><a href=\"#Auth-认证原理简述\" class=\"headerlink\" title=\"Auth 认证原理简述\"></a>Auth 认证原理简述</h3><p>Laravel 的认证是使用 guard 与 provider 配合完成， guard 负责认证的业务逻辑，认证信息的服务端保存等； provider 负责提供认证信息的持久化数据提供。<br>请求提交给 guard， guard 从 provider 里取出数据（类似用户名、密码等），验证输入数据与服务器端存储的数据是否吻合。如果提交的数据正确，再做 session 等业务的处理（如有需要）。</p>\n<h3 id=\"认证脚手架\"><a href=\"#认证脚手架\" class=\"headerlink\" title=\"认证脚手架\"></a>认证脚手架</h3><p>首先我们导入 Laravel 的自带的认证脚手架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:auth</span><br></pre></td></tr></table></figure>\n<p>执行数据库迁移</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>修改 Auth 认证的配置文件 config/auth.php，在 gurads 处，添加 admin guard 用于后台管理员认证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;guards&apos; =&gt; [</span><br><span class=\"line\">        &apos;web&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admin&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;session&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;admins&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;api&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;token&apos;,</span><br><span class=\"line\">            &apos;provider&apos; =&gt; &apos;users&apos;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p>在 providers 处添加 admins provider，使用 Admin 模型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;providers&apos; =&gt; [</span><br><span class=\"line\">        &apos;users&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;eloquent&apos;,</span><br><span class=\"line\">            &apos;model&apos; =&gt; App\\Models\\User::class,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        &apos;admins&apos; =&gt; [</span><br><span class=\"line\">            &apos;driver&apos; =&gt; &apos;eloquent&apos;,</span><br><span class=\"line\">            &apos;model&apos; =&gt; App\\Models\\Admin::class,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>本文将所有的 Model 都存放在 App\\Models\\ 目录下。</p>\n<h3 id=\"创建后台管理员模型\"><a href=\"#创建后台管理员模型\" class=\"headerlink\" title=\"创建后台管理员模型\"></a>创建后台管理员模型</h3><p>我们再创建一个 Admin 模型，用于后台管理员登录验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Admin -m</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-m 参数会同时生成数据库迁移文件 xxxx_create_admins_table</p>\n</blockquote>\n<p>修改 app/Admin.php 模型文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Notifications\\Notifiable;</span><br><span class=\"line\">use Illuminate\\Foundation\\Auth\\User as Authenticatable;</span><br><span class=\"line\"></span><br><span class=\"line\">class Admin extends Authenticatable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Notifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The attributes that are mass assignable.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $fillable = [</span><br><span class=\"line\">        &apos;name&apos;, &apos;password&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The attributes that should be hidden for arrays.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $hidden = [</span><br><span class=\"line\">        &apos;password&apos;, &apos;remember_token&apos;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑 xxxx_create_admins_table 文件，后台管理员模型结构与前台用户差不多，去掉 email 字段，name 字段设为 unique()，后台用户登录使用用户名、密码的形式，如果需要 email ，也可以不去掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Support\\Facades\\Schema;</span><br><span class=\"line\">use Illuminate\\Database\\Schema\\Blueprint;</span><br><span class=\"line\">use Illuminate\\Database\\Migrations\\Migration;</span><br><span class=\"line\"></span><br><span class=\"line\">class CreateAdminsTable extends Migration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Run the migrations.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function up()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Schema::create(&apos;admins&apos;, function (Blueprint $table) &#123;</span><br><span class=\"line\">            $table-&gt;increments(&apos;id&apos;);</span><br><span class=\"line\">            $table-&gt;string(&apos;name&apos;)-&gt;unique();</span><br><span class=\"line\">            $table-&gt;string(&apos;password&apos;);</span><br><span class=\"line\">            $table-&gt;rememberToken();</span><br><span class=\"line\">            $table-&gt;timestamps();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Reverse the migrations.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function down()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Schema::dropIfExists(&apos;admins&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"管理员模型填充数据\"><a href=\"#管理员模型填充数据\" class=\"headerlink\" title=\"管理员模型填充数据\"></a>管理员模型填充数据</h3><p>定义一个数据模型工厂，在 database/factories/ModelFactory.php 中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$factory-&gt;define(App\\Admin::class, function (Faker\\Generator $faker) &#123;</span><br><span class=\"line\">    static $password;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [</span><br><span class=\"line\">        &apos;name&apos; =&gt; $faker-&gt;firstName,</span><br><span class=\"line\">        &apos;password&apos; =&gt; $password ?: $password = bcrypt(&apos;secret&apos;),</span><br><span class=\"line\">        &apos;remember_token&apos; =&gt; str_random(10),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Faker 随机填充用户名</p>\n</blockquote>\n<p>在 database/seeds 目录下生成 AdminsTableSeeder.php 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:seeder AdminsTableSeeder</span><br></pre></td></tr></table></figure>\n<p>编辑 database/seeds/AdminsTableSeeder.php 文件的 run 方法，添加3个管理员用户，密码为 123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function run()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factory(&apos;App\\Admin&apos;, 3)-&gt;create([</span><br><span class=\"line\">            &apos;password&apos; =&gt; bcrypt(&apos;123456&apos;)</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在 database/seeds/DatabaseSeeder.php 的 run 方法里调用 AdminsTableSeeder 类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function run()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;call(AdminsTableSeeder::class);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行数据库迁移命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate --seed</span><br></pre></td></tr></table></figure>\n<p>数据库里会创建 admins 表，并且生成了3条数据：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>password</th>\n<th>remember_token</th>\n<th>created_at</th>\n<th>updated_at</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>John</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>9p7bycJ5Wn</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ransom</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>Ct8W5nmTsg</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Dulce</td>\n<td>$2y$10$AYD4MoW…</td>\n<td>I8RJpxwVrk</td>\n<td>2017-05-05 15:12:37</td>\n<td>2017-05-05 15:12:37</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"创建后台页面\"><a href=\"#创建后台页面\" class=\"headerlink\" title=\"创建后台页面\"></a>创建后台页面</h3><h4 id=\"创建控制器\"><a href=\"#创建控制器\" class=\"headerlink\" title=\"创建控制器\"></a>创建控制器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:controller Admin/LoginController    </span><br><span class=\"line\">php artisan make:controller Admin/IndexController</span><br></pre></td></tr></table></figure>\n<p>其中， Admin/LoginController 负责登录逻辑； Admin/IndexController 管理登录后的首页。</p>\n<p>编辑 Admin/LoginController.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Controllers\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Http\\Controllers\\Controller;</span><br><span class=\"line\">use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    |--------------------------------------------------------------------------</span><br><span class=\"line\">    | Login Controller</span><br><span class=\"line\">    |--------------------------------------------------------------------------</span><br><span class=\"line\">    |</span><br><span class=\"line\">    | This controller handles authenticating users for the application and</span><br><span class=\"line\">    | redirecting them to your home screen. The controller uses a trait</span><br><span class=\"line\">    | to conveniently provide its functionality to your applications.</span><br><span class=\"line\">    |</span><br><span class=\"line\">    */</span><br><span class=\"line\"></span><br><span class=\"line\">    use AuthenticatesUsers;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Where to redirect users after login / registration.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var string</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $redirectTo = &apos;/admin&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new controller instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;middleware(&apos;guest.admin&apos;, [&apos;except&apos; =&gt; &apos;logout&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 显示后台登录模板</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function showLoginForm()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;admin.login&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用 admin guard</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected function guard()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return auth()-&gt;guard(&apos;admin&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑 Admin/IndexController.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Controllers\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Http\\Requests;</span><br><span class=\"line\">use App\\Http\\Controllers\\Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class IndexController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 显示后台管理模板首页</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return view(&apos;admin.index&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台显示模板\"><a href=\"#后台显示模板\" class=\"headerlink\" title=\"后台显示模板\"></a>后台显示模板</h4><p>复制 views/layouts/app.blade.php 成 views/layouts/admin.blade.php。</p>\n<p>编辑后台管理布局模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- CSRF Token --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;title&gt;&#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125; - Admin&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Styles --&gt;</span><br><span class=\"line\">    &lt;link href=&quot;/css/app.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Scripts --&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        window.Laravel = &lt;?php echo json_encode([</span><br><span class=\"line\">            &apos;csrfToken&apos; =&gt; csrf_token(),</span><br><span class=\"line\">        ]); ?&gt;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;nav class=&quot;navbar navbar-default navbar-static-top&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;navbar-header&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Collapsed Hamburger --&gt;</span><br><span class=\"line\">                &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#app-navbar-collapse&quot;&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;sr-only&quot;&gt;Toggle Navigation&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                &lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Branding Image --&gt;</span><br><span class=\"line\">                &lt;a class=&quot;navbar-brand&quot; href=&quot;&#123;&#123; url(&apos;/&apos;) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                    &#123;&#123; config(&apos;app.name&apos;, &apos;Laravel&apos;) &#125;&#125;</span><br><span class=\"line\">                &lt;/a&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;app-navbar-collapse&quot;&gt;</span><br><span class=\"line\">                &lt;!-- Left Side Of Navbar --&gt;</span><br><span class=\"line\">                &lt;ul class=&quot;nav navbar-nav&quot;&gt;</span><br><span class=\"line\">                    &amp;nbsp;</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;!-- Right Side Of Navbar --&gt;</span><br><span class=\"line\">                &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</span><br><span class=\"line\">                    &lt;!-- Authentication Links --&gt;</span><br><span class=\"line\">                    @if (auth()-&gt;guard(&apos;admin&apos;)-&gt;guest())</span><br><span class=\"line\">                        &lt;li&gt;&lt;a href=&quot;&#123;&#123; url(&apos;/admin/login&apos;) &#125;&#125;&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">                    @else</span><br><span class=\"line\">                        &lt;li class=&quot;dropdown&quot;&gt;</span><br><span class=\"line\">                            &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot;&gt;</span><br><span class=\"line\">                                &#123;&#123; auth()-&gt;guard(&apos;admin&apos;)-&gt;user()-&gt;name &#125;&#125; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;ul class=&quot;dropdown-menu&quot; role=&quot;menu&quot;&gt;</span><br><span class=\"line\">                                &lt;li&gt;</span><br><span class=\"line\">                                    &lt;a href=&quot;&#123;&#123; url(&apos;/admin/logout&apos;) &#125;&#125;&quot;</span><br><span class=\"line\">                                        onclick=&quot;event.preventDefault();</span><br><span class=\"line\">                                                 document.getElementById(&apos;logout-form&apos;).submit();&quot;&gt;</span><br><span class=\"line\">                                        Logout</span><br><span class=\"line\">                                    &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    &lt;form id=&quot;logout-form&quot; action=&quot;&#123;&#123; url(&apos;/admin/logout&apos;) &#125;&#125;&quot; method=&quot;POST&quot; style=&quot;display: none;&quot;&gt;</span><br><span class=\"line\">                                        &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\">                                    &lt;/form&gt;</span><br><span class=\"line\">                                &lt;/li&gt;</span><br><span class=\"line\">                            &lt;/ul&gt;</span><br><span class=\"line\">                        &lt;/li&gt;</span><br><span class=\"line\">                    @endif</span><br><span class=\"line\">                &lt;/ul&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @yield(&apos;content&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Scripts --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;/js/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>复制 views/auth/login.blade.php 成 views/admin/login.blade.php。</p>\n<p>编辑该模板，更改布局文件为 layouts.admin， 把表单的提交 url 改为 admin/login，email 字段改成 name 字段，去掉找回密码的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@extends(&apos;layouts.admin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&apos;content&apos;)</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-heading&quot;&gt;Admin Login&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class=\"line\">                    &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; method=&quot;POST&quot; action=&quot;&#123;&#123; url(&apos;/admin/login&apos;) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                        &#123;&#123; csrf_field() &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&#123;&#123; $errors-&gt;has(&apos;name&apos;) ? &apos; has-error&apos; : &apos;&apos; &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                            &lt;label for=&quot;name&quot; class=&quot;col-md-4 control-label&quot;&gt;Name&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">                                &lt;input id=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;name&quot; value=&quot;&#123;&#123; old(&apos;name&apos;) &#125;&#125;&quot; required autofocus&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                @if ($errors-&gt;has(&apos;name&apos;))</span><br><span class=\"line\">                                    &lt;span class=&quot;help-block&quot;&gt;</span><br><span class=\"line\">                                        &lt;strong&gt;&#123;&#123; $errors-&gt;first(&apos;name&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">                                    &lt;/span&gt;</span><br><span class=\"line\">                                @endif</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&#123;&#123; $errors-&gt;has(&apos;password&apos;) ? &apos; has-error&apos; : &apos;&apos; &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                            &lt;label for=&quot;password&quot; class=&quot;col-md-4 control-label&quot;&gt;Password&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">                                &lt;input id=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; required&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                @if ($errors-&gt;has(&apos;password&apos;))</span><br><span class=\"line\">                                    &lt;span class=&quot;help-block&quot;&gt;</span><br><span class=\"line\">                                        &lt;strong&gt;&#123;&#123; $errors-&gt;first(&apos;password&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class=\"line\">                                    &lt;/span&gt;</span><br><span class=\"line\">                                @endif</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                            &lt;div class=&quot;col-md-6 col-md-offset-4&quot;&gt;</span><br><span class=\"line\">                                &lt;div class=&quot;checkbox&quot;&gt;</span><br><span class=\"line\">                                    &lt;label&gt;</span><br><span class=\"line\">                                        &lt;input type=&quot;checkbox&quot; name=&quot;remember&quot;&gt; Remember Me</span><br><span class=\"line\">                                    &lt;/label&gt;</span><br><span class=\"line\">                                &lt;/div&gt;</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                            &lt;div class=&quot;col-md-8 col-md-offset-4&quot;&gt;</span><br><span class=\"line\">                                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class=\"line\">                                    Login</span><br><span class=\"line\">                                &lt;/button&gt;</span><br><span class=\"line\">                            &lt;/div&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/form&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></table></figure>\n<p>复制 views/home.blade.php 成 views/admins/index.blade.php。</p>\n<p>编辑该模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@extends(&apos;layouts.admin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&apos;content&apos;)</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;panel-heading&quot;&gt;Dashboard&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class=\"line\">                    You are logged in admin dashboard!</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">@endsection</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加后台路由\"><a href=\"#添加后台路由\" class=\"headerlink\" title=\"添加后台路由\"></a>添加后台路由</h4><p>编辑 routes/web.php， 添加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([&apos;prefix&apos; =&gt; &apos;admin&apos;], function () &#123;</span><br><span class=\"line\">    Route::group([&apos;middleware&apos; =&gt; &apos;auth.admin&apos;], function () &#123;</span><br><span class=\"line\">        Route::get(&apos;/&apos;, &apos;Admin\\IndexController@index&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Route::get(&apos;login&apos;, &apos;Admin\\LoginController@showLoginForm&apos;)-&gt;name(&apos;admin.login&apos;);</span><br><span class=\"line\">    Route::post(&apos;login&apos;, &apos;Admin\\LoginController@login&apos;);</span><br><span class=\"line\">    Route::post(&apos;logout&apos;, &apos;Admin\\LoginController@logout&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台管理认证中间件\"><a href=\"#后台管理认证中间件\" class=\"headerlink\" title=\"后台管理认证中间件\"></a>后台管理认证中间件</h4><p>创建后台管理认证中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:middleware AuthAdmin</span><br></pre></td></tr></table></figure>\n<p>编辑 AuthAdmin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Middleware;</span><br><span class=\"line\"></span><br><span class=\"line\">use Closure;</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthAdmin</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Handle an incoming request.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</span><br><span class=\"line\">     * @param  \\Closure  $next</span><br><span class=\"line\">     * @return mixed</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle($request, Closure $next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (auth()-&gt;guard(&apos;admin&apos;)-&gt;guest()) &#123;</span><br><span class=\"line\">            if ($request-&gt;ajax() || $request-&gt;wantsJson()) &#123;</span><br><span class=\"line\">                return response(&apos;Unauthorized.&apos;, 401);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                return redirect()-&gt;guest(&apos;admin/login&apos;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $next($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建后台管理登录跳转中间件，用于有些操作在登录之后的跳转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:middleware GuestAdmin</span><br></pre></td></tr></table></figure>\n<p>编辑该中间件的 handle 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function handle($request, Closure $next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (auth()-&gt;guard(&apos;admin&apos;)-&gt;check()) &#123;</span><br><span class=\"line\">            return redirect(&apos;/admin&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $next($request);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在 app/Http/Kernel.php 中注册以上中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected $routeMiddleware = [</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &apos;auth.admin&apos; =&gt; \\App\\Http\\Middleware\\AuthAdmin::class,</span><br><span class=\"line\">    &apos;guest.admin&apos; =&gt; \\App\\Http\\Middleware\\GuestAdmin::class,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h4 id=\"处理注销\"><a href=\"#处理注销\" class=\"headerlink\" title=\"处理注销\"></a>处理注销</h4><p>经过上面的步骤，已经实现了前后台分离登录，但是不管是在前台注销，还是在后台注销，都销毁了所有的 session，导致前后台注销连在一起。所以我们还要对注销的方法处理一下。</p>\n<p>原来的 logout 方法是这样写的，在 Illuminate\\Foundation\\Auth\\AuthenticatesUsers 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function logout(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;guard()-&gt;logout();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;flush();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;regenerate();</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&apos;/&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>注意这一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;flush();</span><br></pre></td></tr></table></figure>\n<p>将所有的 session 全部清除，这里不分前台、后台，所以要对这里进行改造。</p>\n<p>因为前台、后台注销都要修改，所以我们新建一个 trait，前后台都可以使用。</p>\n<p>新建一个文件 app/Extensions/AuthenticatesLogout.php <strong>这里需要新建 Extensions 文件夹，在Laravel5.3中是没有这个文件夹的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App\\Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">trait AuthenticatesLogout</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function logout(Request $request)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;guard()-&gt;logout();</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;forget($this-&gt;guard()-&gt;getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        $request-&gt;session()-&gt;regenerate();</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&apos;/&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;flush();</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request-&gt;session()-&gt;forget($this-&gt;guard()-&gt;getName());</span><br></pre></td></tr></table></figure>\n<p>只是删除掉当前 guard 所创建的 session，这样就达到了分别注销的目的。</p>\n<p>修改 Auth/LoginController.php 和 Admin/LoginController.php，将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use AuthenticatesUsers;</span><br></pre></td></tr></table></figure>\n<p>改掉，在文件的前面别忘了加上 use 语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use App\\Extensions\\AuthenticatesLogout;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use AuthenticatesUsers, AuthenticatesLogout &#123;</span><br><span class=\"line\">        AuthenticatesLogout::logout insteadof AuthenticatesUsers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>到这里，就完成了整个不同用户表登录认证的过程。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.fullstack.pub/doc/1\" target=\"_blank\" rel=\"noopener\">Laravel 5.3 不同用户表登录认证</a></p>\n</blockquote>\n"},{"title":"Linux命令-netstat","date":"2018-01-02T14:49:16.000Z","_content":"\n### 命令格式\n\n```\nnetstat [-acCeFghilMnNoprstuvVwx][-A<网络类型>][--ip]\n```\n\n### 命令功能\n\nLinux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。\n\n### 命令参数\n\n| 参数                          | 说明                      |\n| --------------------------- | ----------------------- |\n| -a / -all                   | 显示所有连接中的Socket          |\n| -A<网络类型> / --<网络类型>         | 列出该网络类型连接中的相关地址         |\n| -c / --continuous           | 持续列出网络状态                |\n| -C / --cache                | 显示路由器配置的快取信息            |\n| -e / --extend               | 显示网络其他相关信息              |\n| -F / --fib                  | 显示FIB                   |\n| -g / --groups               | 显示多重广播功能群组组员名单          |\n| -h / --help                 | 在线帮助                    |\n| -i / --interfaces           | 显示网络界面信息表单              |\n| -l / --listening            | 显示监控中的服务器的Socket        |\n| -M / --masquerade           | 显示伪装的网络连线               |\n| -n / --numeric              | 直接使用IP地址，而不通过域名服务器      |\n| -N / --netlink / --symbolic | 显示网络硬件外围设备的符号连接名称       |\n| -o / --timers               | 显示计时器                   |\n| -p / --programs             | 显示正在使用Socket的程序识别码和程序名称 |\n| -r / --route                | 显示路由表                   |\n| -s / --statistice           | 显示网络工作信息统计表             |\n| -t / --tcp                  | 显示TCP传输协议的连线状况          |\n| -u / --udp                  | 显示UDP传输协议的连线状况          |\n| -v / --verbose              | 显示指令执行过程                |\n| -V / --version              | 显示版本信息                  |\n| -w / --raw                  | 显示RAW传输协议的连线状况          |\n| -x / --unix                 | 此参数的效果和指定\"-A unix\"参数相同  |\n| --ip / --inet               | 此参数的效果和指定\"-A inet\"参数相同  |\n\n### 使用示例\n\n- netstat\n\n```\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED \ntcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED \nActive UNIX domain sockets (w/o servers)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event\nunix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd\nunix  3      [ ]         STREAM     CONNECTED     253334334 \nunix  3      [ ]         STREAM     CONNECTED     253334333 \n```\n\n`netstat` 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中\"Recv-Q\"和\"Send-Q\"指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。\n\nProto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。\n\n| 状态           | 说明                          |\n| ------------ | --------------------------- |\n| LISTEN       | 侦听来自远方的TCP端口的连接请求           |\n| SYN-SENT     | 在发送连接请求后等待匹配的连接请求           |\n| SYN-RECEIVED | 在收到和发送一个连接请求后等待对方对连接请求的确认   |\n| ESTABLISHED  | 一个打开的连接                     |\n| FIN-WAIT-1   | 等待远程TCP连接中断请求，或先前的连接中断请求的确认 |\n| FIN-WAIT-2   | 从远程TCP等待连接中断请求              |\n| CLOSE-WAIT   | 等待从本地用户发来的连接中断请求            |\n| CLOSING      | 等待远程TCP对连接中断的确认             |\n| LAST-ACK     | 等待原来的发向远程TCP的连接中断请求的确认      |\n| TIME-WAIT    | 等待足够的时间以确保远程TCP接收到连接中断请求的确认 |\n| CLOSED       | 没有任何连接状态                    |\n\n- netstat -a\n\n```\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 *:tproxy                    *:*                         LISTEN      \ntcp        0      0 *:us-cli                    *:*                         LISTEN      \ntcp        0      0 *:us-srv                    *:*                         LISTEN      \ntcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      \nActive UNIX domain sockets (servers and established)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket\nunix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241\nunix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart\nunix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU\nunix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np\nunix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event\n```\n\n显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。\n\n- netstat -nu\n\n```\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State \n```\n\n显示当前UDP的连接情况\n\n- netstat -apu\n\n```\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name \nudp        0      0 *:947               *:*                                     1200/rpcbind     \nudp        0      0 *:domain            *:*                                     9306/dnsmasq     \nudp        0      0 *:983               *:*                                     1231/rpc.statd   \nudp        0      0 *:sunrpc            *:*                                     1200/rpcbind     \nudp        0      0 *:ipp               *:*                                     1141/portreserve \nudp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       \nudp        0      0 localhost:ntp       *:*                                     4247/ntpd       \nudp        0      0 *:ntp               *:*                                     4247/ntpd       \nudp        0      0 *:62630             *:*                                     1231/rpc.statd   \n```\n\n显示UDP端口号的使用情况\n\n- netstat -i\n\n```\nKernel Interface table\nIface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU\nlo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU\n```\n\n显示网卡列表\n\n- netstat -g\n\n```\nIPv6/IPv4 Group Memberships\nInterface       RefCnt Group\n--------------- ------ ---------------------\nlo              1      all-systems.mcast.net\neth0            1      all-systems.mcast.net\n```\n\n显示组播组的关系\n\n- netstat -s\n\n```\nIp:\n    2402314477 total packets received\n    0 forwarded\n    0 incoming packets discarded\n    2331780718 incoming packets delivered\n    2692824123 requests sent out\nIcmp:\n    484304 ICMP messages received\n    0 input ICMP message failed.\n    ICMP input histogram:\n        destination unreachable: 159\n        timeout in transit: 3\n        echo requests: 83130\n        echo replies: 400987\n        timestamp request: 25\n    505861 ICMP messages sent\n    0 ICMP messages failed\n    ICMP output histogram:\n        destination unreachable: 21437\n        echo request: 401269\n        echo replies: 83130\n        timestamp replies: 25\nIcmpMsg:\n        InType0: 400987\n        InType3: 159\n        InType8: 83130\n        InType11: 3\n        InType13: 25\n        OutType0: 83130\n        OutType3: 21437\n        OutType8: 401269\n        OutType14: 25\nTcp:\n    62593872 active connections openings\n    177834 passive connection openings\n    153086 failed connection attempts\n    999 connection resets received\n    89 connections established\n    2250692557 segments received\n    2608392230 segments send out\n    3325843 segments retransmited\n    132 bad segments received.\n    610130 resets sent\nUdp:\n    80565656 packets received\n    21451 packets to unknown port received.\n    0 packet receive errors\n    80600189 packets sent\nUdpLite:\nTcpExt:\n    1100 invalid SYN cookies received\n    361 resets received for embryonic SYN_RECV sockets\n    466 packets pruned from receive queue because of socket buffer overrun\n    61819153 TCP sockets finished time wait in fast timer\n    2987 TCP sockets finished time wait in slow timer\n    660268 delayed acks sent\n    260 delayed acks further delayed because of locked socket\n    Quick ack mode was activated 1051984 times\n    25934905 packets directly queued to recvmsg prequeue.\n    911172308 packets directly received from backlog\n    3173278514 packets directly received from prequeue\n    1186216864 packets header predicted\n    3170682 packets header predicted and directly queued to user\n    357381509 acknowledgments not containing data received\n    411743100 predicted acknowledgments\n    1093102 times recovered from packet loss due to SACK data\n    Detected reordering 12642 times using FACK\n    Detected reordering 14884 times using SACK\n    Detected reordering 11 times using time stamp\n    13885 congestion windows fully recovered\n    252 congestion windows partially recovered using Hoe heuristic\n    TCPDSACKUndo: 193430\n    51009 congestion windows recovered after partial ack\n    168112 TCP data loss events\n    TCPLostRetransmit: 14829\n    108524 timeouts after SACK recovery\n    4274 timeouts in loss state\n    2496500 fast retransmits\n    158451 forward retransmits\n    230933 retransmits in slow start\n    280735 other TCP timeouts\n    38730 sack retransmits failed\n    23520 packets collapsed in receive queue due to low socket buffer\n    1051963 DSACKs sent for old packets\n    20 DSACKs sent for out of order packets\n    365231 DSACKs received\n    692 DSACKs for out of order packets received\n    414 connections reset due to unexpected data\n    896 connections reset due to early user close\n    761 connections aborted due to timeout\n    TCPDSACKIgnoredOld: 509\n    TCPDSACKIgnoredNoUndo: 425\n    TCPSackShiftFallback: 22772083\n    TCPBacklogDrop: 2192\n    TCPChallengeACK: 125\n    TCPSYNChallenge: 125\n    TCPFromZeroWindowAdv: 85\n    TCPToZeroWindowAdv: 85\n    TCPWantZeroWindowAdv: 163030\nIpExt:\n    InBcastPkts: 1232\n    InOctets: 1540584137119\n    OutOctets: 1474239597014\n    InBcastOctets: 191368\n```\n\n显示网络统计信息\n\n- netstat -l\n\n```\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 *:tproxy                    *:*                         LISTEN      \ntcp        0      0 *:us-cli                    *:*                         LISTEN      \ntcp        0      0 *:us-srv                    *:*                         LISTEN      \ntcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      \ntcp        0      0 *:intu-ec-client            *:*                         LISTEN      \ntcp        0      0 *:domain                    *:*                         LISTEN      \ntcp        0      0 *:oa-system                 *:*                         LISTEN      \ntcp        0      0 *:ssh                       *:*                         LISTEN      \ntcp        0      0 *:8023                      *:*                         LISTEN      \ntcp        0      0 localhost:smtp              *:*                         LISTEN      \ntcp        0      0 *:12602                     *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      \ntcp        0      0 *:30050                     *:*                         LISTEN      \ntcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      \ntcp        0      0 *:eforward                  *:*                         LISTEN      \ntcp        0      0 *:svn                       *:*                         LISTEN      \ntcp        0      0 *:16010                     *:*                         LISTEN      \ntcp        0      0 *:6379                      *:*                         LISTEN      \ntcp        0      0 *:23212                     *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      \ntcp        0      0 *:sunrpc                    *:*                         LISTEN      \ntcp        0      0 *:http                      *:*                         LISTEN      \nudp        0      0 *:947                       *:*                                     \nudp        0      0 *:domain                    *:*                                     \nudp        0      0 *:983                       *:*                                     \nudp        0      0 *:sunrpc                    *:*                                     \nudp        0      0 *:ipp                       *:*                                     \nudp        0      0 hcdn-others-worker-dev10:ntp *:*                                     \nudp        0      0 localhost:ntp               *:*                                     \nudp        0      0 *:ntp                       *:*                                     \nudp        0      0 *:62630                     *:*                                     \nActive UNIX domain sockets (only servers)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket\nunix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241\nunix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart\nunix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU\nunix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np\nunix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock\nunix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket\nunix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket\nunix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket\nunix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client\nunix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup\nunix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr\nunix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite\nunix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce\nunix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer\nunix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace\nunix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify\nunix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush\nunix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap\nunix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite\nunix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp\nunix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay\nunix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq\nunix  2      [ ACC ]     STREAM     LISTENING     18425  private/error\nunix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry\nunix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard\nunix  2      [ ACC ]     STREAM     LISTENING     18437  private/local\nunix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual\nunix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp\nunix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil\nunix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache\n```\n\n显示监听的套接口\n\n- netstat -ap | grep python3\n\n```\ntcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   \ntcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3   \n```\n\n显示程序运行的端口\n\n然后利用`ps -ef | grep '15484'` 命令可查找该端口运行的程序\n\n```\nroot      6262   946  0 15:45 pts/0    00:00:00 grep 15484\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\n```\n\n\n\nRead More：\n\n> [每天一个linux命令（56）：netstat命令](http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html) [Linux netstat命令](http://www.runoob.com/linux/linux-comm-netstat.html) ","source":"_posts/linuxnetstat.md","raw":"---\ntitle: Linux命令-netstat\ndate: 2018-01-02 22:49:16\ntags:\n - Linux\n - 命令\n - netstat\ncategories:\n - Linux/Unix\n---\n\n### 命令格式\n\n```\nnetstat [-acCeFghilMnNoprstuvVwx][-A<网络类型>][--ip]\n```\n\n### 命令功能\n\nLinux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。\n\n### 命令参数\n\n| 参数                          | 说明                      |\n| --------------------------- | ----------------------- |\n| -a / -all                   | 显示所有连接中的Socket          |\n| -A<网络类型> / --<网络类型>         | 列出该网络类型连接中的相关地址         |\n| -c / --continuous           | 持续列出网络状态                |\n| -C / --cache                | 显示路由器配置的快取信息            |\n| -e / --extend               | 显示网络其他相关信息              |\n| -F / --fib                  | 显示FIB                   |\n| -g / --groups               | 显示多重广播功能群组组员名单          |\n| -h / --help                 | 在线帮助                    |\n| -i / --interfaces           | 显示网络界面信息表单              |\n| -l / --listening            | 显示监控中的服务器的Socket        |\n| -M / --masquerade           | 显示伪装的网络连线               |\n| -n / --numeric              | 直接使用IP地址，而不通过域名服务器      |\n| -N / --netlink / --symbolic | 显示网络硬件外围设备的符号连接名称       |\n| -o / --timers               | 显示计时器                   |\n| -p / --programs             | 显示正在使用Socket的程序识别码和程序名称 |\n| -r / --route                | 显示路由表                   |\n| -s / --statistice           | 显示网络工作信息统计表             |\n| -t / --tcp                  | 显示TCP传输协议的连线状况          |\n| -u / --udp                  | 显示UDP传输协议的连线状况          |\n| -v / --verbose              | 显示指令执行过程                |\n| -V / --version              | 显示版本信息                  |\n| -w / --raw                  | 显示RAW传输协议的连线状况          |\n| -x / --unix                 | 此参数的效果和指定\"-A unix\"参数相同  |\n| --ip / --inet               | 此参数的效果和指定\"-A inet\"参数相同  |\n\n### 使用示例\n\n- netstat\n\n```\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED \ntcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED \ntcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED \nActive UNIX domain sockets (w/o servers)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event\nunix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd\nunix  3      [ ]         STREAM     CONNECTED     253334334 \nunix  3      [ ]         STREAM     CONNECTED     253334333 \n```\n\n`netstat` 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中\"Recv-Q\"和\"Send-Q\"指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。\n\nProto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。\n\n| 状态           | 说明                          |\n| ------------ | --------------------------- |\n| LISTEN       | 侦听来自远方的TCP端口的连接请求           |\n| SYN-SENT     | 在发送连接请求后等待匹配的连接请求           |\n| SYN-RECEIVED | 在收到和发送一个连接请求后等待对方对连接请求的确认   |\n| ESTABLISHED  | 一个打开的连接                     |\n| FIN-WAIT-1   | 等待远程TCP连接中断请求，或先前的连接中断请求的确认 |\n| FIN-WAIT-2   | 从远程TCP等待连接中断请求              |\n| CLOSE-WAIT   | 等待从本地用户发来的连接中断请求            |\n| CLOSING      | 等待远程TCP对连接中断的确认             |\n| LAST-ACK     | 等待原来的发向远程TCP的连接中断请求的确认      |\n| TIME-WAIT    | 等待足够的时间以确保远程TCP接收到连接中断请求的确认 |\n| CLOSED       | 没有任何连接状态                    |\n\n- netstat -a\n\n```\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 *:tproxy                    *:*                         LISTEN      \ntcp        0      0 *:us-cli                    *:*                         LISTEN      \ntcp        0      0 *:us-srv                    *:*                         LISTEN      \ntcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      \nActive UNIX domain sockets (servers and established)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket\nunix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241\nunix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart\nunix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU\nunix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np\nunix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event\n```\n\n显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。\n\n- netstat -nu\n\n```\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State \n```\n\n显示当前UDP的连接情况\n\n- netstat -apu\n\n```\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name \nudp        0      0 *:947               *:*                                     1200/rpcbind     \nudp        0      0 *:domain            *:*                                     9306/dnsmasq     \nudp        0      0 *:983               *:*                                     1231/rpc.statd   \nudp        0      0 *:sunrpc            *:*                                     1200/rpcbind     \nudp        0      0 *:ipp               *:*                                     1141/portreserve \nudp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       \nudp        0      0 localhost:ntp       *:*                                     4247/ntpd       \nudp        0      0 *:ntp               *:*                                     4247/ntpd       \nudp        0      0 *:62630             *:*                                     1231/rpc.statd   \n```\n\n显示UDP端口号的使用情况\n\n- netstat -i\n\n```\nKernel Interface table\nIface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\neth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU\nlo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU\n```\n\n显示网卡列表\n\n- netstat -g\n\n```\nIPv6/IPv4 Group Memberships\nInterface       RefCnt Group\n--------------- ------ ---------------------\nlo              1      all-systems.mcast.net\neth0            1      all-systems.mcast.net\n```\n\n显示组播组的关系\n\n- netstat -s\n\n```\nIp:\n    2402314477 total packets received\n    0 forwarded\n    0 incoming packets discarded\n    2331780718 incoming packets delivered\n    2692824123 requests sent out\nIcmp:\n    484304 ICMP messages received\n    0 input ICMP message failed.\n    ICMP input histogram:\n        destination unreachable: 159\n        timeout in transit: 3\n        echo requests: 83130\n        echo replies: 400987\n        timestamp request: 25\n    505861 ICMP messages sent\n    0 ICMP messages failed\n    ICMP output histogram:\n        destination unreachable: 21437\n        echo request: 401269\n        echo replies: 83130\n        timestamp replies: 25\nIcmpMsg:\n        InType0: 400987\n        InType3: 159\n        InType8: 83130\n        InType11: 3\n        InType13: 25\n        OutType0: 83130\n        OutType3: 21437\n        OutType8: 401269\n        OutType14: 25\nTcp:\n    62593872 active connections openings\n    177834 passive connection openings\n    153086 failed connection attempts\n    999 connection resets received\n    89 connections established\n    2250692557 segments received\n    2608392230 segments send out\n    3325843 segments retransmited\n    132 bad segments received.\n    610130 resets sent\nUdp:\n    80565656 packets received\n    21451 packets to unknown port received.\n    0 packet receive errors\n    80600189 packets sent\nUdpLite:\nTcpExt:\n    1100 invalid SYN cookies received\n    361 resets received for embryonic SYN_RECV sockets\n    466 packets pruned from receive queue because of socket buffer overrun\n    61819153 TCP sockets finished time wait in fast timer\n    2987 TCP sockets finished time wait in slow timer\n    660268 delayed acks sent\n    260 delayed acks further delayed because of locked socket\n    Quick ack mode was activated 1051984 times\n    25934905 packets directly queued to recvmsg prequeue.\n    911172308 packets directly received from backlog\n    3173278514 packets directly received from prequeue\n    1186216864 packets header predicted\n    3170682 packets header predicted and directly queued to user\n    357381509 acknowledgments not containing data received\n    411743100 predicted acknowledgments\n    1093102 times recovered from packet loss due to SACK data\n    Detected reordering 12642 times using FACK\n    Detected reordering 14884 times using SACK\n    Detected reordering 11 times using time stamp\n    13885 congestion windows fully recovered\n    252 congestion windows partially recovered using Hoe heuristic\n    TCPDSACKUndo: 193430\n    51009 congestion windows recovered after partial ack\n    168112 TCP data loss events\n    TCPLostRetransmit: 14829\n    108524 timeouts after SACK recovery\n    4274 timeouts in loss state\n    2496500 fast retransmits\n    158451 forward retransmits\n    230933 retransmits in slow start\n    280735 other TCP timeouts\n    38730 sack retransmits failed\n    23520 packets collapsed in receive queue due to low socket buffer\n    1051963 DSACKs sent for old packets\n    20 DSACKs sent for out of order packets\n    365231 DSACKs received\n    692 DSACKs for out of order packets received\n    414 connections reset due to unexpected data\n    896 connections reset due to early user close\n    761 connections aborted due to timeout\n    TCPDSACKIgnoredOld: 509\n    TCPDSACKIgnoredNoUndo: 425\n    TCPSackShiftFallback: 22772083\n    TCPBacklogDrop: 2192\n    TCPChallengeACK: 125\n    TCPSYNChallenge: 125\n    TCPFromZeroWindowAdv: 85\n    TCPToZeroWindowAdv: 85\n    TCPWantZeroWindowAdv: 163030\nIpExt:\n    InBcastPkts: 1232\n    InOctets: 1540584137119\n    OutOctets: 1474239597014\n    InBcastOctets: 191368\n```\n\n显示网络统计信息\n\n- netstat -l\n\n```\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address               Foreign Address             State      \ntcp        0      0 *:tproxy                    *:*                         LISTEN      \ntcp        0      0 *:us-cli                    *:*                         LISTEN      \ntcp        0      0 *:us-srv                    *:*                         LISTEN      \ntcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      \ntcp        0      0 *:intu-ec-client            *:*                         LISTEN      \ntcp        0      0 *:domain                    *:*                         LISTEN      \ntcp        0      0 *:oa-system                 *:*                         LISTEN      \ntcp        0      0 *:ssh                       *:*                         LISTEN      \ntcp        0      0 *:8023                      *:*                         LISTEN      \ntcp        0      0 localhost:smtp              *:*                         LISTEN      \ntcp        0      0 *:12602                     *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      \ntcp        0      0 *:30050                     *:*                         LISTEN      \ntcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      \ntcp        0      0 *:eforward                  *:*                         LISTEN      \ntcp        0      0 *:svn                       *:*                         LISTEN      \ntcp        0      0 *:16010                     *:*                         LISTEN      \ntcp        0      0 *:6379                      *:*                         LISTEN      \ntcp        0      0 *:23212                     *:*                         LISTEN      \ntcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      \ntcp        0      0 *:sunrpc                    *:*                         LISTEN      \ntcp        0      0 *:http                      *:*                         LISTEN      \nudp        0      0 *:947                       *:*                                     \nudp        0      0 *:domain                    *:*                                     \nudp        0      0 *:983                       *:*                                     \nudp        0      0 *:sunrpc                    *:*                                     \nudp        0      0 *:ipp                       *:*                                     \nudp        0      0 hcdn-others-worker-dev10:ntp *:*                                     \nudp        0      0 localhost:ntp               *:*                                     \nudp        0      0 *:ntp                       *:*                                     \nudp        0      0 *:62630                     *:*                                     \nActive UNIX domain sockets (only servers)\nProto RefCnt Flags       Type       State         I-Node Path\nunix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket\nunix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241\nunix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart\nunix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU\nunix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np\nunix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock\nunix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket\nunix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket\nunix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket\nunix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client\nunix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup\nunix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr\nunix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite\nunix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce\nunix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer\nunix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace\nunix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify\nunix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush\nunix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap\nunix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite\nunix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp\nunix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay\nunix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq\nunix  2      [ ACC ]     STREAM     LISTENING     18425  private/error\nunix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry\nunix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard\nunix  2      [ ACC ]     STREAM     LISTENING     18437  private/local\nunix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual\nunix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp\nunix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil\nunix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache\n```\n\n显示监听的套接口\n\n- netstat -ap | grep python3\n\n```\ntcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   \ntcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3   \n```\n\n显示程序运行的端口\n\n然后利用`ps -ef | grep '15484'` 命令可查找该端口运行的程序\n\n```\nroot      6262   946  0 15:45 pts/0    00:00:00 grep 15484\nroot     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py\n```\n\n\n\nRead More：\n\n> [每天一个linux命令（56）：netstat命令](http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html) [Linux netstat命令](http://www.runoob.com/linux/linux-comm-netstat.html) ","slug":"linuxnetstat","published":1,"updated":"2020-10-25T06:43:32.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq9w00cmmolc5nem0j3f","content":"<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>Linux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a / -all</td>\n<td>显示所有连接中的Socket</td>\n</tr>\n<tr>\n<td>-A&lt;网络类型&gt; / –&lt;网络类型&gt;</td>\n<td>列出该网络类型连接中的相关地址</td>\n</tr>\n<tr>\n<td>-c / –continuous</td>\n<td>持续列出网络状态</td>\n</tr>\n<tr>\n<td>-C / –cache</td>\n<td>显示路由器配置的快取信息</td>\n</tr>\n<tr>\n<td>-e / –extend</td>\n<td>显示网络其他相关信息</td>\n</tr>\n<tr>\n<td>-F / –fib</td>\n<td>显示FIB</td>\n</tr>\n<tr>\n<td>-g / –groups</td>\n<td>显示多重广播功能群组组员名单</td>\n</tr>\n<tr>\n<td>-h / –help</td>\n<td>在线帮助</td>\n</tr>\n<tr>\n<td>-i / –interfaces</td>\n<td>显示网络界面信息表单</td>\n</tr>\n<tr>\n<td>-l / –listening</td>\n<td>显示监控中的服务器的Socket</td>\n</tr>\n<tr>\n<td>-M / –masquerade</td>\n<td>显示伪装的网络连线</td>\n</tr>\n<tr>\n<td>-n / –numeric</td>\n<td>直接使用IP地址，而不通过域名服务器</td>\n</tr>\n<tr>\n<td>-N / –netlink / –symbolic</td>\n<td>显示网络硬件外围设备的符号连接名称</td>\n</tr>\n<tr>\n<td>-o / –timers</td>\n<td>显示计时器</td>\n</tr>\n<tr>\n<td>-p / –programs</td>\n<td>显示正在使用Socket的程序识别码和程序名称</td>\n</tr>\n<tr>\n<td>-r / –route</td>\n<td>显示路由表</td>\n</tr>\n<tr>\n<td>-s / –statistice</td>\n<td>显示网络工作信息统计表</td>\n</tr>\n<tr>\n<td>-t / –tcp</td>\n<td>显示TCP传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-u / –udp</td>\n<td>显示UDP传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-v / –verbose</td>\n<td>显示指令执行过程</td>\n</tr>\n<tr>\n<td>-V / –version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>-w / –raw</td>\n<td>显示RAW传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-x / –unix</td>\n<td>此参数的效果和指定”-A unix”参数相同</td>\n</tr>\n<tr>\n<td>–ip / –inet</td>\n<td>此参数的效果和指定”-A inet”参数相同</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><ul>\n<li>netstat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (w/o servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">Active UNIX domain sockets (w/o servers)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd</span><br><span class=\"line\">unix  3      [ ]         STREAM     CONNECTED     253334334 </span><br><span class=\"line\">unix  3      [ ]         STREAM     CONNECTED     253334333</span><br></pre></td></tr></table></figure>\n<p><code>netstat</code> 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。</p>\n<p>Proto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LISTEN</td>\n<td>侦听来自远方的TCP端口的连接请求</td>\n</tr>\n<tr>\n<td>SYN-SENT</td>\n<td>在发送连接请求后等待匹配的连接请求</td>\n</tr>\n<tr>\n<td>SYN-RECEIVED</td>\n<td>在收到和发送一个连接请求后等待对方对连接请求的确认</td>\n</tr>\n<tr>\n<td>ESTABLISHED</td>\n<td>一个打开的连接</td>\n</tr>\n<tr>\n<td>FIN-WAIT-1</td>\n<td>等待远程TCP连接中断请求，或先前的连接中断请求的确认</td>\n</tr>\n<tr>\n<td>FIN-WAIT-2</td>\n<td>从远程TCP等待连接中断请求</td>\n</tr>\n<tr>\n<td>CLOSE-WAIT</td>\n<td>等待从本地用户发来的连接中断请求</td>\n</tr>\n<tr>\n<td>CLOSING</td>\n<td>等待远程TCP对连接中断的确认</td>\n</tr>\n<tr>\n<td>LAST-ACK</td>\n<td>等待原来的发向远程TCP的连接中断请求的确认</td>\n</tr>\n<tr>\n<td>TIME-WAIT</td>\n<td>等待足够的时间以确保远程TCP接收到连接中断请求的确认</td>\n</tr>\n<tr>\n<td>CLOSED</td>\n<td>没有任何连接状态</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>netstat -a</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 *:tproxy                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-cli                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-srv                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </span><br><span class=\"line\">Active UNIX domain sockets (servers and established)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</span><br></pre></td></tr></table></figure>\n<p>显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。</p>\n<ul>\n<li>netstat -nu</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (w/o servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State</span><br></pre></td></tr></table></figure>\n<p>显示当前UDP的连接情况</p>\n<ul>\n<li>netstat -apu</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name </span><br><span class=\"line\">udp        0      0 *:947               *:*                                     1200/rpcbind     </span><br><span class=\"line\">udp        0      0 *:domain            *:*                                     9306/dnsmasq     </span><br><span class=\"line\">udp        0      0 *:983               *:*                                     1231/rpc.statd   </span><br><span class=\"line\">udp        0      0 *:sunrpc            *:*                                     1200/rpcbind     </span><br><span class=\"line\">udp        0      0 *:ipp               *:*                                     1141/portreserve </span><br><span class=\"line\">udp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       </span><br><span class=\"line\">udp        0      0 localhost:ntp       *:*                                     4247/ntpd       </span><br><span class=\"line\">udp        0      0 *:ntp               *:*                                     4247/ntpd       </span><br><span class=\"line\">udp        0      0 *:62630             *:*                                     1231/rpc.statd</span><br></pre></td></tr></table></figure>\n<p>显示UDP端口号的使用情况</p>\n<ul>\n<li>netstat -i</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kernel Interface table</span><br><span class=\"line\">Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</span><br><span class=\"line\">eth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU</span><br><span class=\"line\">lo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU</span><br></pre></td></tr></table></figure>\n<p>显示网卡列表</p>\n<ul>\n<li>netstat -g</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPv6/IPv4 Group Memberships</span><br><span class=\"line\">Interface       RefCnt Group</span><br><span class=\"line\">--------------- ------ ---------------------</span><br><span class=\"line\">lo              1      all-systems.mcast.net</span><br><span class=\"line\">eth0            1      all-systems.mcast.net</span><br></pre></td></tr></table></figure>\n<p>显示组播组的关系</p>\n<ul>\n<li>netstat -s</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ip:</span><br><span class=\"line\">    2402314477 total packets received</span><br><span class=\"line\">    0 forwarded</span><br><span class=\"line\">    0 incoming packets discarded</span><br><span class=\"line\">    2331780718 incoming packets delivered</span><br><span class=\"line\">    2692824123 requests sent out</span><br><span class=\"line\">Icmp:</span><br><span class=\"line\">    484304 ICMP messages received</span><br><span class=\"line\">    0 input ICMP message failed.</span><br><span class=\"line\">    ICMP input histogram:</span><br><span class=\"line\">        destination unreachable: 159</span><br><span class=\"line\">        timeout in transit: 3</span><br><span class=\"line\">        echo requests: 83130</span><br><span class=\"line\">        echo replies: 400987</span><br><span class=\"line\">        timestamp request: 25</span><br><span class=\"line\">    505861 ICMP messages sent</span><br><span class=\"line\">    0 ICMP messages failed</span><br><span class=\"line\">    ICMP output histogram:</span><br><span class=\"line\">        destination unreachable: 21437</span><br><span class=\"line\">        echo request: 401269</span><br><span class=\"line\">        echo replies: 83130</span><br><span class=\"line\">        timestamp replies: 25</span><br><span class=\"line\">IcmpMsg:</span><br><span class=\"line\">        InType0: 400987</span><br><span class=\"line\">        InType3: 159</span><br><span class=\"line\">        InType8: 83130</span><br><span class=\"line\">        InType11: 3</span><br><span class=\"line\">        InType13: 25</span><br><span class=\"line\">        OutType0: 83130</span><br><span class=\"line\">        OutType3: 21437</span><br><span class=\"line\">        OutType8: 401269</span><br><span class=\"line\">        OutType14: 25</span><br><span class=\"line\">Tcp:</span><br><span class=\"line\">    62593872 active connections openings</span><br><span class=\"line\">    177834 passive connection openings</span><br><span class=\"line\">    153086 failed connection attempts</span><br><span class=\"line\">    999 connection resets received</span><br><span class=\"line\">    89 connections established</span><br><span class=\"line\">    2250692557 segments received</span><br><span class=\"line\">    2608392230 segments send out</span><br><span class=\"line\">    3325843 segments retransmited</span><br><span class=\"line\">    132 bad segments received.</span><br><span class=\"line\">    610130 resets sent</span><br><span class=\"line\">Udp:</span><br><span class=\"line\">    80565656 packets received</span><br><span class=\"line\">    21451 packets to unknown port received.</span><br><span class=\"line\">    0 packet receive errors</span><br><span class=\"line\">    80600189 packets sent</span><br><span class=\"line\">UdpLite:</span><br><span class=\"line\">TcpExt:</span><br><span class=\"line\">    1100 invalid SYN cookies received</span><br><span class=\"line\">    361 resets received for embryonic SYN_RECV sockets</span><br><span class=\"line\">    466 packets pruned from receive queue because of socket buffer overrun</span><br><span class=\"line\">    61819153 TCP sockets finished time wait in fast timer</span><br><span class=\"line\">    2987 TCP sockets finished time wait in slow timer</span><br><span class=\"line\">    660268 delayed acks sent</span><br><span class=\"line\">    260 delayed acks further delayed because of locked socket</span><br><span class=\"line\">    Quick ack mode was activated 1051984 times</span><br><span class=\"line\">    25934905 packets directly queued to recvmsg prequeue.</span><br><span class=\"line\">    911172308 packets directly received from backlog</span><br><span class=\"line\">    3173278514 packets directly received from prequeue</span><br><span class=\"line\">    1186216864 packets header predicted</span><br><span class=\"line\">    3170682 packets header predicted and directly queued to user</span><br><span class=\"line\">    357381509 acknowledgments not containing data received</span><br><span class=\"line\">    411743100 predicted acknowledgments</span><br><span class=\"line\">    1093102 times recovered from packet loss due to SACK data</span><br><span class=\"line\">    Detected reordering 12642 times using FACK</span><br><span class=\"line\">    Detected reordering 14884 times using SACK</span><br><span class=\"line\">    Detected reordering 11 times using time stamp</span><br><span class=\"line\">    13885 congestion windows fully recovered</span><br><span class=\"line\">    252 congestion windows partially recovered using Hoe heuristic</span><br><span class=\"line\">    TCPDSACKUndo: 193430</span><br><span class=\"line\">    51009 congestion windows recovered after partial ack</span><br><span class=\"line\">    168112 TCP data loss events</span><br><span class=\"line\">    TCPLostRetransmit: 14829</span><br><span class=\"line\">    108524 timeouts after SACK recovery</span><br><span class=\"line\">    4274 timeouts in loss state</span><br><span class=\"line\">    2496500 fast retransmits</span><br><span class=\"line\">    158451 forward retransmits</span><br><span class=\"line\">    230933 retransmits in slow start</span><br><span class=\"line\">    280735 other TCP timeouts</span><br><span class=\"line\">    38730 sack retransmits failed</span><br><span class=\"line\">    23520 packets collapsed in receive queue due to low socket buffer</span><br><span class=\"line\">    1051963 DSACKs sent for old packets</span><br><span class=\"line\">    20 DSACKs sent for out of order packets</span><br><span class=\"line\">    365231 DSACKs received</span><br><span class=\"line\">    692 DSACKs for out of order packets received</span><br><span class=\"line\">    414 connections reset due to unexpected data</span><br><span class=\"line\">    896 connections reset due to early user close</span><br><span class=\"line\">    761 connections aborted due to timeout</span><br><span class=\"line\">    TCPDSACKIgnoredOld: 509</span><br><span class=\"line\">    TCPDSACKIgnoredNoUndo: 425</span><br><span class=\"line\">    TCPSackShiftFallback: 22772083</span><br><span class=\"line\">    TCPBacklogDrop: 2192</span><br><span class=\"line\">    TCPChallengeACK: 125</span><br><span class=\"line\">    TCPSYNChallenge: 125</span><br><span class=\"line\">    TCPFromZeroWindowAdv: 85</span><br><span class=\"line\">    TCPToZeroWindowAdv: 85</span><br><span class=\"line\">    TCPWantZeroWindowAdv: 163030</span><br><span class=\"line\">IpExt:</span><br><span class=\"line\">    InBcastPkts: 1232</span><br><span class=\"line\">    InOctets: 1540584137119</span><br><span class=\"line\">    OutOctets: 1474239597014</span><br><span class=\"line\">    InBcastOctets: 191368</span><br></pre></td></tr></table></figure>\n<p>显示网络统计信息</p>\n<ul>\n<li>netstat -l</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 *:tproxy                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-cli                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-srv                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-client            *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:domain                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:oa-system                 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:ssh                       *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:8023                      *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 localhost:smtp              *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:12602                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:30050                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:eforward                  *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:svn                       *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:16010                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:6379                      *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:23212                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:sunrpc                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:http                      *:*                         LISTEN      </span><br><span class=\"line\">udp        0      0 *:947                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:domain                    *:*                                     </span><br><span class=\"line\">udp        0      0 *:983                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:sunrpc                    *:*                                     </span><br><span class=\"line\">udp        0      0 *:ipp                       *:*                                     </span><br><span class=\"line\">udp        0      0 hcdn-others-worker-dev10:ntp *:*                                     </span><br><span class=\"line\">udp        0      0 localhost:ntp               *:*                                     </span><br><span class=\"line\">udp        0      0 *:ntp                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:62630                     *:*                                     </span><br><span class=\"line\">Active UNIX domain sockets (only servers)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18425  private/error</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18437  private/local</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache</span><br></pre></td></tr></table></figure>\n<p>显示监听的套接口</p>\n<ul>\n<li>netstat -ap | grep python3</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   </span><br><span class=\"line\">tcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3</span><br></pre></td></tr></table></figure>\n<p>显示程序运行的端口</p>\n<p>然后利用<code>ps -ef | grep &#39;15484&#39;</code> 命令可查找该端口运行的程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      6262   946  0 15:45 pts/0    00:00:00 grep 15484</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br></pre></td></tr></table></figure>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（56）：netstat命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-netstat.html\" target=\"_blank\" rel=\"noopener\">Linux netstat命令</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>Linux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a / -all</td>\n<td>显示所有连接中的Socket</td>\n</tr>\n<tr>\n<td>-A&lt;网络类型&gt; / –&lt;网络类型&gt;</td>\n<td>列出该网络类型连接中的相关地址</td>\n</tr>\n<tr>\n<td>-c / –continuous</td>\n<td>持续列出网络状态</td>\n</tr>\n<tr>\n<td>-C / –cache</td>\n<td>显示路由器配置的快取信息</td>\n</tr>\n<tr>\n<td>-e / –extend</td>\n<td>显示网络其他相关信息</td>\n</tr>\n<tr>\n<td>-F / –fib</td>\n<td>显示FIB</td>\n</tr>\n<tr>\n<td>-g / –groups</td>\n<td>显示多重广播功能群组组员名单</td>\n</tr>\n<tr>\n<td>-h / –help</td>\n<td>在线帮助</td>\n</tr>\n<tr>\n<td>-i / –interfaces</td>\n<td>显示网络界面信息表单</td>\n</tr>\n<tr>\n<td>-l / –listening</td>\n<td>显示监控中的服务器的Socket</td>\n</tr>\n<tr>\n<td>-M / –masquerade</td>\n<td>显示伪装的网络连线</td>\n</tr>\n<tr>\n<td>-n / –numeric</td>\n<td>直接使用IP地址，而不通过域名服务器</td>\n</tr>\n<tr>\n<td>-N / –netlink / –symbolic</td>\n<td>显示网络硬件外围设备的符号连接名称</td>\n</tr>\n<tr>\n<td>-o / –timers</td>\n<td>显示计时器</td>\n</tr>\n<tr>\n<td>-p / –programs</td>\n<td>显示正在使用Socket的程序识别码和程序名称</td>\n</tr>\n<tr>\n<td>-r / –route</td>\n<td>显示路由表</td>\n</tr>\n<tr>\n<td>-s / –statistice</td>\n<td>显示网络工作信息统计表</td>\n</tr>\n<tr>\n<td>-t / –tcp</td>\n<td>显示TCP传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-u / –udp</td>\n<td>显示UDP传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-v / –verbose</td>\n<td>显示指令执行过程</td>\n</tr>\n<tr>\n<td>-V / –version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>-w / –raw</td>\n<td>显示RAW传输协议的连线状况</td>\n</tr>\n<tr>\n<td>-x / –unix</td>\n<td>此参数的效果和指定”-A unix”参数相同</td>\n</tr>\n<tr>\n<td>–ip / –inet</td>\n<td>此参数的效果和指定”-A inet”参数相同</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><ul>\n<li>netstat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (w/o servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED </span><br><span class=\"line\">Active UNIX domain sockets (w/o servers)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd</span><br><span class=\"line\">unix  3      [ ]         STREAM     CONNECTED     253334334 </span><br><span class=\"line\">unix  3      [ ]         STREAM     CONNECTED     253334333</span><br></pre></td></tr></table></figure>\n<p><code>netstat</code> 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。</p>\n<p>Proto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LISTEN</td>\n<td>侦听来自远方的TCP端口的连接请求</td>\n</tr>\n<tr>\n<td>SYN-SENT</td>\n<td>在发送连接请求后等待匹配的连接请求</td>\n</tr>\n<tr>\n<td>SYN-RECEIVED</td>\n<td>在收到和发送一个连接请求后等待对方对连接请求的确认</td>\n</tr>\n<tr>\n<td>ESTABLISHED</td>\n<td>一个打开的连接</td>\n</tr>\n<tr>\n<td>FIN-WAIT-1</td>\n<td>等待远程TCP连接中断请求，或先前的连接中断请求的确认</td>\n</tr>\n<tr>\n<td>FIN-WAIT-2</td>\n<td>从远程TCP等待连接中断请求</td>\n</tr>\n<tr>\n<td>CLOSE-WAIT</td>\n<td>等待从本地用户发来的连接中断请求</td>\n</tr>\n<tr>\n<td>CLOSING</td>\n<td>等待远程TCP对连接中断的确认</td>\n</tr>\n<tr>\n<td>LAST-ACK</td>\n<td>等待原来的发向远程TCP的连接中断请求的确认</td>\n</tr>\n<tr>\n<td>TIME-WAIT</td>\n<td>等待足够的时间以确保远程TCP接收到连接中断请求的确认</td>\n</tr>\n<tr>\n<td>CLOSED</td>\n<td>没有任何连接状态</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>netstat -a</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 *:tproxy                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-cli                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-srv                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </span><br><span class=\"line\">Active UNIX domain sockets (servers and established)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</span><br><span class=\"line\">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</span><br></pre></td></tr></table></figure>\n<p>显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。</p>\n<ul>\n<li>netstat -nu</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (w/o servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State</span><br></pre></td></tr></table></figure>\n<p>显示当前UDP的连接情况</p>\n<ul>\n<li>netstat -apu</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name </span><br><span class=\"line\">udp        0      0 *:947               *:*                                     1200/rpcbind     </span><br><span class=\"line\">udp        0      0 *:domain            *:*                                     9306/dnsmasq     </span><br><span class=\"line\">udp        0      0 *:983               *:*                                     1231/rpc.statd   </span><br><span class=\"line\">udp        0      0 *:sunrpc            *:*                                     1200/rpcbind     </span><br><span class=\"line\">udp        0      0 *:ipp               *:*                                     1141/portreserve </span><br><span class=\"line\">udp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       </span><br><span class=\"line\">udp        0      0 localhost:ntp       *:*                                     4247/ntpd       </span><br><span class=\"line\">udp        0      0 *:ntp               *:*                                     4247/ntpd       </span><br><span class=\"line\">udp        0      0 *:62630             *:*                                     1231/rpc.statd</span><br></pre></td></tr></table></figure>\n<p>显示UDP端口号的使用情况</p>\n<ul>\n<li>netstat -i</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kernel Interface table</span><br><span class=\"line\">Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</span><br><span class=\"line\">eth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU</span><br><span class=\"line\">lo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU</span><br></pre></td></tr></table></figure>\n<p>显示网卡列表</p>\n<ul>\n<li>netstat -g</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPv6/IPv4 Group Memberships</span><br><span class=\"line\">Interface       RefCnt Group</span><br><span class=\"line\">--------------- ------ ---------------------</span><br><span class=\"line\">lo              1      all-systems.mcast.net</span><br><span class=\"line\">eth0            1      all-systems.mcast.net</span><br></pre></td></tr></table></figure>\n<p>显示组播组的关系</p>\n<ul>\n<li>netstat -s</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ip:</span><br><span class=\"line\">    2402314477 total packets received</span><br><span class=\"line\">    0 forwarded</span><br><span class=\"line\">    0 incoming packets discarded</span><br><span class=\"line\">    2331780718 incoming packets delivered</span><br><span class=\"line\">    2692824123 requests sent out</span><br><span class=\"line\">Icmp:</span><br><span class=\"line\">    484304 ICMP messages received</span><br><span class=\"line\">    0 input ICMP message failed.</span><br><span class=\"line\">    ICMP input histogram:</span><br><span class=\"line\">        destination unreachable: 159</span><br><span class=\"line\">        timeout in transit: 3</span><br><span class=\"line\">        echo requests: 83130</span><br><span class=\"line\">        echo replies: 400987</span><br><span class=\"line\">        timestamp request: 25</span><br><span class=\"line\">    505861 ICMP messages sent</span><br><span class=\"line\">    0 ICMP messages failed</span><br><span class=\"line\">    ICMP output histogram:</span><br><span class=\"line\">        destination unreachable: 21437</span><br><span class=\"line\">        echo request: 401269</span><br><span class=\"line\">        echo replies: 83130</span><br><span class=\"line\">        timestamp replies: 25</span><br><span class=\"line\">IcmpMsg:</span><br><span class=\"line\">        InType0: 400987</span><br><span class=\"line\">        InType3: 159</span><br><span class=\"line\">        InType8: 83130</span><br><span class=\"line\">        InType11: 3</span><br><span class=\"line\">        InType13: 25</span><br><span class=\"line\">        OutType0: 83130</span><br><span class=\"line\">        OutType3: 21437</span><br><span class=\"line\">        OutType8: 401269</span><br><span class=\"line\">        OutType14: 25</span><br><span class=\"line\">Tcp:</span><br><span class=\"line\">    62593872 active connections openings</span><br><span class=\"line\">    177834 passive connection openings</span><br><span class=\"line\">    153086 failed connection attempts</span><br><span class=\"line\">    999 connection resets received</span><br><span class=\"line\">    89 connections established</span><br><span class=\"line\">    2250692557 segments received</span><br><span class=\"line\">    2608392230 segments send out</span><br><span class=\"line\">    3325843 segments retransmited</span><br><span class=\"line\">    132 bad segments received.</span><br><span class=\"line\">    610130 resets sent</span><br><span class=\"line\">Udp:</span><br><span class=\"line\">    80565656 packets received</span><br><span class=\"line\">    21451 packets to unknown port received.</span><br><span class=\"line\">    0 packet receive errors</span><br><span class=\"line\">    80600189 packets sent</span><br><span class=\"line\">UdpLite:</span><br><span class=\"line\">TcpExt:</span><br><span class=\"line\">    1100 invalid SYN cookies received</span><br><span class=\"line\">    361 resets received for embryonic SYN_RECV sockets</span><br><span class=\"line\">    466 packets pruned from receive queue because of socket buffer overrun</span><br><span class=\"line\">    61819153 TCP sockets finished time wait in fast timer</span><br><span class=\"line\">    2987 TCP sockets finished time wait in slow timer</span><br><span class=\"line\">    660268 delayed acks sent</span><br><span class=\"line\">    260 delayed acks further delayed because of locked socket</span><br><span class=\"line\">    Quick ack mode was activated 1051984 times</span><br><span class=\"line\">    25934905 packets directly queued to recvmsg prequeue.</span><br><span class=\"line\">    911172308 packets directly received from backlog</span><br><span class=\"line\">    3173278514 packets directly received from prequeue</span><br><span class=\"line\">    1186216864 packets header predicted</span><br><span class=\"line\">    3170682 packets header predicted and directly queued to user</span><br><span class=\"line\">    357381509 acknowledgments not containing data received</span><br><span class=\"line\">    411743100 predicted acknowledgments</span><br><span class=\"line\">    1093102 times recovered from packet loss due to SACK data</span><br><span class=\"line\">    Detected reordering 12642 times using FACK</span><br><span class=\"line\">    Detected reordering 14884 times using SACK</span><br><span class=\"line\">    Detected reordering 11 times using time stamp</span><br><span class=\"line\">    13885 congestion windows fully recovered</span><br><span class=\"line\">    252 congestion windows partially recovered using Hoe heuristic</span><br><span class=\"line\">    TCPDSACKUndo: 193430</span><br><span class=\"line\">    51009 congestion windows recovered after partial ack</span><br><span class=\"line\">    168112 TCP data loss events</span><br><span class=\"line\">    TCPLostRetransmit: 14829</span><br><span class=\"line\">    108524 timeouts after SACK recovery</span><br><span class=\"line\">    4274 timeouts in loss state</span><br><span class=\"line\">    2496500 fast retransmits</span><br><span class=\"line\">    158451 forward retransmits</span><br><span class=\"line\">    230933 retransmits in slow start</span><br><span class=\"line\">    280735 other TCP timeouts</span><br><span class=\"line\">    38730 sack retransmits failed</span><br><span class=\"line\">    23520 packets collapsed in receive queue due to low socket buffer</span><br><span class=\"line\">    1051963 DSACKs sent for old packets</span><br><span class=\"line\">    20 DSACKs sent for out of order packets</span><br><span class=\"line\">    365231 DSACKs received</span><br><span class=\"line\">    692 DSACKs for out of order packets received</span><br><span class=\"line\">    414 connections reset due to unexpected data</span><br><span class=\"line\">    896 connections reset due to early user close</span><br><span class=\"line\">    761 connections aborted due to timeout</span><br><span class=\"line\">    TCPDSACKIgnoredOld: 509</span><br><span class=\"line\">    TCPDSACKIgnoredNoUndo: 425</span><br><span class=\"line\">    TCPSackShiftFallback: 22772083</span><br><span class=\"line\">    TCPBacklogDrop: 2192</span><br><span class=\"line\">    TCPChallengeACK: 125</span><br><span class=\"line\">    TCPSYNChallenge: 125</span><br><span class=\"line\">    TCPFromZeroWindowAdv: 85</span><br><span class=\"line\">    TCPToZeroWindowAdv: 85</span><br><span class=\"line\">    TCPWantZeroWindowAdv: 163030</span><br><span class=\"line\">IpExt:</span><br><span class=\"line\">    InBcastPkts: 1232</span><br><span class=\"line\">    InOctets: 1540584137119</span><br><span class=\"line\">    OutOctets: 1474239597014</span><br><span class=\"line\">    InBcastOctets: 191368</span><br></pre></td></tr></table></figure>\n<p>显示网络统计信息</p>\n<ul>\n<li>netstat -l</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </span><br><span class=\"line\">tcp        0      0 *:tproxy                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-cli                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:us-srv                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:intu-ec-client            *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:domain                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:oa-system                 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:ssh                       *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:8023                      *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 localhost:smtp              *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:12602                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:30050                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:eforward                  *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:svn                       *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:16010                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:6379                      *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:23212                     *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:sunrpc                    *:*                         LISTEN      </span><br><span class=\"line\">tcp        0      0 *:http                      *:*                         LISTEN      </span><br><span class=\"line\">udp        0      0 *:947                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:domain                    *:*                                     </span><br><span class=\"line\">udp        0      0 *:983                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:sunrpc                    *:*                                     </span><br><span class=\"line\">udp        0      0 *:ipp                       *:*                                     </span><br><span class=\"line\">udp        0      0 hcdn-others-worker-dev10:ntp *:*                                     </span><br><span class=\"line\">udp        0      0 localhost:ntp               *:*                                     </span><br><span class=\"line\">udp        0      0 *:ntp                       *:*                                     </span><br><span class=\"line\">udp        0      0 *:62630                     *:*                                     </span><br><span class=\"line\">Active UNIX domain sockets (only servers)</span><br><span class=\"line\">Proto RefCnt Flags       Type       State         I-Node Path</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18425  private/error</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18437  private/local</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache</span><br></pre></td></tr></table></figure>\n<p>显示监听的套接口</p>\n<ul>\n<li>netstat -ap | grep python3</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   </span><br><span class=\"line\">tcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3</span><br></pre></td></tr></table></figure>\n<p>显示程序运行的端口</p>\n<p>然后利用<code>ps -ef | grep &#39;15484&#39;</code> 命令可查找该端口运行的程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      6262   946  0 15:45 pts/0    00:00:00 grep 15484</span><br><span class=\"line\">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</span><br></pre></td></tr></table></figure>\n<p>Read More：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（56）：netstat命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-netstat.html\" target=\"_blank\" rel=\"noopener\">Linux netstat命令</a> </p>\n</blockquote>\n"},{"title":"Linux命令-ls","date":"2018-04-14T23:56:20.000Z","_content":"\nLinux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。\n\n#### 命令格式\n\n```\nls [OPTION]... [FILE]...\n```\n\n#### 命令功能\n\n列出目标目录中所有的子目录和文件。\n\n#### 命令参数\n\n| 参数                                      | 说明                                       |\n| --------------------------------------- | ---------------------------------------- |\n| -a                                      | 显示所有文件及目录（ls内定将文件名或目录名称开头为\".\"的视为隐藏档，不会列出） |\n| -A                                      | 同 -a ，但不列出 \".\"（当前目录）及 \"..\"（父目录）          |\n| -C                                      | 多列显示输出结果。这是默认选项                          |\n| -l                                      | 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出         |\n| -F                                      | 在列出的文件名称后加一符号；例如可执行档则加 \"*\", 目录则加 \"/\"     |\n| -c                                      | 与\"-lt\"选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与\"-l\"选项连用时，则排序的一句是文件的状态改变时间 |\n| -d                                      | 仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表 |\n| -f                                      | 此参数的效果和同时指定\"aU\"参数相同，并关闭\"lst\"参数的效果；       |\n| -i                                      | 显示文件索引节点号（inode）。一个索引节点代表一个文件            |\n| -k                                      | 以KB（千字节）为单位显示文件大小                        |\n| -m                                      | 用\",\"号区隔每个文件和目录的名称                        |\n| -n                                      | 以用户识别码和群组识别码替代其名称                        |\n| -r                                      | 将文件以相反次序显示(原定依英文字母次序)                    |\n| -s                                      | 显示文件和目录的大小，以区块为单位                        |\n| -t                                      | 将文件依建立时间之先后次序列出                          |\n| -L                                      | 如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录     |\n| -R                                      | 递归列出该目录中的所有文件                            |\n| --full-time                             | 列出完整的日期与时间                               |\n| --color[=WHEN] (WHEN=never/always/auto) | 使用不同的颜色高亮显示不同类型的                         |\n| -g                                      | 类似 -l，但不列出所有者                            |\n| -h                                      | 以容易理解的格式列出文件大小 (例如 1K 234M 2G)           |\n| -S                                      | 根据文件大小排序                                 |\n| -X                                      | 根据扩展名排序                                  |\n| -x                                      | 逐行列出项目而不是逐栏列出                            |\n\n#### 使用示例\n\n- `ls -l ly`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -l ly\ntotal 48\ndrwxr-xr-x  8 root root 4096 Dec 14 11:49 analysisweb\ndrwxr-xr-x  9 root root 4096 Dec 28 16:19 atsbtsp\ndrwxr-xr-x  2 root root 4096 Sep 12 14:37 auth_server_ratio\ndrwxr-xr-x  7 root root 4096 Jan  2 10:10 datawritehbase\ndrwxr-xr-x 10 root root 4096 Dec 13 14:54 hbasequeryweb\ndrwxr-xr-x  7 root root 4096 Oct  9 18:46 live_alarm_monitor\ndrwxr-xr-x  9 root root 4096 Oct 27 11:59 openrestywork\ndrwxr-xr-x  9 root root 4096 Dec 27 16:20 prepullvidcs\ndrwxr-xr-x  2 root root 4096 Nov 23 20:26 push_ffmpeg\ndrwxr-xr-x  3 root root 4096 Jan  4 18:46 testkafka\ndrwxr-xr-x  3 root root 4096 Nov 29 14:32 virtualenv\ndrwxr-xr-x  5 root root 4096 Oct 12 10:27 xiu_server_stat\n```\n\n单列显示某目录。\n\n- `ls`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls\nly  zabbix\n```\n\n显示当前目录下非影藏文件与目录\n\n- `ls -a`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -a\n.  ..  ly  zabbix\n```\n\n显示当前目录下包括影藏文件在内的所有文件列表\n\n- `ls -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# \n[root@hcdn-others-worker-dev100-bjlt home]# ls -l\ntotal 8\ndrwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly\ndrwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix\n```\n\n输出长格式列表\n\n- `ls -i -l `\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -i -l\ntotal 8\n393222 drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly\n393219 drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix\n```\n\n输出文件的inode信息\n\n- `ls -m`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -m\nly, zabbix\n```\n\n水平输出文件列表\n\n- `ls -t -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -t -l\ntotal 303312\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n```\n\n最近修改的文件显示在最前面\n\n- `ls -F -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -F -l\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client/\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6/\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1/\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1/\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3/\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64/\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5/\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38/\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka/\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9/\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13/\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1/\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6/\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama/\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar/\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0/\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0/\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n```\n\n安装特殊字符对文件进行分类\n\n- `ls -l --color=auto | ls -l --color=never | ls -l --color=always`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=auto\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=never\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=always\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n```\n\n单列列出文件并标记颜色\n\n- `ls -l n*`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l n*\n-rw-r--r--  1 root root    981093 Jul 11 23:45 nginx-1.12.1.tar.gz\n-rw-r--r--  1 root root  11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--  1 root root  31121503 Dec  8 23:23 node-v8.9.3.tar.gz\n\nnginx-1.12.1:\ntotal 732\ndrwxr-xr-x 6 1001 1001   4096 Aug 30 20:00 auto\n-rw-r--r-- 1 1001 1001 277349 Jul 11 21:24 CHANGES\n-rw-r--r-- 1 1001 1001 422542 Jul 11 21:24 CHANGES.ru\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 conf\n-rwxr-xr-x 1 1001 1001   2481 Jul 11 21:24 configure\ndrwxr-xr-x 4 1001 1001   4096 Aug 30 20:00 contrib\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 html\n-rw-r--r-- 1 1001 1001   1397 Jul 11 21:24 LICENSE\n-rw-r--r-- 1 root root    376 Aug 30 20:11 Makefile\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 man\ndrwxr-xr-x 3 root root   4096 Aug 30 20:12 objs\n-rw-r--r-- 1 1001 1001     49 Jul 11 21:24 README\ndrwxr-xr-x 9 1001 1001   4096 Aug 30 20:00 src\n\nnode-v8.9.3:\ntotal 596\n-rwxr-xr-x  1  502 games  1944 Dec  8 23:22 android-configure\n-rw-r--r--  1  502 games 62552 Dec  8 23:22 AUTHORS\ndrwxr-xr-x 32  502 games  4096 Jan  2 11:13 benchmark\n-rw-r--r--  1  502 games   263 Dec  8 23:22 BSDmakefile\n-rw-r--r--  1  502 games 13117 Dec  8 23:22 BUILDING.md\n-rw-r--r--  1  502 games 53576 Dec  8 23:22 CHANGELOG.md\n-rw-r--r--  1  502 games   181 Dec  8 23:22 CODE_OF_CONDUCT.md\n-rw-r--r--  1  502 games 30242 Dec  8 23:22 COLLABORATOR_GUIDE.md\n-rw-r--r--  1  502 games 14659 Dec  8 23:22 common.gypi\n-rw-r--r--  1 root root   2748 Jan  2 11:13 config.gypi\n-rw-r--r--  1 root root    223 Jan  2 11:13 config.mk\n-rwxr-xr-x  1  502 games 50245 Dec  8 23:22 configure\n-rw-r--r--  1  502 games 37017 Dec  8 23:22 CONTRIBUTING.md\n-rw-r--r--  1  502 games  3454 Dec  8 23:22 CPP_STYLE_GUIDE.md\ndrwxr-xr-x 13  502 games  4096 Jan  2 11:13 deps\ndrwxr-xr-x  6  502 games  4096 Jan  2 11:13 doc\n-rw-r--r--  1  502 games  5832 Dec  8 23:22 GOVERNANCE.md\n-rw-r--r--  1 root root  60153 Jan  2 11:13 icu_config.gypi\ndrwxr-xr-x  3  502 games  4096 Jan  2 11:13 lib\n-rw-r--r--  1  502 games 59059 Dec  8 23:22 LICENSE\n-rw-r--r--  1  502 games 37468 Dec  8 23:22 Makefile\n-rw-r--r--  1  502 games 24881 Dec  8 23:23 node.gyp\n-rw-r--r--  1  502 games 10585 Dec  8 23:23 node.gypi\ndrwxr-xr-x  5 root root   4096 Jan  2 11:14 out\n-rw-r--r--  1  502 games 26525 Dec  8 23:22 README.md\ndrwxr-xr-x  4  502 games  4096 Jan  2 11:13 src\ndrwxr-xr-x 22  502 games  4096 Jan  2 11:13 test\ndrwxr-xr-x  9  502 games  4096 Jan  2 11:13 tools\n-rw-r--r--  1  502 games 24869 Dec  8 23:23 vcbuild.bat\n\nnode-v8.9.3-linux-x64:\ntotal 164\ndrwxrwxr-x 2  500  500  4096 Jan  2 12:14 bin\n-rw-rw-r-- 1  500  500 53576 Dec  8 22:10 CHANGELOG.md\ndrwxr-xr-x 2 root root  4096 Jan  2 11:40 etc\ndrwxrwxr-x 3  500  500  4096 Dec  8 22:10 include\ndrwxrwxr-x 3  500  500  4096 Dec  8 22:10 lib\n-rw-rw-r-- 1  500  500 59059 Dec  8 22:10 LICENSE\n-rw-rw-r-- 1  500  500 26525 Dec  8 22:10 README.md\ndrwxrwxr-x 5  500  500  4096 Dec  8 22:10 share\n```\n\n单列列出以某个字符开头的文件和目录的详细内容\n\n\n\nRead More: \n\n> [每天一个linux命令(1)：ls命令](http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html) [Linux ls命令](http://www.runoob.com/linux/linux-comm-ls.html) [ls命令](http://man.linuxde.net/ls)  ","source":"_posts/linuxls.md","raw":"---\ntitle: Linux命令-ls\ndate: 2018-04-15 07:56:20\ntags:\n - Linux\n - 命令\n - ls\ncategories:\n - Linux/Unix\n---\n\nLinux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。\n\n#### 命令格式\n\n```\nls [OPTION]... [FILE]...\n```\n\n#### 命令功能\n\n列出目标目录中所有的子目录和文件。\n\n#### 命令参数\n\n| 参数                                      | 说明                                       |\n| --------------------------------------- | ---------------------------------------- |\n| -a                                      | 显示所有文件及目录（ls内定将文件名或目录名称开头为\".\"的视为隐藏档，不会列出） |\n| -A                                      | 同 -a ，但不列出 \".\"（当前目录）及 \"..\"（父目录）          |\n| -C                                      | 多列显示输出结果。这是默认选项                          |\n| -l                                      | 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出         |\n| -F                                      | 在列出的文件名称后加一符号；例如可执行档则加 \"*\", 目录则加 \"/\"     |\n| -c                                      | 与\"-lt\"选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与\"-l\"选项连用时，则排序的一句是文件的状态改变时间 |\n| -d                                      | 仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表 |\n| -f                                      | 此参数的效果和同时指定\"aU\"参数相同，并关闭\"lst\"参数的效果；       |\n| -i                                      | 显示文件索引节点号（inode）。一个索引节点代表一个文件            |\n| -k                                      | 以KB（千字节）为单位显示文件大小                        |\n| -m                                      | 用\",\"号区隔每个文件和目录的名称                        |\n| -n                                      | 以用户识别码和群组识别码替代其名称                        |\n| -r                                      | 将文件以相反次序显示(原定依英文字母次序)                    |\n| -s                                      | 显示文件和目录的大小，以区块为单位                        |\n| -t                                      | 将文件依建立时间之先后次序列出                          |\n| -L                                      | 如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录     |\n| -R                                      | 递归列出该目录中的所有文件                            |\n| --full-time                             | 列出完整的日期与时间                               |\n| --color[=WHEN] (WHEN=never/always/auto) | 使用不同的颜色高亮显示不同类型的                         |\n| -g                                      | 类似 -l，但不列出所有者                            |\n| -h                                      | 以容易理解的格式列出文件大小 (例如 1K 234M 2G)           |\n| -S                                      | 根据文件大小排序                                 |\n| -X                                      | 根据扩展名排序                                  |\n| -x                                      | 逐行列出项目而不是逐栏列出                            |\n\n#### 使用示例\n\n- `ls -l ly`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -l ly\ntotal 48\ndrwxr-xr-x  8 root root 4096 Dec 14 11:49 analysisweb\ndrwxr-xr-x  9 root root 4096 Dec 28 16:19 atsbtsp\ndrwxr-xr-x  2 root root 4096 Sep 12 14:37 auth_server_ratio\ndrwxr-xr-x  7 root root 4096 Jan  2 10:10 datawritehbase\ndrwxr-xr-x 10 root root 4096 Dec 13 14:54 hbasequeryweb\ndrwxr-xr-x  7 root root 4096 Oct  9 18:46 live_alarm_monitor\ndrwxr-xr-x  9 root root 4096 Oct 27 11:59 openrestywork\ndrwxr-xr-x  9 root root 4096 Dec 27 16:20 prepullvidcs\ndrwxr-xr-x  2 root root 4096 Nov 23 20:26 push_ffmpeg\ndrwxr-xr-x  3 root root 4096 Jan  4 18:46 testkafka\ndrwxr-xr-x  3 root root 4096 Nov 29 14:32 virtualenv\ndrwxr-xr-x  5 root root 4096 Oct 12 10:27 xiu_server_stat\n```\n\n单列显示某目录。\n\n- `ls`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls\nly  zabbix\n```\n\n显示当前目录下非影藏文件与目录\n\n- `ls -a`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -a\n.  ..  ly  zabbix\n```\n\n显示当前目录下包括影藏文件在内的所有文件列表\n\n- `ls -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# \n[root@hcdn-others-worker-dev100-bjlt home]# ls -l\ntotal 8\ndrwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly\ndrwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix\n```\n\n输出长格式列表\n\n- `ls -i -l `\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -i -l\ntotal 8\n393222 drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly\n393219 drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix\n```\n\n输出文件的inode信息\n\n- `ls -m`\n\n```\n[root@hcdn-others-worker-dev100-bjlt home]# ls -m\nly, zabbix\n```\n\n水平输出文件列表\n\n- `ls -t -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -t -l\ntotal 303312\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n```\n\n最近修改的文件显示在最前面\n\n- `ls -F -l`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -F -l\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client/\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6/\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1/\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1/\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3/\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64/\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5/\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38/\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka/\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9/\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13/\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1/\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6/\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama/\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar/\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0/\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0/\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n```\n\n安装特殊字符对文件进行分类\n\n- `ls -l --color=auto | ls -l --color=never | ls -l --color=always`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=auto\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=never\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=always\ntotal 303312\n-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg\n-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py\ndrwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client\ndrwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6\n-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz\ndrwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1\n-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz\n-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv\ndrwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1\n-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz\ndrwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3\ndrwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64\n-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz\ndrwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5\n-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz\ndrwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38\n-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz\ndrwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka\ndrwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9\n-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz\ndrwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13\n-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz\ndrwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1\n-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz\ndrwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6\n-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz\ndrwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama\ndrwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar\ndrwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0\n-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz\ndrwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0\n-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2\n```\n\n单列列出文件并标记颜色\n\n- `ls -l n*`\n\n```\n[root@hcdn-others-worker-dev100-bjlt ~]# ls -l n*\n-rw-r--r--  1 root root    981093 Jul 11 23:45 nginx-1.12.1.tar.gz\n-rw-r--r--  1 root root  11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz\n-rw-r--r--  1 root root  31121503 Dec  8 23:23 node-v8.9.3.tar.gz\n\nnginx-1.12.1:\ntotal 732\ndrwxr-xr-x 6 1001 1001   4096 Aug 30 20:00 auto\n-rw-r--r-- 1 1001 1001 277349 Jul 11 21:24 CHANGES\n-rw-r--r-- 1 1001 1001 422542 Jul 11 21:24 CHANGES.ru\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 conf\n-rwxr-xr-x 1 1001 1001   2481 Jul 11 21:24 configure\ndrwxr-xr-x 4 1001 1001   4096 Aug 30 20:00 contrib\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 html\n-rw-r--r-- 1 1001 1001   1397 Jul 11 21:24 LICENSE\n-rw-r--r-- 1 root root    376 Aug 30 20:11 Makefile\ndrwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 man\ndrwxr-xr-x 3 root root   4096 Aug 30 20:12 objs\n-rw-r--r-- 1 1001 1001     49 Jul 11 21:24 README\ndrwxr-xr-x 9 1001 1001   4096 Aug 30 20:00 src\n\nnode-v8.9.3:\ntotal 596\n-rwxr-xr-x  1  502 games  1944 Dec  8 23:22 android-configure\n-rw-r--r--  1  502 games 62552 Dec  8 23:22 AUTHORS\ndrwxr-xr-x 32  502 games  4096 Jan  2 11:13 benchmark\n-rw-r--r--  1  502 games   263 Dec  8 23:22 BSDmakefile\n-rw-r--r--  1  502 games 13117 Dec  8 23:22 BUILDING.md\n-rw-r--r--  1  502 games 53576 Dec  8 23:22 CHANGELOG.md\n-rw-r--r--  1  502 games   181 Dec  8 23:22 CODE_OF_CONDUCT.md\n-rw-r--r--  1  502 games 30242 Dec  8 23:22 COLLABORATOR_GUIDE.md\n-rw-r--r--  1  502 games 14659 Dec  8 23:22 common.gypi\n-rw-r--r--  1 root root   2748 Jan  2 11:13 config.gypi\n-rw-r--r--  1 root root    223 Jan  2 11:13 config.mk\n-rwxr-xr-x  1  502 games 50245 Dec  8 23:22 configure\n-rw-r--r--  1  502 games 37017 Dec  8 23:22 CONTRIBUTING.md\n-rw-r--r--  1  502 games  3454 Dec  8 23:22 CPP_STYLE_GUIDE.md\ndrwxr-xr-x 13  502 games  4096 Jan  2 11:13 deps\ndrwxr-xr-x  6  502 games  4096 Jan  2 11:13 doc\n-rw-r--r--  1  502 games  5832 Dec  8 23:22 GOVERNANCE.md\n-rw-r--r--  1 root root  60153 Jan  2 11:13 icu_config.gypi\ndrwxr-xr-x  3  502 games  4096 Jan  2 11:13 lib\n-rw-r--r--  1  502 games 59059 Dec  8 23:22 LICENSE\n-rw-r--r--  1  502 games 37468 Dec  8 23:22 Makefile\n-rw-r--r--  1  502 games 24881 Dec  8 23:23 node.gyp\n-rw-r--r--  1  502 games 10585 Dec  8 23:23 node.gypi\ndrwxr-xr-x  5 root root   4096 Jan  2 11:14 out\n-rw-r--r--  1  502 games 26525 Dec  8 23:22 README.md\ndrwxr-xr-x  4  502 games  4096 Jan  2 11:13 src\ndrwxr-xr-x 22  502 games  4096 Jan  2 11:13 test\ndrwxr-xr-x  9  502 games  4096 Jan  2 11:13 tools\n-rw-r--r--  1  502 games 24869 Dec  8 23:23 vcbuild.bat\n\nnode-v8.9.3-linux-x64:\ntotal 164\ndrwxrwxr-x 2  500  500  4096 Jan  2 12:14 bin\n-rw-rw-r-- 1  500  500 53576 Dec  8 22:10 CHANGELOG.md\ndrwxr-xr-x 2 root root  4096 Jan  2 11:40 etc\ndrwxrwxr-x 3  500  500  4096 Dec  8 22:10 include\ndrwxrwxr-x 3  500  500  4096 Dec  8 22:10 lib\n-rw-rw-r-- 1  500  500 59059 Dec  8 22:10 LICENSE\n-rw-rw-r-- 1  500  500 26525 Dec  8 22:10 README.md\ndrwxrwxr-x 5  500  500  4096 Dec  8 22:10 share\n```\n\n单列列出以某个字符开头的文件和目录的详细内容\n\n\n\nRead More: \n\n> [每天一个linux命令(1)：ls命令](http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html) [Linux ls命令](http://www.runoob.com/linux/linux-comm-ls.html) [ls命令](http://man.linuxde.net/ls)  ","slug":"linuxls","published":1,"updated":"2020-10-25T06:43:32.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueq9y00comolcfmjl96da","content":"<p>Linux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>列出目标目录中所有的子目录和文件。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示所有文件及目录（ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出）</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>同 -a ，但不列出 “.”（当前目录）及 “..”（父目录）</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>多列显示输出结果。这是默认选项</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>与”-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与”-l”选项连用时，则排序的一句是文件的状态改变时间</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>此参数的效果和同时指定”aU”参数相同，并关闭”lst”参数的效果；</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>显示文件索引节点号（inode）。一个索引节点代表一个文件</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>以KB（千字节）为单位显示文件大小</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>用”,”号区隔每个文件和目录的名称</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>以用户识别码和群组识别码替代其名称</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>将文件以相反次序显示(原定依英文字母次序)</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>显示文件和目录的大小，以区块为单位</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>将文件依建立时间之先后次序列出</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归列出该目录中的所有文件</td>\n</tr>\n<tr>\n<td>–full-time</td>\n<td>列出完整的日期与时间</td>\n</tr>\n<tr>\n<td>–color[=WHEN] (WHEN=never/always/auto)</td>\n<td>使用不同的颜色高亮显示不同类型的</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>类似 -l，但不列出所有者</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>根据文件大小排序</td>\n</tr>\n<tr>\n<td>-X</td>\n<td>根据扩展名排序</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>逐行列出项目而不是逐栏列出</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li><code>ls -l ly</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -l ly</span><br><span class=\"line\">total 48</span><br><span class=\"line\">drwxr-xr-x  8 root root 4096 Dec 14 11:49 analysisweb</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Dec 28 16:19 atsbtsp</span><br><span class=\"line\">drwxr-xr-x  2 root root 4096 Sep 12 14:37 auth_server_ratio</span><br><span class=\"line\">drwxr-xr-x  7 root root 4096 Jan  2 10:10 datawritehbase</span><br><span class=\"line\">drwxr-xr-x 10 root root 4096 Dec 13 14:54 hbasequeryweb</span><br><span class=\"line\">drwxr-xr-x  7 root root 4096 Oct  9 18:46 live_alarm_monitor</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Oct 27 11:59 openrestywork</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Dec 27 16:20 prepullvidcs</span><br><span class=\"line\">drwxr-xr-x  2 root root 4096 Nov 23 20:26 push_ffmpeg</span><br><span class=\"line\">drwxr-xr-x  3 root root 4096 Jan  4 18:46 testkafka</span><br><span class=\"line\">drwxr-xr-x  3 root root 4096 Nov 29 14:32 virtualenv</span><br><span class=\"line\">drwxr-xr-x  5 root root 4096 Oct 12 10:27 xiu_server_stat</span><br></pre></td></tr></table></figure>\n<p>单列显示某目录。</p>\n<ul>\n<li><code>ls</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls</span><br><span class=\"line\">ly  zabbix</span><br></pre></td></tr></table></figure>\n<p>显示当前目录下非影藏文件与目录</p>\n<ul>\n<li><code>ls -a</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -a</span><br><span class=\"line\">.  ..  ly  zabbix</span><br></pre></td></tr></table></figure>\n<p>显示当前目录下包括影藏文件在内的所有文件列表</p>\n<ul>\n<li><code>ls -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -l</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</span><br><span class=\"line\">drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</span><br></pre></td></tr></table></figure>\n<p>输出长格式列表</p>\n<ul>\n<li><code>ls -i -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -i -l</span><br><span class=\"line\">total 8</span><br><span class=\"line\">393222 drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</span><br><span class=\"line\">393219 drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</span><br></pre></td></tr></table></figure>\n<p>输出文件的inode信息</p>\n<ul>\n<li><code>ls -m</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -m</span><br><span class=\"line\">ly, zabbix</span><br></pre></td></tr></table></figure>\n<p>水平输出文件列表</p>\n<ul>\n<li><code>ls -t -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -t -l</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br></pre></td></tr></table></figure>\n<p>最近修改的文件显示在最前面</p>\n<ul>\n<li><code>ls -F -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -F -l</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client/</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6/</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1/</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1/</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3/</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64/</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5/</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38/</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka/</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9/</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13/</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1/</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6/</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama/</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar/</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0/</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0/</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>安装特殊字符对文件进行分类</p>\n<ul>\n<li><code>ls -l --color=auto | ls -l --color=never | ls -l --color=always</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=auto</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=never</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=always</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>单列列出文件并标记颜色</p>\n<ul>\n<li><code>ls -l n*</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l n*</span><br><span class=\"line\">-rw-r--r--  1 root root    981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">-rw-r--r--  1 root root  11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--  1 root root  31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">nginx-1.12.1:</span><br><span class=\"line\">total 732</span><br><span class=\"line\">drwxr-xr-x 6 1001 1001   4096 Aug 30 20:00 auto</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001 277349 Jul 11 21:24 CHANGES</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001 422542 Jul 11 21:24 CHANGES.ru</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 conf</span><br><span class=\"line\">-rwxr-xr-x 1 1001 1001   2481 Jul 11 21:24 configure</span><br><span class=\"line\">drwxr-xr-x 4 1001 1001   4096 Aug 30 20:00 contrib</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 html</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001   1397 Jul 11 21:24 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root    376 Aug 30 20:11 Makefile</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 man</span><br><span class=\"line\">drwxr-xr-x 3 root root   4096 Aug 30 20:12 objs</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001     49 Jul 11 21:24 README</span><br><span class=\"line\">drwxr-xr-x 9 1001 1001   4096 Aug 30 20:00 src</span><br><span class=\"line\"></span><br><span class=\"line\">node-v8.9.3:</span><br><span class=\"line\">total 596</span><br><span class=\"line\">-rwxr-xr-x  1  502 games  1944 Dec  8 23:22 android-configure</span><br><span class=\"line\">-rw-r--r--  1  502 games 62552 Dec  8 23:22 AUTHORS</span><br><span class=\"line\">drwxr-xr-x 32  502 games  4096 Jan  2 11:13 benchmark</span><br><span class=\"line\">-rw-r--r--  1  502 games   263 Dec  8 23:22 BSDmakefile</span><br><span class=\"line\">-rw-r--r--  1  502 games 13117 Dec  8 23:22 BUILDING.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 53576 Dec  8 23:22 CHANGELOG.md</span><br><span class=\"line\">-rw-r--r--  1  502 games   181 Dec  8 23:22 CODE_OF_CONDUCT.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 30242 Dec  8 23:22 COLLABORATOR_GUIDE.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 14659 Dec  8 23:22 common.gypi</span><br><span class=\"line\">-rw-r--r--  1 root root   2748 Jan  2 11:13 config.gypi</span><br><span class=\"line\">-rw-r--r--  1 root root    223 Jan  2 11:13 config.mk</span><br><span class=\"line\">-rwxr-xr-x  1  502 games 50245 Dec  8 23:22 configure</span><br><span class=\"line\">-rw-r--r--  1  502 games 37017 Dec  8 23:22 CONTRIBUTING.md</span><br><span class=\"line\">-rw-r--r--  1  502 games  3454 Dec  8 23:22 CPP_STYLE_GUIDE.md</span><br><span class=\"line\">drwxr-xr-x 13  502 games  4096 Jan  2 11:13 deps</span><br><span class=\"line\">drwxr-xr-x  6  502 games  4096 Jan  2 11:13 doc</span><br><span class=\"line\">-rw-r--r--  1  502 games  5832 Dec  8 23:22 GOVERNANCE.md</span><br><span class=\"line\">-rw-r--r--  1 root root  60153 Jan  2 11:13 icu_config.gypi</span><br><span class=\"line\">drwxr-xr-x  3  502 games  4096 Jan  2 11:13 lib</span><br><span class=\"line\">-rw-r--r--  1  502 games 59059 Dec  8 23:22 LICENSE</span><br><span class=\"line\">-rw-r--r--  1  502 games 37468 Dec  8 23:22 Makefile</span><br><span class=\"line\">-rw-r--r--  1  502 games 24881 Dec  8 23:23 node.gyp</span><br><span class=\"line\">-rw-r--r--  1  502 games 10585 Dec  8 23:23 node.gypi</span><br><span class=\"line\">drwxr-xr-x  5 root root   4096 Jan  2 11:14 out</span><br><span class=\"line\">-rw-r--r--  1  502 games 26525 Dec  8 23:22 README.md</span><br><span class=\"line\">drwxr-xr-x  4  502 games  4096 Jan  2 11:13 src</span><br><span class=\"line\">drwxr-xr-x 22  502 games  4096 Jan  2 11:13 test</span><br><span class=\"line\">drwxr-xr-x  9  502 games  4096 Jan  2 11:13 tools</span><br><span class=\"line\">-rw-r--r--  1  502 games 24869 Dec  8 23:23 vcbuild.bat</span><br><span class=\"line\"></span><br><span class=\"line\">node-v8.9.3-linux-x64:</span><br><span class=\"line\">total 164</span><br><span class=\"line\">drwxrwxr-x 2  500  500  4096 Jan  2 12:14 bin</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 53576 Dec  8 22:10 CHANGELOG.md</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  2 11:40 etc</span><br><span class=\"line\">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 include</span><br><span class=\"line\">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 lib</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 59059 Dec  8 22:10 LICENSE</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 26525 Dec  8 22:10 README.md</span><br><span class=\"line\">drwxrwxr-x 5  500  500  4096 Dec  8 22:10 share</span><br></pre></td></tr></table></figure>\n<p>单列列出以某个字符开头的文件和目录的详细内容</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令(1)：ls命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ls.html\" target=\"_blank\" rel=\"noopener\">Linux ls命令</a> <a href=\"http://man.linuxde.net/ls\" target=\"_blank\" rel=\"noopener\">ls命令</a>  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</p>\n<h4 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h4><p>列出目标目录中所有的子目录和文件。</p>\n<h4 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示所有文件及目录（ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出）</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>同 -a ，但不列出 “.”（当前目录）及 “..”（父目录）</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>多列显示输出结果。这是默认选项</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>与”-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与”-l”选项连用时，则排序的一句是文件的状态改变时间</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>此参数的效果和同时指定”aU”参数相同，并关闭”lst”参数的效果；</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>显示文件索引节点号（inode）。一个索引节点代表一个文件</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>以KB（千字节）为单位显示文件大小</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>用”,”号区隔每个文件和目录的名称</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>以用户识别码和群组识别码替代其名称</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>将文件以相反次序显示(原定依英文字母次序)</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>显示文件和目录的大小，以区块为单位</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>将文件依建立时间之先后次序列出</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归列出该目录中的所有文件</td>\n</tr>\n<tr>\n<td>–full-time</td>\n<td>列出完整的日期与时间</td>\n</tr>\n<tr>\n<td>–color[=WHEN] (WHEN=never/always/auto)</td>\n<td>使用不同的颜色高亮显示不同类型的</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>类似 -l，但不列出所有者</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>根据文件大小排序</td>\n</tr>\n<tr>\n<td>-X</td>\n<td>根据扩展名排序</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>逐行列出项目而不是逐栏列出</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li><code>ls -l ly</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -l ly</span><br><span class=\"line\">total 48</span><br><span class=\"line\">drwxr-xr-x  8 root root 4096 Dec 14 11:49 analysisweb</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Dec 28 16:19 atsbtsp</span><br><span class=\"line\">drwxr-xr-x  2 root root 4096 Sep 12 14:37 auth_server_ratio</span><br><span class=\"line\">drwxr-xr-x  7 root root 4096 Jan  2 10:10 datawritehbase</span><br><span class=\"line\">drwxr-xr-x 10 root root 4096 Dec 13 14:54 hbasequeryweb</span><br><span class=\"line\">drwxr-xr-x  7 root root 4096 Oct  9 18:46 live_alarm_monitor</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Oct 27 11:59 openrestywork</span><br><span class=\"line\">drwxr-xr-x  9 root root 4096 Dec 27 16:20 prepullvidcs</span><br><span class=\"line\">drwxr-xr-x  2 root root 4096 Nov 23 20:26 push_ffmpeg</span><br><span class=\"line\">drwxr-xr-x  3 root root 4096 Jan  4 18:46 testkafka</span><br><span class=\"line\">drwxr-xr-x  3 root root 4096 Nov 29 14:32 virtualenv</span><br><span class=\"line\">drwxr-xr-x  5 root root 4096 Oct 12 10:27 xiu_server_stat</span><br></pre></td></tr></table></figure>\n<p>单列显示某目录。</p>\n<ul>\n<li><code>ls</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls</span><br><span class=\"line\">ly  zabbix</span><br></pre></td></tr></table></figure>\n<p>显示当前目录下非影藏文件与目录</p>\n<ul>\n<li><code>ls -a</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -a</span><br><span class=\"line\">.  ..  ly  zabbix</span><br></pre></td></tr></table></figure>\n<p>显示当前目录下包括影藏文件在内的所有文件列表</p>\n<ul>\n<li><code>ls -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# </span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -l</span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</span><br><span class=\"line\">drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</span><br></pre></td></tr></table></figure>\n<p>输出长格式列表</p>\n<ul>\n<li><code>ls -i -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -i -l</span><br><span class=\"line\">total 8</span><br><span class=\"line\">393222 drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</span><br><span class=\"line\">393219 drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</span><br></pre></td></tr></table></figure>\n<p>输出文件的inode信息</p>\n<ul>\n<li><code>ls -m</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt home]# ls -m</span><br><span class=\"line\">ly, zabbix</span><br></pre></td></tr></table></figure>\n<p>水平输出文件列表</p>\n<ul>\n<li><code>ls -t -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -t -l</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br></pre></td></tr></table></figure>\n<p>最近修改的文件显示在最前面</p>\n<ul>\n<li><code>ls -F -l</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -F -l</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client/</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6/</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1/</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1/</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3/</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64/</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5/</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38/</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka/</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9/</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13/</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1/</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6/</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama/</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar/</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0/</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0/</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>安装特殊字符对文件进行分类</p>\n<ul>\n<li><code>ls -l --color=auto | ls -l --color=never | ls -l --color=always</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=auto</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=never</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=always</span><br><span class=\"line\">total 303312</span><br><span class=\"line\">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</span><br><span class=\"line\">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</span><br><span class=\"line\">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</span><br><span class=\"line\">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</span><br><span class=\"line\">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</span><br><span class=\"line\">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</span><br><span class=\"line\">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</span><br><span class=\"line\">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</span><br><span class=\"line\">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</span><br><span class=\"line\">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</span><br><span class=\"line\">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</span><br><span class=\"line\">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</span><br><span class=\"line\">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</span><br><span class=\"line\">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</span><br><span class=\"line\">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</span><br><span class=\"line\">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</span><br><span class=\"line\">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</span><br><span class=\"line\">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</span><br><span class=\"line\">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</span><br><span class=\"line\">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</span><br><span class=\"line\">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</span><br><span class=\"line\">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</span><br><span class=\"line\">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</span><br><span class=\"line\">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</span><br><span class=\"line\">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</span><br><span class=\"line\">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</span><br><span class=\"line\">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</span><br><span class=\"line\">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</span><br><span class=\"line\">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>单列列出文件并标记颜色</p>\n<ul>\n<li><code>ls -l n*</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l n*</span><br><span class=\"line\">-rw-r--r--  1 root root    981093 Jul 11 23:45 nginx-1.12.1.tar.gz</span><br><span class=\"line\">-rw-r--r--  1 root root  11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</span><br><span class=\"line\">-rw-r--r--  1 root root  31121503 Dec  8 23:23 node-v8.9.3.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">nginx-1.12.1:</span><br><span class=\"line\">total 732</span><br><span class=\"line\">drwxr-xr-x 6 1001 1001   4096 Aug 30 20:00 auto</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001 277349 Jul 11 21:24 CHANGES</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001 422542 Jul 11 21:24 CHANGES.ru</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 conf</span><br><span class=\"line\">-rwxr-xr-x 1 1001 1001   2481 Jul 11 21:24 configure</span><br><span class=\"line\">drwxr-xr-x 4 1001 1001   4096 Aug 30 20:00 contrib</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 html</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001   1397 Jul 11 21:24 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root    376 Aug 30 20:11 Makefile</span><br><span class=\"line\">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 man</span><br><span class=\"line\">drwxr-xr-x 3 root root   4096 Aug 30 20:12 objs</span><br><span class=\"line\">-rw-r--r-- 1 1001 1001     49 Jul 11 21:24 README</span><br><span class=\"line\">drwxr-xr-x 9 1001 1001   4096 Aug 30 20:00 src</span><br><span class=\"line\"></span><br><span class=\"line\">node-v8.9.3:</span><br><span class=\"line\">total 596</span><br><span class=\"line\">-rwxr-xr-x  1  502 games  1944 Dec  8 23:22 android-configure</span><br><span class=\"line\">-rw-r--r--  1  502 games 62552 Dec  8 23:22 AUTHORS</span><br><span class=\"line\">drwxr-xr-x 32  502 games  4096 Jan  2 11:13 benchmark</span><br><span class=\"line\">-rw-r--r--  1  502 games   263 Dec  8 23:22 BSDmakefile</span><br><span class=\"line\">-rw-r--r--  1  502 games 13117 Dec  8 23:22 BUILDING.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 53576 Dec  8 23:22 CHANGELOG.md</span><br><span class=\"line\">-rw-r--r--  1  502 games   181 Dec  8 23:22 CODE_OF_CONDUCT.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 30242 Dec  8 23:22 COLLABORATOR_GUIDE.md</span><br><span class=\"line\">-rw-r--r--  1  502 games 14659 Dec  8 23:22 common.gypi</span><br><span class=\"line\">-rw-r--r--  1 root root   2748 Jan  2 11:13 config.gypi</span><br><span class=\"line\">-rw-r--r--  1 root root    223 Jan  2 11:13 config.mk</span><br><span class=\"line\">-rwxr-xr-x  1  502 games 50245 Dec  8 23:22 configure</span><br><span class=\"line\">-rw-r--r--  1  502 games 37017 Dec  8 23:22 CONTRIBUTING.md</span><br><span class=\"line\">-rw-r--r--  1  502 games  3454 Dec  8 23:22 CPP_STYLE_GUIDE.md</span><br><span class=\"line\">drwxr-xr-x 13  502 games  4096 Jan  2 11:13 deps</span><br><span class=\"line\">drwxr-xr-x  6  502 games  4096 Jan  2 11:13 doc</span><br><span class=\"line\">-rw-r--r--  1  502 games  5832 Dec  8 23:22 GOVERNANCE.md</span><br><span class=\"line\">-rw-r--r--  1 root root  60153 Jan  2 11:13 icu_config.gypi</span><br><span class=\"line\">drwxr-xr-x  3  502 games  4096 Jan  2 11:13 lib</span><br><span class=\"line\">-rw-r--r--  1  502 games 59059 Dec  8 23:22 LICENSE</span><br><span class=\"line\">-rw-r--r--  1  502 games 37468 Dec  8 23:22 Makefile</span><br><span class=\"line\">-rw-r--r--  1  502 games 24881 Dec  8 23:23 node.gyp</span><br><span class=\"line\">-rw-r--r--  1  502 games 10585 Dec  8 23:23 node.gypi</span><br><span class=\"line\">drwxr-xr-x  5 root root   4096 Jan  2 11:14 out</span><br><span class=\"line\">-rw-r--r--  1  502 games 26525 Dec  8 23:22 README.md</span><br><span class=\"line\">drwxr-xr-x  4  502 games  4096 Jan  2 11:13 src</span><br><span class=\"line\">drwxr-xr-x 22  502 games  4096 Jan  2 11:13 test</span><br><span class=\"line\">drwxr-xr-x  9  502 games  4096 Jan  2 11:13 tools</span><br><span class=\"line\">-rw-r--r--  1  502 games 24869 Dec  8 23:23 vcbuild.bat</span><br><span class=\"line\"></span><br><span class=\"line\">node-v8.9.3-linux-x64:</span><br><span class=\"line\">total 164</span><br><span class=\"line\">drwxrwxr-x 2  500  500  4096 Jan  2 12:14 bin</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 53576 Dec  8 22:10 CHANGELOG.md</span><br><span class=\"line\">drwxr-xr-x 2 root root  4096 Jan  2 11:40 etc</span><br><span class=\"line\">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 include</span><br><span class=\"line\">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 lib</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 59059 Dec  8 22:10 LICENSE</span><br><span class=\"line\">-rw-rw-r-- 1  500  500 26525 Dec  8 22:10 README.md</span><br><span class=\"line\">drwxrwxr-x 5  500  500  4096 Dec  8 22:10 share</span><br></pre></td></tr></table></figure>\n<p>单列列出以某个字符开头的文件和目录的详细内容</p>\n<p>Read More: </p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令(1)：ls命令</a> <a href=\"http://www.runoob.com/linux/linux-comm-ls.html\" target=\"_blank\" rel=\"noopener\">Linux ls命令</a> <a href=\"http://man.linuxde.net/ls\" target=\"_blank\" rel=\"noopener\">ls命令</a>  </p>\n</blockquote>\n"},{"title":"排序算法总结","date":"2017-04-11T08:53:00.000Z","_content":"\n各种排序算法稳定性以及时间复杂度总结：\n\n| 类别   | 排序方法   | 平均时间复杂度   | 最好情况       | 最坏情况      | 空间复杂度    | 稳定性  |\n| ---- | ------ | --------- | ---------- | --------- | -------- | ---- |\n| 交换排序 | 冒泡排序   | O(n^2)    | O(n)       | O(n^2)    | O(1)     | 稳定   |\n| 交换排序 | 快排     | O(nlogn)  | O(nlogn)   | O(n^2)    | O(nlogn) | 不稳定  |\n| 选择排序 | 直接选择排序 | O(n^2)    | O(n^2)     | O(n^2)    | O(1)     | 不稳定  |\n| 选择排序 | 堆排序    | O(nlogn)  | O(nlogn)   | O(nlogn)  | O(1)     | 不稳定  |\n| 插入排序 | 直接插入排序 | O(n^2)    | O(n)       | O(n^2)    | O(1)     | 稳定   |\n| 插入排序 | 希尔排序   | O(n^1.5)  | O(n)       | O(n^2)    | O(1)     | 不稳定  |\n| 未分类  | 归并排序   | O(nlogn)  | O(nlogn)   | O(nlogn)  | O(n)     | 稳定   |\n| 未分类  | 基数排序   | O(d(n+r)) | O(d(n+rd)) | O(d(n+r)) | O(rd+n)  | 稳定   |\n\n**Note**：logn代表以2为底n的对数。\n\n当原表有序或基本有序时，**直接插入排序**和**冒泡排序**将大大减少比较次数和移动记录的次数，时间复杂度可降至O(n)；而**快速排序**则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O(n^2)；原表是否有序，对**直接选择排序**、**堆排序**、**归并排序**和**基数排序**的时间复杂度影响不大。\n\n### **排序算法的稳定性说明**\n\n若待排序的序列中，存在多个具有相同关键字的记录，经过排序，这些记录的相对次序保持不变，则称该算法是稳定的；若经排序后，记录的相对次序发生了改变，则称该算法是不稳定的。 Example：\n\n如果 Ai = Aj 且 Ai 原来在位置前，排序后Ai 还是要在 Aj 位置前。\n\n稳定性的好处：排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素，其顺序在高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；Example：\n\n![2017-4-11 185017](/images/2017-4-11 185017.png)\n\n对于不稳定的算法我们可以这样改进：\n\n在每个输入元素加一个 index，表示初始时的数组索引，当不稳定的算法排好序后，对于相同的元素对 index 排序即可。\n\n#### 冒泡排序\n\n冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再把他们交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。\n\n#### 快排\n\n快速排序有两个方向，左边的i下标一直往右走，当 a[i] <= a[center_index]，其中 center_index 是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当 a[j] > a[center_index]。如果i和j都走不动了，i <= j，交换 a[i] 和 a[j]，重复上面的过程，直到i > j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和 a[j] 交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和 a[j] 交换的时刻。\n\n#### 直接选择排序\n\n选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第 n 个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。\n\n#### 堆排序\n\n我们知道堆的结构是节点 i 的孩子为2 * i和2 * i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， ... 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n#### 直接插入排序\n\n插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n#### 希尔排序\n\n希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。\n\n#### 归并排序\n\n归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n\n#### 基数排序\n\n基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。\n\n### 排序算法\n\n#### 冒泡排序\n\n**基本思想**\n\n两个数比较大小，较大的数下沉，较小的数冒起来。\n\n**过程**\n\n比较相邻的两个数据，如果第二个数小，就交换位置；\n\n从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了；\n继续重复上述过程，依次将第2、3、......、n-1 个最小数排好位置。\n\n![2017-4-11 191243](/images/2017-4-11 191243.png)\n\n**PHP代码实现**、\n\n```\npublic function MaoPao($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++) {\n            for ($j = 0; $j < count($sort_array) - $i - 1; $j++) {\n                if ($sort_array[$j] > $sort_array[$j + 1]){\n                    $tmp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + 1];\n                    $sort_array[$j + 1] = $tmp;\n                }\n            }\n        }\n        return $sort_array;\n    }\n```\n\n**优化**\n\n冒泡排序的问题在于，数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到 count($sort_array)-1 次，后面的比较是没有意义的。\n\n解决办法：我们可以设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。\n\n```\npublic function MaoPao($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++) {\n            $flag = 0;\n            for ($j = 0; $j < count($sort_array) - $i - 1; $j++) {\n                if ($sort_array[$j] > $sort_array[$j + 1]){\n                    $tmp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + 1];\n                    $sort_array[$j + 1] = $tmp;\n                    $flag = 1;\n                }\n            }\n            if ($flag == 0){\n                break;\n            }\n        }\n        return $sort_array;\n    }\n```\n\n#### 快排\n\n**基本思想**：分治\n\n先从数列中取出一个数作为key值；\n将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；\n对左右两个小数列重复第二步，直至各区间只有1个数。\n\n**PHP代码实现**\n\n```\npublic function Fast($sort_array){\n        $left_array = array();\n        $right_array = array();\n        $index = 1;\n        if (!is_array($sort_array)){\n            return false;\n        }\n        if (count($sort_array) <= 1){\n          return $sort_array;\n        }\n        while ($index < count($sort_array)){\n            if ($sort_array[$index] > $sort_array[0]){\n                $right_array[] = $sort_array[$index];\n            } elseif ($sort_array[$index] <= $sort_array[0]){\n                $left_array[] = $sort_array[$index];\n            }\n            $index++;\n        }\n        $left_array = $this->Fast($left_array);\n        $right_array = $this->Fast($right_array);\n        return array_merge($left_array, array($sort_array[0]), $right_array);\n    }\n```\n\n#### 直接选择排序\n\n**基本思想**\n\n在长度为 n 的无序数组中，第一次遍历 n-1 个数，找到最小的数值与第一个元素交换；\n\n第二次遍历 n-2 个数，找到最小的数值与第二个元素交换；\n\n......\n\n第 n-1 次遍历，找到最小的数值与第 n-1 个元素交换，排序完成。\n\n**过程**\n\n![2017-4-11 194803](/images/2017-4-11 194803.jpg)\n\n**PHP代码实现**\n\n```\npublic function Select($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++){\n            $min = $i;\n            for ($j = $i + 1; $j < count($sort_array); $j++){\n                if ($sort_array[$min] > $sort_array[$j]){\n                    $min = $j;\n                }\n            }\n            $tmp = $sort_array[$min];\n            $sort_array[$min] = $sort_array[$i];\n            $sort_array[$i] = $tmp;\n        }\n        return $sort_array;\n    }\n```\n\n#### 堆排序\n\n**基本思想**\n\n![2017-4-11 194932](/images/2017-4-11 194932.jpg)\n\n**过程**\n\n图示： （88,85,83,73,72,60,57,48,42,6）\n\n![2017-4-11 195018](/images/2017-4-11 195018.jpg)\n\n**PHP代码实现**\n\n```\npublic function DuiPaiXu($sort_array){\n        $this->buildHeap($sort_array);\n        $count = count($sort_array);\n        while ($count > 1) {\n            $this->swap($sort_array, $count - 1, 0);\n            $count--;\n            $this->adjustHeap($sort_array, $count, 0);\n        }\n        return $sort_array;\n    }\n public function buildHeap(&$arr){\n        $node = floor(count($arr) / 2) - 1;\n        for ($i = $node; $i >= 0; $i--) {\n            $this->adjustHeap($arr, count($arr), $i);\n        }\n    }\npublic function adjustHeap(&$arr, $maxLen, $node){\n        $left_child = 2 * $node + 1;\n        $right_child = 2 * $node + 2;\n        $max = $node;\n        while ($left_child < $maxLen || $right_child < $maxLen) {\n            if ($left_child < $maxLen && $arr[$left_child] > $arr[$max]) {\n                $max = $left_child;\n            }\n            if ($right_child < $maxLen && $arr[$right_child] > $arr[$max]) {\n                $max = $right_child;\n            }\n            if ($max != $node) {\n                $this->swap($arr, $max, $node);\n                $node   = $max;\n                $left_child = 2 * $node + 1;\n                $right_child = 2 * $node + 2;\n            } else {\n                break;\n            }\n        }\n    }\npublic function swap(&$arr, $m, $n){\n        $arr[$m] = $arr[$m] ^ $arr[$n];\n        $arr[$n] = $arr[$n] ^ $arr[$m];\n        $arr[$m] = $arr[$m] ^ $arr[$n];\n    }\n```\n\n#### 直接插入排序\n\n**基本思想**\n\n在要排序的一组数中，假定前 n-1 个数已经排好序，现在将第 n 个数插到前面的有序数列中，使得这 n 个数也是排好顺序的。如此反复循环，直到全部排好顺序。\n\n**过程**\n\n![2017-4-11 195224](/images/2017-4-11 195224.jpg)\n\n![2017-4-11 195257](/images/2017-4-11 195257.jpg)\n\n**PHP代码实现**\n\n```\npublic function ChaRu($sort_array){\n        for ($i = 2; $i < count($sort_array); $i++){\n            $j = $i - 1;\n            $key = $sort_array[$i];\n            while ($j >= 0 && $sort_array[$j] > $key){\n                $sort_array[$j + 1] = $sort_array[$j];\n                $j--;\n            }\n            $sort_array[$j + 1] = $key;\n        }\n        return $sort_array;\n    }\n```\n\n#### 希尔排序\n\n**基本思想**\n\n在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。\n\n**过程**\n\n![2017-4-11 195422](/images/2017-4-11 195422.jpg)\n\n**PHP代码实现**\n\n```\npublic function XiErPaiXu($sort_array){\n        if (!is_array($sort_array))\n            return false;\n        $n = count($sort_array);\n        for ($gap = floor($n / 2); $gap > 0; $gap = floor($gap /= 2)) {\n            for ($i = $gap; $i < $n; ++$i) {\n                for ($j = $i - $gap; $j >= 0 && $sort_array[$j + $gap] < $sort_array[$j]; $j -= $gap) {\n                    $temp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + $gap];\n                    $sort_array[$j + $gap] = $temp;\n                }\n            }\n        }\n        return $sort_array;\n    }\n```\n\n#### 归并排序\n\n**基本思想**\n\n归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。\n\n首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。\n\n解决了上面的合并有序数列问题，再来看归并排序，其的基本思路就是将数组分成2组A，B，如果这2组组内的数据都是有序的，那么就可以很方便的将这2组数据进行排序。如何让这2组组内数据有序了？\n可以将A，B组各自再分成2组。依次类推，当分出来的小组只有1个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的2个小组就可以了。这样通过**先递归的分解数列**，**再合并数列**就完成了归并排序。\n\n**过程**\n\n![2017-4-11 195640](/images/2017-4-11 195640.jpg)\n\n**PHP代码实现**\n\n```\npublic function GuiBing($sort_array){\n        $len = count($sort_array);\n        if($len <= 1)\n            return $sort_array;\n        $mid = intval($len/2);\n        $left_arr = array_slice($sort_array, 0, $mid);\n        $right_arr = array_slice($sort_array, $mid);\n        $left_arr = $this->GuiBing($left_arr);\n        $right_arr = $this->GuiBing($right_arr);\n        $sort_array = $this->GuiBing_child($left_arr, $right_arr);\n        return $sort_array;\n    }\n\npublic function GuiBing_child($arrA, $arrB){\n        $arrC = array();\n        while(count($arrA) && count($arrB)){\n            $arrC[] = $arrA['0'] < $arrB['0'] ? array_shift($arrA) : array_shift($arrB);\n        }\n        return array_merge($arrC, $arrA, $arrB);\n    }\n```\n\n#### 基数排序\n\n**基本思想**\n\n我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。假设我们有编号0~9的10个桶，遍历需要进行排序的各个值的个位，然后根据个位的数值放进相应的桶中，分类后，我们在从各个桶中，将这些数按照从编号0到编号9的顺序依次将所有数取出来。这时，得到的序列就是个位数上呈递增趋势的序列。 接下来，可以对十位数、百位数也按照这种方法进行排序，最后就能得到排序完成的序列。\n\n基数排序适用于对位数较少的排序，位数较长会浪费空间。\n\n基数排序的平均时间复杂度为O(d(n+r))，其中 d 表示位数，r为基数（d的取值范围）。\n\nLSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。\n\n本文介绍的是LSD模式。\n\n**过程**\n\n![2017-4-11 200834](/images/2017-4-11 200834.jpg)\n\n![2017-4-11 200911](/images/2017-4-11 200911.jpg)\n\n**PHP代码实现**\n\n```\npublic function GetNumInPos($num, $pos){\n        $temp = 1;\n        for ($i = 0; $i < $pos - 1; $i++)\n            $temp *= 10;\n        return ($num / $temp) % 10;\n    }\npublic function JiShu($sort_array, $pos) {\n        $l = count($sort_array);\n        $bucket = array();\n        for($i = 0; $i < 10; $i++)\n            $bucket[$i] = array(0);\n\n        for($p = 1; $p <= $pos; $p++) {\n            for($i = 0; $i < $l; $i++) {\n                $n = $this->GetNumInPos($sort_array[$i], $p);\n                $index = ++$bucket[$n][0];\n                $bucket[$n][$index] = $sort_array[$i];\n            }\n            for($i=0, $j=0; $i<10; $i++) {\n                for($num = 1; $num<=$bucket[$i][0]; $num++) {\n                    $sort_array[$j++] = $bucket[$i][$num];\n                }\n                $bucket[$i][0] = 0;\n            }\n        }\n        return $sort_array;\n    }\n```\n\n\n\n\n\n> 参考文章：\n>\n> [排序算法总结](http://www.runoob.com/w3cnote/sort-algorithm-summary.html)  [八大排序算法](http://blog.csdn.net/hguisu/article/details/7776068)  [九大排序算法再总结](http://blog.csdn.net/xiazdong/article/details/8462393)  [稳定排序和不稳定排序](http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html)  [基数排序](http://baike.baidu.com/link?url=jd48mIg-3sWzLsPo9c5TgY2BjZGzlDn8SR5c6Zp_SF0feCIUUI6rZw5ITJVAezCshxLCBXFF5QFCaeixlW8oQe9siEyEj2PX2ciyZ5DQsmPEFmzH5_j86ISkUy6XiGJ6#1)  [排序八 基数排序](http://www.cnblogs.com/jingmoxukong/p/4311237.html) ","source":"_posts/phpsortalgorithm.md","raw":"---\ntitle: 排序算法总结\ndate: 2017-04-11 16:53:00\ntags:\n - 排序\n - 算法\n - PHP\n - 时间复杂度\ncategories:\n - 算法\n---\n\n各种排序算法稳定性以及时间复杂度总结：\n\n| 类别   | 排序方法   | 平均时间复杂度   | 最好情况       | 最坏情况      | 空间复杂度    | 稳定性  |\n| ---- | ------ | --------- | ---------- | --------- | -------- | ---- |\n| 交换排序 | 冒泡排序   | O(n^2)    | O(n)       | O(n^2)    | O(1)     | 稳定   |\n| 交换排序 | 快排     | O(nlogn)  | O(nlogn)   | O(n^2)    | O(nlogn) | 不稳定  |\n| 选择排序 | 直接选择排序 | O(n^2)    | O(n^2)     | O(n^2)    | O(1)     | 不稳定  |\n| 选择排序 | 堆排序    | O(nlogn)  | O(nlogn)   | O(nlogn)  | O(1)     | 不稳定  |\n| 插入排序 | 直接插入排序 | O(n^2)    | O(n)       | O(n^2)    | O(1)     | 稳定   |\n| 插入排序 | 希尔排序   | O(n^1.5)  | O(n)       | O(n^2)    | O(1)     | 不稳定  |\n| 未分类  | 归并排序   | O(nlogn)  | O(nlogn)   | O(nlogn)  | O(n)     | 稳定   |\n| 未分类  | 基数排序   | O(d(n+r)) | O(d(n+rd)) | O(d(n+r)) | O(rd+n)  | 稳定   |\n\n**Note**：logn代表以2为底n的对数。\n\n当原表有序或基本有序时，**直接插入排序**和**冒泡排序**将大大减少比较次数和移动记录的次数，时间复杂度可降至O(n)；而**快速排序**则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O(n^2)；原表是否有序，对**直接选择排序**、**堆排序**、**归并排序**和**基数排序**的时间复杂度影响不大。\n\n### **排序算法的稳定性说明**\n\n若待排序的序列中，存在多个具有相同关键字的记录，经过排序，这些记录的相对次序保持不变，则称该算法是稳定的；若经排序后，记录的相对次序发生了改变，则称该算法是不稳定的。 Example：\n\n如果 Ai = Aj 且 Ai 原来在位置前，排序后Ai 还是要在 Aj 位置前。\n\n稳定性的好处：排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素，其顺序在高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；Example：\n\n![2017-4-11 185017](/images/2017-4-11 185017.png)\n\n对于不稳定的算法我们可以这样改进：\n\n在每个输入元素加一个 index，表示初始时的数组索引，当不稳定的算法排好序后，对于相同的元素对 index 排序即可。\n\n#### 冒泡排序\n\n冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再把他们交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。\n\n#### 快排\n\n快速排序有两个方向，左边的i下标一直往右走，当 a[i] <= a[center_index]，其中 center_index 是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当 a[j] > a[center_index]。如果i和j都走不动了，i <= j，交换 a[i] 和 a[j]，重复上面的过程，直到i > j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和 a[j] 交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和 a[j] 交换的时刻。\n\n#### 直接选择排序\n\n选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第 n 个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。\n\n#### 堆排序\n\n我们知道堆的结构是节点 i 的孩子为2 * i和2 * i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， ... 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n#### 直接插入排序\n\n插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n#### 希尔排序\n\n希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。\n\n#### 归并排序\n\n归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n\n#### 基数排序\n\n基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。\n\n### 排序算法\n\n#### 冒泡排序\n\n**基本思想**\n\n两个数比较大小，较大的数下沉，较小的数冒起来。\n\n**过程**\n\n比较相邻的两个数据，如果第二个数小，就交换位置；\n\n从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了；\n继续重复上述过程，依次将第2、3、......、n-1 个最小数排好位置。\n\n![2017-4-11 191243](/images/2017-4-11 191243.png)\n\n**PHP代码实现**、\n\n```\npublic function MaoPao($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++) {\n            for ($j = 0; $j < count($sort_array) - $i - 1; $j++) {\n                if ($sort_array[$j] > $sort_array[$j + 1]){\n                    $tmp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + 1];\n                    $sort_array[$j + 1] = $tmp;\n                }\n            }\n        }\n        return $sort_array;\n    }\n```\n\n**优化**\n\n冒泡排序的问题在于，数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到 count($sort_array)-1 次，后面的比较是没有意义的。\n\n解决办法：我们可以设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。\n\n```\npublic function MaoPao($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++) {\n            $flag = 0;\n            for ($j = 0; $j < count($sort_array) - $i - 1; $j++) {\n                if ($sort_array[$j] > $sort_array[$j + 1]){\n                    $tmp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + 1];\n                    $sort_array[$j + 1] = $tmp;\n                    $flag = 1;\n                }\n            }\n            if ($flag == 0){\n                break;\n            }\n        }\n        return $sort_array;\n    }\n```\n\n#### 快排\n\n**基本思想**：分治\n\n先从数列中取出一个数作为key值；\n将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；\n对左右两个小数列重复第二步，直至各区间只有1个数。\n\n**PHP代码实现**\n\n```\npublic function Fast($sort_array){\n        $left_array = array();\n        $right_array = array();\n        $index = 1;\n        if (!is_array($sort_array)){\n            return false;\n        }\n        if (count($sort_array) <= 1){\n          return $sort_array;\n        }\n        while ($index < count($sort_array)){\n            if ($sort_array[$index] > $sort_array[0]){\n                $right_array[] = $sort_array[$index];\n            } elseif ($sort_array[$index] <= $sort_array[0]){\n                $left_array[] = $sort_array[$index];\n            }\n            $index++;\n        }\n        $left_array = $this->Fast($left_array);\n        $right_array = $this->Fast($right_array);\n        return array_merge($left_array, array($sort_array[0]), $right_array);\n    }\n```\n\n#### 直接选择排序\n\n**基本思想**\n\n在长度为 n 的无序数组中，第一次遍历 n-1 个数，找到最小的数值与第一个元素交换；\n\n第二次遍历 n-2 个数，找到最小的数值与第二个元素交换；\n\n......\n\n第 n-1 次遍历，找到最小的数值与第 n-1 个元素交换，排序完成。\n\n**过程**\n\n![2017-4-11 194803](/images/2017-4-11 194803.jpg)\n\n**PHP代码实现**\n\n```\npublic function Select($sort_array){\n        for ($i = 0; $i < count($sort_array); $i++){\n            $min = $i;\n            for ($j = $i + 1; $j < count($sort_array); $j++){\n                if ($sort_array[$min] > $sort_array[$j]){\n                    $min = $j;\n                }\n            }\n            $tmp = $sort_array[$min];\n            $sort_array[$min] = $sort_array[$i];\n            $sort_array[$i] = $tmp;\n        }\n        return $sort_array;\n    }\n```\n\n#### 堆排序\n\n**基本思想**\n\n![2017-4-11 194932](/images/2017-4-11 194932.jpg)\n\n**过程**\n\n图示： （88,85,83,73,72,60,57,48,42,6）\n\n![2017-4-11 195018](/images/2017-4-11 195018.jpg)\n\n**PHP代码实现**\n\n```\npublic function DuiPaiXu($sort_array){\n        $this->buildHeap($sort_array);\n        $count = count($sort_array);\n        while ($count > 1) {\n            $this->swap($sort_array, $count - 1, 0);\n            $count--;\n            $this->adjustHeap($sort_array, $count, 0);\n        }\n        return $sort_array;\n    }\n public function buildHeap(&$arr){\n        $node = floor(count($arr) / 2) - 1;\n        for ($i = $node; $i >= 0; $i--) {\n            $this->adjustHeap($arr, count($arr), $i);\n        }\n    }\npublic function adjustHeap(&$arr, $maxLen, $node){\n        $left_child = 2 * $node + 1;\n        $right_child = 2 * $node + 2;\n        $max = $node;\n        while ($left_child < $maxLen || $right_child < $maxLen) {\n            if ($left_child < $maxLen && $arr[$left_child] > $arr[$max]) {\n                $max = $left_child;\n            }\n            if ($right_child < $maxLen && $arr[$right_child] > $arr[$max]) {\n                $max = $right_child;\n            }\n            if ($max != $node) {\n                $this->swap($arr, $max, $node);\n                $node   = $max;\n                $left_child = 2 * $node + 1;\n                $right_child = 2 * $node + 2;\n            } else {\n                break;\n            }\n        }\n    }\npublic function swap(&$arr, $m, $n){\n        $arr[$m] = $arr[$m] ^ $arr[$n];\n        $arr[$n] = $arr[$n] ^ $arr[$m];\n        $arr[$m] = $arr[$m] ^ $arr[$n];\n    }\n```\n\n#### 直接插入排序\n\n**基本思想**\n\n在要排序的一组数中，假定前 n-1 个数已经排好序，现在将第 n 个数插到前面的有序数列中，使得这 n 个数也是排好顺序的。如此反复循环，直到全部排好顺序。\n\n**过程**\n\n![2017-4-11 195224](/images/2017-4-11 195224.jpg)\n\n![2017-4-11 195257](/images/2017-4-11 195257.jpg)\n\n**PHP代码实现**\n\n```\npublic function ChaRu($sort_array){\n        for ($i = 2; $i < count($sort_array); $i++){\n            $j = $i - 1;\n            $key = $sort_array[$i];\n            while ($j >= 0 && $sort_array[$j] > $key){\n                $sort_array[$j + 1] = $sort_array[$j];\n                $j--;\n            }\n            $sort_array[$j + 1] = $key;\n        }\n        return $sort_array;\n    }\n```\n\n#### 希尔排序\n\n**基本思想**\n\n在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。\n\n**过程**\n\n![2017-4-11 195422](/images/2017-4-11 195422.jpg)\n\n**PHP代码实现**\n\n```\npublic function XiErPaiXu($sort_array){\n        if (!is_array($sort_array))\n            return false;\n        $n = count($sort_array);\n        for ($gap = floor($n / 2); $gap > 0; $gap = floor($gap /= 2)) {\n            for ($i = $gap; $i < $n; ++$i) {\n                for ($j = $i - $gap; $j >= 0 && $sort_array[$j + $gap] < $sort_array[$j]; $j -= $gap) {\n                    $temp = $sort_array[$j];\n                    $sort_array[$j] = $sort_array[$j + $gap];\n                    $sort_array[$j + $gap] = $temp;\n                }\n            }\n        }\n        return $sort_array;\n    }\n```\n\n#### 归并排序\n\n**基本思想**\n\n归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。\n\n首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。\n\n解决了上面的合并有序数列问题，再来看归并排序，其的基本思路就是将数组分成2组A，B，如果这2组组内的数据都是有序的，那么就可以很方便的将这2组数据进行排序。如何让这2组组内数据有序了？\n可以将A，B组各自再分成2组。依次类推，当分出来的小组只有1个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的2个小组就可以了。这样通过**先递归的分解数列**，**再合并数列**就完成了归并排序。\n\n**过程**\n\n![2017-4-11 195640](/images/2017-4-11 195640.jpg)\n\n**PHP代码实现**\n\n```\npublic function GuiBing($sort_array){\n        $len = count($sort_array);\n        if($len <= 1)\n            return $sort_array;\n        $mid = intval($len/2);\n        $left_arr = array_slice($sort_array, 0, $mid);\n        $right_arr = array_slice($sort_array, $mid);\n        $left_arr = $this->GuiBing($left_arr);\n        $right_arr = $this->GuiBing($right_arr);\n        $sort_array = $this->GuiBing_child($left_arr, $right_arr);\n        return $sort_array;\n    }\n\npublic function GuiBing_child($arrA, $arrB){\n        $arrC = array();\n        while(count($arrA) && count($arrB)){\n            $arrC[] = $arrA['0'] < $arrB['0'] ? array_shift($arrA) : array_shift($arrB);\n        }\n        return array_merge($arrC, $arrA, $arrB);\n    }\n```\n\n#### 基数排序\n\n**基本思想**\n\n我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。假设我们有编号0~9的10个桶，遍历需要进行排序的各个值的个位，然后根据个位的数值放进相应的桶中，分类后，我们在从各个桶中，将这些数按照从编号0到编号9的顺序依次将所有数取出来。这时，得到的序列就是个位数上呈递增趋势的序列。 接下来，可以对十位数、百位数也按照这种方法进行排序，最后就能得到排序完成的序列。\n\n基数排序适用于对位数较少的排序，位数较长会浪费空间。\n\n基数排序的平均时间复杂度为O(d(n+r))，其中 d 表示位数，r为基数（d的取值范围）。\n\nLSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。\n\n本文介绍的是LSD模式。\n\n**过程**\n\n![2017-4-11 200834](/images/2017-4-11 200834.jpg)\n\n![2017-4-11 200911](/images/2017-4-11 200911.jpg)\n\n**PHP代码实现**\n\n```\npublic function GetNumInPos($num, $pos){\n        $temp = 1;\n        for ($i = 0; $i < $pos - 1; $i++)\n            $temp *= 10;\n        return ($num / $temp) % 10;\n    }\npublic function JiShu($sort_array, $pos) {\n        $l = count($sort_array);\n        $bucket = array();\n        for($i = 0; $i < 10; $i++)\n            $bucket[$i] = array(0);\n\n        for($p = 1; $p <= $pos; $p++) {\n            for($i = 0; $i < $l; $i++) {\n                $n = $this->GetNumInPos($sort_array[$i], $p);\n                $index = ++$bucket[$n][0];\n                $bucket[$n][$index] = $sort_array[$i];\n            }\n            for($i=0, $j=0; $i<10; $i++) {\n                for($num = 1; $num<=$bucket[$i][0]; $num++) {\n                    $sort_array[$j++] = $bucket[$i][$num];\n                }\n                $bucket[$i][0] = 0;\n            }\n        }\n        return $sort_array;\n    }\n```\n\n\n\n\n\n> 参考文章：\n>\n> [排序算法总结](http://www.runoob.com/w3cnote/sort-algorithm-summary.html)  [八大排序算法](http://blog.csdn.net/hguisu/article/details/7776068)  [九大排序算法再总结](http://blog.csdn.net/xiazdong/article/details/8462393)  [稳定排序和不稳定排序](http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html)  [基数排序](http://baike.baidu.com/link?url=jd48mIg-3sWzLsPo9c5TgY2BjZGzlDn8SR5c6Zp_SF0feCIUUI6rZw5ITJVAezCshxLCBXFF5QFCaeixlW8oQe9siEyEj2PX2ciyZ5DQsmPEFmzH5_j86ISkUy6XiGJ6#1)  [排序八 基数排序](http://www.cnblogs.com/jingmoxukong/p/4311237.html) ","slug":"phpsortalgorithm","published":1,"updated":"2020-10-25T06:43:32.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueqa000cpmolcvgzso5vd","content":"<p>各种排序算法稳定性以及时间复杂度总结：</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>排序方法</th>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>交换排序</td>\n<td>冒泡排序</td>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>交换排序</td>\n<td>快排</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n^2)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>直接选择排序</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>直接插入排序</td>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>希尔排序</td>\n<td>O(n^1.5)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>未分类</td>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>未分类</td>\n<td>基数排序</td>\n<td>O(d(n+r))</td>\n<td>O(d(n+rd))</td>\n<td>O(d(n+r))</td>\n<td>O(rd+n)</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note</strong>：logn代表以2为底n的对数。</p>\n<p>当原表有序或基本有序时，<strong>直接插入排序</strong>和<strong>冒泡排序</strong>将大大减少比较次数和移动记录的次数，时间复杂度可降至O(n)；而<strong>快速排序</strong>则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O(n^2)；原表是否有序，对<strong>直接选择排序</strong>、<strong>堆排序</strong>、<strong>归并排序</strong>和<strong>基数排序</strong>的时间复杂度影响不大。</p>\n<h3 id=\"排序算法的稳定性说明\"><a href=\"#排序算法的稳定性说明\" class=\"headerlink\" title=\"排序算法的稳定性说明\"></a><strong>排序算法的稳定性说明</strong></h3><p>若待排序的序列中，存在多个具有相同关键字的记录，经过排序，这些记录的相对次序保持不变，则称该算法是稳定的；若经排序后，记录的相对次序发生了改变，则称该算法是不稳定的。 Example：</p>\n<p>如果 Ai = Aj 且 Ai 原来在位置前，排序后Ai 还是要在 Aj 位置前。</p>\n<p>稳定性的好处：排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素，其顺序在高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；Example：</p>\n<p><img src=\"/images/2017-4-11 185017.png\" alt=\"2017-4-11 185017\"></p>\n<p>对于不稳定的算法我们可以这样改进：</p>\n<p>在每个输入元素加一个 index，表示初始时的数组索引，当不稳定的算法排好序后，对于相同的元素对 index 排序即可。</p>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再把他们交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>\n<h4 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h4><p>快速排序有两个方向，左边的i下标一直往右走，当 a[i] &lt;= a[center_index]，其中 center_index 是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当 a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换 a[i] 和 a[j]，重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和 a[j] 交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和 a[j] 交换的时刻。</p>\n<h4 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h4><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第 n 个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p>我们知道堆的结构是节点 i 的孩子为2 <em> i和2 </em> i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， … 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>\n<h4 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h4><p>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。</p>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>\n<h4 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h4 id=\"冒泡排序-1\"><a href=\"#冒泡排序-1\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><strong>基本思想</strong></p>\n<p>两个数比较大小，较大的数下沉，较小的数冒起来。</p>\n<p><strong>过程</strong></p>\n<p>比较相邻的两个数据，如果第二个数小，就交换位置；</p>\n<p>从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了；<br>继续重复上述过程，依次将第2、3、……、n-1 个最小数排好位置。</p>\n<p><img src=\"/images/2017-4-11 191243.png\" alt=\"2017-4-11 191243\"></p>\n<p><strong>PHP代码实现</strong>、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function MaoPao($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++) &#123;</span><br><span class=\"line\">            for ($j = 0; $j &lt; count($sort_array) - $i - 1; $j++) &#123;</span><br><span class=\"line\">                if ($sort_array[$j] &gt; $sort_array[$j + 1])&#123;</span><br><span class=\"line\">                    $tmp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + 1];</span><br><span class=\"line\">                    $sort_array[$j + 1] = $tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>冒泡排序的问题在于，数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到 count($sort_array)-1 次，后面的比较是没有意义的。</p>\n<p>解决办法：我们可以设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function MaoPao($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++) &#123;</span><br><span class=\"line\">            $flag = 0;</span><br><span class=\"line\">            for ($j = 0; $j &lt; count($sort_array) - $i - 1; $j++) &#123;</span><br><span class=\"line\">                if ($sort_array[$j] &gt; $sort_array[$j + 1])&#123;</span><br><span class=\"line\">                    $tmp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + 1];</span><br><span class=\"line\">                    $sort_array[$j + 1] = $tmp;</span><br><span class=\"line\">                    $flag = 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($flag == 0)&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"快排-1\"><a href=\"#快排-1\" class=\"headerlink\" title=\"快排\"></a>快排</h4><p><strong>基本思想</strong>：分治</p>\n<p>先从数列中取出一个数作为key值；<br>将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；<br>对左右两个小数列重复第二步，直至各区间只有1个数。</p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function Fast($sort_array)&#123;</span><br><span class=\"line\">        $left_array = array();</span><br><span class=\"line\">        $right_array = array();</span><br><span class=\"line\">        $index = 1;</span><br><span class=\"line\">        if (!is_array($sort_array))&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (count($sort_array) &lt;= 1)&#123;</span><br><span class=\"line\">          return $sort_array;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while ($index &lt; count($sort_array))&#123;</span><br><span class=\"line\">            if ($sort_array[$index] &gt; $sort_array[0])&#123;</span><br><span class=\"line\">                $right_array[] = $sort_array[$index];</span><br><span class=\"line\">            &#125; elseif ($sort_array[$index] &lt;= $sort_array[0])&#123;</span><br><span class=\"line\">                $left_array[] = $sort_array[$index];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $left_array = $this-&gt;Fast($left_array);</span><br><span class=\"line\">        $right_array = $this-&gt;Fast($right_array);</span><br><span class=\"line\">        return array_merge($left_array, array($sort_array[0]), $right_array);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接选择排序-1\"><a href=\"#直接选择排序-1\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h4><p><strong>基本思想</strong></p>\n<p>在长度为 n 的无序数组中，第一次遍历 n-1 个数，找到最小的数值与第一个元素交换；</p>\n<p>第二次遍历 n-2 个数，找到最小的数值与第二个元素交换；</p>\n<p>……</p>\n<p>第 n-1 次遍历，找到最小的数值与第 n-1 个元素交换，排序完成。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 194803.jpg\" alt=\"2017-4-11 194803\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function Select($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++)&#123;</span><br><span class=\"line\">            $min = $i;</span><br><span class=\"line\">            for ($j = $i + 1; $j &lt; count($sort_array); $j++)&#123;</span><br><span class=\"line\">                if ($sort_array[$min] &gt; $sort_array[$j])&#123;</span><br><span class=\"line\">                    $min = $j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $tmp = $sort_array[$min];</span><br><span class=\"line\">            $sort_array[$min] = $sort_array[$i];</span><br><span class=\"line\">            $sort_array[$i] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"堆排序-1\"><a href=\"#堆排序-1\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p><strong>基本思想</strong></p>\n<p><img src=\"/images/2017-4-11 194932.jpg\" alt=\"2017-4-11 194932\"></p>\n<p><strong>过程</strong></p>\n<p>图示： （88,85,83,73,72,60,57,48,42,6）</p>\n<p><img src=\"/images/2017-4-11 195018.jpg\" alt=\"2017-4-11 195018\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function DuiPaiXu($sort_array)&#123;</span><br><span class=\"line\">        $this-&gt;buildHeap($sort_array);</span><br><span class=\"line\">        $count = count($sort_array);</span><br><span class=\"line\">        while ($count &gt; 1) &#123;</span><br><span class=\"line\">            $this-&gt;swap($sort_array, $count - 1, 0);</span><br><span class=\"line\">            $count--;</span><br><span class=\"line\">            $this-&gt;adjustHeap($sort_array, $count, 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> public function buildHeap(&amp;$arr)&#123;</span><br><span class=\"line\">        $node = floor(count($arr) / 2) - 1;</span><br><span class=\"line\">        for ($i = $node; $i &gt;= 0; $i--) &#123;</span><br><span class=\"line\">            $this-&gt;adjustHeap($arr, count($arr), $i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function adjustHeap(&amp;$arr, $maxLen, $node)&#123;</span><br><span class=\"line\">        $left_child = 2 * $node + 1;</span><br><span class=\"line\">        $right_child = 2 * $node + 2;</span><br><span class=\"line\">        $max = $node;</span><br><span class=\"line\">        while ($left_child &lt; $maxLen || $right_child &lt; $maxLen) &#123;</span><br><span class=\"line\">            if ($left_child &lt; $maxLen &amp;&amp; $arr[$left_child] &gt; $arr[$max]) &#123;</span><br><span class=\"line\">                $max = $left_child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($right_child &lt; $maxLen &amp;&amp; $arr[$right_child] &gt; $arr[$max]) &#123;</span><br><span class=\"line\">                $max = $right_child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($max != $node) &#123;</span><br><span class=\"line\">                $this-&gt;swap($arr, $max, $node);</span><br><span class=\"line\">                $node   = $max;</span><br><span class=\"line\">                $left_child = 2 * $node + 1;</span><br><span class=\"line\">                $right_child = 2 * $node + 2;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function swap(&amp;$arr, $m, $n)&#123;</span><br><span class=\"line\">        $arr[$m] = $arr[$m] ^ $arr[$n];</span><br><span class=\"line\">        $arr[$n] = $arr[$n] ^ $arr[$m];</span><br><span class=\"line\">        $arr[$m] = $arr[$m] ^ $arr[$n];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接插入排序-1\"><a href=\"#直接插入排序-1\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h4><p><strong>基本思想</strong></p>\n<p>在要排序的一组数中，假定前 n-1 个数已经排好序，现在将第 n 个数插到前面的有序数列中，使得这 n 个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195224.jpg\" alt=\"2017-4-11 195224\"></p>\n<p><img src=\"/images/2017-4-11 195257.jpg\" alt=\"2017-4-11 195257\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function ChaRu($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 2; $i &lt; count($sort_array); $i++)&#123;</span><br><span class=\"line\">            $j = $i - 1;</span><br><span class=\"line\">            $key = $sort_array[$i];</span><br><span class=\"line\">            while ($j &gt;= 0 &amp;&amp; $sort_array[$j] &gt; $key)&#123;</span><br><span class=\"line\">                $sort_array[$j + 1] = $sort_array[$j];</span><br><span class=\"line\">                $j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $sort_array[$j + 1] = $key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"希尔排序-1\"><a href=\"#希尔排序-1\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p><strong>基本思想</strong></p>\n<p>在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195422.jpg\" alt=\"2017-4-11 195422\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function XiErPaiXu($sort_array)&#123;</span><br><span class=\"line\">        if (!is_array($sort_array))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        $n = count($sort_array);</span><br><span class=\"line\">        for ($gap = floor($n / 2); $gap &gt; 0; $gap = floor($gap /= 2)) &#123;</span><br><span class=\"line\">            for ($i = $gap; $i &lt; $n; ++$i) &#123;</span><br><span class=\"line\">                for ($j = $i - $gap; $j &gt;= 0 &amp;&amp; $sort_array[$j + $gap] &lt; $sort_array[$j]; $j -= $gap) &#123;</span><br><span class=\"line\">                    $temp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + $gap];</span><br><span class=\"line\">                    $sort_array[$j + $gap] = $temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"归并排序-1\"><a href=\"#归并排序-1\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p><strong>基本思想</strong></p>\n<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。</p>\n<p>首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。</p>\n<p>解决了上面的合并有序数列问题，再来看归并排序，其的基本思路就是将数组分成2组A，B，如果这2组组内的数据都是有序的，那么就可以很方便的将这2组数据进行排序。如何让这2组组内数据有序了？<br>可以将A，B组各自再分成2组。依次类推，当分出来的小组只有1个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的2个小组就可以了。这样通过<strong>先递归的分解数列</strong>，<strong>再合并数列</strong>就完成了归并排序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195640.jpg\" alt=\"2017-4-11 195640\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function GuiBing($sort_array)&#123;</span><br><span class=\"line\">        $len = count($sort_array);</span><br><span class=\"line\">        if($len &lt;= 1)</span><br><span class=\"line\">            return $sort_array;</span><br><span class=\"line\">        $mid = intval($len/2);</span><br><span class=\"line\">        $left_arr = array_slice($sort_array, 0, $mid);</span><br><span class=\"line\">        $right_arr = array_slice($sort_array, $mid);</span><br><span class=\"line\">        $left_arr = $this-&gt;GuiBing($left_arr);</span><br><span class=\"line\">        $right_arr = $this-&gt;GuiBing($right_arr);</span><br><span class=\"line\">        $sort_array = $this-&gt;GuiBing_child($left_arr, $right_arr);</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public function GuiBing_child($arrA, $arrB)&#123;</span><br><span class=\"line\">        $arrC = array();</span><br><span class=\"line\">        while(count($arrA) &amp;&amp; count($arrB))&#123;</span><br><span class=\"line\">            $arrC[] = $arrA[&apos;0&apos;] &lt; $arrB[&apos;0&apos;] ? array_shift($arrA) : array_shift($arrB);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array_merge($arrC, $arrA, $arrB);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基数排序-1\"><a href=\"#基数排序-1\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p><strong>基本思想</strong></p>\n<p>我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。假设我们有编号0~9的10个桶，遍历需要进行排序的各个值的个位，然后根据个位的数值放进相应的桶中，分类后，我们在从各个桶中，将这些数按照从编号0到编号9的顺序依次将所有数取出来。这时，得到的序列就是个位数上呈递增趋势的序列。 接下来，可以对十位数、百位数也按照这种方法进行排序，最后就能得到排序完成的序列。</p>\n<p>基数排序适用于对位数较少的排序，位数较长会浪费空间。</p>\n<p>基数排序的平均时间复杂度为O(d(n+r))，其中 d 表示位数，r为基数（d的取值范围）。</p>\n<p>LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。</p>\n<p>本文介绍的是LSD模式。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 200834.jpg\" alt=\"2017-4-11 200834\"></p>\n<p><img src=\"/images/2017-4-11 200911.jpg\" alt=\"2017-4-11 200911\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function GetNumInPos($num, $pos)&#123;</span><br><span class=\"line\">        $temp = 1;</span><br><span class=\"line\">        for ($i = 0; $i &lt; $pos - 1; $i++)</span><br><span class=\"line\">            $temp *= 10;</span><br><span class=\"line\">        return ($num / $temp) % 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function JiShu($sort_array, $pos) &#123;</span><br><span class=\"line\">        $l = count($sort_array);</span><br><span class=\"line\">        $bucket = array();</span><br><span class=\"line\">        for($i = 0; $i &lt; 10; $i++)</span><br><span class=\"line\">            $bucket[$i] = array(0);</span><br><span class=\"line\"></span><br><span class=\"line\">        for($p = 1; $p &lt;= $pos; $p++) &#123;</span><br><span class=\"line\">            for($i = 0; $i &lt; $l; $i++) &#123;</span><br><span class=\"line\">                $n = $this-&gt;GetNumInPos($sort_array[$i], $p);</span><br><span class=\"line\">                $index = ++$bucket[$n][0];</span><br><span class=\"line\">                $bucket[$n][$index] = $sort_array[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for($i=0, $j=0; $i&lt;10; $i++) &#123;</span><br><span class=\"line\">                for($num = 1; $num&lt;=$bucket[$i][0]; $num++) &#123;</span><br><span class=\"line\">                    $sort_array[$j++] = $bucket[$i][$num];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                $bucket[$i][0] = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.runoob.com/w3cnote/sort-algorithm-summary.html\" target=\"_blank\" rel=\"noopener\">排序算法总结</a>  <a href=\"http://blog.csdn.net/hguisu/article/details/7776068\" target=\"_blank\" rel=\"noopener\">八大排序算法</a>  <a href=\"http://blog.csdn.net/xiazdong/article/details/8462393\" target=\"_blank\" rel=\"noopener\">九大排序算法再总结</a>  <a href=\"http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html\" target=\"_blank\" rel=\"noopener\">稳定排序和不稳定排序</a>  <a href=\"http://baike.baidu.com/link?url=jd48mIg-3sWzLsPo9c5TgY2BjZGzlDn8SR5c6Zp_SF0feCIUUI6rZw5ITJVAezCshxLCBXFF5QFCaeixlW8oQe9siEyEj2PX2ciyZ5DQsmPEFmzH5_j86ISkUy6XiGJ6#1\" target=\"_blank\" rel=\"noopener\">基数排序</a>  <a href=\"http://www.cnblogs.com/jingmoxukong/p/4311237.html\" target=\"_blank\" rel=\"noopener\">排序八 基数排序</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>各种排序算法稳定性以及时间复杂度总结：</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>排序方法</th>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>交换排序</td>\n<td>冒泡排序</td>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>交换排序</td>\n<td>快排</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n^2)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>直接选择排序</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>直接插入排序</td>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>希尔排序</td>\n<td>O(n^1.5)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>未分类</td>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>未分类</td>\n<td>基数排序</td>\n<td>O(d(n+r))</td>\n<td>O(d(n+rd))</td>\n<td>O(d(n+r))</td>\n<td>O(rd+n)</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note</strong>：logn代表以2为底n的对数。</p>\n<p>当原表有序或基本有序时，<strong>直接插入排序</strong>和<strong>冒泡排序</strong>将大大减少比较次数和移动记录的次数，时间复杂度可降至O(n)；而<strong>快速排序</strong>则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O(n^2)；原表是否有序，对<strong>直接选择排序</strong>、<strong>堆排序</strong>、<strong>归并排序</strong>和<strong>基数排序</strong>的时间复杂度影响不大。</p>\n<h3 id=\"排序算法的稳定性说明\"><a href=\"#排序算法的稳定性说明\" class=\"headerlink\" title=\"排序算法的稳定性说明\"></a><strong>排序算法的稳定性说明</strong></h3><p>若待排序的序列中，存在多个具有相同关键字的记录，经过排序，这些记录的相对次序保持不变，则称该算法是稳定的；若经排序后，记录的相对次序发生了改变，则称该算法是不稳定的。 Example：</p>\n<p>如果 Ai = Aj 且 Ai 原来在位置前，排序后Ai 还是要在 Aj 位置前。</p>\n<p>稳定性的好处：排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素，其顺序在高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；Example：</p>\n<p><img src=\"/images/2017-4-11 185017.png\" alt=\"2017-4-11 185017\"></p>\n<p>对于不稳定的算法我们可以这样改进：</p>\n<p>在每个输入元素加一个 index，表示初始时的数组索引，当不稳定的算法排好序后，对于相同的元素对 index 排序即可。</p>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再把他们交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>\n<h4 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h4><p>快速排序有两个方向，左边的i下标一直往右走，当 a[i] &lt;= a[center_index]，其中 center_index 是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当 a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换 a[i] 和 a[j]，重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和 a[j] 交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和 a[j] 交换的时刻。</p>\n<h4 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h4><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第 n 个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p>我们知道堆的结构是节点 i 的孩子为2 <em> i和2 </em> i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， … 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>\n<h4 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h4><p>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。</p>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>\n<h4 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h4 id=\"冒泡排序-1\"><a href=\"#冒泡排序-1\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><strong>基本思想</strong></p>\n<p>两个数比较大小，较大的数下沉，较小的数冒起来。</p>\n<p><strong>过程</strong></p>\n<p>比较相邻的两个数据，如果第二个数小，就交换位置；</p>\n<p>从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了；<br>继续重复上述过程，依次将第2、3、……、n-1 个最小数排好位置。</p>\n<p><img src=\"/images/2017-4-11 191243.png\" alt=\"2017-4-11 191243\"></p>\n<p><strong>PHP代码实现</strong>、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function MaoPao($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++) &#123;</span><br><span class=\"line\">            for ($j = 0; $j &lt; count($sort_array) - $i - 1; $j++) &#123;</span><br><span class=\"line\">                if ($sort_array[$j] &gt; $sort_array[$j + 1])&#123;</span><br><span class=\"line\">                    $tmp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + 1];</span><br><span class=\"line\">                    $sort_array[$j + 1] = $tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>冒泡排序的问题在于，数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到 count($sort_array)-1 次，后面的比较是没有意义的。</p>\n<p>解决办法：我们可以设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function MaoPao($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++) &#123;</span><br><span class=\"line\">            $flag = 0;</span><br><span class=\"line\">            for ($j = 0; $j &lt; count($sort_array) - $i - 1; $j++) &#123;</span><br><span class=\"line\">                if ($sort_array[$j] &gt; $sort_array[$j + 1])&#123;</span><br><span class=\"line\">                    $tmp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + 1];</span><br><span class=\"line\">                    $sort_array[$j + 1] = $tmp;</span><br><span class=\"line\">                    $flag = 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($flag == 0)&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"快排-1\"><a href=\"#快排-1\" class=\"headerlink\" title=\"快排\"></a>快排</h4><p><strong>基本思想</strong>：分治</p>\n<p>先从数列中取出一个数作为key值；<br>将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；<br>对左右两个小数列重复第二步，直至各区间只有1个数。</p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function Fast($sort_array)&#123;</span><br><span class=\"line\">        $left_array = array();</span><br><span class=\"line\">        $right_array = array();</span><br><span class=\"line\">        $index = 1;</span><br><span class=\"line\">        if (!is_array($sort_array))&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (count($sort_array) &lt;= 1)&#123;</span><br><span class=\"line\">          return $sort_array;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while ($index &lt; count($sort_array))&#123;</span><br><span class=\"line\">            if ($sort_array[$index] &gt; $sort_array[0])&#123;</span><br><span class=\"line\">                $right_array[] = $sort_array[$index];</span><br><span class=\"line\">            &#125; elseif ($sort_array[$index] &lt;= $sort_array[0])&#123;</span><br><span class=\"line\">                $left_array[] = $sort_array[$index];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $left_array = $this-&gt;Fast($left_array);</span><br><span class=\"line\">        $right_array = $this-&gt;Fast($right_array);</span><br><span class=\"line\">        return array_merge($left_array, array($sort_array[0]), $right_array);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接选择排序-1\"><a href=\"#直接选择排序-1\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h4><p><strong>基本思想</strong></p>\n<p>在长度为 n 的无序数组中，第一次遍历 n-1 个数，找到最小的数值与第一个元素交换；</p>\n<p>第二次遍历 n-2 个数，找到最小的数值与第二个元素交换；</p>\n<p>……</p>\n<p>第 n-1 次遍历，找到最小的数值与第 n-1 个元素交换，排序完成。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 194803.jpg\" alt=\"2017-4-11 194803\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function Select($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 0; $i &lt; count($sort_array); $i++)&#123;</span><br><span class=\"line\">            $min = $i;</span><br><span class=\"line\">            for ($j = $i + 1; $j &lt; count($sort_array); $j++)&#123;</span><br><span class=\"line\">                if ($sort_array[$min] &gt; $sort_array[$j])&#123;</span><br><span class=\"line\">                    $min = $j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $tmp = $sort_array[$min];</span><br><span class=\"line\">            $sort_array[$min] = $sort_array[$i];</span><br><span class=\"line\">            $sort_array[$i] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"堆排序-1\"><a href=\"#堆排序-1\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p><strong>基本思想</strong></p>\n<p><img src=\"/images/2017-4-11 194932.jpg\" alt=\"2017-4-11 194932\"></p>\n<p><strong>过程</strong></p>\n<p>图示： （88,85,83,73,72,60,57,48,42,6）</p>\n<p><img src=\"/images/2017-4-11 195018.jpg\" alt=\"2017-4-11 195018\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function DuiPaiXu($sort_array)&#123;</span><br><span class=\"line\">        $this-&gt;buildHeap($sort_array);</span><br><span class=\"line\">        $count = count($sort_array);</span><br><span class=\"line\">        while ($count &gt; 1) &#123;</span><br><span class=\"line\">            $this-&gt;swap($sort_array, $count - 1, 0);</span><br><span class=\"line\">            $count--;</span><br><span class=\"line\">            $this-&gt;adjustHeap($sort_array, $count, 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> public function buildHeap(&amp;$arr)&#123;</span><br><span class=\"line\">        $node = floor(count($arr) / 2) - 1;</span><br><span class=\"line\">        for ($i = $node; $i &gt;= 0; $i--) &#123;</span><br><span class=\"line\">            $this-&gt;adjustHeap($arr, count($arr), $i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function adjustHeap(&amp;$arr, $maxLen, $node)&#123;</span><br><span class=\"line\">        $left_child = 2 * $node + 1;</span><br><span class=\"line\">        $right_child = 2 * $node + 2;</span><br><span class=\"line\">        $max = $node;</span><br><span class=\"line\">        while ($left_child &lt; $maxLen || $right_child &lt; $maxLen) &#123;</span><br><span class=\"line\">            if ($left_child &lt; $maxLen &amp;&amp; $arr[$left_child] &gt; $arr[$max]) &#123;</span><br><span class=\"line\">                $max = $left_child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($right_child &lt; $maxLen &amp;&amp; $arr[$right_child] &gt; $arr[$max]) &#123;</span><br><span class=\"line\">                $max = $right_child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ($max != $node) &#123;</span><br><span class=\"line\">                $this-&gt;swap($arr, $max, $node);</span><br><span class=\"line\">                $node   = $max;</span><br><span class=\"line\">                $left_child = 2 * $node + 1;</span><br><span class=\"line\">                $right_child = 2 * $node + 2;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function swap(&amp;$arr, $m, $n)&#123;</span><br><span class=\"line\">        $arr[$m] = $arr[$m] ^ $arr[$n];</span><br><span class=\"line\">        $arr[$n] = $arr[$n] ^ $arr[$m];</span><br><span class=\"line\">        $arr[$m] = $arr[$m] ^ $arr[$n];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接插入排序-1\"><a href=\"#直接插入排序-1\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h4><p><strong>基本思想</strong></p>\n<p>在要排序的一组数中，假定前 n-1 个数已经排好序，现在将第 n 个数插到前面的有序数列中，使得这 n 个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195224.jpg\" alt=\"2017-4-11 195224\"></p>\n<p><img src=\"/images/2017-4-11 195257.jpg\" alt=\"2017-4-11 195257\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function ChaRu($sort_array)&#123;</span><br><span class=\"line\">        for ($i = 2; $i &lt; count($sort_array); $i++)&#123;</span><br><span class=\"line\">            $j = $i - 1;</span><br><span class=\"line\">            $key = $sort_array[$i];</span><br><span class=\"line\">            while ($j &gt;= 0 &amp;&amp; $sort_array[$j] &gt; $key)&#123;</span><br><span class=\"line\">                $sort_array[$j + 1] = $sort_array[$j];</span><br><span class=\"line\">                $j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $sort_array[$j + 1] = $key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"希尔排序-1\"><a href=\"#希尔排序-1\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p><strong>基本思想</strong></p>\n<p>在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195422.jpg\" alt=\"2017-4-11 195422\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function XiErPaiXu($sort_array)&#123;</span><br><span class=\"line\">        if (!is_array($sort_array))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        $n = count($sort_array);</span><br><span class=\"line\">        for ($gap = floor($n / 2); $gap &gt; 0; $gap = floor($gap /= 2)) &#123;</span><br><span class=\"line\">            for ($i = $gap; $i &lt; $n; ++$i) &#123;</span><br><span class=\"line\">                for ($j = $i - $gap; $j &gt;= 0 &amp;&amp; $sort_array[$j + $gap] &lt; $sort_array[$j]; $j -= $gap) &#123;</span><br><span class=\"line\">                    $temp = $sort_array[$j];</span><br><span class=\"line\">                    $sort_array[$j] = $sort_array[$j + $gap];</span><br><span class=\"line\">                    $sort_array[$j + $gap] = $temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"归并排序-1\"><a href=\"#归并排序-1\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p><strong>基本思想</strong></p>\n<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。</p>\n<p>首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。</p>\n<p>解决了上面的合并有序数列问题，再来看归并排序，其的基本思路就是将数组分成2组A，B，如果这2组组内的数据都是有序的，那么就可以很方便的将这2组数据进行排序。如何让这2组组内数据有序了？<br>可以将A，B组各自再分成2组。依次类推，当分出来的小组只有1个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的2个小组就可以了。这样通过<strong>先递归的分解数列</strong>，<strong>再合并数列</strong>就完成了归并排序。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 195640.jpg\" alt=\"2017-4-11 195640\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function GuiBing($sort_array)&#123;</span><br><span class=\"line\">        $len = count($sort_array);</span><br><span class=\"line\">        if($len &lt;= 1)</span><br><span class=\"line\">            return $sort_array;</span><br><span class=\"line\">        $mid = intval($len/2);</span><br><span class=\"line\">        $left_arr = array_slice($sort_array, 0, $mid);</span><br><span class=\"line\">        $right_arr = array_slice($sort_array, $mid);</span><br><span class=\"line\">        $left_arr = $this-&gt;GuiBing($left_arr);</span><br><span class=\"line\">        $right_arr = $this-&gt;GuiBing($right_arr);</span><br><span class=\"line\">        $sort_array = $this-&gt;GuiBing_child($left_arr, $right_arr);</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public function GuiBing_child($arrA, $arrB)&#123;</span><br><span class=\"line\">        $arrC = array();</span><br><span class=\"line\">        while(count($arrA) &amp;&amp; count($arrB))&#123;</span><br><span class=\"line\">            $arrC[] = $arrA[&apos;0&apos;] &lt; $arrB[&apos;0&apos;] ? array_shift($arrA) : array_shift($arrB);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array_merge($arrC, $arrA, $arrB);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基数排序-1\"><a href=\"#基数排序-1\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p><strong>基本思想</strong></p>\n<p>我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。假设我们有编号0~9的10个桶，遍历需要进行排序的各个值的个位，然后根据个位的数值放进相应的桶中，分类后，我们在从各个桶中，将这些数按照从编号0到编号9的顺序依次将所有数取出来。这时，得到的序列就是个位数上呈递增趋势的序列。 接下来，可以对十位数、百位数也按照这种方法进行排序，最后就能得到排序完成的序列。</p>\n<p>基数排序适用于对位数较少的排序，位数较长会浪费空间。</p>\n<p>基数排序的平均时间复杂度为O(d(n+r))，其中 d 表示位数，r为基数（d的取值范围）。</p>\n<p>LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。</p>\n<p>本文介绍的是LSD模式。</p>\n<p><strong>过程</strong></p>\n<p><img src=\"/images/2017-4-11 200834.jpg\" alt=\"2017-4-11 200834\"></p>\n<p><img src=\"/images/2017-4-11 200911.jpg\" alt=\"2017-4-11 200911\"></p>\n<p><strong>PHP代码实现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function GetNumInPos($num, $pos)&#123;</span><br><span class=\"line\">        $temp = 1;</span><br><span class=\"line\">        for ($i = 0; $i &lt; $pos - 1; $i++)</span><br><span class=\"line\">            $temp *= 10;</span><br><span class=\"line\">        return ($num / $temp) % 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public function JiShu($sort_array, $pos) &#123;</span><br><span class=\"line\">        $l = count($sort_array);</span><br><span class=\"line\">        $bucket = array();</span><br><span class=\"line\">        for($i = 0; $i &lt; 10; $i++)</span><br><span class=\"line\">            $bucket[$i] = array(0);</span><br><span class=\"line\"></span><br><span class=\"line\">        for($p = 1; $p &lt;= $pos; $p++) &#123;</span><br><span class=\"line\">            for($i = 0; $i &lt; $l; $i++) &#123;</span><br><span class=\"line\">                $n = $this-&gt;GetNumInPos($sort_array[$i], $p);</span><br><span class=\"line\">                $index = ++$bucket[$n][0];</span><br><span class=\"line\">                $bucket[$n][$index] = $sort_array[$i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for($i=0, $j=0; $i&lt;10; $i++) &#123;</span><br><span class=\"line\">                for($num = 1; $num&lt;=$bucket[$i][0]; $num++) &#123;</span><br><span class=\"line\">                    $sort_array[$j++] = $bucket[$i][$num];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                $bucket[$i][0] = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $sort_array;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://www.runoob.com/w3cnote/sort-algorithm-summary.html\" target=\"_blank\" rel=\"noopener\">排序算法总结</a>  <a href=\"http://blog.csdn.net/hguisu/article/details/7776068\" target=\"_blank\" rel=\"noopener\">八大排序算法</a>  <a href=\"http://blog.csdn.net/xiazdong/article/details/8462393\" target=\"_blank\" rel=\"noopener\">九大排序算法再总结</a>  <a href=\"http://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html\" target=\"_blank\" rel=\"noopener\">稳定排序和不稳定排序</a>  <a href=\"http://baike.baidu.com/link?url=jd48mIg-3sWzLsPo9c5TgY2BjZGzlDn8SR5c6Zp_SF0feCIUUI6rZw5ITJVAezCshxLCBXFF5QFCaeixlW8oQe9siEyEj2PX2ciyZ5DQsmPEFmzH5_j86ISkUy6XiGJ6#1\" target=\"_blank\" rel=\"noopener\">基数排序</a>  <a href=\"http://www.cnblogs.com/jingmoxukong/p/4311237.html\" target=\"_blank\" rel=\"noopener\">排序八 基数排序</a> </p>\n</blockquote>\n"},{"title":"TCP/IP协议入门篇","date":"2017-04-03T04:51:21.000Z","_content":"\n写这篇文章的主要动机是，自己在做项目的时候用到了网络编程的内容，然后自己简单学习了一下TCP/IP的东西，属于很基础的那种，在实习面试中，面试官也是问到了这块内容，但是自己理解比较浅，所以回答的也不是很好。想着系统的学习一下网络编程中TCP/IP协议这块，本篇作为入门，简单介绍一下TCP/IP协议。\n\n### 名词解释\n\nTCP/IP：**Transmission Control Protocol/Internet Protocol** 的简写，中译名为**传输控制协议/因特网互联协议**，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。是一种**面向连接的**、**可靠的**、**基于字节流的**传输层（Transport layer）通信协议。是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的。互联网络与单个网络不同，因为互联网络的不同部分可能有着截然不同的拓扑、带宽、延迟、分组大小和其他参数。TCP的设计目标是能够动态的适应互联网络的这些特性，而且当面对多种失败的时候仍然能够健壮。\n\n>  TCP/IP协议不是TCP和IP这两个协议的合称，而是指因特网整个TCP/IP协议族。\n\n### 参考模型\n\n了解TCP/IP参考模型之前，先来看一下OSI模型。\n\n#### OSI参考模型\n\nOSI模型是ISO的建议，是为了使各层上的协议国际标准化而发展起来的。OSI参考模型全称是开放系统互连参考模型(Open System Interconnection Reference Model)。这一参考模型共分为七层：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。\n\n| 层次    | 说明                                       |\n| ----- | ---------------------------------------- |\n| 物理层   | 处理机械的、电气的和过程的接口，以及物理层下的物理传输介质等           |\n| 数据链路层 | 加强物理层的功能，使其对网络层显示为一条无错的线路                |\n| 网络层   | 确定分组从源端到目的端的路由选择。路由可以选用网络中固定的静态路由表，也可以在每一次会话时决定，还可以根据当前的网络负载状况，灵活地为每一个分组分别决定。 |\n| 传输层   | 从会话层接收数据，并传输给网络层，同时确保到达目的端的各段信息正确无误，而且使会话层不受硬件变化的影响 |\n| 会话层   | 允许不同机器上的用户之间建立会话关系，既可以进行类似传输层的普通数据传输，也可以被用于远程登录到分时系统或在两台机器间传递文件 |\n| 表示层   | 用于完成一些特定的功能，这些功能由于经常被请求，因此人们希望有通用的解决办法，而不是由每个用户各自实现 |\n| 应用层   | 包含了大量人们普遍需要的协议。不同的文件系统有不同的文件命名原则和不同的文本行表示方法等，不同的系统之间传输文件还有各种不兼容问题，这些都将由应用层来处理。此外，应用层还有虚拟终端、电子邮件和新闻组等各种通用和专用的功能 |\n\n#### TCP/IP参考模型\n\nTCP/IP参考模型共分为四层：网络访问层、互联网层、传输层和应用层。\n\n| 层次    | 说明                                       |\n| ----- | ---------------------------------------- |\n| 应用层   | 包含所有的高层协议，包括：虚拟终端协议(TELNET)、文件传输协议(FTP)、电子邮件传输协议(SMTP)、域名服务(DNS)、网上新闻传输协议(NNTP)和超文本传送协议(HTTP)等 |\n| 传输层   | 源端和目的端机器上的对等实体可以进行会话。在这一层定义了两个端到端的协议：传输控制协议(TCP)和用户数据报协议(UDP)。TCP是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。UDP是面向无连接的不可靠传输的协议，主要用于不需要TCP的排序和流量控制等功能的应用程序。 |\n| 互联网层  | 整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标，TCP/IP参考模型的互联网层和OSI参考模型的网络层在功能上非常相似。 |\n| 网络访问层 | 指出主机必须使用某种协议与网络相连                        |\n\n### TCP/IP协议层次\n\n![2017-4-3 140143](/images/2017-4-3 140143.png)\n\n#### 链路层\n\n链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。\n\nARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。\nRARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。\n\n**ARP、RARP属于网络层协议，工作在链路层**\n\n#### 网络层\n\n负责相邻计算机之间的通信。其功能包括三方面。\n\n>  处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。\n\n>  处理输入数据报：首先检查其合法性，然后进行寻径--假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。\n\n>  处理路径、流控、拥塞等问题。\n\n#### 传输层\n\n提供应用程序间的通信。其功能包括：格式化信息流；提供可靠传输。\n\n为实现可靠传输，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。\n\n#### 应用层\n\n向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。\n\nFTP 是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。\n\nTelnet 服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。\n\nDNS 是域名解析服务，提供域名到IP地址之间的转换，使用端口53。\n\nSMTP 是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。\n\nNFS 是网络文件系统，用于网络中不同主机间的文件共享。\n\nHTTP 是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。\n\n### TCP协议\n\n#### TCP头格式\n\n![2017-4-3 141518](/images/2017-4-3 141518.png)\n\n**端口号[16bit]**\n\n网络实现的是不同主机的进程间通信。在一个操作系统中，有很多进程，当数据到来时要提交给哪个进程进行处理呢？这就需要用到端口号。在TCP头中，有源端口号(Source Port)和目标端口号(Destination Port)。源端口号标识了发送主机的进程，目标端口号标识接受方主机的进程。\n\n**序号[32bit]**\n\n序号分为发送序号SN (Sequence Number)和确认序号ACK (Acknowledgment Number)。\n\n发送序号：用来标识从 TCP源端向 TCP目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。\n\n如果将字节流看作在两个应用程序间的单向流动，则 TCP用顺序号对每个字节进行计数。序号是 32bit的无符号数，序号到达 2^32-1后又从 0开始。当建立一个新的连接时， SYN标志变 1，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN (Initial Sequence Number)。\n\n确认序号：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1。只有 ACK标志为 1时确认序号字段才有效。 TCP为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。\n\n**偏移[4bit]**\n\n这里的偏移实际指的是TCP首部的长度，它用来表明TCP首部中32 bit字的数目，通过它可以知道一个TCP包它的用户数据是从哪里开始的。这个字段占4bit，如4bit的值是0101，则说明TCP首部长度是5 \\* 4 = 20字节。 所以TCP的首部长度最大为15 \\* 4 = 60字节。然而没有可选字段，正常长度为20字节。\n\n**Reserved [6bit]**\n\n目前没有使用，它的值都为0\n\n**标志[6bit]**\n\n在TCP首部中有6个标志比特。他们中的多个可同时被置为1 。\n\nURG         紧急指针(urgent pointer)有效\n\nACK          确认序号有效\n\nPSH          指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满\n\nRST           一般表示断开一个连接\n\nSYN          同步序号用来发起一个连接\n\nFIN            发送端完成发送任务(即断开连接)\n\n**窗口大小(window)[16bit]**\n\n窗口的大小，表示源方法最多能接受的字节数。\n\n**校验和[16bit]**\n\n校验和覆盖了整个的TCP报文段:TCP首部和TCP数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。\n\n**紧急指针[16bit]**\n\n只有当URG标志置为1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n**TCP选项**\n\n是可选的。\n\n#### 三次握手建立连接\n\n![2017-4-3 143008](/images/2017-4-3 143008.png)\n\n**第一次握手**：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n**第二次握手**：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n**第三次握手**：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。\n\n#### 三次握手连接成功的标准\n\n客户端发完第三次ACK，就立马成为established状态，即使第三次ACK丢失，客户端并不关心，可以发送数据，格式为ACK+Data，当到达服务器时，服务器状态虽然为SYN_RCVD，它依然可以将Data缓存下来，客户端捎带过来的ACK，这个ACK就是对服务器SYN+ACK又一次确认，所以服务器端立马切换为established状态，然后将缓存下来的客户端Data提交给应用程序。\n\n所以客户端只要发送了三次握手的ACK即认为自己为established状态，对应的就是connect成功返回，同时可以接受用户数据。\n\n而服务器端没有收到客户端的ACK，accept依然为阻塞状态，直到由于客户端发送数据+ACK，或自己超时重传+ACK并接收到客户端ACK，accept才会返回。\n\n#### TCP连接为什么需要三次握手\n\n在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。\n\n谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n\n在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。\n\n原文地址：[TCP连接建立过程中为什么需要三次握手](http://www.cnblogs.com/TechZi/archive/2011/10/18/2216751.html)\n\n#### 四次挥手释放连接\n\n由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。\n\n![2017-4-3 145434](/images/2017-4-3 145434.png)\n\n**第一次挥手**：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。\n\n**第二次挥手**：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。\n\n**第三次挥手**：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。\n\n**第四次挥手**：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n\n#### TCP断开为什么需要四次挥手\n\n这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n\n#### TCP可靠性的保证\n\nTCP采用一种名为“带重传功能的肯定确认”的技术作为提供可靠数据传输服务的基础。这项技术要求接收方收到数据之后向源站回送确认信息ACK。发送方对发出的每个分组都保存一份记录，在发送下一个分组之前等待确认信息。发送方还在送出分组的同时启动一个定时器，并在定时器的定时期满而确认信息还没有到达的情况下，重发刚才发出的分组。\n\n图3-5表示带重传功能的肯定确认协议传输数据的情况，图\n\n3-6表示分组丢失引起超时和重传。\n\n为了避免由于网络延迟引起迟到的确认和重复的确认，协议规定在确认信息中稍带一个分组的序号，使接收方能正确将分组与确认关联起来。\n\n从图 3-5可以看出，虽然网络具有同时进行双向通信的能力，但由于在接到前一个分组的确认信息之前必须推迟下一个分组的发送，简单的肯定确认协议浪费了大量宝贵的网络带宽。为此， TCP使用滑动窗口的机制来提高网络吞吐量，同时解决端到端的流量控制。\n\n![2017-4-3 145924](/images/2017-4-3 145924.png)\n\n#### 滑动窗口技术\n\n滑动窗口技术是简单的带重传的肯定确认机制的一个更复杂的变形，它允许发送方在等待一个确认信息之前可以发送多个分组。如图 3-7所示，发送方要发送一个分组序列，滑动窗口协议在分组序列中放置一个固定长度的窗口，然后将窗口内的所有分组都发送出去；当发送方收到对窗口内第一个分组的确认信息时，它可以向后滑动并发送下一个分组；随着确认的不断到达，窗口也在不断的向后滑动。\n\n![2017-4-3 150129](/images/2017-4-3 150129.png)\n\n### TCP与UDP的区别\n\n**基本区别**\n\n基于连接与无连接（TCP有连接，UDP无连接）；\n\n对系统资源的要求（TCP较多，UDP少）；\n\nUDP程序结构较简单；\n\n流模式与数据报模式（TCP属于流模式，UDP属于数据报模式）；\n\nTCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。\n\n**UDP应用场景**\n\n面向数据报方式；\n\n网络数据大多为短消息 ；\n\n拥有大量Client；\n\n对数据安全性无特殊要求；\n\n网络负担非常重，但对响应速度要求高。\n\n**TCP编程的服务器端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()； \\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\n\n开启监听，用函数listen()； \n\n接收客户端上来的连接，用函数accept()； \n\n收发数据，用函数send()和recv()，或者read()和write(); \n\n关闭网络连接； \n\n关闭监听； \n\n**TCP编程的客户端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\\* 可选 \n\n设置要连接的对方的IP地址和端口等属性； \n\n连接服务器，用函数connect()； \n\n收发数据，用函数send()和recv()，或者read()和write()；\n\n关闭网络连接；\n\n**UDP编程的服务器端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\n\n循环接收数据，用函数recvfrom()；\n\n关闭网络连接； \n\n**UDP编程的客户端一般步骤**　\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\\* 可选 \n\n设置对方的IP地址和端口等属性；\n\n发送数据，用函数sendto()；\n\n关闭网络连接；\n\n**UDP补充**\n\nUDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。\n\n它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，\n\nUDP也无法进行流量控制等避免网络拥塞的行为。\n\n传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。\n\n**TCP补充**\n\nTCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。\n\n\n\n> 参考：\n>\n> [TCP和UDP的最完整的区别](http://blog.csdn.net/li_ning_/article/details/52117463)\n>\n> [计算机网络入门基础篇](https://zhuanlan.zhihu.com/p/22516664)\n>\n> [TCP/IP协议](http://baike.baidu.com/link?url=XlOHwI18XnbZTaGjg2WLtpmrwq2IsMVyoEggNVDOW6jaU-3qOLaoLleiSan-SBod0GTS8cAyOz99BAplna-wd3khoGaLvNPcniIX0dMGkg_oS2JsNmLR74DqcVoS5TgS#3)\n>\n> [tcp 编程中，connect 连接成功的标准是什么？](https://www.zhihu.com/question/49619919/answer/116941333)\n>\n> [如何通俗地解释一下 TCP/UDP 协议和 HTTP、FTP、SMTP 等协议之间的区别？](https://www.zhihu.com/question/20583641)\n>\n> [TCP、UDP、IP 协议分析](http://blog.chinaunix.net/uid-26833883-id-3627644.html) ","source":"_posts/tcpip.md","raw":"---\ntitle: TCP/IP协议入门篇\ndate: 2017-04-03 12:51:21\ntags:\n - TCP/IP\n - 网络编程\ncategories:\n - 网络编程\n---\n\n写这篇文章的主要动机是，自己在做项目的时候用到了网络编程的内容，然后自己简单学习了一下TCP/IP的东西，属于很基础的那种，在实习面试中，面试官也是问到了这块内容，但是自己理解比较浅，所以回答的也不是很好。想着系统的学习一下网络编程中TCP/IP协议这块，本篇作为入门，简单介绍一下TCP/IP协议。\n\n### 名词解释\n\nTCP/IP：**Transmission Control Protocol/Internet Protocol** 的简写，中译名为**传输控制协议/因特网互联协议**，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。是一种**面向连接的**、**可靠的**、**基于字节流的**传输层（Transport layer）通信协议。是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的。互联网络与单个网络不同，因为互联网络的不同部分可能有着截然不同的拓扑、带宽、延迟、分组大小和其他参数。TCP的设计目标是能够动态的适应互联网络的这些特性，而且当面对多种失败的时候仍然能够健壮。\n\n>  TCP/IP协议不是TCP和IP这两个协议的合称，而是指因特网整个TCP/IP协议族。\n\n### 参考模型\n\n了解TCP/IP参考模型之前，先来看一下OSI模型。\n\n#### OSI参考模型\n\nOSI模型是ISO的建议，是为了使各层上的协议国际标准化而发展起来的。OSI参考模型全称是开放系统互连参考模型(Open System Interconnection Reference Model)。这一参考模型共分为七层：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。\n\n| 层次    | 说明                                       |\n| ----- | ---------------------------------------- |\n| 物理层   | 处理机械的、电气的和过程的接口，以及物理层下的物理传输介质等           |\n| 数据链路层 | 加强物理层的功能，使其对网络层显示为一条无错的线路                |\n| 网络层   | 确定分组从源端到目的端的路由选择。路由可以选用网络中固定的静态路由表，也可以在每一次会话时决定，还可以根据当前的网络负载状况，灵活地为每一个分组分别决定。 |\n| 传输层   | 从会话层接收数据，并传输给网络层，同时确保到达目的端的各段信息正确无误，而且使会话层不受硬件变化的影响 |\n| 会话层   | 允许不同机器上的用户之间建立会话关系，既可以进行类似传输层的普通数据传输，也可以被用于远程登录到分时系统或在两台机器间传递文件 |\n| 表示层   | 用于完成一些特定的功能，这些功能由于经常被请求，因此人们希望有通用的解决办法，而不是由每个用户各自实现 |\n| 应用层   | 包含了大量人们普遍需要的协议。不同的文件系统有不同的文件命名原则和不同的文本行表示方法等，不同的系统之间传输文件还有各种不兼容问题，这些都将由应用层来处理。此外，应用层还有虚拟终端、电子邮件和新闻组等各种通用和专用的功能 |\n\n#### TCP/IP参考模型\n\nTCP/IP参考模型共分为四层：网络访问层、互联网层、传输层和应用层。\n\n| 层次    | 说明                                       |\n| ----- | ---------------------------------------- |\n| 应用层   | 包含所有的高层协议，包括：虚拟终端协议(TELNET)、文件传输协议(FTP)、电子邮件传输协议(SMTP)、域名服务(DNS)、网上新闻传输协议(NNTP)和超文本传送协议(HTTP)等 |\n| 传输层   | 源端和目的端机器上的对等实体可以进行会话。在这一层定义了两个端到端的协议：传输控制协议(TCP)和用户数据报协议(UDP)。TCP是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。UDP是面向无连接的不可靠传输的协议，主要用于不需要TCP的排序和流量控制等功能的应用程序。 |\n| 互联网层  | 整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标，TCP/IP参考模型的互联网层和OSI参考模型的网络层在功能上非常相似。 |\n| 网络访问层 | 指出主机必须使用某种协议与网络相连                        |\n\n### TCP/IP协议层次\n\n![2017-4-3 140143](/images/2017-4-3 140143.png)\n\n#### 链路层\n\n链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。\n\nARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。\nRARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。\n\n**ARP、RARP属于网络层协议，工作在链路层**\n\n#### 网络层\n\n负责相邻计算机之间的通信。其功能包括三方面。\n\n>  处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。\n\n>  处理输入数据报：首先检查其合法性，然后进行寻径--假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。\n\n>  处理路径、流控、拥塞等问题。\n\n#### 传输层\n\n提供应用程序间的通信。其功能包括：格式化信息流；提供可靠传输。\n\n为实现可靠传输，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。\n\n#### 应用层\n\n向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。\n\nFTP 是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。\n\nTelnet 服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。\n\nDNS 是域名解析服务，提供域名到IP地址之间的转换，使用端口53。\n\nSMTP 是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。\n\nNFS 是网络文件系统，用于网络中不同主机间的文件共享。\n\nHTTP 是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。\n\n### TCP协议\n\n#### TCP头格式\n\n![2017-4-3 141518](/images/2017-4-3 141518.png)\n\n**端口号[16bit]**\n\n网络实现的是不同主机的进程间通信。在一个操作系统中，有很多进程，当数据到来时要提交给哪个进程进行处理呢？这就需要用到端口号。在TCP头中，有源端口号(Source Port)和目标端口号(Destination Port)。源端口号标识了发送主机的进程，目标端口号标识接受方主机的进程。\n\n**序号[32bit]**\n\n序号分为发送序号SN (Sequence Number)和确认序号ACK (Acknowledgment Number)。\n\n发送序号：用来标识从 TCP源端向 TCP目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。\n\n如果将字节流看作在两个应用程序间的单向流动，则 TCP用顺序号对每个字节进行计数。序号是 32bit的无符号数，序号到达 2^32-1后又从 0开始。当建立一个新的连接时， SYN标志变 1，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN (Initial Sequence Number)。\n\n确认序号：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1。只有 ACK标志为 1时确认序号字段才有效。 TCP为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。\n\n**偏移[4bit]**\n\n这里的偏移实际指的是TCP首部的长度，它用来表明TCP首部中32 bit字的数目，通过它可以知道一个TCP包它的用户数据是从哪里开始的。这个字段占4bit，如4bit的值是0101，则说明TCP首部长度是5 \\* 4 = 20字节。 所以TCP的首部长度最大为15 \\* 4 = 60字节。然而没有可选字段，正常长度为20字节。\n\n**Reserved [6bit]**\n\n目前没有使用，它的值都为0\n\n**标志[6bit]**\n\n在TCP首部中有6个标志比特。他们中的多个可同时被置为1 。\n\nURG         紧急指针(urgent pointer)有效\n\nACK          确认序号有效\n\nPSH          指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满\n\nRST           一般表示断开一个连接\n\nSYN          同步序号用来发起一个连接\n\nFIN            发送端完成发送任务(即断开连接)\n\n**窗口大小(window)[16bit]**\n\n窗口的大小，表示源方法最多能接受的字节数。\n\n**校验和[16bit]**\n\n校验和覆盖了整个的TCP报文段:TCP首部和TCP数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。\n\n**紧急指针[16bit]**\n\n只有当URG标志置为1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n**TCP选项**\n\n是可选的。\n\n#### 三次握手建立连接\n\n![2017-4-3 143008](/images/2017-4-3 143008.png)\n\n**第一次握手**：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n**第二次握手**：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n**第三次握手**：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。\n\n#### 三次握手连接成功的标准\n\n客户端发完第三次ACK，就立马成为established状态，即使第三次ACK丢失，客户端并不关心，可以发送数据，格式为ACK+Data，当到达服务器时，服务器状态虽然为SYN_RCVD，它依然可以将Data缓存下来，客户端捎带过来的ACK，这个ACK就是对服务器SYN+ACK又一次确认，所以服务器端立马切换为established状态，然后将缓存下来的客户端Data提交给应用程序。\n\n所以客户端只要发送了三次握手的ACK即认为自己为established状态，对应的就是connect成功返回，同时可以接受用户数据。\n\n而服务器端没有收到客户端的ACK，accept依然为阻塞状态，直到由于客户端发送数据+ACK，或自己超时重传+ACK并接收到客户端ACK，accept才会返回。\n\n#### TCP连接为什么需要三次握手\n\n在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。\n\n谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n\n在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。\n\n原文地址：[TCP连接建立过程中为什么需要三次握手](http://www.cnblogs.com/TechZi/archive/2011/10/18/2216751.html)\n\n#### 四次挥手释放连接\n\n由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。\n\n![2017-4-3 145434](/images/2017-4-3 145434.png)\n\n**第一次挥手**：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。\n\n**第二次挥手**：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。\n\n**第三次挥手**：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。\n\n**第四次挥手**：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n\n#### TCP断开为什么需要四次挥手\n\n这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n\n#### TCP可靠性的保证\n\nTCP采用一种名为“带重传功能的肯定确认”的技术作为提供可靠数据传输服务的基础。这项技术要求接收方收到数据之后向源站回送确认信息ACK。发送方对发出的每个分组都保存一份记录，在发送下一个分组之前等待确认信息。发送方还在送出分组的同时启动一个定时器，并在定时器的定时期满而确认信息还没有到达的情况下，重发刚才发出的分组。\n\n图3-5表示带重传功能的肯定确认协议传输数据的情况，图\n\n3-6表示分组丢失引起超时和重传。\n\n为了避免由于网络延迟引起迟到的确认和重复的确认，协议规定在确认信息中稍带一个分组的序号，使接收方能正确将分组与确认关联起来。\n\n从图 3-5可以看出，虽然网络具有同时进行双向通信的能力，但由于在接到前一个分组的确认信息之前必须推迟下一个分组的发送，简单的肯定确认协议浪费了大量宝贵的网络带宽。为此， TCP使用滑动窗口的机制来提高网络吞吐量，同时解决端到端的流量控制。\n\n![2017-4-3 145924](/images/2017-4-3 145924.png)\n\n#### 滑动窗口技术\n\n滑动窗口技术是简单的带重传的肯定确认机制的一个更复杂的变形，它允许发送方在等待一个确认信息之前可以发送多个分组。如图 3-7所示，发送方要发送一个分组序列，滑动窗口协议在分组序列中放置一个固定长度的窗口，然后将窗口内的所有分组都发送出去；当发送方收到对窗口内第一个分组的确认信息时，它可以向后滑动并发送下一个分组；随着确认的不断到达，窗口也在不断的向后滑动。\n\n![2017-4-3 150129](/images/2017-4-3 150129.png)\n\n### TCP与UDP的区别\n\n**基本区别**\n\n基于连接与无连接（TCP有连接，UDP无连接）；\n\n对系统资源的要求（TCP较多，UDP少）；\n\nUDP程序结构较简单；\n\n流模式与数据报模式（TCP属于流模式，UDP属于数据报模式）；\n\nTCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。\n\n**UDP应用场景**\n\n面向数据报方式；\n\n网络数据大多为短消息 ；\n\n拥有大量Client；\n\n对数据安全性无特殊要求；\n\n网络负担非常重，但对响应速度要求高。\n\n**TCP编程的服务器端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()； \\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\n\n开启监听，用函数listen()； \n\n接收客户端上来的连接，用函数accept()； \n\n收发数据，用函数send()和recv()，或者read()和write(); \n\n关闭网络连接； \n\n关闭监听； \n\n**TCP编程的客户端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\\* 可选 \n\n设置要连接的对方的IP地址和端口等属性； \n\n连接服务器，用函数connect()； \n\n收发数据，用函数send()和recv()，或者read()和write()；\n\n关闭网络连接；\n\n**UDP编程的服务器端一般步骤**\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\n\n循环接收数据，用函数recvfrom()；\n\n关闭网络连接； \n\n**UDP编程的客户端一般步骤**　\n\n创建一个socket，用函数socket()； \n\n设置socket属性，用函数setsockopt()；\\* 可选 \n\n绑定IP地址、端口等信息到socket上，用函数bind()；\\* 可选 \n\n设置对方的IP地址和端口等属性；\n\n发送数据，用函数sendto()；\n\n关闭网络连接；\n\n**UDP补充**\n\nUDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。\n\n它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，\n\nUDP也无法进行流量控制等避免网络拥塞的行为。\n\n传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。\n\n**TCP补充**\n\nTCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。\n\n\n\n> 参考：\n>\n> [TCP和UDP的最完整的区别](http://blog.csdn.net/li_ning_/article/details/52117463)\n>\n> [计算机网络入门基础篇](https://zhuanlan.zhihu.com/p/22516664)\n>\n> [TCP/IP协议](http://baike.baidu.com/link?url=XlOHwI18XnbZTaGjg2WLtpmrwq2IsMVyoEggNVDOW6jaU-3qOLaoLleiSan-SBod0GTS8cAyOz99BAplna-wd3khoGaLvNPcniIX0dMGkg_oS2JsNmLR74DqcVoS5TgS#3)\n>\n> [tcp 编程中，connect 连接成功的标准是什么？](https://www.zhihu.com/question/49619919/answer/116941333)\n>\n> [如何通俗地解释一下 TCP/UDP 协议和 HTTP、FTP、SMTP 等协议之间的区别？](https://www.zhihu.com/question/20583641)\n>\n> [TCP、UDP、IP 协议分析](http://blog.chinaunix.net/uid-26833883-id-3627644.html) ","slug":"tcpip","published":1,"updated":"2020-10-25T06:43:32.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueqa300crmolcyflungur","content":"<p>写这篇文章的主要动机是，自己在做项目的时候用到了网络编程的内容，然后自己简单学习了一下TCP/IP的东西，属于很基础的那种，在实习面试中，面试官也是问到了这块内容，但是自己理解比较浅，所以回答的也不是很好。想着系统的学习一下网络编程中TCP/IP协议这块，本篇作为入门，简单介绍一下TCP/IP协议。</p>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p>TCP/IP：<strong>Transmission Control Protocol/Internet Protocol</strong> 的简写，中译名为<strong>传输控制协议/因特网互联协议</strong>，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。是一种<strong>面向连接的</strong>、<strong>可靠的</strong>、<strong>基于字节流的</strong>传输层（Transport layer）通信协议。是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的。互联网络与单个网络不同，因为互联网络的不同部分可能有着截然不同的拓扑、带宽、延迟、分组大小和其他参数。TCP的设计目标是能够动态的适应互联网络的这些特性，而且当面对多种失败的时候仍然能够健壮。</p>\n<blockquote>\n<p> TCP/IP协议不是TCP和IP这两个协议的合称，而是指因特网整个TCP/IP协议族。</p>\n</blockquote>\n<h3 id=\"参考模型\"><a href=\"#参考模型\" class=\"headerlink\" title=\"参考模型\"></a>参考模型</h3><p>了解TCP/IP参考模型之前，先来看一下OSI模型。</p>\n<h4 id=\"OSI参考模型\"><a href=\"#OSI参考模型\" class=\"headerlink\" title=\"OSI参考模型\"></a>OSI参考模型</h4><p>OSI模型是ISO的建议，是为了使各层上的协议国际标准化而发展起来的。OSI参考模型全称是开放系统互连参考模型(Open System Interconnection Reference Model)。这一参考模型共分为七层：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>处理机械的、电气的和过程的接口，以及物理层下的物理传输介质等</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>加强物理层的功能，使其对网络层显示为一条无错的线路</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>确定分组从源端到目的端的路由选择。路由可以选用网络中固定的静态路由表，也可以在每一次会话时决定，还可以根据当前的网络负载状况，灵活地为每一个分组分别决定。</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>从会话层接收数据，并传输给网络层，同时确保到达目的端的各段信息正确无误，而且使会话层不受硬件变化的影响</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>允许不同机器上的用户之间建立会话关系，既可以进行类似传输层的普通数据传输，也可以被用于远程登录到分时系统或在两台机器间传递文件</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>用于完成一些特定的功能，这些功能由于经常被请求，因此人们希望有通用的解决办法，而不是由每个用户各自实现</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>包含了大量人们普遍需要的协议。不同的文件系统有不同的文件命名原则和不同的文本行表示方法等，不同的系统之间传输文件还有各种不兼容问题，这些都将由应用层来处理。此外，应用层还有虚拟终端、电子邮件和新闻组等各种通用和专用的功能</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"TCP-IP参考模型\"><a href=\"#TCP-IP参考模型\" class=\"headerlink\" title=\"TCP/IP参考模型\"></a>TCP/IP参考模型</h4><p>TCP/IP参考模型共分为四层：网络访问层、互联网层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>包含所有的高层协议，包括：虚拟终端协议(TELNET)、文件传输协议(FTP)、电子邮件传输协议(SMTP)、域名服务(DNS)、网上新闻传输协议(NNTP)和超文本传送协议(HTTP)等</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>源端和目的端机器上的对等实体可以进行会话。在这一层定义了两个端到端的协议：传输控制协议(TCP)和用户数据报协议(UDP)。TCP是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。UDP是面向无连接的不可靠传输的协议，主要用于不需要TCP的排序和流量控制等功能的应用程序。</td>\n</tr>\n<tr>\n<td>互联网层</td>\n<td>整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标，TCP/IP参考模型的互联网层和OSI参考模型的网络层在功能上非常相似。</td>\n</tr>\n<tr>\n<td>网络访问层</td>\n<td>指出主机必须使用某种协议与网络相连</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TCP-IP协议层次\"><a href=\"#TCP-IP协议层次\" class=\"headerlink\" title=\"TCP/IP协议层次\"></a>TCP/IP协议层次</h3><p><img src=\"/images/2017-4-3 140143.png\" alt=\"2017-4-3 140143\"></p>\n<h4 id=\"链路层\"><a href=\"#链路层\" class=\"headerlink\" title=\"链路层\"></a>链路层</h4><p>链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。</p>\n<p>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。<br>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。</p>\n<p><strong>ARP、RARP属于网络层协议，工作在链路层</strong></p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>负责相邻计算机之间的通信。其功能包括三方面。</p>\n<blockquote>\n<p> 处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。</p>\n</blockquote>\n<blockquote>\n<p> 处理输入数据报：首先检查其合法性，然后进行寻径–假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。</p>\n</blockquote>\n<blockquote>\n<p> 处理路径、流控、拥塞等问题。</p>\n</blockquote>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>提供应用程序间的通信。其功能包括：格式化信息流；提供可靠传输。</p>\n<p>为实现可靠传输，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。</p>\n<p>FTP 是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。</p>\n<p>Telnet 服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。</p>\n<p>DNS 是域名解析服务，提供域名到IP地址之间的转换，使用端口53。</p>\n<p>SMTP 是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。</p>\n<p>NFS 是网络文件系统，用于网络中不同主机间的文件共享。</p>\n<p>HTTP 是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><h4 id=\"TCP头格式\"><a href=\"#TCP头格式\" class=\"headerlink\" title=\"TCP头格式\"></a>TCP头格式</h4><p><img src=\"/images/2017-4-3 141518.png\" alt=\"2017-4-3 141518\"></p>\n<p><strong>端口号[16bit]</strong></p>\n<p>网络实现的是不同主机的进程间通信。在一个操作系统中，有很多进程，当数据到来时要提交给哪个进程进行处理呢？这就需要用到端口号。在TCP头中，有源端口号(Source Port)和目标端口号(Destination Port)。源端口号标识了发送主机的进程，目标端口号标识接受方主机的进程。</p>\n<p><strong>序号[32bit]</strong></p>\n<p>序号分为发送序号SN (Sequence Number)和确认序号ACK (Acknowledgment Number)。</p>\n<p>发送序号：用来标识从 TCP源端向 TCP目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。</p>\n<p>如果将字节流看作在两个应用程序间的单向流动，则 TCP用顺序号对每个字节进行计数。序号是 32bit的无符号数，序号到达 2^32-1后又从 0开始。当建立一个新的连接时， SYN标志变 1，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN (Initial Sequence Number)。</p>\n<p>确认序号：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1。只有 ACK标志为 1时确认序号字段才有效。 TCP为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。</p>\n<p><strong>偏移[4bit]</strong></p>\n<p>这里的偏移实际指的是TCP首部的长度，它用来表明TCP首部中32 bit字的数目，通过它可以知道一个TCP包它的用户数据是从哪里开始的。这个字段占4bit，如4bit的值是0101，则说明TCP首部长度是5 * 4 = 20字节。 所以TCP的首部长度最大为15 * 4 = 60字节。然而没有可选字段，正常长度为20字节。</p>\n<p><strong>Reserved [6bit]</strong></p>\n<p>目前没有使用，它的值都为0</p>\n<p><strong>标志[6bit]</strong></p>\n<p>在TCP首部中有6个标志比特。他们中的多个可同时被置为1 。</p>\n<p>URG         紧急指针(urgent pointer)有效</p>\n<p>ACK          确认序号有效</p>\n<p>PSH          指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满</p>\n<p>RST           一般表示断开一个连接</p>\n<p>SYN          同步序号用来发起一个连接</p>\n<p>FIN            发送端完成发送任务(即断开连接)</p>\n<p><strong>窗口大小(window)[16bit]</strong></p>\n<p>窗口的大小，表示源方法最多能接受的字节数。</p>\n<p><strong>校验和[16bit]</strong></p>\n<p>校验和覆盖了整个的TCP报文段:TCP首部和TCP数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。</p>\n<p><strong>紧急指针[16bit]</strong></p>\n<p>只有当URG标志置为1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p><strong>TCP选项</strong></p>\n<p>是可选的。</p>\n<h4 id=\"三次握手建立连接\"><a href=\"#三次握手建立连接\" class=\"headerlink\" title=\"三次握手建立连接\"></a>三次握手建立连接</h4><p><img src=\"/images/2017-4-3 143008.png\" alt=\"2017-4-3 143008\"></p>\n<p><strong>第一次握手</strong>：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p>\n<p><strong>第二次握手</strong>：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p>\n<p><strong>第三次握手</strong>：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p>\n<h4 id=\"三次握手连接成功的标准\"><a href=\"#三次握手连接成功的标准\" class=\"headerlink\" title=\"三次握手连接成功的标准\"></a>三次握手连接成功的标准</h4><p>客户端发完第三次ACK，就立马成为established状态，即使第三次ACK丢失，客户端并不关心，可以发送数据，格式为ACK+Data，当到达服务器时，服务器状态虽然为SYN_RCVD，它依然可以将Data缓存下来，客户端捎带过来的ACK，这个ACK就是对服务器SYN+ACK又一次确认，所以服务器端立马切换为established状态，然后将缓存下来的客户端Data提交给应用程序。</p>\n<p>所以客户端只要发送了三次握手的ACK即认为自己为established状态，对应的就是connect成功返回，同时可以接受用户数据。</p>\n<p>而服务器端没有收到客户端的ACK，accept依然为阻塞状态，直到由于客户端发送数据+ACK，或自己超时重传+ACK并接收到客户端ACK，accept才会返回。</p>\n<h4 id=\"TCP连接为什么需要三次握手\"><a href=\"#TCP连接为什么需要三次握手\" class=\"headerlink\" title=\"TCP连接为什么需要三次握手\"></a>TCP连接为什么需要三次握手</h4><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。</p>\n<p>谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>\n<p>在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。</p>\n<p>原文地址：<a href=\"http://www.cnblogs.com/TechZi/archive/2011/10/18/2216751.html\" target=\"_blank\" rel=\"noopener\">TCP连接建立过程中为什么需要三次握手</a></p>\n<h4 id=\"四次挥手释放连接\"><a href=\"#四次挥手释放连接\" class=\"headerlink\" title=\"四次挥手释放连接\"></a>四次挥手释放连接</h4><p>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p>\n<p><img src=\"/images/2017-4-3 145434.png\" alt=\"2017-4-3 145434\"></p>\n<p><strong>第一次挥手</strong>：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p>\n<p><strong>第二次挥手</strong>：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p>\n<p><strong>第三次挥手</strong>：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p>\n<p><strong>第四次挥手</strong>：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>\n<h4 id=\"TCP断开为什么需要四次挥手\"><a href=\"#TCP断开为什么需要四次挥手\" class=\"headerlink\" title=\"TCP断开为什么需要四次挥手\"></a>TCP断开为什么需要四次挥手</h4><p>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n<h4 id=\"TCP可靠性的保证\"><a href=\"#TCP可靠性的保证\" class=\"headerlink\" title=\"TCP可靠性的保证\"></a>TCP可靠性的保证</h4><p>TCP采用一种名为“带重传功能的肯定确认”的技术作为提供可靠数据传输服务的基础。这项技术要求接收方收到数据之后向源站回送确认信息ACK。发送方对发出的每个分组都保存一份记录，在发送下一个分组之前等待确认信息。发送方还在送出分组的同时启动一个定时器，并在定时器的定时期满而确认信息还没有到达的情况下，重发刚才发出的分组。</p>\n<p>图3-5表示带重传功能的肯定确认协议传输数据的情况，图</p>\n<p>3-6表示分组丢失引起超时和重传。</p>\n<p>为了避免由于网络延迟引起迟到的确认和重复的确认，协议规定在确认信息中稍带一个分组的序号，使接收方能正确将分组与确认关联起来。</p>\n<p>从图 3-5可以看出，虽然网络具有同时进行双向通信的能力，但由于在接到前一个分组的确认信息之前必须推迟下一个分组的发送，简单的肯定确认协议浪费了大量宝贵的网络带宽。为此， TCP使用滑动窗口的机制来提高网络吞吐量，同时解决端到端的流量控制。</p>\n<p><img src=\"/images/2017-4-3 145924.png\" alt=\"2017-4-3 145924\"></p>\n<h4 id=\"滑动窗口技术\"><a href=\"#滑动窗口技术\" class=\"headerlink\" title=\"滑动窗口技术\"></a>滑动窗口技术</h4><p>滑动窗口技术是简单的带重传的肯定确认机制的一个更复杂的变形，它允许发送方在等待一个确认信息之前可以发送多个分组。如图 3-7所示，发送方要发送一个分组序列，滑动窗口协议在分组序列中放置一个固定长度的窗口，然后将窗口内的所有分组都发送出去；当发送方收到对窗口内第一个分组的确认信息时，它可以向后滑动并发送下一个分组；随着确认的不断到达，窗口也在不断的向后滑动。</p>\n<p><img src=\"/images/2017-4-3 150129.png\" alt=\"2017-4-3 150129\"></p>\n<h3 id=\"TCP与UDP的区别\"><a href=\"#TCP与UDP的区别\" class=\"headerlink\" title=\"TCP与UDP的区别\"></a>TCP与UDP的区别</h3><p><strong>基本区别</strong></p>\n<p>基于连接与无连接（TCP有连接，UDP无连接）；</p>\n<p>对系统资源的要求（TCP较多，UDP少）；</p>\n<p>UDP程序结构较简单；</p>\n<p>流模式与数据报模式（TCP属于流模式，UDP属于数据报模式）；</p>\n<p>TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p>\n<p><strong>UDP应用场景</strong></p>\n<p>面向数据报方式；</p>\n<p>网络数据大多为短消息 ；</p>\n<p>拥有大量Client；</p>\n<p>对数据安全性无特殊要求；</p>\n<p>网络负担非常重，但对响应速度要求高。</p>\n<p><strong>TCP编程的服务器端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()； * 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；</p>\n<p>开启监听，用函数listen()； </p>\n<p>接收客户端上来的连接，用函数accept()； </p>\n<p>收发数据，用函数send()和recv()，或者read()和write(); </p>\n<p>关闭网络连接； </p>\n<p>关闭监听； </p>\n<p><strong>TCP编程的客户端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；* 可选 </p>\n<p>设置要连接的对方的IP地址和端口等属性； </p>\n<p>连接服务器，用函数connect()； </p>\n<p>收发数据，用函数send()和recv()，或者read()和write()；</p>\n<p>关闭网络连接；</p>\n<p><strong>UDP编程的服务器端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；</p>\n<p>循环接收数据，用函数recvfrom()；</p>\n<p>关闭网络连接； </p>\n<p><strong>UDP编程的客户端一般步骤</strong>　</p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；* 可选 </p>\n<p>设置对方的IP地址和端口等属性；</p>\n<p>发送数据，用函数sendto()；</p>\n<p>关闭网络连接；</p>\n<p><strong>UDP补充</strong></p>\n<p>UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。</p>\n<p>它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，</p>\n<p>UDP也无法进行流量控制等避免网络拥塞的行为。</p>\n<p>传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。</p>\n<p><strong>TCP补充</strong></p>\n<p>TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">TCP和UDP的最完整的区别</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/22516664\" target=\"_blank\" rel=\"noopener\">计算机网络入门基础篇</a></p>\n<p><a href=\"http://baike.baidu.com/link?url=XlOHwI18XnbZTaGjg2WLtpmrwq2IsMVyoEggNVDOW6jaU-3qOLaoLleiSan-SBod0GTS8cAyOz99BAplna-wd3khoGaLvNPcniIX0dMGkg_oS2JsNmLR74DqcVoS5TgS#3\" target=\"_blank\" rel=\"noopener\">TCP/IP协议</a></p>\n<p><a href=\"https://www.zhihu.com/question/49619919/answer/116941333\" target=\"_blank\" rel=\"noopener\">tcp 编程中，connect 连接成功的标准是什么？</a></p>\n<p><a href=\"https://www.zhihu.com/question/20583641\" target=\"_blank\" rel=\"noopener\">如何通俗地解释一下 TCP/UDP 协议和 HTTP、FTP、SMTP 等协议之间的区别？</a></p>\n<p><a href=\"http://blog.chinaunix.net/uid-26833883-id-3627644.html\" target=\"_blank\" rel=\"noopener\">TCP、UDP、IP 协议分析</a> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>写这篇文章的主要动机是，自己在做项目的时候用到了网络编程的内容，然后自己简单学习了一下TCP/IP的东西，属于很基础的那种，在实习面试中，面试官也是问到了这块内容，但是自己理解比较浅，所以回答的也不是很好。想着系统的学习一下网络编程中TCP/IP协议这块，本篇作为入门，简单介绍一下TCP/IP协议。</p>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><p>TCP/IP：<strong>Transmission Control Protocol/Internet Protocol</strong> 的简写，中译名为<strong>传输控制协议/因特网互联协议</strong>，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。是一种<strong>面向连接的</strong>、<strong>可靠的</strong>、<strong>基于字节流的</strong>传输层（Transport layer）通信协议。是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的。互联网络与单个网络不同，因为互联网络的不同部分可能有着截然不同的拓扑、带宽、延迟、分组大小和其他参数。TCP的设计目标是能够动态的适应互联网络的这些特性，而且当面对多种失败的时候仍然能够健壮。</p>\n<blockquote>\n<p> TCP/IP协议不是TCP和IP这两个协议的合称，而是指因特网整个TCP/IP协议族。</p>\n</blockquote>\n<h3 id=\"参考模型\"><a href=\"#参考模型\" class=\"headerlink\" title=\"参考模型\"></a>参考模型</h3><p>了解TCP/IP参考模型之前，先来看一下OSI模型。</p>\n<h4 id=\"OSI参考模型\"><a href=\"#OSI参考模型\" class=\"headerlink\" title=\"OSI参考模型\"></a>OSI参考模型</h4><p>OSI模型是ISO的建议，是为了使各层上的协议国际标准化而发展起来的。OSI参考模型全称是开放系统互连参考模型(Open System Interconnection Reference Model)。这一参考模型共分为七层：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>处理机械的、电气的和过程的接口，以及物理层下的物理传输介质等</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>加强物理层的功能，使其对网络层显示为一条无错的线路</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>确定分组从源端到目的端的路由选择。路由可以选用网络中固定的静态路由表，也可以在每一次会话时决定，还可以根据当前的网络负载状况，灵活地为每一个分组分别决定。</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>从会话层接收数据，并传输给网络层，同时确保到达目的端的各段信息正确无误，而且使会话层不受硬件变化的影响</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>允许不同机器上的用户之间建立会话关系，既可以进行类似传输层的普通数据传输，也可以被用于远程登录到分时系统或在两台机器间传递文件</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>用于完成一些特定的功能，这些功能由于经常被请求，因此人们希望有通用的解决办法，而不是由每个用户各自实现</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>包含了大量人们普遍需要的协议。不同的文件系统有不同的文件命名原则和不同的文本行表示方法等，不同的系统之间传输文件还有各种不兼容问题，这些都将由应用层来处理。此外，应用层还有虚拟终端、电子邮件和新闻组等各种通用和专用的功能</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"TCP-IP参考模型\"><a href=\"#TCP-IP参考模型\" class=\"headerlink\" title=\"TCP/IP参考模型\"></a>TCP/IP参考模型</h4><p>TCP/IP参考模型共分为四层：网络访问层、互联网层、传输层和应用层。</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>包含所有的高层协议，包括：虚拟终端协议(TELNET)、文件传输协议(FTP)、电子邮件传输协议(SMTP)、域名服务(DNS)、网上新闻传输协议(NNTP)和超文本传送协议(HTTP)等</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>源端和目的端机器上的对等实体可以进行会话。在这一层定义了两个端到端的协议：传输控制协议(TCP)和用户数据报协议(UDP)。TCP是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。UDP是面向无连接的不可靠传输的协议，主要用于不需要TCP的排序和流量控制等功能的应用程序。</td>\n</tr>\n<tr>\n<td>互联网层</td>\n<td>整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标，TCP/IP参考模型的互联网层和OSI参考模型的网络层在功能上非常相似。</td>\n</tr>\n<tr>\n<td>网络访问层</td>\n<td>指出主机必须使用某种协议与网络相连</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TCP-IP协议层次\"><a href=\"#TCP-IP协议层次\" class=\"headerlink\" title=\"TCP/IP协议层次\"></a>TCP/IP协议层次</h3><p><img src=\"/images/2017-4-3 140143.png\" alt=\"2017-4-3 140143\"></p>\n<h4 id=\"链路层\"><a href=\"#链路层\" class=\"headerlink\" title=\"链路层\"></a>链路层</h4><p>链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。</p>\n<p>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。<br>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。</p>\n<p><strong>ARP、RARP属于网络层协议，工作在链路层</strong></p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>负责相邻计算机之间的通信。其功能包括三方面。</p>\n<blockquote>\n<p> 处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。</p>\n</blockquote>\n<blockquote>\n<p> 处理输入数据报：首先检查其合法性，然后进行寻径–假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。</p>\n</blockquote>\n<blockquote>\n<p> 处理路径、流控、拥塞等问题。</p>\n</blockquote>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>提供应用程序间的通信。其功能包括：格式化信息流；提供可靠传输。</p>\n<p>为实现可靠传输，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。</p>\n<p>FTP 是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。</p>\n<p>Telnet 服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。</p>\n<p>DNS 是域名解析服务，提供域名到IP地址之间的转换，使用端口53。</p>\n<p>SMTP 是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。</p>\n<p>NFS 是网络文件系统，用于网络中不同主机间的文件共享。</p>\n<p>HTTP 是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><h4 id=\"TCP头格式\"><a href=\"#TCP头格式\" class=\"headerlink\" title=\"TCP头格式\"></a>TCP头格式</h4><p><img src=\"/images/2017-4-3 141518.png\" alt=\"2017-4-3 141518\"></p>\n<p><strong>端口号[16bit]</strong></p>\n<p>网络实现的是不同主机的进程间通信。在一个操作系统中，有很多进程，当数据到来时要提交给哪个进程进行处理呢？这就需要用到端口号。在TCP头中，有源端口号(Source Port)和目标端口号(Destination Port)。源端口号标识了发送主机的进程，目标端口号标识接受方主机的进程。</p>\n<p><strong>序号[32bit]</strong></p>\n<p>序号分为发送序号SN (Sequence Number)和确认序号ACK (Acknowledgment Number)。</p>\n<p>发送序号：用来标识从 TCP源端向 TCP目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。</p>\n<p>如果将字节流看作在两个应用程序间的单向流动，则 TCP用顺序号对每个字节进行计数。序号是 32bit的无符号数，序号到达 2^32-1后又从 0开始。当建立一个新的连接时， SYN标志变 1，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN (Initial Sequence Number)。</p>\n<p>确认序号：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1。只有 ACK标志为 1时确认序号字段才有效。 TCP为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。</p>\n<p><strong>偏移[4bit]</strong></p>\n<p>这里的偏移实际指的是TCP首部的长度，它用来表明TCP首部中32 bit字的数目，通过它可以知道一个TCP包它的用户数据是从哪里开始的。这个字段占4bit，如4bit的值是0101，则说明TCP首部长度是5 * 4 = 20字节。 所以TCP的首部长度最大为15 * 4 = 60字节。然而没有可选字段，正常长度为20字节。</p>\n<p><strong>Reserved [6bit]</strong></p>\n<p>目前没有使用，它的值都为0</p>\n<p><strong>标志[6bit]</strong></p>\n<p>在TCP首部中有6个标志比特。他们中的多个可同时被置为1 。</p>\n<p>URG         紧急指针(urgent pointer)有效</p>\n<p>ACK          确认序号有效</p>\n<p>PSH          指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满</p>\n<p>RST           一般表示断开一个连接</p>\n<p>SYN          同步序号用来发起一个连接</p>\n<p>FIN            发送端完成发送任务(即断开连接)</p>\n<p><strong>窗口大小(window)[16bit]</strong></p>\n<p>窗口的大小，表示源方法最多能接受的字节数。</p>\n<p><strong>校验和[16bit]</strong></p>\n<p>校验和覆盖了整个的TCP报文段:TCP首部和TCP数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。</p>\n<p><strong>紧急指针[16bit]</strong></p>\n<p>只有当URG标志置为1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p><strong>TCP选项</strong></p>\n<p>是可选的。</p>\n<h4 id=\"三次握手建立连接\"><a href=\"#三次握手建立连接\" class=\"headerlink\" title=\"三次握手建立连接\"></a>三次握手建立连接</h4><p><img src=\"/images/2017-4-3 143008.png\" alt=\"2017-4-3 143008\"></p>\n<p><strong>第一次握手</strong>：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p>\n<p><strong>第二次握手</strong>：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p>\n<p><strong>第三次握手</strong>：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p>\n<h4 id=\"三次握手连接成功的标准\"><a href=\"#三次握手连接成功的标准\" class=\"headerlink\" title=\"三次握手连接成功的标准\"></a>三次握手连接成功的标准</h4><p>客户端发完第三次ACK，就立马成为established状态，即使第三次ACK丢失，客户端并不关心，可以发送数据，格式为ACK+Data，当到达服务器时，服务器状态虽然为SYN_RCVD，它依然可以将Data缓存下来，客户端捎带过来的ACK，这个ACK就是对服务器SYN+ACK又一次确认，所以服务器端立马切换为established状态，然后将缓存下来的客户端Data提交给应用程序。</p>\n<p>所以客户端只要发送了三次握手的ACK即认为自己为established状态，对应的就是connect成功返回，同时可以接受用户数据。</p>\n<p>而服务器端没有收到客户端的ACK，accept依然为阻塞状态，直到由于客户端发送数据+ACK，或自己超时重传+ACK并接收到客户端ACK，accept才会返回。</p>\n<h4 id=\"TCP连接为什么需要三次握手\"><a href=\"#TCP连接为什么需要三次握手\" class=\"headerlink\" title=\"TCP连接为什么需要三次握手\"></a>TCP连接为什么需要三次握手</h4><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。</p>\n<p>谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>\n<p>在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。</p>\n<p>原文地址：<a href=\"http://www.cnblogs.com/TechZi/archive/2011/10/18/2216751.html\" target=\"_blank\" rel=\"noopener\">TCP连接建立过程中为什么需要三次握手</a></p>\n<h4 id=\"四次挥手释放连接\"><a href=\"#四次挥手释放连接\" class=\"headerlink\" title=\"四次挥手释放连接\"></a>四次挥手释放连接</h4><p>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p>\n<p><img src=\"/images/2017-4-3 145434.png\" alt=\"2017-4-3 145434\"></p>\n<p><strong>第一次挥手</strong>：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p>\n<p><strong>第二次挥手</strong>：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p>\n<p><strong>第三次挥手</strong>：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p>\n<p><strong>第四次挥手</strong>：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>\n<h4 id=\"TCP断开为什么需要四次挥手\"><a href=\"#TCP断开为什么需要四次挥手\" class=\"headerlink\" title=\"TCP断开为什么需要四次挥手\"></a>TCP断开为什么需要四次挥手</h4><p>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n<h4 id=\"TCP可靠性的保证\"><a href=\"#TCP可靠性的保证\" class=\"headerlink\" title=\"TCP可靠性的保证\"></a>TCP可靠性的保证</h4><p>TCP采用一种名为“带重传功能的肯定确认”的技术作为提供可靠数据传输服务的基础。这项技术要求接收方收到数据之后向源站回送确认信息ACK。发送方对发出的每个分组都保存一份记录，在发送下一个分组之前等待确认信息。发送方还在送出分组的同时启动一个定时器，并在定时器的定时期满而确认信息还没有到达的情况下，重发刚才发出的分组。</p>\n<p>图3-5表示带重传功能的肯定确认协议传输数据的情况，图</p>\n<p>3-6表示分组丢失引起超时和重传。</p>\n<p>为了避免由于网络延迟引起迟到的确认和重复的确认，协议规定在确认信息中稍带一个分组的序号，使接收方能正确将分组与确认关联起来。</p>\n<p>从图 3-5可以看出，虽然网络具有同时进行双向通信的能力，但由于在接到前一个分组的确认信息之前必须推迟下一个分组的发送，简单的肯定确认协议浪费了大量宝贵的网络带宽。为此， TCP使用滑动窗口的机制来提高网络吞吐量，同时解决端到端的流量控制。</p>\n<p><img src=\"/images/2017-4-3 145924.png\" alt=\"2017-4-3 145924\"></p>\n<h4 id=\"滑动窗口技术\"><a href=\"#滑动窗口技术\" class=\"headerlink\" title=\"滑动窗口技术\"></a>滑动窗口技术</h4><p>滑动窗口技术是简单的带重传的肯定确认机制的一个更复杂的变形，它允许发送方在等待一个确认信息之前可以发送多个分组。如图 3-7所示，发送方要发送一个分组序列，滑动窗口协议在分组序列中放置一个固定长度的窗口，然后将窗口内的所有分组都发送出去；当发送方收到对窗口内第一个分组的确认信息时，它可以向后滑动并发送下一个分组；随着确认的不断到达，窗口也在不断的向后滑动。</p>\n<p><img src=\"/images/2017-4-3 150129.png\" alt=\"2017-4-3 150129\"></p>\n<h3 id=\"TCP与UDP的区别\"><a href=\"#TCP与UDP的区别\" class=\"headerlink\" title=\"TCP与UDP的区别\"></a>TCP与UDP的区别</h3><p><strong>基本区别</strong></p>\n<p>基于连接与无连接（TCP有连接，UDP无连接）；</p>\n<p>对系统资源的要求（TCP较多，UDP少）；</p>\n<p>UDP程序结构较简单；</p>\n<p>流模式与数据报模式（TCP属于流模式，UDP属于数据报模式）；</p>\n<p>TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。</p>\n<p><strong>UDP应用场景</strong></p>\n<p>面向数据报方式；</p>\n<p>网络数据大多为短消息 ；</p>\n<p>拥有大量Client；</p>\n<p>对数据安全性无特殊要求；</p>\n<p>网络负担非常重，但对响应速度要求高。</p>\n<p><strong>TCP编程的服务器端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()； * 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；</p>\n<p>开启监听，用函数listen()； </p>\n<p>接收客户端上来的连接，用函数accept()； </p>\n<p>收发数据，用函数send()和recv()，或者read()和write(); </p>\n<p>关闭网络连接； </p>\n<p>关闭监听； </p>\n<p><strong>TCP编程的客户端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；* 可选 </p>\n<p>设置要连接的对方的IP地址和端口等属性； </p>\n<p>连接服务器，用函数connect()； </p>\n<p>收发数据，用函数send()和recv()，或者read()和write()；</p>\n<p>关闭网络连接；</p>\n<p><strong>UDP编程的服务器端一般步骤</strong></p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；</p>\n<p>循环接收数据，用函数recvfrom()；</p>\n<p>关闭网络连接； </p>\n<p><strong>UDP编程的客户端一般步骤</strong>　</p>\n<p>创建一个socket，用函数socket()； </p>\n<p>设置socket属性，用函数setsockopt()；* 可选 </p>\n<p>绑定IP地址、端口等信息到socket上，用函数bind()；* 可选 </p>\n<p>设置对方的IP地址和端口等属性；</p>\n<p>发送数据，用函数sendto()；</p>\n<p>关闭网络连接；</p>\n<p><strong>UDP补充</strong></p>\n<p>UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。</p>\n<p>它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，</p>\n<p>UDP也无法进行流量控制等避免网络拥塞的行为。</p>\n<p>传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。</p>\n<p><strong>TCP补充</strong></p>\n<p>TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">TCP和UDP的最完整的区别</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/22516664\" target=\"_blank\" rel=\"noopener\">计算机网络入门基础篇</a></p>\n<p><a href=\"http://baike.baidu.com/link?url=XlOHwI18XnbZTaGjg2WLtpmrwq2IsMVyoEggNVDOW6jaU-3qOLaoLleiSan-SBod0GTS8cAyOz99BAplna-wd3khoGaLvNPcniIX0dMGkg_oS2JsNmLR74DqcVoS5TgS#3\" target=\"_blank\" rel=\"noopener\">TCP/IP协议</a></p>\n<p><a href=\"https://www.zhihu.com/question/49619919/answer/116941333\" target=\"_blank\" rel=\"noopener\">tcp 编程中，connect 连接成功的标准是什么？</a></p>\n<p><a href=\"https://www.zhihu.com/question/20583641\" target=\"_blank\" rel=\"noopener\">如何通俗地解释一下 TCP/UDP 协议和 HTTP、FTP、SMTP 等协议之间的区别？</a></p>\n<p><a href=\"http://blog.chinaunix.net/uid-26833883-id-3627644.html\" target=\"_blank\" rel=\"noopener\">TCP、UDP、IP 协议分析</a> </p>\n</blockquote>\n"},{"title":"Laravel学习笔记-深入理解控制反转(IoC)和依赖注入(DI)","date":"2017-04-27T07:40:38.000Z","_content":"\n容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入(DI)”。本文就从这里开始。\n\n### IoC 容器 - Laravel 的核心\n\nLaravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。\n\n本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 Laravel 服务容器的用法建议阅读文档即可。\n\n### IoC 容器诞生的故事\n\n讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。\n\n#### 超人和超能力，依赖的产生\n\n面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。\n\n> 怪物横行的世界，总归需要点超级人物来摆平。\n\n我们把一个“超人”作为一个类：\n\n```\nclass Superman {}\n```\n\n我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：\n\n```\nclass Power {\n    /**\n     * 能力值\n     */\n    protected $ability;\n\n    /**\n     * 能力范围或距离\n     */\n    protected $range;\n\n    public function __construct($ability, $range)\n    {\n        $this->ability = $ability;\n        $this->range = $range;\n    }\n}\n```\n\n这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        $this->power = new Power(999, 100);\n    }\n}\n```\n\n这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。\n\n所谓“依赖”，就是 “我若依赖你，我就不能离开你”。\n\n在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。\n\n#### 一堆乱麻，可怕的依赖\n\n之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：\n\n- 飞行，属性有：飞行速度、持续飞行时间\n- 蛮力，属性有：力量值\n- 能量弹，属性有：伤害值、射击距离、同时射击个数\n\n我们创建了如下类：\n\n```\nclass Flight\n{\n    protected $speed;\n    protected $holdtime;\n    public function __construct($speed, $holdtime) {}\n}\n\nclass Force\n{\n    protected $force;\n    public function __construct($force) {}\n}\n\nclass Shot\n{\n    protected $atk;\n    protected $range;\n    protected $limit;\n    public function __construct($atk, $range, $limit) {}\n}\n```\n\n为了省事儿我没有详细写出 ` __construct()`  这个构造函数的全部，只写了需要传递的参数。\n\n好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力，大致如下：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        $this->power = new Fight(9, 100);\n        // $this->power = new Force(45);\n        // $this->power = new Shot(99, 50, 2);\n        /*\n        $this->power = array(\n            new Force(45),\n            new Shot(99, 50, 2)\n        );\n        */\n    }\n}\n```\n\n我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的新的超能力，或者需要变更超能力的方法，我们必须 重新改造 超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。\n\n这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。\n\n对，就是这样的。\n\n我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。\n\n#### 工厂模式，转移依赖\n\n当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。\n\n> 我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。\n\n工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。\n\n我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：\n\n```\nclass SuperModuleFactory\n{\n    public function makeModule($moduleName, $options)\n    {\n        switch ($moduleName) {\n            case 'Fight': \n                return new Fight($options[0], $options[1]);\n            case 'Force': \n                return new Force($options[0]);\n            case 'Shot': \n                return new Shot($options[0], $options[1], $options[2]);\n        }\n    }\n}\n```\n\n这时候，超人 创建之初就可以使用这个工厂：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        $this->power = $factory->makeModule('Fight', [9, 100]);\n        // $this->power = $factory->makeModule('Force', [45]);\n        // $this->power = $factory->makeModule('Shot', [99, 50, 2]);\n        /*\n        $this->power = array(\n            $factory->makeModule('Force', [45]),\n            $factory->makeModule('Shot', [99, 50, 2])\n        );\n        */\n    }\n}\n```\n\n可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct(array $modules)\n    {\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        foreach ($modules as $moduleName => $moduleOptions) {\n            $this->power[] = $factory->makeModule($moduleName, $moduleOptions);\n        }\n    }\n}\n\n// 创建超人\n$superman = new Superman([\n    'Fight' => [9, 100],\n    'Shot' => [99, 50, 2]\n]);\n```\n\n现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。\n\n### IoC 容器的重要组成 - 依赖注入\n\n由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。\n\n> 其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。\n\n我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。\n\n事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：\n\n```\nclass SuperModuleFactory\n{\n    public function makeModule($moduleName, $options)\n    {\n        switch ($moduleName) {\n            case 'Fight': \n                return new Fight($options[0], $options[1]);\n            case 'Force': \n                return new Force($options[0]);\n            case 'Shot': \n                return new Shot($options[0], $options[1], $options[2]);\n            // case 'more': .......\n            // case 'and more': .......\n            // case 'and more': .......\n            // case 'oh no! its too many!': .......\n        }\n    }\n}\n```\n\n看到没。。。噩梦般的感受！\n\n> 其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）\n\n由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。\n\n```\ninterface SuperModuleInterface\n{\n    /**\n     * 超能力激活方法\n     *\n     * 任何一个超能力都得有该方法，并拥有一个参数\n     *@param array $target 针对目标，可以是一个或多个，自己或他人\n     */\n    public function activate(array $target);\n}\n```\n\n上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。\n\n其实，这就是 php 中接口（ interface ）的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object） 本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。\n\n虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。\n\n这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：\n\n```\n/**\n * X-超能量\n */\nclass XPower implements SuperModuleInterface\n{\n    public function activate(array $target)\n    {\n        // 这只是个例子。。具体自行脑补\n    }\n}\n\n/**\n * 终极炸弹\n */\nclass UltraBomb implements SuperModuleInterface\n{\n    public function activate(array $target)\n    {\n        // 这只是个例子。。具体自行脑补\n    }\n}\n```\n\n同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：\n\n```\nclass Superman\n{\n    protected $module;\n\n    public function __construct(SuperModuleInterface $module)\n    {\n        $this->module = $module;\n    }\n}\n```\n\n改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个` SuperModuleInterface` 接口的实现。否则就会提示错误。\n\n正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！\n\n现在有人疑惑了，你要讲的依赖注入呢？\n\n其实，上面讲的内容，正是依赖注入。\n\n#### 什么叫做依赖注入？\n\n本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：\n\n```\n// 超能力模组\n$superModule = new XPower;\n// 初始化一个超人，并注入一个超能力模组依赖\n$superMan = new Superman($superModule);\n```\n\n关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。\n\n### 更为先进的工厂 - IoC容器\n\n刚刚列了一段代码：\n\n```\n$superModule = new XPower;\n$superMan = new Superman($superModule);\n```\n\n读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。\n\n> 现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。\n\n一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。\n\n```\nclass Container\n{\n    protected $binds;\n\n    protected $instances;\n\n    public function bind($abstract, $concrete)\n    {\n    \t// Todo: 向 container 添加一种对象的的生产方式\n \n    \t// $abstract: 第一个参数 $abstract, 一般为一个字符串(有时候也会是一个接口), \n    \t// 当你需要 make 这个类的对象的时候, 传入这个字符串(或者接口), 这样make 就知道制造什么样的对象了\n    \t// $concrete: 第二个参数 $concrete, 一般为一个 Closure 或者 一个单例对象, 用于说明制造这个对象的方式\n        \n        if ($concrete instanceof Closure) {\n            $this->binds[$abstract] = $concrete;\n        } else {\n            $this->instances[$abstract] = $concrete;\n        }\n    }\n\n    public function make($abstract, $parameters = [])\n    {\n    \t// Todo: 生产一种对象\n \n    \t// $abstract: 在bind方法中已经介绍过\n    \t// $parameters: 生产这种对象所需要的参数\n    \t\n        if (isset($this->instances[$abstract])) {\n            return $this->instances[$abstract];\n        }\n\n        array_unshift($parameters, $this);\n\n        return call_user_func_array($this->binds[$abstract], $parameters);\n    }\n}\n```\n\n这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧：\n\n```\n// 创建一个容器（后面称作超级工厂）\n$container = new Container;\n\n// 向该超级工厂添加超人的生产脚本\n$container->bind('superman', function($container, $moduleName) {\n    return new Superman($container->make($moduleName));\n});\n\n// 向该超级工厂添加超能力模组的生产脚本\n$container->bind('xpower', function($container) {\n    return new XPower;\n});\n\n// 同上\n$container->bind('ultrabomb', function($container) {\n    return new UltraBomb;\n});\n\n// ****************** 华丽丽的分割线 **********************\n// 开始启动生产\n$superman_1 = $container->make('superman', ['xpower']);\n$superman_2 = $container->make('superman', ['ultrabomb']);\n$superman_3 = $container->make('superman', ['xpower']);\n// ......\n```\n\n看到没？通过最初的 绑定（`bind`） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（`make`） 操作被调用执行时，才会触发。\n\n这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。\n\n实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。\n\n不过我告诉大家，这种自动搜寻依赖需求的功能，是通过反射（Reflection）实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究：\n\n现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦！\n\n### 重新审视 Laravel 的核心\n\n现在，我们开始慢慢解读 Laravel 的核心。其实，Laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。\n\n可以说，Laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request（请求）以及 Response（响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 Laravel 的服务容器负责的。\n\n我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：\n\n```\nRoute::get('/', function() {\n    // ......\n});\n```\n\n实际上， Route 类被定义在这个命名空间：`Illuminate\\Routing\\Router`，文件 `vendor/laravel/framework/src/Illuminate/Routing/Router.php`。\n\n我们通过打开发现，这个类的这一系列方法，如 `get`，`post`，`any` 等都不是静态（`static`）方法，这是怎么一回事儿？不要急，我们继续。\n\n#### 服务提供者\n\n我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。\n\n对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 Laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是服务提供者（Service Provider）。\n\n虽然，绑定一个类到容器不一定非要通过服务提供者。\n\n但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，Laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的服务提供者。\n\n服务提供者主要分为两个部分，`register`（注册） 和` boot`（引导、初始化），具体参考文档。`register` 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 `boot` 部分。\n\n#### 门面（Facade）\n\n我们现在解答之前关于` Route` 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法`__callStatic`，并将该静态方法映射到真正的方法上。\n\n我们使用的 `Route` 类实际上是 `Illuminate\\Support\\Facades\\Route` 通过 `class_alias()` 函数创造的别名而已，这个类被定义在文件 `vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php` 。\n\n```\n<?php \n    namespace Illuminate\\Support\\Facades;\n\n    /**\n     * @see \\Illuminate\\Routing\\Router\n     */\n    class Route extends Facade {\n\n        /**\n         * Get the registered name of the component.\n         *\n         * @return string\n         */\n        protected static function getFacadeAccessor()\n        {\n            return 'router';\n        }\n\n}\n```\n\n看到这个类之后，并没有找到之前 Route 调用的 `get` 方法，此时我们再看里面的这行注释， `@see\\Illuminate\\Routing\\Router` ，他提示我们去找这个位置，那我们就去找一下，我们又发现了一个 Router 类，而这个 Router 类中，是有 `get` 方法的，看起来这里似乎就是 Route 的真实身份了。\n\n```\nnamespace Illuminate\\Routing;\nclass Router implements RegistrarContract {\n    ...\n \n    /**\n     * Register a new GET route with the router.\n     *\n     * @param  string  $uri\n     * @param  \\Closure|array|string|null  $action\n     * @return \\Illuminate\\Routing\\Route\n     */\n    public function get($uri, $action = null)\n    {\n        return $this->addRoute(['GET', 'HEAD'], $uri, $action);\n    }\n \n    ...\n}\n```\n\n那 Laravel 是如何为 `Illuminate\\Support\\Facades\\Route::class` 这个类找到他的真实身份的呢？\n\n首先， `class Route extends Facade `， `Route` 继承自 `Facade` 类，`Route` 类又调用了静态的 `get` 方法，我们在 `Route` 类，或者是他的父类 `Facade` 中都是无法找到这个 `get` 方法的。 但是在 `Facade` 类中，我们可以发现有一个 `__callStatic()` 魔术方法 ，这个方法的作用就是：如果你想要调用的静态方法在类的定义中并没有声明，那么就会执行 `__callStatic()` 。在我们当前的情景中，静态方法 `get` 并没有被声明，那么当然，我们的类就会转而调用 `__callStatic() `。\n\n```\npublic static function __callStatic($method, $args)\n{\n    $instance = static::getFacadeRoot();\n \n    if (! $instance) {\n        throw new RuntimeException('A facade root has not been set.');\n    }\n \n    switch (count($args)) {\n        case 0:\n            return $instance->$method();\n        case 1:\n            return $instance->$method($args[0]);\n        case 2:\n            return $instance->$method($args[0], $args[1]);\n        case 3:\n            return $instance->$method($args[0], $args[1], $args[2]);\n        case 4:\n            return $instance->$method($args[0], $args[1], $args[2], $args[3]);\n        default:\n            return call_user_func_array([$instance, $method], $args);\n    }\n}\n```\n\n然后我们看 `__callStatic()` 的执行过程。首先看 `getFacadeRoot()` 是如何执行的：\n\n```\npublic static function getFacadeRoot()  \n{\n    return static::resolveFacadeInstance(static::getFacadeAccessor());\n}\n```\n\n在最初，定义 Route 类时，我们只实现了一个方法 `getFacadeAccessor()` ，这时我们当初定义的字符串，就会在此处用到了，所以上面这个函数，实际上返回的内容就是 `static::resolveFacadeInstance(\"router\");`\n\n我们继续看 `resolveFacadeInstance` 这个函数的执行过程：\n\n```\nprotected static function resolveFacadeInstance($name)\n{  \n    //判断是否为对象，当然不是了，$name 是字符串\n    if (is_object($name)) {\n        return $name;\n    }\n \n    //判断 resolvedInstance 这个数组中是否存了 $name 相关的信息，当然也没有，因为我们假设程序是第一次执行这里\n    if (isset(static::$resolvedInstance[$name])) {\n        return static::$resolvedInstance[$name];\n    }\n \n    // 返回 static::$app[$name]，同时把得到的结果保存到上面验证的数组中\n    return static::$resolvedInstance[$name] = static::$app[$name];\n}\n```\n\n所以我们的程序执行了最后的一个 return， 返回了 `static::$app[‘router’]` 这个值。\n\n$app 就是前面说过的 Laravel Application 类的实例化对象，这个类是一个 IOC Container，实例化过程发生在 Laravel 最开始的时候。\n\n在 Facade 初始化的时候，也让自己有了一个 `static::$app` 这个就是 Application 类的实例化对象。\n\n而 $app 其实并没有 ‘router’ 这个属性，那为什么可以这样调用呢？ 是因为 Application 继承了 Container， 而 Container 又继承了 ArrayAccess 这个类。正是由于 ArrayAccess 的存在，以及 Container 实现了 ArrayAccess 的下面这个方法：\n\n```\npublic function offsetGet($key)\n{\n  return $this->make($key);\n}\n```\n\n所以，当我们使用 `$app['router']` 时，实际上是执行了 `$app->make(‘router’)`，到这里已经比较明显了，这里就是从 $app 这个 IOC Container 中， `make` 了一个 router 的实例。\n\n已经绕的有点远了，不过还好，我们终于要回去了。到最初的 `__callStatic()` 中的：\n\n`$instance = static::getFacadeRoot();`\n\n也就相当于\n\n`$instance = $app->make(‘router’)`\n\n`__callStatic()` 继续往下执行，想一下我们最初的那条代码\n\n```\nRoute::get('/', function() {\n    // ......\n});\n```\n\n有2个参数，所以会执行到 case 2 这条语句：\n\n```\nreturn $instance->$method($args[0], $args[1]);\n```\n\n到这里，我们的 $instance 就是我们的 IOC Container make 出的具有实际功能的实例，这个实例将会执行这个实例的类所声明过的 get 方法。\n\n\n\n> 参考文章：\n>\n> [Laravel 服务容器实例教程 —— 深入理解控制反转（IoC）和依赖注入（DI）](http://laravelacademy.org/post/769.html/comment-page-5#comment-17821)  [Laravel 从 1 行代码开始，带你系统性的理解 Laravel Service Container 的核心概念](http://www.tuicool.com/articles/jy6RviE)","source":"_posts/laraveliocanddi.md","raw":"---\ntitle: Laravel学习笔记-深入理解控制反转(IoC)和依赖注入(DI)\ndate: 2017-04-27 15:40:38\ntags:\n - Laravel\n - 控制反转(IoC)\n - 依赖注入(DI)\ncategories:\n - Laravel\n---\n\n容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入(DI)”。本文就从这里开始。\n\n### IoC 容器 - Laravel 的核心\n\nLaravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。\n\n本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 Laravel 服务容器的用法建议阅读文档即可。\n\n### IoC 容器诞生的故事\n\n讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。\n\n#### 超人和超能力，依赖的产生\n\n面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。\n\n> 怪物横行的世界，总归需要点超级人物来摆平。\n\n我们把一个“超人”作为一个类：\n\n```\nclass Superman {}\n```\n\n我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：\n\n```\nclass Power {\n    /**\n     * 能力值\n     */\n    protected $ability;\n\n    /**\n     * 能力范围或距离\n     */\n    protected $range;\n\n    public function __construct($ability, $range)\n    {\n        $this->ability = $ability;\n        $this->range = $range;\n    }\n}\n```\n\n这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        $this->power = new Power(999, 100);\n    }\n}\n```\n\n这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。\n\n所谓“依赖”，就是 “我若依赖你，我就不能离开你”。\n\n在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。\n\n#### 一堆乱麻，可怕的依赖\n\n之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：\n\n- 飞行，属性有：飞行速度、持续飞行时间\n- 蛮力，属性有：力量值\n- 能量弹，属性有：伤害值、射击距离、同时射击个数\n\n我们创建了如下类：\n\n```\nclass Flight\n{\n    protected $speed;\n    protected $holdtime;\n    public function __construct($speed, $holdtime) {}\n}\n\nclass Force\n{\n    protected $force;\n    public function __construct($force) {}\n}\n\nclass Shot\n{\n    protected $atk;\n    protected $range;\n    protected $limit;\n    public function __construct($atk, $range, $limit) {}\n}\n```\n\n为了省事儿我没有详细写出 ` __construct()`  这个构造函数的全部，只写了需要传递的参数。\n\n好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力，大致如下：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        $this->power = new Fight(9, 100);\n        // $this->power = new Force(45);\n        // $this->power = new Shot(99, 50, 2);\n        /*\n        $this->power = array(\n            new Force(45),\n            new Shot(99, 50, 2)\n        );\n        */\n    }\n}\n```\n\n我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的新的超能力，或者需要变更超能力的方法，我们必须 重新改造 超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。\n\n这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。\n\n对，就是这样的。\n\n我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。\n\n#### 工厂模式，转移依赖\n\n当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。\n\n> 我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。\n\n工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。\n\n我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：\n\n```\nclass SuperModuleFactory\n{\n    public function makeModule($moduleName, $options)\n    {\n        switch ($moduleName) {\n            case 'Fight': \n                return new Fight($options[0], $options[1]);\n            case 'Force': \n                return new Force($options[0]);\n            case 'Shot': \n                return new Shot($options[0], $options[1], $options[2]);\n        }\n    }\n}\n```\n\n这时候，超人 创建之初就可以使用这个工厂：\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct()\n    {\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        $this->power = $factory->makeModule('Fight', [9, 100]);\n        // $this->power = $factory->makeModule('Force', [45]);\n        // $this->power = $factory->makeModule('Shot', [99, 50, 2]);\n        /*\n        $this->power = array(\n            $factory->makeModule('Force', [45]),\n            $factory->makeModule('Shot', [99, 50, 2])\n        );\n        */\n    }\n}\n```\n\n可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。\n\n```\nclass Superman\n{\n    protected $power;\n\n    public function __construct(array $modules)\n    {\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        foreach ($modules as $moduleName => $moduleOptions) {\n            $this->power[] = $factory->makeModule($moduleName, $moduleOptions);\n        }\n    }\n}\n\n// 创建超人\n$superman = new Superman([\n    'Fight' => [9, 100],\n    'Shot' => [99, 50, 2]\n]);\n```\n\n现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。\n\n### IoC 容器的重要组成 - 依赖注入\n\n由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。\n\n> 其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。\n\n我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。\n\n事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：\n\n```\nclass SuperModuleFactory\n{\n    public function makeModule($moduleName, $options)\n    {\n        switch ($moduleName) {\n            case 'Fight': \n                return new Fight($options[0], $options[1]);\n            case 'Force': \n                return new Force($options[0]);\n            case 'Shot': \n                return new Shot($options[0], $options[1], $options[2]);\n            // case 'more': .......\n            // case 'and more': .......\n            // case 'and more': .......\n            // case 'oh no! its too many!': .......\n        }\n    }\n}\n```\n\n看到没。。。噩梦般的感受！\n\n> 其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）\n\n由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。\n\n```\ninterface SuperModuleInterface\n{\n    /**\n     * 超能力激活方法\n     *\n     * 任何一个超能力都得有该方法，并拥有一个参数\n     *@param array $target 针对目标，可以是一个或多个，自己或他人\n     */\n    public function activate(array $target);\n}\n```\n\n上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。\n\n其实，这就是 php 中接口（ interface ）的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object） 本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。\n\n虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。\n\n这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：\n\n```\n/**\n * X-超能量\n */\nclass XPower implements SuperModuleInterface\n{\n    public function activate(array $target)\n    {\n        // 这只是个例子。。具体自行脑补\n    }\n}\n\n/**\n * 终极炸弹\n */\nclass UltraBomb implements SuperModuleInterface\n{\n    public function activate(array $target)\n    {\n        // 这只是个例子。。具体自行脑补\n    }\n}\n```\n\n同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：\n\n```\nclass Superman\n{\n    protected $module;\n\n    public function __construct(SuperModuleInterface $module)\n    {\n        $this->module = $module;\n    }\n}\n```\n\n改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个` SuperModuleInterface` 接口的实现。否则就会提示错误。\n\n正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！\n\n现在有人疑惑了，你要讲的依赖注入呢？\n\n其实，上面讲的内容，正是依赖注入。\n\n#### 什么叫做依赖注入？\n\n本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：\n\n```\n// 超能力模组\n$superModule = new XPower;\n// 初始化一个超人，并注入一个超能力模组依赖\n$superMan = new Superman($superModule);\n```\n\n关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。\n\n### 更为先进的工厂 - IoC容器\n\n刚刚列了一段代码：\n\n```\n$superModule = new XPower;\n$superMan = new Superman($superModule);\n```\n\n读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。\n\n> 现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。\n\n一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。\n\n```\nclass Container\n{\n    protected $binds;\n\n    protected $instances;\n\n    public function bind($abstract, $concrete)\n    {\n    \t// Todo: 向 container 添加一种对象的的生产方式\n \n    \t// $abstract: 第一个参数 $abstract, 一般为一个字符串(有时候也会是一个接口), \n    \t// 当你需要 make 这个类的对象的时候, 传入这个字符串(或者接口), 这样make 就知道制造什么样的对象了\n    \t// $concrete: 第二个参数 $concrete, 一般为一个 Closure 或者 一个单例对象, 用于说明制造这个对象的方式\n        \n        if ($concrete instanceof Closure) {\n            $this->binds[$abstract] = $concrete;\n        } else {\n            $this->instances[$abstract] = $concrete;\n        }\n    }\n\n    public function make($abstract, $parameters = [])\n    {\n    \t// Todo: 生产一种对象\n \n    \t// $abstract: 在bind方法中已经介绍过\n    \t// $parameters: 生产这种对象所需要的参数\n    \t\n        if (isset($this->instances[$abstract])) {\n            return $this->instances[$abstract];\n        }\n\n        array_unshift($parameters, $this);\n\n        return call_user_func_array($this->binds[$abstract], $parameters);\n    }\n}\n```\n\n这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧：\n\n```\n// 创建一个容器（后面称作超级工厂）\n$container = new Container;\n\n// 向该超级工厂添加超人的生产脚本\n$container->bind('superman', function($container, $moduleName) {\n    return new Superman($container->make($moduleName));\n});\n\n// 向该超级工厂添加超能力模组的生产脚本\n$container->bind('xpower', function($container) {\n    return new XPower;\n});\n\n// 同上\n$container->bind('ultrabomb', function($container) {\n    return new UltraBomb;\n});\n\n// ****************** 华丽丽的分割线 **********************\n// 开始启动生产\n$superman_1 = $container->make('superman', ['xpower']);\n$superman_2 = $container->make('superman', ['ultrabomb']);\n$superman_3 = $container->make('superman', ['xpower']);\n// ......\n```\n\n看到没？通过最初的 绑定（`bind`） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（`make`） 操作被调用执行时，才会触发。\n\n这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。\n\n实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。\n\n不过我告诉大家，这种自动搜寻依赖需求的功能，是通过反射（Reflection）实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究：\n\n现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦！\n\n### 重新审视 Laravel 的核心\n\n现在，我们开始慢慢解读 Laravel 的核心。其实，Laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。\n\n可以说，Laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request（请求）以及 Response（响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 Laravel 的服务容器负责的。\n\n我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：\n\n```\nRoute::get('/', function() {\n    // ......\n});\n```\n\n实际上， Route 类被定义在这个命名空间：`Illuminate\\Routing\\Router`，文件 `vendor/laravel/framework/src/Illuminate/Routing/Router.php`。\n\n我们通过打开发现，这个类的这一系列方法，如 `get`，`post`，`any` 等都不是静态（`static`）方法，这是怎么一回事儿？不要急，我们继续。\n\n#### 服务提供者\n\n我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。\n\n对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 Laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是服务提供者（Service Provider）。\n\n虽然，绑定一个类到容器不一定非要通过服务提供者。\n\n但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，Laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的服务提供者。\n\n服务提供者主要分为两个部分，`register`（注册） 和` boot`（引导、初始化），具体参考文档。`register` 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 `boot` 部分。\n\n#### 门面（Facade）\n\n我们现在解答之前关于` Route` 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法`__callStatic`，并将该静态方法映射到真正的方法上。\n\n我们使用的 `Route` 类实际上是 `Illuminate\\Support\\Facades\\Route` 通过 `class_alias()` 函数创造的别名而已，这个类被定义在文件 `vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php` 。\n\n```\n<?php \n    namespace Illuminate\\Support\\Facades;\n\n    /**\n     * @see \\Illuminate\\Routing\\Router\n     */\n    class Route extends Facade {\n\n        /**\n         * Get the registered name of the component.\n         *\n         * @return string\n         */\n        protected static function getFacadeAccessor()\n        {\n            return 'router';\n        }\n\n}\n```\n\n看到这个类之后，并没有找到之前 Route 调用的 `get` 方法，此时我们再看里面的这行注释， `@see\\Illuminate\\Routing\\Router` ，他提示我们去找这个位置，那我们就去找一下，我们又发现了一个 Router 类，而这个 Router 类中，是有 `get` 方法的，看起来这里似乎就是 Route 的真实身份了。\n\n```\nnamespace Illuminate\\Routing;\nclass Router implements RegistrarContract {\n    ...\n \n    /**\n     * Register a new GET route with the router.\n     *\n     * @param  string  $uri\n     * @param  \\Closure|array|string|null  $action\n     * @return \\Illuminate\\Routing\\Route\n     */\n    public function get($uri, $action = null)\n    {\n        return $this->addRoute(['GET', 'HEAD'], $uri, $action);\n    }\n \n    ...\n}\n```\n\n那 Laravel 是如何为 `Illuminate\\Support\\Facades\\Route::class` 这个类找到他的真实身份的呢？\n\n首先， `class Route extends Facade `， `Route` 继承自 `Facade` 类，`Route` 类又调用了静态的 `get` 方法，我们在 `Route` 类，或者是他的父类 `Facade` 中都是无法找到这个 `get` 方法的。 但是在 `Facade` 类中，我们可以发现有一个 `__callStatic()` 魔术方法 ，这个方法的作用就是：如果你想要调用的静态方法在类的定义中并没有声明，那么就会执行 `__callStatic()` 。在我们当前的情景中，静态方法 `get` 并没有被声明，那么当然，我们的类就会转而调用 `__callStatic() `。\n\n```\npublic static function __callStatic($method, $args)\n{\n    $instance = static::getFacadeRoot();\n \n    if (! $instance) {\n        throw new RuntimeException('A facade root has not been set.');\n    }\n \n    switch (count($args)) {\n        case 0:\n            return $instance->$method();\n        case 1:\n            return $instance->$method($args[0]);\n        case 2:\n            return $instance->$method($args[0], $args[1]);\n        case 3:\n            return $instance->$method($args[0], $args[1], $args[2]);\n        case 4:\n            return $instance->$method($args[0], $args[1], $args[2], $args[3]);\n        default:\n            return call_user_func_array([$instance, $method], $args);\n    }\n}\n```\n\n然后我们看 `__callStatic()` 的执行过程。首先看 `getFacadeRoot()` 是如何执行的：\n\n```\npublic static function getFacadeRoot()  \n{\n    return static::resolveFacadeInstance(static::getFacadeAccessor());\n}\n```\n\n在最初，定义 Route 类时，我们只实现了一个方法 `getFacadeAccessor()` ，这时我们当初定义的字符串，就会在此处用到了，所以上面这个函数，实际上返回的内容就是 `static::resolveFacadeInstance(\"router\");`\n\n我们继续看 `resolveFacadeInstance` 这个函数的执行过程：\n\n```\nprotected static function resolveFacadeInstance($name)\n{  \n    //判断是否为对象，当然不是了，$name 是字符串\n    if (is_object($name)) {\n        return $name;\n    }\n \n    //判断 resolvedInstance 这个数组中是否存了 $name 相关的信息，当然也没有，因为我们假设程序是第一次执行这里\n    if (isset(static::$resolvedInstance[$name])) {\n        return static::$resolvedInstance[$name];\n    }\n \n    // 返回 static::$app[$name]，同时把得到的结果保存到上面验证的数组中\n    return static::$resolvedInstance[$name] = static::$app[$name];\n}\n```\n\n所以我们的程序执行了最后的一个 return， 返回了 `static::$app[‘router’]` 这个值。\n\n$app 就是前面说过的 Laravel Application 类的实例化对象，这个类是一个 IOC Container，实例化过程发生在 Laravel 最开始的时候。\n\n在 Facade 初始化的时候，也让自己有了一个 `static::$app` 这个就是 Application 类的实例化对象。\n\n而 $app 其实并没有 ‘router’ 这个属性，那为什么可以这样调用呢？ 是因为 Application 继承了 Container， 而 Container 又继承了 ArrayAccess 这个类。正是由于 ArrayAccess 的存在，以及 Container 实现了 ArrayAccess 的下面这个方法：\n\n```\npublic function offsetGet($key)\n{\n  return $this->make($key);\n}\n```\n\n所以，当我们使用 `$app['router']` 时，实际上是执行了 `$app->make(‘router’)`，到这里已经比较明显了，这里就是从 $app 这个 IOC Container 中， `make` 了一个 router 的实例。\n\n已经绕的有点远了，不过还好，我们终于要回去了。到最初的 `__callStatic()` 中的：\n\n`$instance = static::getFacadeRoot();`\n\n也就相当于\n\n`$instance = $app->make(‘router’)`\n\n`__callStatic()` 继续往下执行，想一下我们最初的那条代码\n\n```\nRoute::get('/', function() {\n    // ......\n});\n```\n\n有2个参数，所以会执行到 case 2 这条语句：\n\n```\nreturn $instance->$method($args[0], $args[1]);\n```\n\n到这里，我们的 $instance 就是我们的 IOC Container make 出的具有实际功能的实例，这个实例将会执行这个实例的类所声明过的 get 方法。\n\n\n\n> 参考文章：\n>\n> [Laravel 服务容器实例教程 —— 深入理解控制反转（IoC）和依赖注入（DI）](http://laravelacademy.org/post/769.html/comment-page-5#comment-17821)  [Laravel 从 1 行代码开始，带你系统性的理解 Laravel Service Container 的核心概念](http://www.tuicool.com/articles/jy6RviE)","slug":"laraveliocanddi","published":1,"updated":"2020-10-25T06:43:32.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueqc200demolc0i72ypwa","content":"<p>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入(DI)”。本文就从这里开始。</p>\n<h3 id=\"IoC-容器-Laravel-的核心\"><a href=\"#IoC-容器-Laravel-的核心\" class=\"headerlink\" title=\"IoC 容器 - Laravel 的核心\"></a>IoC 容器 - Laravel 的核心</h3><p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>\n<p>本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 Laravel 服务容器的用法建议阅读文档即可。</p>\n<h3 id=\"IoC-容器诞生的故事\"><a href=\"#IoC-容器诞生的故事\" class=\"headerlink\" title=\"IoC 容器诞生的故事\"></a>IoC 容器诞生的故事</h3><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>\n<h4 id=\"超人和超能力，依赖的产生\"><a href=\"#超人和超能力，依赖的产生\" class=\"headerlink\" title=\"超人和超能力，依赖的产生\"></a>超人和超能力，依赖的产生</h4><p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>\n<blockquote>\n<p>怪物横行的世界，总归需要点超级人物来摆平。</p>\n</blockquote>\n<p>我们把一个“超人”作为一个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Power &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 能力值</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $ability;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 能力范围或距离</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $range;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($ability, $range)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;ability = $ability;</span><br><span class=\"line\">        $this-&gt;range = $range;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;power = new Power(999, 100);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>\n<p>所谓“依赖”，就是 “我若依赖你，我就不能离开你”。</p>\n<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>\n<h4 id=\"一堆乱麻，可怕的依赖\"><a href=\"#一堆乱麻，可怕的依赖\" class=\"headerlink\" title=\"一堆乱麻，可怕的依赖\"></a>一堆乱麻，可怕的依赖</h4><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p>\n<ul>\n<li>飞行，属性有：飞行速度、持续飞行时间</li>\n<li>蛮力，属性有：力量值</li>\n<li>能量弹，属性有：伤害值、射击距离、同时射击个数</li>\n</ul>\n<p>我们创建了如下类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Flight</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $speed;</span><br><span class=\"line\">    protected $holdtime;</span><br><span class=\"line\">    public function __construct($speed, $holdtime) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Force</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $force;</span><br><span class=\"line\">    public function __construct($force) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Shot</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $atk;</span><br><span class=\"line\">    protected $range;</span><br><span class=\"line\">    protected $limit;</span><br><span class=\"line\">    public function __construct($atk, $range, $limit) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了省事儿我没有详细写出 <code>__construct()</code>  这个构造函数的全部，只写了需要传递的参数。</p>\n<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力，大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;power = new Fight(9, 100);</span><br><span class=\"line\">        // $this-&gt;power = new Force(45);</span><br><span class=\"line\">        // $this-&gt;power = new Shot(99, 50, 2);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        $this-&gt;power = array(</span><br><span class=\"line\">            new Force(45),</span><br><span class=\"line\">            new Shot(99, 50, 2)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的新的超能力，或者需要变更超能力的方法，我们必须 重新改造 超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。</p>\n<p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。</p>\n<p>对，就是这样的。</p>\n<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。</p>\n<h4 id=\"工厂模式，转移依赖\"><a href=\"#工厂模式，转移依赖\" class=\"headerlink\" title=\"工厂模式，转移依赖\"></a>工厂模式，转移依赖</h4><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>\n<blockquote>\n<p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。</p>\n</blockquote>\n<p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>\n<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SuperModuleFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function makeModule($moduleName, $options)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($moduleName) &#123;</span><br><span class=\"line\">            case &apos;Fight&apos;: </span><br><span class=\"line\">                return new Fight($options[0], $options[1]);</span><br><span class=\"line\">            case &apos;Force&apos;: </span><br><span class=\"line\">                return new Force($options[0]);</span><br><span class=\"line\">            case &apos;Shot&apos;: </span><br><span class=\"line\">                return new Shot($options[0], $options[1], $options[2]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，超人 创建之初就可以使用这个工厂：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 初始化工厂</span><br><span class=\"line\">        $factory = new SuperModuleFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 通过工厂提供的方法制造需要的模块</span><br><span class=\"line\">        $this-&gt;power = $factory-&gt;makeModule(&apos;Fight&apos;, [9, 100]);</span><br><span class=\"line\">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Force&apos;, [45]);</span><br><span class=\"line\">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2]);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        $this-&gt;power = array(</span><br><span class=\"line\">            $factory-&gt;makeModule(&apos;Force&apos;, [45]),</span><br><span class=\"line\">            $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2])</span><br><span class=\"line\">        );</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct(array $modules)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 初始化工厂</span><br><span class=\"line\">        $factory = new SuperModuleFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 通过工厂提供的方法制造需要的模块</span><br><span class=\"line\">        foreach ($modules as $moduleName =&gt; $moduleOptions) &#123;</span><br><span class=\"line\">            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建超人</span><br><span class=\"line\">$superman = new Superman([</span><br><span class=\"line\">    &apos;Fight&apos; =&gt; [9, 100],</span><br><span class=\"line\">    &apos;Shot&apos; =&gt; [99, 50, 2]</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>\n<h3 id=\"IoC-容器的重要组成-依赖注入\"><a href=\"#IoC-容器的重要组成-依赖注入\" class=\"headerlink\" title=\"IoC 容器的重要组成 - 依赖注入\"></a>IoC 容器的重要组成 - 依赖注入</h3><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>\n<blockquote>\n<p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。</p>\n</blockquote>\n<p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>\n<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SuperModuleFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function makeModule($moduleName, $options)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($moduleName) &#123;</span><br><span class=\"line\">            case &apos;Fight&apos;: </span><br><span class=\"line\">                return new Fight($options[0], $options[1]);</span><br><span class=\"line\">            case &apos;Force&apos;: </span><br><span class=\"line\">                return new Force($options[0]);</span><br><span class=\"line\">            case &apos;Shot&apos;: </span><br><span class=\"line\">                return new Shot($options[0], $options[1], $options[2]);</span><br><span class=\"line\">            // case &apos;more&apos;: .......</span><br><span class=\"line\">            // case &apos;and more&apos;: .......</span><br><span class=\"line\">            // case &apos;and more&apos;: .......</span><br><span class=\"line\">            // case &apos;oh no! its too many!&apos;: .......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到没。。。噩梦般的感受！</p>\n<blockquote>\n<p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p>\n</blockquote>\n<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 超能力激活方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * 任何一个超能力都得有该方法，并拥有一个参数</span><br><span class=\"line\">     *@param array $target 针对目标，可以是一个或多个，自己或他人</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function activate(array $target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p>\n<p>其实，这就是 php 中接口（ interface ）的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object） 本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p>\n<p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p>\n<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * X-超能量</span><br><span class=\"line\"> */</span><br><span class=\"line\">class XPower implements SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function activate(array $target)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 这只是个例子。。具体自行脑补</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 终极炸弹</span><br><span class=\"line\"> */</span><br><span class=\"line\">class UltraBomb implements SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function activate(array $target)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 这只是个例子。。具体自行脑补</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $module;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct(SuperModuleInterface $module)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;module = $module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个<code>SuperModuleInterface</code> 接口的实现。否则就会提示错误。</p>\n<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p>\n<p>现在有人疑惑了，你要讲的依赖注入呢？</p>\n<p>其实，上面讲的内容，正是依赖注入。</p>\n<h4 id=\"什么叫做依赖注入？\"><a href=\"#什么叫做依赖注入？\" class=\"headerlink\" title=\"什么叫做依赖注入？\"></a>什么叫做依赖注入？</h4><p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 超能力模组</span><br><span class=\"line\">$superModule = new XPower;</span><br><span class=\"line\">// 初始化一个超人，并注入一个超能力模组依赖</span><br><span class=\"line\">$superMan = new Superman($superModule);</span><br></pre></td></tr></table></figure>\n<p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。</p>\n<h3 id=\"更为先进的工厂-IoC容器\"><a href=\"#更为先进的工厂-IoC容器\" class=\"headerlink\" title=\"更为先进的工厂 - IoC容器\"></a>更为先进的工厂 - IoC容器</h3><p>刚刚列了一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$superModule = new XPower;</span><br><span class=\"line\">$superMan = new Superman($superModule);</span><br></pre></td></tr></table></figure>\n<p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>\n<blockquote>\n<p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p>\n</blockquote>\n<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Container</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $binds;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $instances;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bind($abstract, $concrete)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t// Todo: 向 container 添加一种对象的的生产方式</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t// $abstract: 第一个参数 $abstract, 一般为一个字符串(有时候也会是一个接口), </span><br><span class=\"line\">    \t// 当你需要 make 这个类的对象的时候, 传入这个字符串(或者接口), 这样make 就知道制造什么样的对象了</span><br><span class=\"line\">    \t// $concrete: 第二个参数 $concrete, 一般为一个 Closure 或者 一个单例对象, 用于说明制造这个对象的方式</span><br><span class=\"line\">        </span><br><span class=\"line\">        if ($concrete instanceof Closure) &#123;</span><br><span class=\"line\">            $this-&gt;binds[$abstract] = $concrete;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $this-&gt;instances[$abstract] = $concrete;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function make($abstract, $parameters = [])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t// Todo: 生产一种对象</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t// $abstract: 在bind方法中已经介绍过</span><br><span class=\"line\">    \t// $parameters: 生产这种对象所需要的参数</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        if (isset($this-&gt;instances[$abstract])) &#123;</span><br><span class=\"line\">            return $this-&gt;instances[$abstract];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        array_unshift($parameters, $this);</span><br><span class=\"line\"></span><br><span class=\"line\">        return call_user_func_array($this-&gt;binds[$abstract], $parameters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个容器（后面称作超级工厂）</span><br><span class=\"line\">$container = new Container;</span><br><span class=\"line\"></span><br><span class=\"line\">// 向该超级工厂添加超人的生产脚本</span><br><span class=\"line\">$container-&gt;bind(&apos;superman&apos;, function($container, $moduleName) &#123;</span><br><span class=\"line\">    return new Superman($container-&gt;make($moduleName));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 向该超级工厂添加超能力模组的生产脚本</span><br><span class=\"line\">$container-&gt;bind(&apos;xpower&apos;, function($container) &#123;</span><br><span class=\"line\">    return new XPower;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 同上</span><br><span class=\"line\">$container-&gt;bind(&apos;ultrabomb&apos;, function($container) &#123;</span><br><span class=\"line\">    return new UltraBomb;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// ****************** 华丽丽的分割线 **********************</span><br><span class=\"line\">// 开始启动生产</span><br><span class=\"line\">$superman_1 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</span><br><span class=\"line\">$superman_2 = $container-&gt;make(&apos;superman&apos;, [&apos;ultrabomb&apos;]);</span><br><span class=\"line\">$superman_3 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</span><br><span class=\"line\">// ......</span><br></pre></td></tr></table></figure>\n<p>看到没？通过最初的 绑定（<code>bind</code>） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（<code>make</code>） 操作被调用执行时，才会触发。</p>\n<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p>\n<p>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。</p>\n<p>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过反射（Reflection）实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究：</p>\n<p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦！</p>\n<h3 id=\"重新审视-Laravel-的核心\"><a href=\"#重新审视-Laravel-的核心\" class=\"headerlink\" title=\"重新审视 Laravel 的核心\"></a>重新审视 Laravel 的核心</h3><p>现在，我们开始慢慢解读 Laravel 的核心。其实，Laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>\n<p>可以说，Laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request（请求）以及 Response（响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 Laravel 的服务容器负责的。</p>\n<p>我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/&apos;, function() &#123;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>实际上， Route 类被定义在这个命名空间：<code>Illuminate\\Routing\\Router</code>，文件 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code>。</p>\n<p>我们通过打开发现，这个类的这一系列方法，如 <code>get</code>，<code>post</code>，<code>any</code> 等都不是静态（<code>static</code>）方法，这是怎么一回事儿？不要急，我们继续。</p>\n<h4 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h4><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p>\n<p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 Laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是服务提供者（Service Provider）。</p>\n<p>虽然，绑定一个类到容器不一定非要通过服务提供者。</p>\n<p>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，Laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的服务提供者。</p>\n<p>服务提供者主要分为两个部分，<code>register</code>（注册） 和<code>boot</code>（引导、初始化），具体参考文档。<code>register</code> 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 <code>boot</code> 部分。</p>\n<h4 id=\"门面（Facade）\"><a href=\"#门面（Facade）\" class=\"headerlink\" title=\"门面（Facade）\"></a>门面（Facade）</h4><p>我们现在解答之前关于<code>Route</code> 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法<code>__callStatic</code>，并将该静态方法映射到真正的方法上。</p>\n<p>我们使用的 <code>Route</code> 类实际上是 <code>Illuminate\\Support\\Facades\\Route</code> 通过 <code>class_alias()</code> 函数创造的别名而已，这个类被定义在文件 <code>vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">    namespace Illuminate\\Support\\Facades;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @see \\Illuminate\\Routing\\Router</span><br><span class=\"line\">     */</span><br><span class=\"line\">    class Route extends Facade &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Get the registered name of the component.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @return string</span><br><span class=\"line\">         */</span><br><span class=\"line\">        protected static function getFacadeAccessor()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return &apos;router&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这个类之后，并没有找到之前 Route 调用的 <code>get</code> 方法，此时我们再看里面的这行注释， <code>@see\\Illuminate\\Routing\\Router</code> ，他提示我们去找这个位置，那我们就去找一下，我们又发现了一个 Router 类，而这个 Router 类中，是有 <code>get</code> 方法的，看起来这里似乎就是 Route 的真实身份了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace Illuminate\\Routing;</span><br><span class=\"line\">class Router implements RegistrarContract &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Register a new GET route with the router.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  string  $uri</span><br><span class=\"line\">     * @param  \\Closure|array|string|null  $action</span><br><span class=\"line\">     * @return \\Illuminate\\Routing\\Route</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function get($uri, $action = null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;addRoute([&apos;GET&apos;, &apos;HEAD&apos;], $uri, $action);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那 Laravel 是如何为 <code>Illuminate\\Support\\Facades\\Route::class</code> 这个类找到他的真实身份的呢？</p>\n<p>首先， <code>class Route extends Facade</code>， <code>Route</code> 继承自 <code>Facade</code> 类，<code>Route</code> 类又调用了静态的 <code>get</code> 方法，我们在 <code>Route</code> 类，或者是他的父类 <code>Facade</code> 中都是无法找到这个 <code>get</code> 方法的。 但是在 <code>Facade</code> 类中，我们可以发现有一个 <code>__callStatic()</code> 魔术方法 ，这个方法的作用就是：如果你想要调用的静态方法在类的定义中并没有声明，那么就会执行 <code>__callStatic()</code> 。在我们当前的情景中，静态方法 <code>get</code> 并没有被声明，那么当然，我们的类就会转而调用 <code>__callStatic()</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function __callStatic($method, $args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $instance = static::getFacadeRoot();</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (! $instance) &#123;</span><br><span class=\"line\">        throw new RuntimeException(&apos;A facade root has not been set.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    switch (count($args)) &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            return $instance-&gt;$method();</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0]);</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1]);</span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1], $args[2]);</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1], $args[2], $args[3]);</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return call_user_func_array([$instance, $method], $args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们看 <code>__callStatic()</code> 的执行过程。首先看 <code>getFacadeRoot()</code> 是如何执行的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function getFacadeRoot()  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return static::resolveFacadeInstance(static::getFacadeAccessor());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在最初，定义 Route 类时，我们只实现了一个方法 <code>getFacadeAccessor()</code> ，这时我们当初定义的字符串，就会在此处用到了，所以上面这个函数，实际上返回的内容就是 <code>static::resolveFacadeInstance(&quot;router&quot;);</code></p>\n<p>我们继续看 <code>resolveFacadeInstance</code> 这个函数的执行过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected static function resolveFacadeInstance($name)</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    //判断是否为对象，当然不是了，$name 是字符串</span><br><span class=\"line\">    if (is_object($name)) &#123;</span><br><span class=\"line\">        return $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //判断 resolvedInstance 这个数组中是否存了 $name 相关的信息，当然也没有，因为我们假设程序是第一次执行这里</span><br><span class=\"line\">    if (isset(static::$resolvedInstance[$name])) &#123;</span><br><span class=\"line\">        return static::$resolvedInstance[$name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 返回 static::$app[$name]，同时把得到的结果保存到上面验证的数组中</span><br><span class=\"line\">    return static::$resolvedInstance[$name] = static::$app[$name];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以我们的程序执行了最后的一个 return， 返回了 <code>static::$app[‘router’]</code> 这个值。</p>\n<p>$app 就是前面说过的 Laravel Application 类的实例化对象，这个类是一个 IOC Container，实例化过程发生在 Laravel 最开始的时候。</p>\n<p>在 Facade 初始化的时候，也让自己有了一个 <code>static::$app</code> 这个就是 Application 类的实例化对象。</p>\n<p>而 $app 其实并没有 ‘router’ 这个属性，那为什么可以这样调用呢？ 是因为 Application 继承了 Container， 而 Container 又继承了 ArrayAccess 这个类。正是由于 ArrayAccess 的存在，以及 Container 实现了 ArrayAccess 的下面这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function offsetGet($key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return $this-&gt;make($key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，当我们使用 <code>$app[&#39;router&#39;]</code> 时，实际上是执行了 <code>$app-&gt;make(‘router’)</code>，到这里已经比较明显了，这里就是从 $app 这个 IOC Container 中， <code>make</code> 了一个 router 的实例。</p>\n<p>已经绕的有点远了，不过还好，我们终于要回去了。到最初的 <code>__callStatic()</code> 中的：</p>\n<p><code>$instance = static::getFacadeRoot();</code></p>\n<p>也就相当于</p>\n<p><code>$instance = $app-&gt;make(‘router’)</code></p>\n<p><code>__callStatic()</code> 继续往下执行，想一下我们最初的那条代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/&apos;, function() &#123;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有2个参数，所以会执行到 case 2 这条语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return $instance-&gt;$method($args[0], $args[1]);</span><br></pre></td></tr></table></figure>\n<p>到这里，我们的 $instance 就是我们的 IOC Container make 出的具有实际功能的实例，这个实例将会执行这个实例的类所声明过的 get 方法。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://laravelacademy.org/post/769.html/comment-page-5#comment-17821\" target=\"_blank\" rel=\"noopener\">Laravel 服务容器实例教程 —— 深入理解控制反转（IoC）和依赖注入（DI）</a>  <a href=\"http://www.tuicool.com/articles/jy6RviE\" target=\"_blank\" rel=\"noopener\">Laravel 从 1 行代码开始，带你系统性的理解 Laravel Service Container 的核心概念</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入(DI)”。本文就从这里开始。</p>\n<h3 id=\"IoC-容器-Laravel-的核心\"><a href=\"#IoC-容器-Laravel-的核心\" class=\"headerlink\" title=\"IoC 容器 - Laravel 的核心\"></a>IoC 容器 - Laravel 的核心</h3><p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>\n<p>本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 Laravel 服务容器的用法建议阅读文档即可。</p>\n<h3 id=\"IoC-容器诞生的故事\"><a href=\"#IoC-容器诞生的故事\" class=\"headerlink\" title=\"IoC 容器诞生的故事\"></a>IoC 容器诞生的故事</h3><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>\n<h4 id=\"超人和超能力，依赖的产生\"><a href=\"#超人和超能力，依赖的产生\" class=\"headerlink\" title=\"超人和超能力，依赖的产生\"></a>超人和超能力，依赖的产生</h4><p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>\n<blockquote>\n<p>怪物横行的世界，总归需要点超级人物来摆平。</p>\n</blockquote>\n<p>我们把一个“超人”作为一个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Power &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 能力值</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $ability;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 能力范围或距离</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $range;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($ability, $range)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;ability = $ability;</span><br><span class=\"line\">        $this-&gt;range = $range;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;power = new Power(999, 100);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>\n<p>所谓“依赖”，就是 “我若依赖你，我就不能离开你”。</p>\n<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>\n<h4 id=\"一堆乱麻，可怕的依赖\"><a href=\"#一堆乱麻，可怕的依赖\" class=\"headerlink\" title=\"一堆乱麻，可怕的依赖\"></a>一堆乱麻，可怕的依赖</h4><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p>\n<ul>\n<li>飞行，属性有：飞行速度、持续飞行时间</li>\n<li>蛮力，属性有：力量值</li>\n<li>能量弹，属性有：伤害值、射击距离、同时射击个数</li>\n</ul>\n<p>我们创建了如下类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Flight</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $speed;</span><br><span class=\"line\">    protected $holdtime;</span><br><span class=\"line\">    public function __construct($speed, $holdtime) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Force</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $force;</span><br><span class=\"line\">    public function __construct($force) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Shot</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $atk;</span><br><span class=\"line\">    protected $range;</span><br><span class=\"line\">    protected $limit;</span><br><span class=\"line\">    public function __construct($atk, $range, $limit) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了省事儿我没有详细写出 <code>__construct()</code>  这个构造函数的全部，只写了需要传递的参数。</p>\n<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力，大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;power = new Fight(9, 100);</span><br><span class=\"line\">        // $this-&gt;power = new Force(45);</span><br><span class=\"line\">        // $this-&gt;power = new Shot(99, 50, 2);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        $this-&gt;power = array(</span><br><span class=\"line\">            new Force(45),</span><br><span class=\"line\">            new Shot(99, 50, 2)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的新的超能力，或者需要变更超能力的方法，我们必须 重新改造 超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。</p>\n<p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。</p>\n<p>对，就是这样的。</p>\n<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。</p>\n<h4 id=\"工厂模式，转移依赖\"><a href=\"#工厂模式，转移依赖\" class=\"headerlink\" title=\"工厂模式，转移依赖\"></a>工厂模式，转移依赖</h4><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>\n<blockquote>\n<p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。</p>\n</blockquote>\n<p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>\n<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SuperModuleFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function makeModule($moduleName, $options)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($moduleName) &#123;</span><br><span class=\"line\">            case &apos;Fight&apos;: </span><br><span class=\"line\">                return new Fight($options[0], $options[1]);</span><br><span class=\"line\">            case &apos;Force&apos;: </span><br><span class=\"line\">                return new Force($options[0]);</span><br><span class=\"line\">            case &apos;Shot&apos;: </span><br><span class=\"line\">                return new Shot($options[0], $options[1], $options[2]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，超人 创建之初就可以使用这个工厂：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 初始化工厂</span><br><span class=\"line\">        $factory = new SuperModuleFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 通过工厂提供的方法制造需要的模块</span><br><span class=\"line\">        $this-&gt;power = $factory-&gt;makeModule(&apos;Fight&apos;, [9, 100]);</span><br><span class=\"line\">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Force&apos;, [45]);</span><br><span class=\"line\">        // $this-&gt;power = $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2]);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        $this-&gt;power = array(</span><br><span class=\"line\">            $factory-&gt;makeModule(&apos;Force&apos;, [45]),</span><br><span class=\"line\">            $factory-&gt;makeModule(&apos;Shot&apos;, [99, 50, 2])</span><br><span class=\"line\">        );</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $power;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct(array $modules)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 初始化工厂</span><br><span class=\"line\">        $factory = new SuperModuleFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 通过工厂提供的方法制造需要的模块</span><br><span class=\"line\">        foreach ($modules as $moduleName =&gt; $moduleOptions) &#123;</span><br><span class=\"line\">            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建超人</span><br><span class=\"line\">$superman = new Superman([</span><br><span class=\"line\">    &apos;Fight&apos; =&gt; [9, 100],</span><br><span class=\"line\">    &apos;Shot&apos; =&gt; [99, 50, 2]</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>\n<h3 id=\"IoC-容器的重要组成-依赖注入\"><a href=\"#IoC-容器的重要组成-依赖注入\" class=\"headerlink\" title=\"IoC 容器的重要组成 - 依赖注入\"></a>IoC 容器的重要组成 - 依赖注入</h3><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>\n<blockquote>\n<p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。</p>\n</blockquote>\n<p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>\n<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SuperModuleFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function makeModule($moduleName, $options)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($moduleName) &#123;</span><br><span class=\"line\">            case &apos;Fight&apos;: </span><br><span class=\"line\">                return new Fight($options[0], $options[1]);</span><br><span class=\"line\">            case &apos;Force&apos;: </span><br><span class=\"line\">                return new Force($options[0]);</span><br><span class=\"line\">            case &apos;Shot&apos;: </span><br><span class=\"line\">                return new Shot($options[0], $options[1], $options[2]);</span><br><span class=\"line\">            // case &apos;more&apos;: .......</span><br><span class=\"line\">            // case &apos;and more&apos;: .......</span><br><span class=\"line\">            // case &apos;and more&apos;: .......</span><br><span class=\"line\">            // case &apos;oh no! its too many!&apos;: .......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到没。。。噩梦般的感受！</p>\n<blockquote>\n<p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p>\n</blockquote>\n<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 超能力激活方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * 任何一个超能力都得有该方法，并拥有一个参数</span><br><span class=\"line\">     *@param array $target 针对目标，可以是一个或多个，自己或他人</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function activate(array $target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p>\n<p>其实，这就是 php 中接口（ interface ）的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object） 本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p>\n<p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p>\n<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * X-超能量</span><br><span class=\"line\"> */</span><br><span class=\"line\">class XPower implements SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function activate(array $target)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 这只是个例子。。具体自行脑补</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 终极炸弹</span><br><span class=\"line\"> */</span><br><span class=\"line\">class UltraBomb implements SuperModuleInterface</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function activate(array $target)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 这只是个例子。。具体自行脑补</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Superman</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $module;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct(SuperModuleInterface $module)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;module = $module;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个<code>SuperModuleInterface</code> 接口的实现。否则就会提示错误。</p>\n<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p>\n<p>现在有人疑惑了，你要讲的依赖注入呢？</p>\n<p>其实，上面讲的内容，正是依赖注入。</p>\n<h4 id=\"什么叫做依赖注入？\"><a href=\"#什么叫做依赖注入？\" class=\"headerlink\" title=\"什么叫做依赖注入？\"></a>什么叫做依赖注入？</h4><p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 超能力模组</span><br><span class=\"line\">$superModule = new XPower;</span><br><span class=\"line\">// 初始化一个超人，并注入一个超能力模组依赖</span><br><span class=\"line\">$superMan = new Superman($superModule);</span><br></pre></td></tr></table></figure>\n<p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。</p>\n<h3 id=\"更为先进的工厂-IoC容器\"><a href=\"#更为先进的工厂-IoC容器\" class=\"headerlink\" title=\"更为先进的工厂 - IoC容器\"></a>更为先进的工厂 - IoC容器</h3><p>刚刚列了一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$superModule = new XPower;</span><br><span class=\"line\">$superMan = new Superman($superModule);</span><br></pre></td></tr></table></figure>\n<p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>\n<blockquote>\n<p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p>\n</blockquote>\n<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Container</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $binds;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $instances;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bind($abstract, $concrete)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t// Todo: 向 container 添加一种对象的的生产方式</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t// $abstract: 第一个参数 $abstract, 一般为一个字符串(有时候也会是一个接口), </span><br><span class=\"line\">    \t// 当你需要 make 这个类的对象的时候, 传入这个字符串(或者接口), 这样make 就知道制造什么样的对象了</span><br><span class=\"line\">    \t// $concrete: 第二个参数 $concrete, 一般为一个 Closure 或者 一个单例对象, 用于说明制造这个对象的方式</span><br><span class=\"line\">        </span><br><span class=\"line\">        if ($concrete instanceof Closure) &#123;</span><br><span class=\"line\">            $this-&gt;binds[$abstract] = $concrete;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $this-&gt;instances[$abstract] = $concrete;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function make($abstract, $parameters = [])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t// Todo: 生产一种对象</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t// $abstract: 在bind方法中已经介绍过</span><br><span class=\"line\">    \t// $parameters: 生产这种对象所需要的参数</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        if (isset($this-&gt;instances[$abstract])) &#123;</span><br><span class=\"line\">            return $this-&gt;instances[$abstract];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        array_unshift($parameters, $this);</span><br><span class=\"line\"></span><br><span class=\"line\">        return call_user_func_array($this-&gt;binds[$abstract], $parameters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个容器（后面称作超级工厂）</span><br><span class=\"line\">$container = new Container;</span><br><span class=\"line\"></span><br><span class=\"line\">// 向该超级工厂添加超人的生产脚本</span><br><span class=\"line\">$container-&gt;bind(&apos;superman&apos;, function($container, $moduleName) &#123;</span><br><span class=\"line\">    return new Superman($container-&gt;make($moduleName));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 向该超级工厂添加超能力模组的生产脚本</span><br><span class=\"line\">$container-&gt;bind(&apos;xpower&apos;, function($container) &#123;</span><br><span class=\"line\">    return new XPower;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 同上</span><br><span class=\"line\">$container-&gt;bind(&apos;ultrabomb&apos;, function($container) &#123;</span><br><span class=\"line\">    return new UltraBomb;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// ****************** 华丽丽的分割线 **********************</span><br><span class=\"line\">// 开始启动生产</span><br><span class=\"line\">$superman_1 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</span><br><span class=\"line\">$superman_2 = $container-&gt;make(&apos;superman&apos;, [&apos;ultrabomb&apos;]);</span><br><span class=\"line\">$superman_3 = $container-&gt;make(&apos;superman&apos;, [&apos;xpower&apos;]);</span><br><span class=\"line\">// ......</span><br></pre></td></tr></table></figure>\n<p>看到没？通过最初的 绑定（<code>bind</code>） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（<code>make</code>） 操作被调用执行时，才会触发。</p>\n<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p>\n<p>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。</p>\n<p>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过反射（Reflection）实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究：</p>\n<p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦！</p>\n<h3 id=\"重新审视-Laravel-的核心\"><a href=\"#重新审视-Laravel-的核心\" class=\"headerlink\" title=\"重新审视 Laravel 的核心\"></a>重新审视 Laravel 的核心</h3><p>现在，我们开始慢慢解读 Laravel 的核心。其实，Laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>\n<p>可以说，Laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 Route（路由）、Eloquent ORM（数据库 ORM 组件）、Request（请求）以及 Response（响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 Laravel 的服务容器负责的。</p>\n<p>我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/&apos;, function() &#123;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>实际上， Route 类被定义在这个命名空间：<code>Illuminate\\Routing\\Router</code>，文件 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code>。</p>\n<p>我们通过打开发现，这个类的这一系列方法，如 <code>get</code>，<code>post</code>，<code>any</code> 等都不是静态（<code>static</code>）方法，这是怎么一回事儿？不要急，我们继续。</p>\n<h4 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h4><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p>\n<p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 Laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是服务提供者（Service Provider）。</p>\n<p>虽然，绑定一个类到容器不一定非要通过服务提供者。</p>\n<p>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，Laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的服务提供者。</p>\n<p>服务提供者主要分为两个部分，<code>register</code>（注册） 和<code>boot</code>（引导、初始化），具体参考文档。<code>register</code> 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 <code>boot</code> 部分。</p>\n<h4 id=\"门面（Facade）\"><a href=\"#门面（Facade）\" class=\"headerlink\" title=\"门面（Facade）\"></a>门面（Facade）</h4><p>我们现在解答之前关于<code>Route</code> 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法<code>__callStatic</code>，并将该静态方法映射到真正的方法上。</p>\n<p>我们使用的 <code>Route</code> 类实际上是 <code>Illuminate\\Support\\Facades\\Route</code> 通过 <code>class_alias()</code> 函数创造的别名而已，这个类被定义在文件 <code>vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">    namespace Illuminate\\Support\\Facades;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @see \\Illuminate\\Routing\\Router</span><br><span class=\"line\">     */</span><br><span class=\"line\">    class Route extends Facade &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Get the registered name of the component.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @return string</span><br><span class=\"line\">         */</span><br><span class=\"line\">        protected static function getFacadeAccessor()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return &apos;router&apos;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这个类之后，并没有找到之前 Route 调用的 <code>get</code> 方法，此时我们再看里面的这行注释， <code>@see\\Illuminate\\Routing\\Router</code> ，他提示我们去找这个位置，那我们就去找一下，我们又发现了一个 Router 类，而这个 Router 类中，是有 <code>get</code> 方法的，看起来这里似乎就是 Route 的真实身份了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace Illuminate\\Routing;</span><br><span class=\"line\">class Router implements RegistrarContract &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Register a new GET route with the router.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  string  $uri</span><br><span class=\"line\">     * @param  \\Closure|array|string|null  $action</span><br><span class=\"line\">     * @return \\Illuminate\\Routing\\Route</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function get($uri, $action = null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;addRoute([&apos;GET&apos;, &apos;HEAD&apos;], $uri, $action);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那 Laravel 是如何为 <code>Illuminate\\Support\\Facades\\Route::class</code> 这个类找到他的真实身份的呢？</p>\n<p>首先， <code>class Route extends Facade</code>， <code>Route</code> 继承自 <code>Facade</code> 类，<code>Route</code> 类又调用了静态的 <code>get</code> 方法，我们在 <code>Route</code> 类，或者是他的父类 <code>Facade</code> 中都是无法找到这个 <code>get</code> 方法的。 但是在 <code>Facade</code> 类中，我们可以发现有一个 <code>__callStatic()</code> 魔术方法 ，这个方法的作用就是：如果你想要调用的静态方法在类的定义中并没有声明，那么就会执行 <code>__callStatic()</code> 。在我们当前的情景中，静态方法 <code>get</code> 并没有被声明，那么当然，我们的类就会转而调用 <code>__callStatic()</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function __callStatic($method, $args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $instance = static::getFacadeRoot();</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (! $instance) &#123;</span><br><span class=\"line\">        throw new RuntimeException(&apos;A facade root has not been set.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    switch (count($args)) &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            return $instance-&gt;$method();</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0]);</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1]);</span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1], $args[2]);</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            return $instance-&gt;$method($args[0], $args[1], $args[2], $args[3]);</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return call_user_func_array([$instance, $method], $args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们看 <code>__callStatic()</code> 的执行过程。首先看 <code>getFacadeRoot()</code> 是如何执行的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static function getFacadeRoot()  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return static::resolveFacadeInstance(static::getFacadeAccessor());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在最初，定义 Route 类时，我们只实现了一个方法 <code>getFacadeAccessor()</code> ，这时我们当初定义的字符串，就会在此处用到了，所以上面这个函数，实际上返回的内容就是 <code>static::resolveFacadeInstance(&quot;router&quot;);</code></p>\n<p>我们继续看 <code>resolveFacadeInstance</code> 这个函数的执行过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected static function resolveFacadeInstance($name)</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    //判断是否为对象，当然不是了，$name 是字符串</span><br><span class=\"line\">    if (is_object($name)) &#123;</span><br><span class=\"line\">        return $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //判断 resolvedInstance 这个数组中是否存了 $name 相关的信息，当然也没有，因为我们假设程序是第一次执行这里</span><br><span class=\"line\">    if (isset(static::$resolvedInstance[$name])) &#123;</span><br><span class=\"line\">        return static::$resolvedInstance[$name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 返回 static::$app[$name]，同时把得到的结果保存到上面验证的数组中</span><br><span class=\"line\">    return static::$resolvedInstance[$name] = static::$app[$name];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以我们的程序执行了最后的一个 return， 返回了 <code>static::$app[‘router’]</code> 这个值。</p>\n<p>$app 就是前面说过的 Laravel Application 类的实例化对象，这个类是一个 IOC Container，实例化过程发生在 Laravel 最开始的时候。</p>\n<p>在 Facade 初始化的时候，也让自己有了一个 <code>static::$app</code> 这个就是 Application 类的实例化对象。</p>\n<p>而 $app 其实并没有 ‘router’ 这个属性，那为什么可以这样调用呢？ 是因为 Application 继承了 Container， 而 Container 又继承了 ArrayAccess 这个类。正是由于 ArrayAccess 的存在，以及 Container 实现了 ArrayAccess 的下面这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function offsetGet($key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return $this-&gt;make($key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，当我们使用 <code>$app[&#39;router&#39;]</code> 时，实际上是执行了 <code>$app-&gt;make(‘router’)</code>，到这里已经比较明显了，这里就是从 $app 这个 IOC Container 中， <code>make</code> 了一个 router 的实例。</p>\n<p>已经绕的有点远了，不过还好，我们终于要回去了。到最初的 <code>__callStatic()</code> 中的：</p>\n<p><code>$instance = static::getFacadeRoot();</code></p>\n<p>也就相当于</p>\n<p><code>$instance = $app-&gt;make(‘router’)</code></p>\n<p><code>__callStatic()</code> 继续往下执行，想一下我们最初的那条代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/&apos;, function() &#123;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有2个参数，所以会执行到 case 2 这条语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return $instance-&gt;$method($args[0], $args[1]);</span><br></pre></td></tr></table></figure>\n<p>到这里，我们的 $instance 就是我们的 IOC Container make 出的具有实际功能的实例，这个实例将会执行这个实例的类所声明过的 get 方法。</p>\n<blockquote>\n<p>参考文章：</p>\n<p><a href=\"http://laravelacademy.org/post/769.html/comment-page-5#comment-17821\" target=\"_blank\" rel=\"noopener\">Laravel 服务容器实例教程 —— 深入理解控制反转（IoC）和依赖注入（DI）</a>  <a href=\"http://www.tuicool.com/articles/jy6RviE\" target=\"_blank\" rel=\"noopener\">Laravel 从 1 行代码开始，带你系统性的理解 Laravel Service Container 的核心概念</a></p>\n</blockquote>\n"},{"title":"分布式锁","date":"2018-05-06T05:28:07.000Z","_content":"\n### 前言\n\n进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔者同样遇到了这种问题：\n\n> 高并发情境下数据库的数据重复写入问题\n\n数据的重复写入实际上就是对共享资源的竞争操作，导致数据出现不一致，给线上业务带来影响。解决这种问题，最直接的思路是在数据库层面寻求解决方案，借助数据库的锁机制，或者在业务上通过数据库语句的限制避免重复数据，如：\n\n- insert ignore into 语句；\n- on duplicate key update 语句；\n- insert … select … where not exist 语句；\n- replace into 语句。\n\n以上语句在简单业务中避免mysql插入重复数据是有一定效果的，但是在复杂场景下并不能满足需求。因为高并发业务除了要求数据一致性外，对性能、稳定性的要求也较高，单纯使用数据库语句很难达到预期效果，因此，从单机锁发展而来的分布式锁提供了一种新的解决方案。\n\n### SQL语句解决方案\n\ninsert ignore into\n\n```\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    SELECT ...\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nvalue:\n    {expr | DEFAULT}\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n```\n\n> Specify **IGNORE** to ignore rows that would cause duplicate-key violations. \n\n通过mysql给出的官方解释：IGNORE 关键字会忽略重复键的行。当插入数据时，如出现错误（重复数据），将不返回错误，只以警告形式返回。所以使用 IGNORE 请确保语句本身没有问题，否则语句的其他错误也会被忽略掉。如果使用 IGNORE 关键字，则插入的字段必须是主键或唯一索引。\n\n```\nmysql> show tables;\n+----------------------------+\n| Tables_in_openlivedb       |\n+----------------------------+\n| admin                      |\n| auth_group                 |\n| auth_group_permissions     |\n| auth_permission            |\n| auth_user                  |\n| auth_user_groups           |\n| auth_user_user_permissions |\n| cmd_template               |\n| cutter_node                |\n| django_admin_log           |\n| django_content_type        |\n| django_migrations          |\n| django_session             |\n| flv_slice                  |\n| mp4_slice                  |\n| test_table                 |\n| ts_slice                   |\n+----------------------------+\n17 rows in set (0.00 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 |                                  |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test2');\nQuery OK, 0 rows affected, 2 warnings (0.09 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 |                                  |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test3');\nQuery OK, 1 row affected, 1 warning (0.11 sec)\n```\n\n以上操作可以看出，插入重复数据时，显示 `Query OK, 0 rows affected, 2 warnings (0.09 sec)` 表明出现了警告，当在业务中直接执行时：\n\n```\nam = AdminManager()\nr = am.execute(\"select * from admin\")\nfor i in r:\n    print(i.username)\nr2 = am.execute(\"INSERT IGNORE INTO admin (username, password) VALUES ('liuxiaoyang_test2', '123')\")\n```\n\n结果如下：\n\n```\nliuxiaoyang\nliuxiaoyang_test2\n/usr/local/lib/python3.5/dist-packages/pymysql/cursors.py:165: Warning: (1062, \"Duplicate entry 'liuxiaoyang_test2' for key 'username_unique'\")\n  result = self._query(query)\n```\n\n同样返回了警告信息。\n\non duplicate key update\n\n> If you specify an **ON DUPLICATE KEY UPDATE** clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs.\n\n当遇到重复键时，对旧行执行 UPDATE 语句，否则插入新行。 \n\n```\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 | 123                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.02 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test2') ON DUPLICATE KEY UPDATE password='345';\nQuery OK, 2 rows affected, 1 warning (0.09 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 | 345                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n对于on duplicate key update语句，必需主键或唯一索引。\n\ninsert … select … where not exist\n\n该方法利用了子查询，写法比较繁琐，性能较差，不推荐使用。\n\nreplace into \n\n```\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    {VALUES | VALUE} (value_list) [, (value_list)] ...\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n```\n\n> REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. \n\nreplace into 语句与insert语句类似，只不过它在插入时，如果存在主键或唯一键相同的记录，则会先删除，然后再插入新记录。\n\n```\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  5 | liuxiaoyang_test2 | 789                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> replace into admin(username, password) values('liuxiaoyang_test2', '1111');\nQuery OK, 2 rows affected (0.10 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  6 | liuxiaoyang_test2 | 1111                             |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n> MySQL uses the following algorithm for REPLACE:\n>\n> 1. try to insert the new row into the table        \n> 2. While the insertion fails because a duplicate-key error occurs for a primary key or unique index:\n>    - Delete from the table the conflicting row that has the duplicate key value;\n>    - try again to insert the new row into the table.\n\n以上方法也会有些限制，如目前大多数业务的删除只是逻辑删除，并不做物理删除，在这种场景下就需要寻找其他方案。除了以上方法，mysql还提供了共享锁、排他锁等机制，mysql的锁机制会单独进行介绍，在此就不赘述。\n\n### 分布式锁解决方案\n\n#### 何为锁\n\n在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量；\n\n而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁，不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可；\n\n除了利用内存数据做锁，其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。\n\n#### 什么是分布式\n\n分布式的 CAP 理论告诉我们：\n\n> 任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。\n\n目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。\n\n分布式场景\n\n> 此处主要指集群模式下，多个相同服务同时运行\n\n在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如**分布式事务**、**分布式锁**等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过线程安全队列或者其他方式解决，但是在分布式环境下，这并不是一件容易的事儿。\n\n- 分布式与单机情况下最大的不同在于其不是多线程而是**多进程**；\n- 多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。\n\n分布式锁\n\n- 当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数；\n- 与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题；\n- 分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。\n\n#### 我们需要怎样的分布式锁\n\n- 在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； \n- 高可用的获取锁与释放锁； \n- 高性能的获取锁与释放锁； \n- 具备可重入特性； \n- 具备锁失效机制，防止死锁； \n- 具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。\n\n#### 分布式锁-基于数据库\n\n乐观锁 - 基于表主键唯一做分布式锁\n\n利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。\n\n这种简单的实现有以下几个问题：\n\n- 这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用；\n- 这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁；\n- 这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作；\n- 这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了；\n- 这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁；\n- 在 mysql 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。\n\n当然，我们也可以有其他方式解决上面的问题。\n\n- 数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上；\n- 没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍；\n- 非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功；\n- 非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了；\n- 非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁；\n- 比较好的办法是在程序中生产主键进行防重。\n\n乐观锁 - 基于表字段版本号做分布式锁\n\n这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。\n\n悲观锁 - 基于数据库排他锁做分布式锁\n\n在查询语句后面增加 `for update`，数据库会在查询过程中给数据库表增加排他锁 （注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上）。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。\n\n我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过 `connection.commit()` 操作来释放锁。\n\n这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。\n\n- 阻塞锁？ `for update`语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功；\n- 锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。\n\n但是还是无法直接解决数据库单点和可重入问题。虽然我们对方法字段名使用了唯一索引，并且显示使用 `for update `来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。\n\n还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。\n\n#### 分布式锁-基于Redis\n\nRedis分布式锁主要使用其SETNX()、EXPIRE() 方法实现。\n\n> SETNX key value : 将 `key` 的值设为 `value` ，当且仅当 `key` 不存在。若给定的 `key` 已经存在，则 ＳETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。\n>\n> EXPIRE key seconds : 为给定 `key` 设置生存时间，当 `key` 过期时(生存时间为 `0` )，它会被自动删除。\n\n但是从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：\n\n- `EX second` ：设置键的过期时间为 `second` 秒。 `SET key value EX second` 效果等同于 `SETEX key second value` 。\n- `PX millisecond` ：设置键的过期时间为 `millisecond` 毫秒。 `SET key value PX millisecond` 效果等同于 `PSETEX key millisecondvalue` 。\n- `NX` ：只在键不存在时，才对键进行设置操作。 `SET key value NX` 效果等同于 `SETNX key value` 。\n- `XX` ：只在键已经存在时，才对键进行设置操作。\n\n所以SETNX()、EXPIRE() 方法被融合进了SET方法，而[官网](http://redisdoc.com/string/set.html) 给出\n\n> 因为 [SET](http://redisdoc.com/string/set.html#set) 命令可以通过参数来实现和 [SETNX](http://redisdoc.com/string/setnx.html#setnx) 、 [SETEX](http://redisdoc.com/string/setex.html#setex) 和 [PSETEX](http://redisdoc.com/string/psetex.html#psetex) 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除[SETNX](http://redisdoc.com/string/setnx.html#setnx) 、 [SETEX](http://redisdoc.com/string/setex.html#setex) 和 [PSETEX](http://redisdoc.com/string/psetex.html#psetex) 这三个命令。\n\n在使用Redis实现分布式锁时，我们可以通过SET来实现。\n\n设计思路\n\n> 获取锁：\n>\n> - 调用 set 尝试获取锁，如果设置成功，表示获取到了锁；\n> - 设置失败，\n>   - 等待一定时间后，再次尝试获取锁；\n>   - 若已达到最大获取锁时间未获取到锁，获取锁失败。\n>\n> 释放锁：\n>\n> - 确保每个客户端释放的是自己的锁；\n> - 确保释放锁操作的原子性。\n\n```\nimport time\nimport traceback\n\nfrom contextlib import contextmanager\nfrom lib.utils import get_logger\nfrom tornado import gen\n\nDEFAULT_EXPIRES = 3\nACQUIRE_TIMEOUT = 1\n\nlock_logger = get_logger(\"redis_netlock\")\n\n@contextmanager\ndef dist_lock(key, client, unique_id acquire_timeout=ACQUIRE_TIMEOUT):\n    key = 'lock_%s' % key\n    try:\n        t = _acquire_lock(key, client, unique_id, acquire_timeout)\n        yield t\n    finally:\n        _release_lock(key, client, t)\n\n\ndef _acquire_lock(key, client, unique_id, acquire_timeout):\n    end = time.time() + acquire_timeout\n    while time.time() < end:\n        if client.set(key, unique_id, ex=DEFAULT_EXPIRES, nx=True):\n            return unique_id\n        else:\n            gen.sleep(.01)\n    return None\n\n\ndef _release_lock(key, client, t):\n    try:\n        lua_command = \"\"\"\n            if redis.call(\"get\",KEYS[1]) == ARGV[1]\n            then\n                return redis.call(\"del\",KEYS[1])\n            else\n                return 0\n            end\n        \"\"\"\n        lua_script = client.register_script(lua_command)\n        lock_logger.debug(lua_script(keys=[key], args=[t]))\n    except Exception as e:\n        lock_logger.error(traceback.format_exc())\n```\n\nunique_id：uuid1() 提供的全球唯一值，保证每个客户端释放的是自己的锁。\n\n使用lua脚本释放锁是为了保证释放锁操作的原子性：\n\n> **Atomicity of scripts**\n>\n> Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.\n>\n> However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.\n\n获取锁时，给定超时时间是１s，避免出现死锁现象。\n\n使用redis分布式锁的问题是，失效时间的设置。如果设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。\n\n#### 分布式锁-基于RedLock\n\nRedlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。\n\n算法的步骤如下：\n\n1. 客户端获取当前时间，以毫秒为单位；\n2. 客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用；\n3. 客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁；\n4. 客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间；\n5. 如果客户端获取锁失败了，客户端会依次删除所有的锁。\n\n使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。\n\n#### 分布式锁-基于Zookeeper\n\nZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，更新是全序的。\n\n ![2018-05-06T184140](/images/2018-05-06T184140.png)\n\n上图为系统架构，左边区域表示一个ZooKeeper集群，locker是ZooKeeper的一个持久节点，node\\_1、node\\_2、node\\_3是locker这个持久节点下面的临时顺序节点。client\\_1、client\\_2、client\\_3表示多个客户端，Share\\_Service表示需要互斥访问的共享资源。\n\nZookeeper实现分布式锁的思路：\n\n1. 多个客户端竞争创建 lock 临时节点；\n2. 其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher；\n3. 持有锁的客户端删除 lock 节点或该客户端崩溃，由 Zookeeper 删除 lock 节点；\n4. 其他客户端获得 lock 节点被删除的通知；\n5. 重复上述4个步骤，直至无客户端在等待获取锁了。\n\n ![2018-05-06T190223](/images/2018-05-06T190223.png)\n\nZookeeper方式性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。\n\n由于目前理解有限，一些细节需要进一步确定和实践，不当之处请指正。\n\n\n\nRead More:\n\n> [分布式锁的几种实现方式](https://www.cnblogs.com/austinspark-jessylu/p/8043726.html) [Redis分布式锁的正确实现方式（Java版）](http://www.importnew.com/27477.html) [基于Redis的分布式锁到底安全吗（上）？](https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w) [分布式锁看这篇就够了](http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/#%E5%9F%BA%E4%BA%8E-Redlock-%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81) [基于 Zookeeper 的分布式锁实现](https://segmentfault.com/a/1190000010895869) [Redis命令参考](http://redisdoc.com/) [Redis Lua scripting](https://redis.io/commands/eval) [mysql document](https://dev.mysql.com/doc/)","source":"_posts/distlock.md","raw":"---\ntitle: 分布式锁\ndate: 2018-05-06 13:28:07\ntags:\n - 分布式锁\n - 数据库\n - redis\n - zookeeper\ncategories:\n - 分布式锁\n---\n\n### 前言\n\n进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔者同样遇到了这种问题：\n\n> 高并发情境下数据库的数据重复写入问题\n\n数据的重复写入实际上就是对共享资源的竞争操作，导致数据出现不一致，给线上业务带来影响。解决这种问题，最直接的思路是在数据库层面寻求解决方案，借助数据库的锁机制，或者在业务上通过数据库语句的限制避免重复数据，如：\n\n- insert ignore into 语句；\n- on duplicate key update 语句；\n- insert … select … where not exist 语句；\n- replace into 语句。\n\n以上语句在简单业务中避免mysql插入重复数据是有一定效果的，但是在复杂场景下并不能满足需求。因为高并发业务除了要求数据一致性外，对性能、稳定性的要求也较高，单纯使用数据库语句很难达到预期效果，因此，从单机锁发展而来的分布式锁提供了一种新的解决方案。\n\n### SQL语句解决方案\n\ninsert ignore into\n\n```\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    SELECT ...\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nvalue:\n    {expr | DEFAULT}\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n```\n\n> Specify **IGNORE** to ignore rows that would cause duplicate-key violations. \n\n通过mysql给出的官方解释：IGNORE 关键字会忽略重复键的行。当插入数据时，如出现错误（重复数据），将不返回错误，只以警告形式返回。所以使用 IGNORE 请确保语句本身没有问题，否则语句的其他错误也会被忽略掉。如果使用 IGNORE 关键字，则插入的字段必须是主键或唯一索引。\n\n```\nmysql> show tables;\n+----------------------------+\n| Tables_in_openlivedb       |\n+----------------------------+\n| admin                      |\n| auth_group                 |\n| auth_group_permissions     |\n| auth_permission            |\n| auth_user                  |\n| auth_user_groups           |\n| auth_user_user_permissions |\n| cmd_template               |\n| cutter_node                |\n| django_admin_log           |\n| django_content_type        |\n| django_migrations          |\n| django_session             |\n| flv_slice                  |\n| mp4_slice                  |\n| test_table                 |\n| ts_slice                   |\n+----------------------------+\n17 rows in set (0.00 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 |                                  |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test2');\nQuery OK, 0 rows affected, 2 warnings (0.09 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 |                                  |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test3');\nQuery OK, 1 row affected, 1 warning (0.11 sec)\n```\n\n以上操作可以看出，插入重复数据时，显示 `Query OK, 0 rows affected, 2 warnings (0.09 sec)` 表明出现了警告，当在业务中直接执行时：\n\n```\nam = AdminManager()\nr = am.execute(\"select * from admin\")\nfor i in r:\n    print(i.username)\nr2 = am.execute(\"INSERT IGNORE INTO admin (username, password) VALUES ('liuxiaoyang_test2', '123')\")\n```\n\n结果如下：\n\n```\nliuxiaoyang\nliuxiaoyang_test2\n/usr/local/lib/python3.5/dist-packages/pymysql/cursors.py:165: Warning: (1062, \"Duplicate entry 'liuxiaoyang_test2' for key 'username_unique'\")\n  result = self._query(query)\n```\n\n同样返回了警告信息。\n\non duplicate key update\n\n> If you specify an **ON DUPLICATE KEY UPDATE** clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs.\n\n当遇到重复键时，对旧行执行 UPDATE 语句，否则插入新行。 \n\n```\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 | 123                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.02 sec)\n\nmysql> INSERT IGNORE INTO admin (username) VALUES ('liuxiaoyang_test2') ON DUPLICATE KEY UPDATE password='345';\nQuery OK, 2 rows affected, 1 warning (0.09 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  4 | liuxiaoyang_test2 | 345                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n对于on duplicate key update语句，必需主键或唯一索引。\n\ninsert … select … where not exist\n\n该方法利用了子查询，写法比较繁琐，性能较差，不推荐使用。\n\nreplace into \n\n```\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    {VALUES | VALUE} (value_list) [, (value_list)] ...\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n```\n\n> REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. \n\nreplace into 语句与insert语句类似，只不过它在插入时，如果存在主键或唯一键相同的记录，则会先删除，然后再插入新记录。\n\n```\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  5 | liuxiaoyang_test2 | 789                              |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> replace into admin(username, password) values('liuxiaoyang_test2', '1111');\nQuery OK, 2 rows affected (0.10 sec)\n\nmysql> select * from admin;\n+----+-------------------+----------------------------------+\n| id | username          | password                         |\n+----+-------------------+----------------------------------+\n|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |\n|  6 | liuxiaoyang_test2 | 1111                             |\n+----+-------------------+----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n> MySQL uses the following algorithm for REPLACE:\n>\n> 1. try to insert the new row into the table        \n> 2. While the insertion fails because a duplicate-key error occurs for a primary key or unique index:\n>    - Delete from the table the conflicting row that has the duplicate key value;\n>    - try again to insert the new row into the table.\n\n以上方法也会有些限制，如目前大多数业务的删除只是逻辑删除，并不做物理删除，在这种场景下就需要寻找其他方案。除了以上方法，mysql还提供了共享锁、排他锁等机制，mysql的锁机制会单独进行介绍，在此就不赘述。\n\n### 分布式锁解决方案\n\n#### 何为锁\n\n在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量；\n\n而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁，不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可；\n\n除了利用内存数据做锁，其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。\n\n#### 什么是分布式\n\n分布式的 CAP 理论告诉我们：\n\n> 任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。\n\n目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。\n\n分布式场景\n\n> 此处主要指集群模式下，多个相同服务同时运行\n\n在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如**分布式事务**、**分布式锁**等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过线程安全队列或者其他方式解决，但是在分布式环境下，这并不是一件容易的事儿。\n\n- 分布式与单机情况下最大的不同在于其不是多线程而是**多进程**；\n- 多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。\n\n分布式锁\n\n- 当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数；\n- 与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题；\n- 分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。\n\n#### 我们需要怎样的分布式锁\n\n- 在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； \n- 高可用的获取锁与释放锁； \n- 高性能的获取锁与释放锁； \n- 具备可重入特性； \n- 具备锁失效机制，防止死锁； \n- 具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。\n\n#### 分布式锁-基于数据库\n\n乐观锁 - 基于表主键唯一做分布式锁\n\n利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。\n\n这种简单的实现有以下几个问题：\n\n- 这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用；\n- 这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁；\n- 这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作；\n- 这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了；\n- 这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁；\n- 在 mysql 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。\n\n当然，我们也可以有其他方式解决上面的问题。\n\n- 数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上；\n- 没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍；\n- 非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功；\n- 非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了；\n- 非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁；\n- 比较好的办法是在程序中生产主键进行防重。\n\n乐观锁 - 基于表字段版本号做分布式锁\n\n这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。\n\n悲观锁 - 基于数据库排他锁做分布式锁\n\n在查询语句后面增加 `for update`，数据库会在查询过程中给数据库表增加排他锁 （注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上）。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。\n\n我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过 `connection.commit()` 操作来释放锁。\n\n这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。\n\n- 阻塞锁？ `for update`语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功；\n- 锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。\n\n但是还是无法直接解决数据库单点和可重入问题。虽然我们对方法字段名使用了唯一索引，并且显示使用 `for update `来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。\n\n还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。\n\n#### 分布式锁-基于Redis\n\nRedis分布式锁主要使用其SETNX()、EXPIRE() 方法实现。\n\n> SETNX key value : 将 `key` 的值设为 `value` ，当且仅当 `key` 不存在。若给定的 `key` 已经存在，则 ＳETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。\n>\n> EXPIRE key seconds : 为给定 `key` 设置生存时间，当 `key` 过期时(生存时间为 `0` )，它会被自动删除。\n\n但是从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：\n\n- `EX second` ：设置键的过期时间为 `second` 秒。 `SET key value EX second` 效果等同于 `SETEX key second value` 。\n- `PX millisecond` ：设置键的过期时间为 `millisecond` 毫秒。 `SET key value PX millisecond` 效果等同于 `PSETEX key millisecondvalue` 。\n- `NX` ：只在键不存在时，才对键进行设置操作。 `SET key value NX` 效果等同于 `SETNX key value` 。\n- `XX` ：只在键已经存在时，才对键进行设置操作。\n\n所以SETNX()、EXPIRE() 方法被融合进了SET方法，而[官网](http://redisdoc.com/string/set.html) 给出\n\n> 因为 [SET](http://redisdoc.com/string/set.html#set) 命令可以通过参数来实现和 [SETNX](http://redisdoc.com/string/setnx.html#setnx) 、 [SETEX](http://redisdoc.com/string/setex.html#setex) 和 [PSETEX](http://redisdoc.com/string/psetex.html#psetex) 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除[SETNX](http://redisdoc.com/string/setnx.html#setnx) 、 [SETEX](http://redisdoc.com/string/setex.html#setex) 和 [PSETEX](http://redisdoc.com/string/psetex.html#psetex) 这三个命令。\n\n在使用Redis实现分布式锁时，我们可以通过SET来实现。\n\n设计思路\n\n> 获取锁：\n>\n> - 调用 set 尝试获取锁，如果设置成功，表示获取到了锁；\n> - 设置失败，\n>   - 等待一定时间后，再次尝试获取锁；\n>   - 若已达到最大获取锁时间未获取到锁，获取锁失败。\n>\n> 释放锁：\n>\n> - 确保每个客户端释放的是自己的锁；\n> - 确保释放锁操作的原子性。\n\n```\nimport time\nimport traceback\n\nfrom contextlib import contextmanager\nfrom lib.utils import get_logger\nfrom tornado import gen\n\nDEFAULT_EXPIRES = 3\nACQUIRE_TIMEOUT = 1\n\nlock_logger = get_logger(\"redis_netlock\")\n\n@contextmanager\ndef dist_lock(key, client, unique_id acquire_timeout=ACQUIRE_TIMEOUT):\n    key = 'lock_%s' % key\n    try:\n        t = _acquire_lock(key, client, unique_id, acquire_timeout)\n        yield t\n    finally:\n        _release_lock(key, client, t)\n\n\ndef _acquire_lock(key, client, unique_id, acquire_timeout):\n    end = time.time() + acquire_timeout\n    while time.time() < end:\n        if client.set(key, unique_id, ex=DEFAULT_EXPIRES, nx=True):\n            return unique_id\n        else:\n            gen.sleep(.01)\n    return None\n\n\ndef _release_lock(key, client, t):\n    try:\n        lua_command = \"\"\"\n            if redis.call(\"get\",KEYS[1]) == ARGV[1]\n            then\n                return redis.call(\"del\",KEYS[1])\n            else\n                return 0\n            end\n        \"\"\"\n        lua_script = client.register_script(lua_command)\n        lock_logger.debug(lua_script(keys=[key], args=[t]))\n    except Exception as e:\n        lock_logger.error(traceback.format_exc())\n```\n\nunique_id：uuid1() 提供的全球唯一值，保证每个客户端释放的是自己的锁。\n\n使用lua脚本释放锁是为了保证释放锁操作的原子性：\n\n> **Atomicity of scripts**\n>\n> Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.\n>\n> However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.\n\n获取锁时，给定超时时间是１s，避免出现死锁现象。\n\n使用redis分布式锁的问题是，失效时间的设置。如果设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。\n\n#### 分布式锁-基于RedLock\n\nRedlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。\n\n算法的步骤如下：\n\n1. 客户端获取当前时间，以毫秒为单位；\n2. 客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用；\n3. 客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁；\n4. 客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间；\n5. 如果客户端获取锁失败了，客户端会依次删除所有的锁。\n\n使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。\n\n#### 分布式锁-基于Zookeeper\n\nZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，更新是全序的。\n\n ![2018-05-06T184140](/images/2018-05-06T184140.png)\n\n上图为系统架构，左边区域表示一个ZooKeeper集群，locker是ZooKeeper的一个持久节点，node\\_1、node\\_2、node\\_3是locker这个持久节点下面的临时顺序节点。client\\_1、client\\_2、client\\_3表示多个客户端，Share\\_Service表示需要互斥访问的共享资源。\n\nZookeeper实现分布式锁的思路：\n\n1. 多个客户端竞争创建 lock 临时节点；\n2. 其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher；\n3. 持有锁的客户端删除 lock 节点或该客户端崩溃，由 Zookeeper 删除 lock 节点；\n4. 其他客户端获得 lock 节点被删除的通知；\n5. 重复上述4个步骤，直至无客户端在等待获取锁了。\n\n ![2018-05-06T190223](/images/2018-05-06T190223.png)\n\nZookeeper方式性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。\n\n由于目前理解有限，一些细节需要进一步确定和实践，不当之处请指正。\n\n\n\nRead More:\n\n> [分布式锁的几种实现方式](https://www.cnblogs.com/austinspark-jessylu/p/8043726.html) [Redis分布式锁的正确实现方式（Java版）](http://www.importnew.com/27477.html) [基于Redis的分布式锁到底安全吗（上）？](https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w) [分布式锁看这篇就够了](http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/#%E5%9F%BA%E4%BA%8E-Redlock-%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81) [基于 Zookeeper 的分布式锁实现](https://segmentfault.com/a/1190000010895869) [Redis命令参考](http://redisdoc.com/) [Redis Lua scripting](https://redis.io/commands/eval) [mysql document](https://dev.mysql.com/doc/)","slug":"distlock","published":1,"updated":"2020-10-25T06:43:32.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueqc300dfmolcva26pn6e","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔者同样遇到了这种问题：</p>\n<blockquote>\n<p>高并发情境下数据库的数据重复写入问题</p>\n</blockquote>\n<p>数据的重复写入实际上就是对共享资源的竞争操作，导致数据出现不一致，给线上业务带来影响。解决这种问题，最直接的思路是在数据库层面寻求解决方案，借助数据库的锁机制，或者在业务上通过数据库语句的限制避免重复数据，如：</p>\n<ul>\n<li>insert ignore into 语句；</li>\n<li>on duplicate key update 语句；</li>\n<li>insert … select … where not exist 语句；</li>\n<li>replace into 语句。</li>\n</ul>\n<p>以上语句在简单业务中避免mysql插入重复数据是有一定效果的，但是在复杂场景下并不能满足需求。因为高并发业务除了要求数据一致性外，对性能、稳定性的要求也较高，单纯使用数据库语句很难达到预期效果，因此，从单机锁发展而来的分布式锁提供了一种新的解决方案。</p>\n<h3 id=\"SQL语句解决方案\"><a href=\"#SQL语句解决方案\" class=\"headerlink\" title=\"SQL语句解决方案\"></a>SQL语句解决方案</h3><p>insert ignore into</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]</span><br><span class=\"line\">    [INTO] tbl_name</span><br><span class=\"line\">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class=\"line\">    [(col_name [, col_name] ...)]</span><br><span class=\"line\">    SELECT ...</span><br><span class=\"line\">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class=\"line\"></span><br><span class=\"line\">value:</span><br><span class=\"line\">    &#123;expr | DEFAULT&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assignment:</span><br><span class=\"line\">    col_name = value</span><br><span class=\"line\"></span><br><span class=\"line\">assignment_list:</span><br><span class=\"line\">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Specify <strong>IGNORE</strong> to ignore rows that would cause duplicate-key violations. </p>\n</blockquote>\n<p>通过mysql给出的官方解释：IGNORE 关键字会忽略重复键的行。当插入数据时，如出现错误（重复数据），将不返回错误，只以警告形式返回。所以使用 IGNORE 请确保语句本身没有问题，否则语句的其他错误也会被忽略掉。如果使用 IGNORE 关键字，则插入的字段必须是主键或唯一索引。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| Tables_in_openlivedb       |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| admin                      |</span><br><span class=\"line\">| auth_group                 |</span><br><span class=\"line\">| auth_group_permissions     |</span><br><span class=\"line\">| auth_permission            |</span><br><span class=\"line\">| auth_user                  |</span><br><span class=\"line\">| auth_user_groups           |</span><br><span class=\"line\">| auth_user_user_permissions |</span><br><span class=\"line\">| cmd_template               |</span><br><span class=\"line\">| cutter_node                |</span><br><span class=\"line\">| django_admin_log           |</span><br><span class=\"line\">| django_content_type        |</span><br><span class=\"line\">| django_migrations          |</span><br><span class=\"line\">| django_session             |</span><br><span class=\"line\">| flv_slice                  |</span><br><span class=\"line\">| mp4_slice                  |</span><br><span class=\"line\">| test_table                 |</span><br><span class=\"line\">| ts_slice                   |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">17 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 |                                  |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;);</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.09 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 |                                  |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test3&apos;);</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.11 sec)</span><br></pre></td></tr></table></figure>\n<p>以上操作可以看出，插入重复数据时，显示 <code>Query OK, 0 rows affected, 2 warnings (0.09 sec)</code> 表明出现了警告，当在业务中直接执行时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">am = AdminManager()</span><br><span class=\"line\">r = am.execute(&quot;select * from admin&quot;)</span><br><span class=\"line\">for i in r:</span><br><span class=\"line\">    print(i.username)</span><br><span class=\"line\">r2 = am.execute(&quot;INSERT IGNORE INTO admin (username, password) VALUES (&apos;liuxiaoyang_test2&apos;, &apos;123&apos;)&quot;)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liuxiaoyang</span><br><span class=\"line\">liuxiaoyang_test2</span><br><span class=\"line\">/usr/local/lib/python3.5/dist-packages/pymysql/cursors.py:165: Warning: (1062, &quot;Duplicate entry &apos;liuxiaoyang_test2&apos; for key &apos;username_unique&apos;&quot;)</span><br><span class=\"line\">  result = self._query(query)</span><br></pre></td></tr></table></figure>\n<p>同样返回了警告信息。</p>\n<p>on duplicate key update</p>\n<blockquote>\n<p>If you specify an <strong>ON DUPLICATE KEY UPDATE</strong> clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs.</p>\n</blockquote>\n<p>当遇到重复键时，对旧行执行 UPDATE 语句，否则插入新行。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 | 123                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;) ON DUPLICATE KEY UPDATE password=&apos;345&apos;;</span><br><span class=\"line\">Query OK, 2 rows affected, 1 warning (0.09 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 | 345                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>对于on duplicate key update语句，必需主键或唯一索引。</p>\n<p>insert … select … where not exist</p>\n<p>该方法利用了子查询，写法比较繁琐，性能较差，不推荐使用。</p>\n<p>replace into </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPLACE [LOW_PRIORITY | DELAYED]</span><br><span class=\"line\">    [INTO] tbl_name</span><br><span class=\"line\">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class=\"line\">    [(col_name [, col_name] ...)]</span><br><span class=\"line\">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class=\"line\"></span><br><span class=\"line\">value:</span><br><span class=\"line\">    &#123;expr | DEFAULT&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">value_list:</span><br><span class=\"line\">    value [, value] ...</span><br><span class=\"line\"></span><br><span class=\"line\">assignment:</span><br><span class=\"line\">    col_name = value</span><br><span class=\"line\"></span><br><span class=\"line\">assignment_list:</span><br><span class=\"line\">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. </p>\n</blockquote>\n<p>replace into 语句与insert语句类似，只不过它在插入时，如果存在主键或唯一键相同的记录，则会先删除，然后再插入新记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  5 | liuxiaoyang_test2 | 789                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; replace into admin(username, password) values(&apos;liuxiaoyang_test2&apos;, &apos;1111&apos;);</span><br><span class=\"line\">Query OK, 2 rows affected (0.10 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  6 | liuxiaoyang_test2 | 1111                             |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MySQL uses the following algorithm for REPLACE:</p>\n<ol>\n<li>try to insert the new row into the table        </li>\n<li>While the insertion fails because a duplicate-key error occurs for a primary key or unique index:<ul>\n<li>Delete from the table the conflicting row that has the duplicate key value;</li>\n<li>try again to insert the new row into the table.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>以上方法也会有些限制，如目前大多数业务的删除只是逻辑删除，并不做物理删除，在这种场景下就需要寻找其他方案。除了以上方法，mysql还提供了共享锁、排他锁等机制，mysql的锁机制会单独进行介绍，在此就不赘述。</p>\n<h3 id=\"分布式锁解决方案\"><a href=\"#分布式锁解决方案\" class=\"headerlink\" title=\"分布式锁解决方案\"></a>分布式锁解决方案</h3><h4 id=\"何为锁\"><a href=\"#何为锁\" class=\"headerlink\" title=\"何为锁\"></a>何为锁</h4><p>在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量；</p>\n<p>而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁，不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可；</p>\n<p>除了利用内存数据做锁，其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。</p>\n<h4 id=\"什么是分布式\"><a href=\"#什么是分布式\" class=\"headerlink\" title=\"什么是分布式\"></a>什么是分布式</h4><p>分布式的 CAP 理论告诉我们：</p>\n<blockquote>\n<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p>\n</blockquote>\n<p>目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。</p>\n<p>分布式场景</p>\n<blockquote>\n<p>此处主要指集群模式下，多个相同服务同时运行</p>\n</blockquote>\n<p>在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如<strong>分布式事务</strong>、<strong>分布式锁</strong>等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过线程安全队列或者其他方式解决，但是在分布式环境下，这并不是一件容易的事儿。</p>\n<ul>\n<li>分布式与单机情况下最大的不同在于其不是多线程而是<strong>多进程</strong>；</li>\n<li>多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。</li>\n</ul>\n<p>分布式锁</p>\n<ul>\n<li>当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数；</li>\n<li>与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题；</li>\n<li>分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。</li>\n</ul>\n<h4 id=\"我们需要怎样的分布式锁\"><a href=\"#我们需要怎样的分布式锁\" class=\"headerlink\" title=\"我们需要怎样的分布式锁\"></a>我们需要怎样的分布式锁</h4><ul>\n<li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； </li>\n<li>高可用的获取锁与释放锁； </li>\n<li>高性能的获取锁与释放锁； </li>\n<li>具备可重入特性； </li>\n<li>具备锁失效机制，防止死锁； </li>\n<li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</li>\n</ul>\n<h4 id=\"分布式锁-基于数据库\"><a href=\"#分布式锁-基于数据库\" class=\"headerlink\" title=\"分布式锁-基于数据库\"></a>分布式锁-基于数据库</h4><p>乐观锁 - 基于表主键唯一做分布式锁</p>\n<p>利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。</p>\n<p>这种简单的实现有以下几个问题：</p>\n<ul>\n<li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用；</li>\n<li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁；</li>\n<li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作；</li>\n<li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了；</li>\n<li>这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁；</li>\n<li>在 mysql 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。</li>\n</ul>\n<p>当然，我们也可以有其他方式解决上面的问题。</p>\n<ul>\n<li>数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上；</li>\n<li>没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍；</li>\n<li>非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功；</li>\n<li>非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了；</li>\n<li>非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁；</li>\n<li>比较好的办法是在程序中生产主键进行防重。</li>\n</ul>\n<p>乐观锁 - 基于表字段版本号做分布式锁</p>\n<p>这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。</p>\n<p>悲观锁 - 基于数据库排他锁做分布式锁</p>\n<p>在查询语句后面增加 <code>for update</code>，数据库会在查询过程中给数据库表增加排他锁 （注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上）。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p>\n<p>我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过 <code>connection.commit()</code> 操作来释放锁。</p>\n<p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p>\n<ul>\n<li>阻塞锁？ <code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功；</li>\n<li>锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</li>\n</ul>\n<p>但是还是无法直接解决数据库单点和可重入问题。虽然我们对方法字段名使用了唯一索引，并且显示使用 <code>for update</code>来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。</p>\n<p>还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。</p>\n<h4 id=\"分布式锁-基于Redis\"><a href=\"#分布式锁-基于Redis\" class=\"headerlink\" title=\"分布式锁-基于Redis\"></a>分布式锁-基于Redis</h4><p>Redis分布式锁主要使用其SETNX()、EXPIRE() 方法实现。</p>\n<blockquote>\n<p>SETNX key value : 将 <code>key</code> 的值设为 <code>value</code> ，当且仅当 <code>key</code> 不存在。若给定的 <code>key</code> 已经存在，则 ＳETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p>\n<p>EXPIRE key seconds : 为给定 <code>key</code> 设置生存时间，当 <code>key</code> 过期时(生存时间为 <code>0</code> )，它会被自动删除。</p>\n</blockquote>\n<p>但是从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p>\n<ul>\n<li><code>EX second</code> ：设置键的过期时间为 <code>second</code> 秒。 <code>SET key value EX second</code> 效果等同于 <code>SETEX key second value</code> 。</li>\n<li><code>PX millisecond</code> ：设置键的过期时间为 <code>millisecond</code> 毫秒。 <code>SET key value PX millisecond</code> 效果等同于 <code>PSETEX key millisecondvalue</code> 。</li>\n<li><code>NX</code> ：只在键不存在时，才对键进行设置操作。 <code>SET key value NX</code> 效果等同于 <code>SETNX key value</code> 。</li>\n<li><code>XX</code> ：只在键已经存在时，才对键进行设置操作。</li>\n</ul>\n<p>所以SETNX()、EXPIRE() 方法被融合进了SET方法，而<a href=\"http://redisdoc.com/string/set.html\" target=\"_blank\" rel=\"noopener\">官网</a> 给出</p>\n<blockquote>\n<p>因为 <a href=\"http://redisdoc.com/string/set.html#set\" target=\"_blank\" rel=\"noopener\">SET</a> 命令可以通过参数来实现和 <a href=\"http://redisdoc.com/string/setnx.html#setnx\" target=\"_blank\" rel=\"noopener\">SETNX</a> 、 <a href=\"http://redisdoc.com/string/setex.html#setex\" target=\"_blank\" rel=\"noopener\">SETEX</a> 和 <a href=\"http://redisdoc.com/string/psetex.html#psetex\" target=\"_blank\" rel=\"noopener\">PSETEX</a> 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除<a href=\"http://redisdoc.com/string/setnx.html#setnx\" target=\"_blank\" rel=\"noopener\">SETNX</a> 、 <a href=\"http://redisdoc.com/string/setex.html#setex\" target=\"_blank\" rel=\"noopener\">SETEX</a> 和 <a href=\"http://redisdoc.com/string/psetex.html#psetex\" target=\"_blank\" rel=\"noopener\">PSETEX</a> 这三个命令。</p>\n</blockquote>\n<p>在使用Redis实现分布式锁时，我们可以通过SET来实现。</p>\n<p>设计思路</p>\n<blockquote>\n<p>获取锁：</p>\n<ul>\n<li>调用 set 尝试获取锁，如果设置成功，表示获取到了锁；</li>\n<li>设置失败，<ul>\n<li>等待一定时间后，再次尝试获取锁；</li>\n<li>若已达到最大获取锁时间未获取到锁，获取锁失败。</li>\n</ul>\n</li>\n</ul>\n<p>释放锁：</p>\n<ul>\n<li>确保每个客户端释放的是自己的锁；</li>\n<li>确保释放锁操作的原子性。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import traceback</span><br><span class=\"line\"></span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">from lib.utils import get_logger</span><br><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT_EXPIRES = 3</span><br><span class=\"line\">ACQUIRE_TIMEOUT = 1</span><br><span class=\"line\"></span><br><span class=\"line\">lock_logger = get_logger(&quot;redis_netlock&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def dist_lock(key, client, unique_id acquire_timeout=ACQUIRE_TIMEOUT):</span><br><span class=\"line\">    key = &apos;lock_%s&apos; % key</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        t = _acquire_lock(key, client, unique_id, acquire_timeout)</span><br><span class=\"line\">        yield t</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        _release_lock(key, client, t)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _acquire_lock(key, client, unique_id, acquire_timeout):</span><br><span class=\"line\">    end = time.time() + acquire_timeout</span><br><span class=\"line\">    while time.time() &lt; end:</span><br><span class=\"line\">        if client.set(key, unique_id, ex=DEFAULT_EXPIRES, nx=True):</span><br><span class=\"line\">            return unique_id</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            gen.sleep(.01)</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _release_lock(key, client, t):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        lua_command = &quot;&quot;&quot;</span><br><span class=\"line\">            if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">            else</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">            end</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        lua_script = client.register_script(lua_command)</span><br><span class=\"line\">        lock_logger.debug(lua_script(keys=[key], args=[t]))</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        lock_logger.error(traceback.format_exc())</span><br></pre></td></tr></table></figure>\n<p>unique_id：uuid1() 提供的全球唯一值，保证每个客户端释放的是自己的锁。</p>\n<p>使用lua脚本释放锁是为了保证释放锁操作的原子性：</p>\n<blockquote>\n<p><strong>Atomicity of scripts</strong></p>\n<p>Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.</p>\n<p>However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.</p>\n</blockquote>\n<p>获取锁时，给定超时时间是１s，避免出现死锁现象。</p>\n<p>使用redis分布式锁的问题是，失效时间的设置。如果设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。</p>\n<h4 id=\"分布式锁-基于RedLock\"><a href=\"#分布式锁-基于RedLock\" class=\"headerlink\" title=\"分布式锁-基于RedLock\"></a>分布式锁-基于RedLock</h4><p>Redlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。</p>\n<p>算法的步骤如下：</p>\n<ol>\n<li>客户端获取当前时间，以毫秒为单位；</li>\n<li>客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用；</li>\n<li>客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁；</li>\n<li>客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间；</li>\n<li>如果客户端获取锁失败了，客户端会依次删除所有的锁。</li>\n</ol>\n<p>使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。</p>\n<h4 id=\"分布式锁-基于Zookeeper\"><a href=\"#分布式锁-基于Zookeeper\" class=\"headerlink\" title=\"分布式锁-基于Zookeeper\"></a>分布式锁-基于Zookeeper</h4><p>ZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，更新是全序的。</p>\n<p> <img src=\"/images/2018-05-06T184140.png\" alt=\"2018-05-06T184140\"></p>\n<p>上图为系统架构，左边区域表示一个ZooKeeper集群，locker是ZooKeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_3表示多个客户端，Share_Service表示需要互斥访问的共享资源。</p>\n<p>Zookeeper实现分布式锁的思路：</p>\n<ol>\n<li>多个客户端竞争创建 lock 临时节点；</li>\n<li>其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher；</li>\n<li>持有锁的客户端删除 lock 节点或该客户端崩溃，由 Zookeeper 删除 lock 节点；</li>\n<li>其他客户端获得 lock 节点被删除的通知；</li>\n<li><p>重复上述4个步骤，直至无客户端在等待获取锁了。</p>\n<p><img src=\"/images/2018-05-06T190223.png\" alt=\"2018-05-06T190223\"></p>\n</li>\n</ol>\n<p>Zookeeper方式性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。</p>\n<p>由于目前理解有限，一些细节需要进一步确定和实践，不当之处请指正。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/austinspark-jessylu/p/8043726.html\" target=\"_blank\" rel=\"noopener\">分布式锁的几种实现方式</a> <a href=\"http://www.importnew.com/27477.html\" target=\"_blank\" rel=\"noopener\">Redis分布式锁的正确实现方式（Java版）</a> <a href=\"https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w\" target=\"_blank\" rel=\"noopener\">基于Redis的分布式锁到底安全吗（上）？</a> <a href=\"http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/#%E5%9F%BA%E4%BA%8E-Redlock-%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\" target=\"_blank\" rel=\"noopener\">分布式锁看这篇就够了</a> <a href=\"https://segmentfault.com/a/1190000010895869\" target=\"_blank\" rel=\"noopener\">基于 Zookeeper 的分布式锁实现</a> <a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis命令参考</a> <a href=\"https://redis.io/commands/eval\" target=\"_blank\" rel=\"noopener\">Redis Lua scripting</a> <a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\">mysql document</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔者同样遇到了这种问题：</p>\n<blockquote>\n<p>高并发情境下数据库的数据重复写入问题</p>\n</blockquote>\n<p>数据的重复写入实际上就是对共享资源的竞争操作，导致数据出现不一致，给线上业务带来影响。解决这种问题，最直接的思路是在数据库层面寻求解决方案，借助数据库的锁机制，或者在业务上通过数据库语句的限制避免重复数据，如：</p>\n<ul>\n<li>insert ignore into 语句；</li>\n<li>on duplicate key update 语句；</li>\n<li>insert … select … where not exist 语句；</li>\n<li>replace into 语句。</li>\n</ul>\n<p>以上语句在简单业务中避免mysql插入重复数据是有一定效果的，但是在复杂场景下并不能满足需求。因为高并发业务除了要求数据一致性外，对性能、稳定性的要求也较高，单纯使用数据库语句很难达到预期效果，因此，从单机锁发展而来的分布式锁提供了一种新的解决方案。</p>\n<h3 id=\"SQL语句解决方案\"><a href=\"#SQL语句解决方案\" class=\"headerlink\" title=\"SQL语句解决方案\"></a>SQL语句解决方案</h3><p>insert ignore into</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]</span><br><span class=\"line\">    [INTO] tbl_name</span><br><span class=\"line\">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class=\"line\">    [(col_name [, col_name] ...)]</span><br><span class=\"line\">    SELECT ...</span><br><span class=\"line\">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class=\"line\"></span><br><span class=\"line\">value:</span><br><span class=\"line\">    &#123;expr | DEFAULT&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assignment:</span><br><span class=\"line\">    col_name = value</span><br><span class=\"line\"></span><br><span class=\"line\">assignment_list:</span><br><span class=\"line\">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Specify <strong>IGNORE</strong> to ignore rows that would cause duplicate-key violations. </p>\n</blockquote>\n<p>通过mysql给出的官方解释：IGNORE 关键字会忽略重复键的行。当插入数据时，如出现错误（重复数据），将不返回错误，只以警告形式返回。所以使用 IGNORE 请确保语句本身没有问题，否则语句的其他错误也会被忽略掉。如果使用 IGNORE 关键字，则插入的字段必须是主键或唯一索引。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| Tables_in_openlivedb       |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| admin                      |</span><br><span class=\"line\">| auth_group                 |</span><br><span class=\"line\">| auth_group_permissions     |</span><br><span class=\"line\">| auth_permission            |</span><br><span class=\"line\">| auth_user                  |</span><br><span class=\"line\">| auth_user_groups           |</span><br><span class=\"line\">| auth_user_user_permissions |</span><br><span class=\"line\">| cmd_template               |</span><br><span class=\"line\">| cutter_node                |</span><br><span class=\"line\">| django_admin_log           |</span><br><span class=\"line\">| django_content_type        |</span><br><span class=\"line\">| django_migrations          |</span><br><span class=\"line\">| django_session             |</span><br><span class=\"line\">| flv_slice                  |</span><br><span class=\"line\">| mp4_slice                  |</span><br><span class=\"line\">| test_table                 |</span><br><span class=\"line\">| ts_slice                   |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">17 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 |                                  |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;);</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.09 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 |                                  |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test3&apos;);</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.11 sec)</span><br></pre></td></tr></table></figure>\n<p>以上操作可以看出，插入重复数据时，显示 <code>Query OK, 0 rows affected, 2 warnings (0.09 sec)</code> 表明出现了警告，当在业务中直接执行时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">am = AdminManager()</span><br><span class=\"line\">r = am.execute(&quot;select * from admin&quot;)</span><br><span class=\"line\">for i in r:</span><br><span class=\"line\">    print(i.username)</span><br><span class=\"line\">r2 = am.execute(&quot;INSERT IGNORE INTO admin (username, password) VALUES (&apos;liuxiaoyang_test2&apos;, &apos;123&apos;)&quot;)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liuxiaoyang</span><br><span class=\"line\">liuxiaoyang_test2</span><br><span class=\"line\">/usr/local/lib/python3.5/dist-packages/pymysql/cursors.py:165: Warning: (1062, &quot;Duplicate entry &apos;liuxiaoyang_test2&apos; for key &apos;username_unique&apos;&quot;)</span><br><span class=\"line\">  result = self._query(query)</span><br></pre></td></tr></table></figure>\n<p>同样返回了警告信息。</p>\n<p>on duplicate key update</p>\n<blockquote>\n<p>If you specify an <strong>ON DUPLICATE KEY UPDATE</strong> clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs.</p>\n</blockquote>\n<p>当遇到重复键时，对旧行执行 UPDATE 语句，否则插入新行。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 | 123                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;) ON DUPLICATE KEY UPDATE password=&apos;345&apos;;</span><br><span class=\"line\">Query OK, 2 rows affected, 1 warning (0.09 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  4 | liuxiaoyang_test2 | 345                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>对于on duplicate key update语句，必需主键或唯一索引。</p>\n<p>insert … select … where not exist</p>\n<p>该方法利用了子查询，写法比较繁琐，性能较差，不推荐使用。</p>\n<p>replace into </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPLACE [LOW_PRIORITY | DELAYED]</span><br><span class=\"line\">    [INTO] tbl_name</span><br><span class=\"line\">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class=\"line\">    [(col_name [, col_name] ...)]</span><br><span class=\"line\">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class=\"line\"></span><br><span class=\"line\">value:</span><br><span class=\"line\">    &#123;expr | DEFAULT&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">value_list:</span><br><span class=\"line\">    value [, value] ...</span><br><span class=\"line\"></span><br><span class=\"line\">assignment:</span><br><span class=\"line\">    col_name = value</span><br><span class=\"line\"></span><br><span class=\"line\">assignment_list:</span><br><span class=\"line\">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. </p>\n</blockquote>\n<p>replace into 语句与insert语句类似，只不过它在插入时，如果存在主键或唯一键相同的记录，则会先删除，然后再插入新记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  5 | liuxiaoyang_test2 | 789                              |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; replace into admin(username, password) values(&apos;liuxiaoyang_test2&apos;, &apos;1111&apos;);</span><br><span class=\"line\">Query OK, 2 rows affected (0.10 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from admin;</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">| id | username          | password                         |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</span><br><span class=\"line\">|  6 | liuxiaoyang_test2 | 1111                             |</span><br><span class=\"line\">+----+-------------------+----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MySQL uses the following algorithm for REPLACE:</p>\n<ol>\n<li>try to insert the new row into the table        </li>\n<li>While the insertion fails because a duplicate-key error occurs for a primary key or unique index:<ul>\n<li>Delete from the table the conflicting row that has the duplicate key value;</li>\n<li>try again to insert the new row into the table.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>以上方法也会有些限制，如目前大多数业务的删除只是逻辑删除，并不做物理删除，在这种场景下就需要寻找其他方案。除了以上方法，mysql还提供了共享锁、排他锁等机制，mysql的锁机制会单独进行介绍，在此就不赘述。</p>\n<h3 id=\"分布式锁解决方案\"><a href=\"#分布式锁解决方案\" class=\"headerlink\" title=\"分布式锁解决方案\"></a>分布式锁解决方案</h3><h4 id=\"何为锁\"><a href=\"#何为锁\" class=\"headerlink\" title=\"何为锁\"></a>何为锁</h4><p>在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量；</p>\n<p>而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁，不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可；</p>\n<p>除了利用内存数据做锁，其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。</p>\n<h4 id=\"什么是分布式\"><a href=\"#什么是分布式\" class=\"headerlink\" title=\"什么是分布式\"></a>什么是分布式</h4><p>分布式的 CAP 理论告诉我们：</p>\n<blockquote>\n<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p>\n</blockquote>\n<p>目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。</p>\n<p>分布式场景</p>\n<blockquote>\n<p>此处主要指集群模式下，多个相同服务同时运行</p>\n</blockquote>\n<p>在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如<strong>分布式事务</strong>、<strong>分布式锁</strong>等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过线程安全队列或者其他方式解决，但是在分布式环境下，这并不是一件容易的事儿。</p>\n<ul>\n<li>分布式与单机情况下最大的不同在于其不是多线程而是<strong>多进程</strong>；</li>\n<li>多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。</li>\n</ul>\n<p>分布式锁</p>\n<ul>\n<li>当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数；</li>\n<li>与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题；</li>\n<li>分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。</li>\n</ul>\n<h4 id=\"我们需要怎样的分布式锁\"><a href=\"#我们需要怎样的分布式锁\" class=\"headerlink\" title=\"我们需要怎样的分布式锁\"></a>我们需要怎样的分布式锁</h4><ul>\n<li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； </li>\n<li>高可用的获取锁与释放锁； </li>\n<li>高性能的获取锁与释放锁； </li>\n<li>具备可重入特性； </li>\n<li>具备锁失效机制，防止死锁； </li>\n<li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</li>\n</ul>\n<h4 id=\"分布式锁-基于数据库\"><a href=\"#分布式锁-基于数据库\" class=\"headerlink\" title=\"分布式锁-基于数据库\"></a>分布式锁-基于数据库</h4><p>乐观锁 - 基于表主键唯一做分布式锁</p>\n<p>利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。</p>\n<p>这种简单的实现有以下几个问题：</p>\n<ul>\n<li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用；</li>\n<li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁；</li>\n<li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作；</li>\n<li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了；</li>\n<li>这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁；</li>\n<li>在 mysql 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。</li>\n</ul>\n<p>当然，我们也可以有其他方式解决上面的问题。</p>\n<ul>\n<li>数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上；</li>\n<li>没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍；</li>\n<li>非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功；</li>\n<li>非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了；</li>\n<li>非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁；</li>\n<li>比较好的办法是在程序中生产主键进行防重。</li>\n</ul>\n<p>乐观锁 - 基于表字段版本号做分布式锁</p>\n<p>这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。</p>\n<p>悲观锁 - 基于数据库排他锁做分布式锁</p>\n<p>在查询语句后面增加 <code>for update</code>，数据库会在查询过程中给数据库表增加排他锁 （注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上）。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p>\n<p>我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过 <code>connection.commit()</code> 操作来释放锁。</p>\n<p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p>\n<ul>\n<li>阻塞锁？ <code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功；</li>\n<li>锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</li>\n</ul>\n<p>但是还是无法直接解决数据库单点和可重入问题。虽然我们对方法字段名使用了唯一索引，并且显示使用 <code>for update</code>来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。</p>\n<p>还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。</p>\n<h4 id=\"分布式锁-基于Redis\"><a href=\"#分布式锁-基于Redis\" class=\"headerlink\" title=\"分布式锁-基于Redis\"></a>分布式锁-基于Redis</h4><p>Redis分布式锁主要使用其SETNX()、EXPIRE() 方法实现。</p>\n<blockquote>\n<p>SETNX key value : 将 <code>key</code> 的值设为 <code>value</code> ，当且仅当 <code>key</code> 不存在。若给定的 <code>key</code> 已经存在，则 ＳETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p>\n<p>EXPIRE key seconds : 为给定 <code>key</code> 设置生存时间，当 <code>key</code> 过期时(生存时间为 <code>0</code> )，它会被自动删除。</p>\n</blockquote>\n<p>但是从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p>\n<ul>\n<li><code>EX second</code> ：设置键的过期时间为 <code>second</code> 秒。 <code>SET key value EX second</code> 效果等同于 <code>SETEX key second value</code> 。</li>\n<li><code>PX millisecond</code> ：设置键的过期时间为 <code>millisecond</code> 毫秒。 <code>SET key value PX millisecond</code> 效果等同于 <code>PSETEX key millisecondvalue</code> 。</li>\n<li><code>NX</code> ：只在键不存在时，才对键进行设置操作。 <code>SET key value NX</code> 效果等同于 <code>SETNX key value</code> 。</li>\n<li><code>XX</code> ：只在键已经存在时，才对键进行设置操作。</li>\n</ul>\n<p>所以SETNX()、EXPIRE() 方法被融合进了SET方法，而<a href=\"http://redisdoc.com/string/set.html\" target=\"_blank\" rel=\"noopener\">官网</a> 给出</p>\n<blockquote>\n<p>因为 <a href=\"http://redisdoc.com/string/set.html#set\" target=\"_blank\" rel=\"noopener\">SET</a> 命令可以通过参数来实现和 <a href=\"http://redisdoc.com/string/setnx.html#setnx\" target=\"_blank\" rel=\"noopener\">SETNX</a> 、 <a href=\"http://redisdoc.com/string/setex.html#setex\" target=\"_blank\" rel=\"noopener\">SETEX</a> 和 <a href=\"http://redisdoc.com/string/psetex.html#psetex\" target=\"_blank\" rel=\"noopener\">PSETEX</a> 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除<a href=\"http://redisdoc.com/string/setnx.html#setnx\" target=\"_blank\" rel=\"noopener\">SETNX</a> 、 <a href=\"http://redisdoc.com/string/setex.html#setex\" target=\"_blank\" rel=\"noopener\">SETEX</a> 和 <a href=\"http://redisdoc.com/string/psetex.html#psetex\" target=\"_blank\" rel=\"noopener\">PSETEX</a> 这三个命令。</p>\n</blockquote>\n<p>在使用Redis实现分布式锁时，我们可以通过SET来实现。</p>\n<p>设计思路</p>\n<blockquote>\n<p>获取锁：</p>\n<ul>\n<li>调用 set 尝试获取锁，如果设置成功，表示获取到了锁；</li>\n<li>设置失败，<ul>\n<li>等待一定时间后，再次尝试获取锁；</li>\n<li>若已达到最大获取锁时间未获取到锁，获取锁失败。</li>\n</ul>\n</li>\n</ul>\n<p>释放锁：</p>\n<ul>\n<li>确保每个客户端释放的是自己的锁；</li>\n<li>确保释放锁操作的原子性。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import traceback</span><br><span class=\"line\"></span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">from lib.utils import get_logger</span><br><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT_EXPIRES = 3</span><br><span class=\"line\">ACQUIRE_TIMEOUT = 1</span><br><span class=\"line\"></span><br><span class=\"line\">lock_logger = get_logger(&quot;redis_netlock&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def dist_lock(key, client, unique_id acquire_timeout=ACQUIRE_TIMEOUT):</span><br><span class=\"line\">    key = &apos;lock_%s&apos; % key</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        t = _acquire_lock(key, client, unique_id, acquire_timeout)</span><br><span class=\"line\">        yield t</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        _release_lock(key, client, t)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _acquire_lock(key, client, unique_id, acquire_timeout):</span><br><span class=\"line\">    end = time.time() + acquire_timeout</span><br><span class=\"line\">    while time.time() &lt; end:</span><br><span class=\"line\">        if client.set(key, unique_id, ex=DEFAULT_EXPIRES, nx=True):</span><br><span class=\"line\">            return unique_id</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            gen.sleep(.01)</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _release_lock(key, client, t):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        lua_command = &quot;&quot;&quot;</span><br><span class=\"line\">            if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">            else</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">            end</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        lua_script = client.register_script(lua_command)</span><br><span class=\"line\">        lock_logger.debug(lua_script(keys=[key], args=[t]))</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        lock_logger.error(traceback.format_exc())</span><br></pre></td></tr></table></figure>\n<p>unique_id：uuid1() 提供的全球唯一值，保证每个客户端释放的是自己的锁。</p>\n<p>使用lua脚本释放锁是为了保证释放锁操作的原子性：</p>\n<blockquote>\n<p><strong>Atomicity of scripts</strong></p>\n<p>Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.</p>\n<p>However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.</p>\n</blockquote>\n<p>获取锁时，给定超时时间是１s，避免出现死锁现象。</p>\n<p>使用redis分布式锁的问题是，失效时间的设置。如果设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。</p>\n<h4 id=\"分布式锁-基于RedLock\"><a href=\"#分布式锁-基于RedLock\" class=\"headerlink\" title=\"分布式锁-基于RedLock\"></a>分布式锁-基于RedLock</h4><p>Redlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。</p>\n<p>算法的步骤如下：</p>\n<ol>\n<li>客户端获取当前时间，以毫秒为单位；</li>\n<li>客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用；</li>\n<li>客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁；</li>\n<li>客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间；</li>\n<li>如果客户端获取锁失败了，客户端会依次删除所有的锁。</li>\n</ol>\n<p>使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。</p>\n<h4 id=\"分布式锁-基于Zookeeper\"><a href=\"#分布式锁-基于Zookeeper\" class=\"headerlink\" title=\"分布式锁-基于Zookeeper\"></a>分布式锁-基于Zookeeper</h4><p>ZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，更新是全序的。</p>\n<p> <img src=\"/images/2018-05-06T184140.png\" alt=\"2018-05-06T184140\"></p>\n<p>上图为系统架构，左边区域表示一个ZooKeeper集群，locker是ZooKeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_3表示多个客户端，Share_Service表示需要互斥访问的共享资源。</p>\n<p>Zookeeper实现分布式锁的思路：</p>\n<ol>\n<li>多个客户端竞争创建 lock 临时节点；</li>\n<li>其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher；</li>\n<li>持有锁的客户端删除 lock 节点或该客户端崩溃，由 Zookeeper 删除 lock 节点；</li>\n<li>其他客户端获得 lock 节点被删除的通知；</li>\n<li><p>重复上述4个步骤，直至无客户端在等待获取锁了。</p>\n<p><img src=\"/images/2018-05-06T190223.png\" alt=\"2018-05-06T190223\"></p>\n</li>\n</ol>\n<p>Zookeeper方式性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。</p>\n<p>由于目前理解有限，一些细节需要进一步确定和实践，不当之处请指正。</p>\n<p>Read More:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/austinspark-jessylu/p/8043726.html\" target=\"_blank\" rel=\"noopener\">分布式锁的几种实现方式</a> <a href=\"http://www.importnew.com/27477.html\" target=\"_blank\" rel=\"noopener\">Redis分布式锁的正确实现方式（Java版）</a> <a href=\"https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w\" target=\"_blank\" rel=\"noopener\">基于Redis的分布式锁到底安全吗（上）？</a> <a href=\"http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/#%E5%9F%BA%E4%BA%8E-Redlock-%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\" target=\"_blank\" rel=\"noopener\">分布式锁看这篇就够了</a> <a href=\"https://segmentfault.com/a/1190000010895869\" target=\"_blank\" rel=\"noopener\">基于 Zookeeper 的分布式锁实现</a> <a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener\">Redis命令参考</a> <a href=\"https://redis.io/commands/eval\" target=\"_blank\" rel=\"noopener\">Redis Lua scripting</a> <a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\">mysql document</a></p>\n</blockquote>\n"},{"title":"Transitions-Python状态机库","date":"2017-05-26T13:12:18.000Z","_content":"\n由于项目需要，使用到了Python的状态机库 [Transitions](https://github.com/tyarkoni/transitions) ，但GitHub上是英文文档，使用过后觉得还不错，遂手工翻译一下，加深理解，水平有限，如有翻译不当之处请Email (kevin920902@gmail.com) 我。\n\n## Transitions\n\nPython 实现的轻量级、面向对象状态机，兼容Python 2.7+ 和 Python 3.0+。\n\n## 安装方法\n\n方法一\n\n```\npip install transitions\n```\n\n方法二\n\n直接在 [GitHub](https://github.com/tyarkoni/transitions) 上clone仓库到本地，然后\n\n```\npython setup.py install\n```\n\n## 快速入门\n\n俗话说，接触一个新的工具库，100页的API文档、一千字的描述文档或更多的解释说明都不如一个简单的Demo，虽然这个说法我们无法验证真伪，但下面的例子会让你快速了解 `Transitions` 的基本用法\n\n```\nfrom transitions import Machine\nimport random\n\nclass NarcolepticSuperhero(object):\n\n    # Define some states. Most of the time, narcoleptic superheroes are just like\n    # everyone else. Except for...\n    states = ['asleep', 'hanging out', 'hungry', 'sweaty', 'saving the world']\n\n    def __init__(self, name):\n\n        # No anonymous superheroes on my watch! Every narcoleptic superhero gets\n        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.\n        self.name = name\n\n        # What have we accomplished today?\n        self.kittens_rescued = 0\n\n        # Initialize the state machine\n        self.machine = Machine(model=self, states=NarcolepticSuperhero.states, initial='asleep')\n\n        # Add some transitions. We could also define these using a static list of\n        # dictionaries, as we did with states above, and then pass the list to\n        # the Machine initializer as the transitions= argument.\n\n        # At some point, every superhero must rise and shine.\n        self.machine.add_transition(trigger='wake_up', source='asleep', dest='hanging out')\n\n        # Superheroes need to keep in shape.\n        self.machine.add_transition('work_out', 'hanging out', 'hungry')\n\n        # Those calories won't replenish themselves!\n        self.machine.add_transition('eat', 'hungry', 'hanging out')\n\n        # Superheroes are always on call. ALWAYS. But they're not always\n        # dressed in work-appropriate clothing.\n        self.machine.add_transition('distress_call', '*', 'saving the world',\n                         before='change_into_super_secret_costume')\n\n        # When they get off work, they're all sweaty and disgusting. But before\n        # they do anything else, they have to meticulously log their latest\n        # escapades. Because the legal department says so.\n        self.machine.add_transition('complete_mission', 'saving the world', 'sweaty',\n                         after='update_journal')\n\n        # Sweat is a disorder that can be remedied with water.\n        # Unless you've had a particularly long day, in which case... bed time!\n        self.machine.add_transition('clean_up', 'sweaty', 'asleep', conditions=['is_exhausted'])\n        self.machine.add_transition('clean_up', 'sweaty', 'hanging out')\n\n        # Our NarcolepticSuperhero can fall asleep at pretty much any time.\n        self.machine.add_transition('nap', '*', 'asleep')\n\n    def update_journal(self):\n        \"\"\" Dear Diary, today I saved Mr. Whiskers. Again. \"\"\"\n        self.kittens_rescued += 1\n\n    def is_exhausted(self):\n        \"\"\" Basically a coin toss. \"\"\"\n        return random.random() < 0.5\n\n    def change_into_super_secret_costume(self):\n        print(\"Beauty, eh?\")\n```\n\n现在我们已经建立了一个 `NarcolepticSuperhero` 状态机，来看看具体怎么使用吧\n\n```\n>>> batman = NarcolepticSuperhero(\"Batman\")\n>>> batman.state\n'asleep'\n\n>>> batman.wake_up()\n>>> batman.state\n'hanging out'\n\n>>> batman.nap()\n>>> batman.state\n'asleep'\n\n>>> batman.clean_up()\nMachineError: \"Can't trigger event clean_up from state asleep!\"\n\n>>> batman.wake_up()\n>>> batman.work_out()\n>>> batman.state\n'hungry'\n\n# Batman still hasn't done anything useful...\n>>> batman.kittens_rescued\n0\n\n# We now take you live to the scene of a horrific kitten entreement...\n>>> batman.distress_call()\n'Beauty, eh?'\n>>> batman.state\n'saving the world'\n\n# Back to the crib.\n>>> batman.complete_mission()\n>>> batman.state\n'sweaty'\n\n>>> batman.clean_up()\n>>> batman.state\n'asleep'   # Too tired to shower!\n\n# Another productive day, Alfred.\n>>> batman.kittens_rescued\n1\n```\n\n## 详细文档\n\n### 基本初始化方式\n\n使状态机正常运行非常简单。 假设你有一个对象 `lump` ( `Matter` 类的一个实例) ，并且你想要管理它的状态：\n\n```\nclass Matter(object):\n    pass\n\nlump = Matter()\n```\n\n我们将 `lump` 绑定到状态机上来初始化一个**最小状态机**\n\n```\nfrom transitions import Machine\nmachine = Machine(model=lump, states=['solid', 'liquid', 'gas', 'plasma'], initial='solid')\n\n# Lump now has state!\nlump.state\n>>> 'solid'\n```\n\n 之所以称之为**最小状态机**，因为这种状态机在技术上是可操作的，状态机初试状态为 `solid` ，但因为我们没有增加任何的转移动作(transitions：这应该是个动词，我在这翻译为转移动作)， 所以它实际上什么也没做。\n\n下面我们来定义更多的状态和转移动作\n\n```\n# The states\nstates=['solid', 'liquid', 'gas', 'plasma']\n\n# And some transitions between states. We're lazy, so we'll leave out\n# the inverse phase transitions (freezing, condensation, etc.).\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid' },\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas' },\n    { 'trigger': 'sublimate', 'source': 'solid', 'dest': 'gas' },\n    { 'trigger': 'ionize', 'source': 'gas', 'dest': 'plasma' }\n]\n\n# Initialize\nmachine = Machine(lump, states=states, transitions=transitions, initial='liquid')\n\n# Now lump maintains state...\nlump.state\n>>> 'liquid'\n\n# And that state can change...\nlump.evaporate()\nlump.state\n>>> 'gas'\nlump.trigger('ionize')\nlump.state\n>>> 'plasma'\n```\n\n**注意**：我们为 `Matter`  实例 `lump` 绑定了 `evaporate()`  `ionize()` 等方法，每个方法触发相应的状态转换，你不必在任何地方明确定义这些方法，每个转换的名称通过绑定到模型上来传递给状态机初始化函数(`lump`)。`evaporate()`  `ionize()`另等方法都是静态来触发状态转移，如果我们想实现动态转移，可以使用`trigger` 方法。\n\n### 状态集\n\n毫无疑问，状态机的核心是状态集，上述介绍中我们通过传递给 `Machine` 初始化函数字符串列表来定义有效的模型状态，但是在 `Machine` 内部，状态以 `State` 对象的形式存储。\n\n我们可以通过多种方式初始化和跟新状态，比如：\n\n-  传递一个给定状态名的字符串给 `Machine` 初始化函数；\n-  直接初始化每个新的 `State` 对象；\n-  传递具有初始化参数的字典。\n\n以下代码片段说明了实现相同目标的几种方法\n\n```\n# Create a list of 3 states to pass to the Machine\n# initializer. We can mix types; in this case, we\n# pass one State, one string, and one dict.\nstates = [\n    State(name='solid'),\n    'liquid',\n    { 'name': 'gas'}\n    ]\nmachine = Machine(lump, states)\n\n# This alternative example illustrates more explicit\n# addition of states and state callbacks, but the net\n# result is identical to the above.\nmachine = Machine(lump)\nsolid = State('solid')\nliquid = State('liquid')\ngas = State('gas')\nmachine.add_states([solid, liquid, gas])\n```\n\n#### 回调方法\n\n我们可以给一个状态添加一系列的”进入“和”退出“的回调函数，还可以在初始化期间指定回调，或者稍后再添加回调。\n\n为方便起见，每当新的状态被添加到 `Machine` 中时，方法 `on_enter_«state name»` 和 `on_exit_«state name»` 都是在 `Machine` 上（而不是 `Model` 上）上动态创建的，并且允许我们动态地添加新的进入和退出回调函数。\n\n```\n# Our old Matter class, now with  a couple of new methods we\n# can trigger when entering or exit states.\nclass Matter(object):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n\nlump = Matter()\n\n# Same states as above, but now we give StateA an exit callback\nstates = [\n    State(name='solid', on_exit=['say_goodbye']),\n    'liquid',\n    { 'name': 'gas' }\n    ]\n\nmachine = Machine(lump, states=states)\nmachine.add_transition('sublimate', 'solid', 'gas')\n\n# Callbacks can also be added after initialization using\n# the dynamically added on_enter_ and on_exit_ methods.\n# Note that the initial call to add the callback is made\n# on the Machine and not on the model.\nmachine.on_enter_gas('say_hello')\n\n# Test out the callbacks...\nmachine.set_state('solid')\nlump.sublimate()\n>>> 'goodbye, old state!'\n>>> 'hello, new state!'\n```\n\n**注意**：首次初始化状态机时， `on_enter_«state name»` 回调函数是不会触发的。例如，我们定义了一个回调函数 `on_enter_A()` ，并给状态机初始化状态为 `initial='A'` ，`on_enter_A()` 会在下次进入状态A的时候出发，首次并不会触发。如果我们想在初始化的时候就触发 `on_enter_A()` 方法，可以创建一个虚拟的初始状态，然后调用 `to_A()` 方法，而不是 `__init__` 方法。 \n\n除了在初始化状态机传递回调或动态添加回调，为增加代码的清晰度，还可以在模型类本身中定义回调。例如\n\n```\nclass Matter(object):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n    def on_enter_A(self): print(\"We've just entered state A!\")\n\nlump = Matter()\nmachine = Machine(lump, states=['A', 'B', 'C'])\n```\n\n现在，任何时候 `lump` 转移到状态A，类`Matter` 中的 `on_enter_A()` 方法总是会触发。\n\n#### 检查状态\n\n我们可以随时通过以下方式检查模型的当前状态\n\n- 检查 `.state` 属性；\n- 调用 `is_«state name»()`  方法。\n\n如果要检索当前状态的实际状态对象，可以通过 `Machine` 实例的 `get_state()` 方法来实现\n\n```\nlump.state\n>>> 'solid'\nlump.is_gas()\n>>> False\nlump.is_solid()\n>>> True\nmachine.get_state(lump.state).name\n>>> 'solid'\n```\n\n### 状态转换\n\n上面的一些例子已经说明了状态转移的使用，但是在这里我们将更详细地探讨它们。\n\n与状态一样，每个状态转换在内部用 `Transitions` 对象来表示，我们可以传递一个字典或字典列表来快速初始化状态转换集合。\n\n如上面我们已经写过的\n\n```\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid' },\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas' },\n    { 'trigger': 'sublimate', 'source': 'solid', 'dest': 'gas' },\n    { 'trigger': 'ionize', 'source': 'gas', 'dest': 'plasma' }\n]\nmachine = Machine(model=Matter(), states=states, transitions=transitions)\n```\n\n使用字典定义转换有利于代码的清晰，但显得比较笨重。比较简单的方法是使用列表定义转换，只需确保每个列表中的元素与 `Transition` 初始化中的位置参数的顺序相同(比如 `trigger`, `source`, `destination ` 等)\n\n我们可以这样定义转换\n\n```\ntransitions = [\n    ['melt', 'solid', 'liquid'],\n    ['evaporate', 'liquid', 'gas'],\n    ['sublimate', 'solid', 'gas'],\n    ['ionize', 'gas', 'plasma']\n]\n```\n\n另外，我们也可以在状态机初始化之后添加转换\n\n```\nmachine = Machine(model=lump, states=states, initial='solid')\nmachine.add_transition('melt', source='solid', dest='liquid')\n```\n\n `trigger` 参数定义了绑定到模型上的触发方法的名称，当回调这个方法的时候，状态机会执行相应的状态转换。\n\n```\n>>> lump.melt()\n>>> lump.state\n'liquid'\n```\n\n当我们调用非法的转换时，`Machine` 会抛出异常\n\n```\n>>> lump.to_gas()\n>>> # This won't work because only objects in a solid state can melt\n>>> lump.melt()\ntransitions.core.MachineError: \"Can't trigger event melt from state gas!\"\n```\n\n这种做法通常是可取的，因为它有助于提醒代码中的问题。但是在某些情况下，我们希望忽略这些非法转换，这时可以设置 `ignore_invalid_triggers=True` (可以全部忽略，也可忽略特定一条)\n\n```\n>>> # Globally suppress invalid trigger exceptions\n>>> m = Machine(lump, states, initial='solid', ignore_invalid_triggers=True)\n>>> # ...or suppress for only one group of states\n>>> states = ['new_state1', 'new_state2']\n>>> m.add_states(states, ignore_invalid_triggers=True)\n>>> # ...or even just for a single state. Here, exceptions will only be suppressed when the current state is A.\n>>> states = [State('A', ignore_invalid_triggers=True), 'B', 'C']\n>>> m = Machine(lump, states)\n```\n\n如果在做状态转换之前，希望知道在当前状态下，哪些是合法的转换，可以使用 `get_triggers()` 方法\n\n```\nm.get_triggers('solid')\n>>> ['melt', 'sublimate']\nm.get_triggers('liquid')\n>>> ['evaporate']\nm.get_triggers('plasma')\n>>> []\n# you can also query several states at once\nm.get_triggers('solid', 'liquid', 'gas', 'plasma')\n>>> ['melt', 'evaporate', 'sublimate', 'ionize']\n```\n\n#### 自动转换所有状态\n\n除了显式添加的任何转换之外，每当将状态添加到 `Machine` 实例时，都会自动创建一个 `to_«state»()` 方法，该方法无论状态机当前处于哪种状态，都会转换到目标状态。\n\n```\nlump.to_liquid()\nlump.state\n>>> 'liquid'\nlump.to_solid()\nlump.state\n>>> 'solid'\n```\n\n我们可以在状态机初始化的时候设置 `auto_transitions=False` 禁用这个功能。\n\n#### 多状态转换\n\n给定的触发器可以附加到多个转换，其中一些可以在相同的状态下潜在地开始或结束。比如\n\n```\nmachine.add_transition('transmogrify', ['solid', 'liquid', 'gas'], 'plasma')\nmachine.add_transition('transmogrify', 'plasma', 'solid')\n# This next transition will never execute\nmachine.add_transition('transmogrify', 'plasma', 'gas')\n```\n\n在这种情况下，如果当前状态是 `plasma` 调用 `transmogrify()` ，会转换到 `solid` 状态，然后继续转换到 `plasma` 状态。**注意**：只有第一个匹配的转换将执行，因此，上述最后一行中定义的转换将不会做任何事情。\n\n我们还可以通过使用 `*` 通配符来引发触发器从所有状态转换到特定状态\n\n```\nmachine.add_transition('to_liquid', '*', 'liquid')\n```\n\n一个反身触发（触发器具有与源和目标相同的状态）可以使用“=”来表示目的状态，比如通过 `touch` 触发，`solid` 的目标状态为自身。如果我们希望同一个反身触发器应用到多个状态中，使用“=”是比较方便的。\n\n```\nmachine.add_transition('touch', ['liquid', 'gas', 'plasma'], '=', after='change_shape')\n```\n\n通过上面的语句， `'liquid', 'gas', 'plasma'` 三个状态通过 `touch` 触发器，可以到达的目的状态分别是 `'liquid', 'gas', 'plasma'` 。\n\n#### 有序转换\n\n比如我们现在有这样一个需求，状态的转换是遵循自定义的序列的，如给定状态 `['A', 'B', 'C']`，我们可能需要这样的状态转换 `A → B, B → C, C → A` （没有其他的非法转换）。为了实现这个功能，`Transitions` 在 `Machine` 类中提供了 `add_ordered_transitions()` 方法\n\n```\nstates = ['A', 'B', 'C']\n # See the \"alternative initialization\" section for an explanation of the 1st argument to init\nmachine = Machine(states=states, initial='A')\nmachine.add_ordered_transitions()\nmachine.next_state()\nprint(machine.state)\n>>> 'B'\n# We can also define a different order of transitions\nmachine = Machine(states=states, initial='A')\nmachine.add_ordered_transitions(['A', 'C', 'B'])\nmachine.next_state()\nprint(machine.state)\n>>> 'C'\n```\n\n#### 排队转换\n\nTransitions中的默认行为是立即处理事件。也就是说，调用绑定在 `after` 上的回调函数之前， `on_enter` 方法中的事件会预先处理。\n\n```\ndef go_to_C():\n    global machine\n    machine.to_C()\n\ndef after_advance():\n    print(\"I am in state B now!\")\n\ndef entering_C():\n    print(\"I am in state C now!\")\n\nstates = ['A', 'B', 'C']\nmachine = Machine(states=states)\n\n# we want a message when state transition to B has been completed\nmachine.add_transition('advance', 'A', 'B', after=after_advance)\n\n# call transition from state B to state C\nmachine.on_enter_B(go_to_C)\n\n# we also want a message when entering state C\nmachine.on_enter_C(entering_C)\nmachine.advance()\n>>> 'I am in state C now!'\n>>> 'I am in state B now!' # what?\n```\n\n上述状态机的执行顺序为：\n\n```\nprepare -> before -> on_enter_B -> on_enter_C -> after.\n```\n\n如果启用排队处理，则在触发下一个转换之前，转换将完成：\n\n```\nmachine = Machine(states=states, queued=True)\n...\nmachine.advance()\n>>> 'I am in state B now!'\n>>> 'I am in state C now!' # That's better!\n```\n\n执行顺序为：\n\n```\nprepare -> before -> on_enter_B -> queue(to_C) -> after  -> on_enter_C.\n```\n\n**注意**：当使用排队处理事件时，触发器的调用始终返回True，所以在排队执行过程中，无法确定一个包含排队回调函数的转换最终是否能成功，即使是在处理一个事件的时候。\n\n```\nmachine.add_transition('jump', 'A', 'C', conditions='will_fail')\n...\n# queued=False\nmachine.jump()\n>>> False\n# queued=True\nmachine.jump()\n>>> True\n```\n\n#### 条件转换\n\n在某些情况下，我们可能需要在某些条件成立的时候去执行特定的转换，这个时候，`conditions` 就派上用场了。\n\n```\n# Our Matter class, now with a bunch of methods that return booleans.\nclass Matter(object):\n    def is_flammable(self): return False\n    def is_really_hot(self): return True\n\nmachine.add_transition('heat', 'solid', 'gas', conditions='is_flammable')\nmachine.add_transition('heat', 'solid', 'liquid', conditions=['is_really_hot'])\n```\n\n在上面的示例中，如果模型初始化的状态为 `solid` ，当条件 `is_flammable` 成立时，调用 `heat()` 会转换到 `gas ` 状态。同样，如果条件 `is_really_hot` 成立，调用 `heat()` 会转换到 `liquid ` 状态。\n\n我们还可能在某些条件不成立的条件下，转换到另一状态，`Transitions` 为我们提供了 `unless` 方法。\n\n```\nmachine.add_transition('heat', 'solid', 'gas', unless=['is_flammable', 'is_really_hot'])\n```\n\n这时，如果 `is_flammable(), is_really_hot()` 返回的都是 `False` ，模型调用 `heat()` 会从 `solid` 转换到 `gas ` 状态。\n\n**注意**：条件检查方法会被动接收传递给触发函数的参数或数据对象。比如：\n\n```\nlump.heat(temp=74)\n# equivalent to lump.trigger('heat', temp=74)\n```\n\n这样会将 `temp=74` 的可选参数传递给 `is_flammable()` 方法（以 `EventData` 实例的方式），参数的传递我们在后面会介绍。\n\n#### 回调方法\n\n我们可以将回调方法绑定到状态集和转换集上，每一个转换都包含 `before` 和 `after` 属性，这也是我们比较常用的，这两个属性包含了一系列在状态转换前后可以调用的方法。\n\n```\nclass Matter(object):\n    def make_hissing_noises(self): print(\"HISSSSSSSSSSSSSSSS\")\n    def disappear(self): print(\"where'd all the liquid go?\")\n\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid', 'before': 'make_hissing_noises'},\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas', 'after': 'disappear' }\n]\n\nlump = Matter()\nmachine = Machine(lump, states, transitions=transitions, initial='solid')\nlump.melt()\n>>> \"HISSSSSSSSSSSSSSSS\"\nlump.evaporate()\n>>> \"where'd all the liquid go?\"\n```\n\n在状态转换一开始，在其他转换开始执行之前，我们也可以使用 `prepare` 回调函数：\n\n```\nclass Matter(object):\n    heat = False\n    attempts = 0\n    def count_attempts(self): self.attempts += 1\n    def is_really_hot(self): return self.heat\n    def heat_up(self): self.heat = random.random() < 0.25\n    def stats(self): print('It took you %i attempts to melt the lump!' %self.attempts)\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid', 'prepare': ['heat_up', 'count_attempts'], 'conditions': 'is_really_hot', 'after': 'stats'},\n]\n\nlump = Matter()\nmachine = Machine(lump, states, transitions=transitions, initial='solid')\nlump.melt()\nlump.melt()\nlump.melt()\nlump.melt()\n>>> \"It took you 4 attempts to melt the lump!\"\n```\n\n**注意**：除非当前状态是定义在转换集上有效的状态，否则，`prepare` 回调是不会起作用的。\n\n如果在每一个转换执行之前或之后都需要进行一些默认操作，我们可以在状态机初始化的时候显示使用 `before_state_change`  和 `after_state_change`  属性。\n\n```\nclass Matter(object):\n    def make_hissing_noises(self): print(\"HISSSSSSSSSSSSSSSS\")\n    def disappear(self): print(\"where'd all the liquid go?\")\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\nlump = Matter()\nm = Machine(lump, states, before_state_change='make_hissing_noises', after_state_change='disappear')\nlump.to_gas()\n>>> \"HISSSSSSSSSSSSSSSS\"\n>>> \"where'd all the liquid go?\"\n```\n\n还有一些可以独立使用的关键字：\n\n-  `prepare_event` ：通过 `prepare_event` 关键字传递给状态机的回调方法，在处理可能发生的状态转换（包括私有的 `prepare` 回调方法）之前，仅执行一次；\n-  `finalize_event` ：通过 `finalize_event` 关键字传递给状态机的回调方法，不管转换是否成功，都会被执行；\n-  `send_event` ：如果在状态转换过程中出现了错误，这个错误会绑定到 ` event_data` 上，我们可以使用 `send_event=True` 来检索错误 。\n\n```\nfrom transitions import Machine\n\nclass Matter(object):\n    def raise_error(self, event): raise ValueError(\"Oh no\")\n    def prepare(self, event): print(\"I am ready!\")\n    def finalize(self, event): print(\"Result: \", type(event.error), event.error)\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\nlump = Matter()\nm = Machine(lump, states, prepare_event='prepare', before_state_change='raise_error',\n            finalize_event='finalize', send_event=True)\ntry:\n    lump.to_gas()\nexcept ValueError:\n    pass\nprint(lump.state)\n\n>>> I am ready!\n>>> Result:  <class 'ValueError'> Oh no\n>>> initial\n```\n\n### 执行命令\n\n以下是转换集上回调方法可以执行的命令：\n\n| 回调                            | 状态       | 备注                 |\n| ----------------------------- | -------- | ------------------ |\n| `machine.prepare_event`       | 源状态      | 在私有转换执行之前仅执行一次     |\n| `transition.prepare`          | 源状态      | 转换一开始就执行           |\n| `transition.conditions`       | 源状态      | 可使转换失败或停止          |\n| `transition.unless`           | 源状态      | 可使转换失败或停止          |\n| `machine.before_state_change` | 源状态      | 声明在模型上的默认回调方法      |\n| `transition.before`           | 源状态      |                    |\n| `state.on_exit`               | 源状态      | 声明在源状态上的回调方法       |\n| `<STATE CHANGE>`              |          |                    |\n| `state.on_enter`              | 目的状态     | 声明在目的状态上的回调方法      |\n| `transition.after`            | 目的状态     |                    |\n| `machine.after_state_change`  | 目的状态     | 声明在模型上的默认回调方法      |\n| `machine.finalize_event`      | 源状态/目的状态 | 即使出现错误或异常，回调方法也会执行 |\n\n### 传递数据\n\n在大多数情况下，我们需要传递给注册在状态机中的回调方法一些参数，来反应当前模型的状态和进行一些必要计算。`Transitions` 提供了两种方法。\n\n第一种方法（默认方法）：\n\n我们可以直接传递参数给触发器方法。\n\n```\nclass Matter(object):\n    def __init__(self): self.set_environment()\n    def set_environment(self, temp=0, pressure=101.325):\n        self.temp = temp\n        self.pressure = pressure\n    def print_temperature(self): print(\"Current temperature is %d degrees celsius.\" % self.temp)\n    def print_pressure(self): print(\"Current pressure is %.2f kPa.\" % self.pressure)\n\nlump = Matter()\nmachine = Machine(lump, ['solid', 'liquid'], initial='solid')\nmachine.add_transition('melt', 'solid', 'liquid', before='set_environment')\n\nlump.melt(45)  # positional arg;\n# equivalent to lump.trigger('melt', 45)\nlump.print_temperature()\n>>> 'Current temperature is 45 degrees celsius.'\n\nmachine.set_state('solid')  # reset state so we can melt again\nlump.melt(pressure=300.23)  # keyword args also work\nlump.print_pressure()\n>>> 'Current pressure is 300.23 kPa.'\n```\n\n我们通过这种方法传递任何参数给触发器方法。\n\n但是这种方式有一种局限性：状态转换触发的每一个回调方法都必须处理所有的参数。如果我们的不同回调方法需要不同的参数，这样就会导致一些不必要的麻烦。\n\n为了解决这个问题，`Transitions` 提供了另一种方法，上文中我们提到过，参数可以以`EventData` 实例的方式传递。在`Machine` 初始化的时候设置 `send_event=True` ，这样，所有传递给非触发器的参数都以`EventData` 实例的方式传递给回调方法，为了方便我们随时访问与事件相关的源状态、模型、转换、触发等参数，`EventData` 实例会维护这些参数的内部引用。\n\n```\nclass Matter(object):\n\n    def __init__(self):\n        self.temp = 0\n        self.pressure = 101.325\n\n    # Note that the sole argument is now the EventData instance.\n    # This object stores positional arguments passed to the trigger method in the\n    # .args property, and stores keywords arguments in the .kwargs dictionary.\n    def set_environment(self, event):\n        self.temp = event.kwargs.get('temp', 0)\n        self.pressure = event.kwargs.get('pressure', 101.325)\n\n    def print_pressure(self): print(\"Current pressure is %.2f kPa.\" % self.pressure)\n\nlump = Matter()\nmachine = Machine(lump, ['solid', 'liquid'], send_event=True, initial='solid')\nmachine.add_transition('melt', 'solid', 'liquid', before='set_environment')\n\nlump.melt(temp=45, pressure=1853.68)  # keyword args\nlump.print_pressure()\n>>> 'Current pressure is 1853.68 kPa.'\n```\n\n### 其他初始化方式\n\n在以上所有的示例中，我们将新的 `Machine` 实例绑定到一个单独的模型上（`Matter` 类的实例 `lump`），虽然这种方式可以使我们的类和回调方法比较整洁，但是我们必须能跟踪到状态机上调用的方法，并且知道模型调用的这些方法绑定了哪个状态机（比如： `lump.on_enter_StateA()` vs `machine.add_transition()`）\n\n庆幸的是，`Transitions` 为我们提供了两种不同的初始化方式。\n\n第一种方式，我们可以创建一个独立的状态机，完全不需要其他模型，在初始化的时候忽略模型参数。\n\n```\nmachine = Machine(states=states, transitions=transitions, initial='solid')\nmachine.melt()\nmachine.state\n>>> 'liquid'\n```\n\n如果我们使用这种方式初始化状态机，我们就可以直接绑定所有的触发事件和回调方法到 `Machine` 实例上。\n\n这种方法有利于在一个地方整合所有的状态机功能，但如果考虑到状态逻辑应该包含在模型本身中，而不是单独出来，这种方式恐怕也不是最好的。\n\n一种替代的办法是让 `Machine` 要绑定的模型继承 `Machine` 类，只要重写 `Machine` 的 `__init__()` 方法即可：\n\n```\nclass Matter(Machine):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n\n    def __init__(self):\n        states = ['solid', 'liquid', 'gas']\n        Machine.__init__(self, states=states, initial='solid')\n        self.add_transition('melt', 'solid', 'liquid')\n\nlump = Matter()\nlump.state\n>>> 'solid'\nlump.melt()\nlump.state\n>>> 'liquid'\n```\n\n现在我们已经整合所有的状态机功能到 `lump` 模型中，这比将功能独立出来让人感觉更舒服。\n\n如果我们绑定多个模型到 `Machine` 中，状态机也是可以处理的。如果想要添加模型和 `Machine` 实例本身，我们可以在初始化的时候使用 `self` 关键字（ `Machine(model=['self', model1, ...])`），也可以创建一个单独的状态机，然后通过 `machine.add_model` 动态注册模型到状态机中，如果模型不再使用的情况下，应该调用  `machine.remove_model`  来回收模型。\n\n```\nclass Matter():\n    pass\n\nlump1 = Matter()\nlump2 = Matter()\n\nmachine = Machine(states=states, transitions=transitions, initial='solid', add_self=False)\n\nmachine.add_model(lump1)\nmachine.add_model(lump2, initial='liquid')\n\nlump1.state\n>>> 'solid'\nlump2.state\n>>> 'liquid'\n\nmachine.remove_model([lump1, lump2])\ndel lump1  # lump1 is garbage collected\ndel lump2  # lump2 is garbage collected\n```\n\n如果在状态机初始化的时候没有提供初始状态，在添加模型的时候就必须提供这个初始状态。\n\n```\nmachine = Machine(states=states, transitions=transitions, add_self=False)\n\nmachine.add_model(Matter())\n>>> \"MachineError: No initial state configured for machine, must specify when adding model.\"\nmachine.add_model(Matter(), initial='liquid')\n```\n\n### 日志\n\n`Transitions` 提供一些基本的日志功能，使用 `Python` 标准的 `logging` 模块将一些如状态转换、转换触发、条件检查等信息作为 `INFO` 级别的信息记录下来，我们可以在脚本中轻松地将日志记录配置为标准输出：\n\n```\n# Set up logging\nimport logging\nfrom transitions import logger\nlogger.setLevel(logging.INFO)\n\n# Business as usual\nmachine = Machine(states=states, transitions=transitions, initial='solid')\n...\n```\n\n### 存储/恢复状态机实例\n\n如果想要存储或加载状态机，必须使用`Python3.3` 或较早版本的 `dill` 。\n\n```\nimport dill as pickle # only required for Python 3.3 and earlier\n\nm = Machine(states=['A', 'B', 'C'], initial='A')\nm.to_B()\nm.state  \n>>> B\n\n# store the machine\ndump = pickle.dumps(m)\n\n# load the Machine instance again\nm2 = pickle.loads(dump)\n\nm2.state\n>>> B\n\nm2.states.keys()\n>>> ['A', 'B', 'C']\n```\n\n\n\n以上介绍了 `Transitions` 的基本使用方法，手工翻译难免有些晦涩难懂之处，敬请谅解。除了这些基本用法之外，`Transitions` 还提供了一些扩展方法，比如图表可视化机器的当前状态、用于嵌套和重用的分层状态机、并行执行的线程安全锁等，这里暂时就不介绍了，先欠着吧，等以后深入使用 `Transitions` 库的时候再去学习。\n\n`Transitions` 英文完整版介绍请移步 [Transitions](https://github.com/tyarkoni/transitions) ","source":"_posts/transitionstranslate.md","raw":"---\ntitle: Transitions-Python状态机库\ndate: 2017-05-26 21:12:18\ntags:\n - Transitions\n - Python\n - 状态机库\ncategories:\n - Python\n---\n\n由于项目需要，使用到了Python的状态机库 [Transitions](https://github.com/tyarkoni/transitions) ，但GitHub上是英文文档，使用过后觉得还不错，遂手工翻译一下，加深理解，水平有限，如有翻译不当之处请Email (kevin920902@gmail.com) 我。\n\n## Transitions\n\nPython 实现的轻量级、面向对象状态机，兼容Python 2.7+ 和 Python 3.0+。\n\n## 安装方法\n\n方法一\n\n```\npip install transitions\n```\n\n方法二\n\n直接在 [GitHub](https://github.com/tyarkoni/transitions) 上clone仓库到本地，然后\n\n```\npython setup.py install\n```\n\n## 快速入门\n\n俗话说，接触一个新的工具库，100页的API文档、一千字的描述文档或更多的解释说明都不如一个简单的Demo，虽然这个说法我们无法验证真伪，但下面的例子会让你快速了解 `Transitions` 的基本用法\n\n```\nfrom transitions import Machine\nimport random\n\nclass NarcolepticSuperhero(object):\n\n    # Define some states. Most of the time, narcoleptic superheroes are just like\n    # everyone else. Except for...\n    states = ['asleep', 'hanging out', 'hungry', 'sweaty', 'saving the world']\n\n    def __init__(self, name):\n\n        # No anonymous superheroes on my watch! Every narcoleptic superhero gets\n        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.\n        self.name = name\n\n        # What have we accomplished today?\n        self.kittens_rescued = 0\n\n        # Initialize the state machine\n        self.machine = Machine(model=self, states=NarcolepticSuperhero.states, initial='asleep')\n\n        # Add some transitions. We could also define these using a static list of\n        # dictionaries, as we did with states above, and then pass the list to\n        # the Machine initializer as the transitions= argument.\n\n        # At some point, every superhero must rise and shine.\n        self.machine.add_transition(trigger='wake_up', source='asleep', dest='hanging out')\n\n        # Superheroes need to keep in shape.\n        self.machine.add_transition('work_out', 'hanging out', 'hungry')\n\n        # Those calories won't replenish themselves!\n        self.machine.add_transition('eat', 'hungry', 'hanging out')\n\n        # Superheroes are always on call. ALWAYS. But they're not always\n        # dressed in work-appropriate clothing.\n        self.machine.add_transition('distress_call', '*', 'saving the world',\n                         before='change_into_super_secret_costume')\n\n        # When they get off work, they're all sweaty and disgusting. But before\n        # they do anything else, they have to meticulously log their latest\n        # escapades. Because the legal department says so.\n        self.machine.add_transition('complete_mission', 'saving the world', 'sweaty',\n                         after='update_journal')\n\n        # Sweat is a disorder that can be remedied with water.\n        # Unless you've had a particularly long day, in which case... bed time!\n        self.machine.add_transition('clean_up', 'sweaty', 'asleep', conditions=['is_exhausted'])\n        self.machine.add_transition('clean_up', 'sweaty', 'hanging out')\n\n        # Our NarcolepticSuperhero can fall asleep at pretty much any time.\n        self.machine.add_transition('nap', '*', 'asleep')\n\n    def update_journal(self):\n        \"\"\" Dear Diary, today I saved Mr. Whiskers. Again. \"\"\"\n        self.kittens_rescued += 1\n\n    def is_exhausted(self):\n        \"\"\" Basically a coin toss. \"\"\"\n        return random.random() < 0.5\n\n    def change_into_super_secret_costume(self):\n        print(\"Beauty, eh?\")\n```\n\n现在我们已经建立了一个 `NarcolepticSuperhero` 状态机，来看看具体怎么使用吧\n\n```\n>>> batman = NarcolepticSuperhero(\"Batman\")\n>>> batman.state\n'asleep'\n\n>>> batman.wake_up()\n>>> batman.state\n'hanging out'\n\n>>> batman.nap()\n>>> batman.state\n'asleep'\n\n>>> batman.clean_up()\nMachineError: \"Can't trigger event clean_up from state asleep!\"\n\n>>> batman.wake_up()\n>>> batman.work_out()\n>>> batman.state\n'hungry'\n\n# Batman still hasn't done anything useful...\n>>> batman.kittens_rescued\n0\n\n# We now take you live to the scene of a horrific kitten entreement...\n>>> batman.distress_call()\n'Beauty, eh?'\n>>> batman.state\n'saving the world'\n\n# Back to the crib.\n>>> batman.complete_mission()\n>>> batman.state\n'sweaty'\n\n>>> batman.clean_up()\n>>> batman.state\n'asleep'   # Too tired to shower!\n\n# Another productive day, Alfred.\n>>> batman.kittens_rescued\n1\n```\n\n## 详细文档\n\n### 基本初始化方式\n\n使状态机正常运行非常简单。 假设你有一个对象 `lump` ( `Matter` 类的一个实例) ，并且你想要管理它的状态：\n\n```\nclass Matter(object):\n    pass\n\nlump = Matter()\n```\n\n我们将 `lump` 绑定到状态机上来初始化一个**最小状态机**\n\n```\nfrom transitions import Machine\nmachine = Machine(model=lump, states=['solid', 'liquid', 'gas', 'plasma'], initial='solid')\n\n# Lump now has state!\nlump.state\n>>> 'solid'\n```\n\n 之所以称之为**最小状态机**，因为这种状态机在技术上是可操作的，状态机初试状态为 `solid` ，但因为我们没有增加任何的转移动作(transitions：这应该是个动词，我在这翻译为转移动作)， 所以它实际上什么也没做。\n\n下面我们来定义更多的状态和转移动作\n\n```\n# The states\nstates=['solid', 'liquid', 'gas', 'plasma']\n\n# And some transitions between states. We're lazy, so we'll leave out\n# the inverse phase transitions (freezing, condensation, etc.).\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid' },\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas' },\n    { 'trigger': 'sublimate', 'source': 'solid', 'dest': 'gas' },\n    { 'trigger': 'ionize', 'source': 'gas', 'dest': 'plasma' }\n]\n\n# Initialize\nmachine = Machine(lump, states=states, transitions=transitions, initial='liquid')\n\n# Now lump maintains state...\nlump.state\n>>> 'liquid'\n\n# And that state can change...\nlump.evaporate()\nlump.state\n>>> 'gas'\nlump.trigger('ionize')\nlump.state\n>>> 'plasma'\n```\n\n**注意**：我们为 `Matter`  实例 `lump` 绑定了 `evaporate()`  `ionize()` 等方法，每个方法触发相应的状态转换，你不必在任何地方明确定义这些方法，每个转换的名称通过绑定到模型上来传递给状态机初始化函数(`lump`)。`evaporate()`  `ionize()`另等方法都是静态来触发状态转移，如果我们想实现动态转移，可以使用`trigger` 方法。\n\n### 状态集\n\n毫无疑问，状态机的核心是状态集，上述介绍中我们通过传递给 `Machine` 初始化函数字符串列表来定义有效的模型状态，但是在 `Machine` 内部，状态以 `State` 对象的形式存储。\n\n我们可以通过多种方式初始化和跟新状态，比如：\n\n-  传递一个给定状态名的字符串给 `Machine` 初始化函数；\n-  直接初始化每个新的 `State` 对象；\n-  传递具有初始化参数的字典。\n\n以下代码片段说明了实现相同目标的几种方法\n\n```\n# Create a list of 3 states to pass to the Machine\n# initializer. We can mix types; in this case, we\n# pass one State, one string, and one dict.\nstates = [\n    State(name='solid'),\n    'liquid',\n    { 'name': 'gas'}\n    ]\nmachine = Machine(lump, states)\n\n# This alternative example illustrates more explicit\n# addition of states and state callbacks, but the net\n# result is identical to the above.\nmachine = Machine(lump)\nsolid = State('solid')\nliquid = State('liquid')\ngas = State('gas')\nmachine.add_states([solid, liquid, gas])\n```\n\n#### 回调方法\n\n我们可以给一个状态添加一系列的”进入“和”退出“的回调函数，还可以在初始化期间指定回调，或者稍后再添加回调。\n\n为方便起见，每当新的状态被添加到 `Machine` 中时，方法 `on_enter_«state name»` 和 `on_exit_«state name»` 都是在 `Machine` 上（而不是 `Model` 上）上动态创建的，并且允许我们动态地添加新的进入和退出回调函数。\n\n```\n# Our old Matter class, now with  a couple of new methods we\n# can trigger when entering or exit states.\nclass Matter(object):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n\nlump = Matter()\n\n# Same states as above, but now we give StateA an exit callback\nstates = [\n    State(name='solid', on_exit=['say_goodbye']),\n    'liquid',\n    { 'name': 'gas' }\n    ]\n\nmachine = Machine(lump, states=states)\nmachine.add_transition('sublimate', 'solid', 'gas')\n\n# Callbacks can also be added after initialization using\n# the dynamically added on_enter_ and on_exit_ methods.\n# Note that the initial call to add the callback is made\n# on the Machine and not on the model.\nmachine.on_enter_gas('say_hello')\n\n# Test out the callbacks...\nmachine.set_state('solid')\nlump.sublimate()\n>>> 'goodbye, old state!'\n>>> 'hello, new state!'\n```\n\n**注意**：首次初始化状态机时， `on_enter_«state name»` 回调函数是不会触发的。例如，我们定义了一个回调函数 `on_enter_A()` ，并给状态机初始化状态为 `initial='A'` ，`on_enter_A()` 会在下次进入状态A的时候出发，首次并不会触发。如果我们想在初始化的时候就触发 `on_enter_A()` 方法，可以创建一个虚拟的初始状态，然后调用 `to_A()` 方法，而不是 `__init__` 方法。 \n\n除了在初始化状态机传递回调或动态添加回调，为增加代码的清晰度，还可以在模型类本身中定义回调。例如\n\n```\nclass Matter(object):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n    def on_enter_A(self): print(\"We've just entered state A!\")\n\nlump = Matter()\nmachine = Machine(lump, states=['A', 'B', 'C'])\n```\n\n现在，任何时候 `lump` 转移到状态A，类`Matter` 中的 `on_enter_A()` 方法总是会触发。\n\n#### 检查状态\n\n我们可以随时通过以下方式检查模型的当前状态\n\n- 检查 `.state` 属性；\n- 调用 `is_«state name»()`  方法。\n\n如果要检索当前状态的实际状态对象，可以通过 `Machine` 实例的 `get_state()` 方法来实现\n\n```\nlump.state\n>>> 'solid'\nlump.is_gas()\n>>> False\nlump.is_solid()\n>>> True\nmachine.get_state(lump.state).name\n>>> 'solid'\n```\n\n### 状态转换\n\n上面的一些例子已经说明了状态转移的使用，但是在这里我们将更详细地探讨它们。\n\n与状态一样，每个状态转换在内部用 `Transitions` 对象来表示，我们可以传递一个字典或字典列表来快速初始化状态转换集合。\n\n如上面我们已经写过的\n\n```\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid' },\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas' },\n    { 'trigger': 'sublimate', 'source': 'solid', 'dest': 'gas' },\n    { 'trigger': 'ionize', 'source': 'gas', 'dest': 'plasma' }\n]\nmachine = Machine(model=Matter(), states=states, transitions=transitions)\n```\n\n使用字典定义转换有利于代码的清晰，但显得比较笨重。比较简单的方法是使用列表定义转换，只需确保每个列表中的元素与 `Transition` 初始化中的位置参数的顺序相同(比如 `trigger`, `source`, `destination ` 等)\n\n我们可以这样定义转换\n\n```\ntransitions = [\n    ['melt', 'solid', 'liquid'],\n    ['evaporate', 'liquid', 'gas'],\n    ['sublimate', 'solid', 'gas'],\n    ['ionize', 'gas', 'plasma']\n]\n```\n\n另外，我们也可以在状态机初始化之后添加转换\n\n```\nmachine = Machine(model=lump, states=states, initial='solid')\nmachine.add_transition('melt', source='solid', dest='liquid')\n```\n\n `trigger` 参数定义了绑定到模型上的触发方法的名称，当回调这个方法的时候，状态机会执行相应的状态转换。\n\n```\n>>> lump.melt()\n>>> lump.state\n'liquid'\n```\n\n当我们调用非法的转换时，`Machine` 会抛出异常\n\n```\n>>> lump.to_gas()\n>>> # This won't work because only objects in a solid state can melt\n>>> lump.melt()\ntransitions.core.MachineError: \"Can't trigger event melt from state gas!\"\n```\n\n这种做法通常是可取的，因为它有助于提醒代码中的问题。但是在某些情况下，我们希望忽略这些非法转换，这时可以设置 `ignore_invalid_triggers=True` (可以全部忽略，也可忽略特定一条)\n\n```\n>>> # Globally suppress invalid trigger exceptions\n>>> m = Machine(lump, states, initial='solid', ignore_invalid_triggers=True)\n>>> # ...or suppress for only one group of states\n>>> states = ['new_state1', 'new_state2']\n>>> m.add_states(states, ignore_invalid_triggers=True)\n>>> # ...or even just for a single state. Here, exceptions will only be suppressed when the current state is A.\n>>> states = [State('A', ignore_invalid_triggers=True), 'B', 'C']\n>>> m = Machine(lump, states)\n```\n\n如果在做状态转换之前，希望知道在当前状态下，哪些是合法的转换，可以使用 `get_triggers()` 方法\n\n```\nm.get_triggers('solid')\n>>> ['melt', 'sublimate']\nm.get_triggers('liquid')\n>>> ['evaporate']\nm.get_triggers('plasma')\n>>> []\n# you can also query several states at once\nm.get_triggers('solid', 'liquid', 'gas', 'plasma')\n>>> ['melt', 'evaporate', 'sublimate', 'ionize']\n```\n\n#### 自动转换所有状态\n\n除了显式添加的任何转换之外，每当将状态添加到 `Machine` 实例时，都会自动创建一个 `to_«state»()` 方法，该方法无论状态机当前处于哪种状态，都会转换到目标状态。\n\n```\nlump.to_liquid()\nlump.state\n>>> 'liquid'\nlump.to_solid()\nlump.state\n>>> 'solid'\n```\n\n我们可以在状态机初始化的时候设置 `auto_transitions=False` 禁用这个功能。\n\n#### 多状态转换\n\n给定的触发器可以附加到多个转换，其中一些可以在相同的状态下潜在地开始或结束。比如\n\n```\nmachine.add_transition('transmogrify', ['solid', 'liquid', 'gas'], 'plasma')\nmachine.add_transition('transmogrify', 'plasma', 'solid')\n# This next transition will never execute\nmachine.add_transition('transmogrify', 'plasma', 'gas')\n```\n\n在这种情况下，如果当前状态是 `plasma` 调用 `transmogrify()` ，会转换到 `solid` 状态，然后继续转换到 `plasma` 状态。**注意**：只有第一个匹配的转换将执行，因此，上述最后一行中定义的转换将不会做任何事情。\n\n我们还可以通过使用 `*` 通配符来引发触发器从所有状态转换到特定状态\n\n```\nmachine.add_transition('to_liquid', '*', 'liquid')\n```\n\n一个反身触发（触发器具有与源和目标相同的状态）可以使用“=”来表示目的状态，比如通过 `touch` 触发，`solid` 的目标状态为自身。如果我们希望同一个反身触发器应用到多个状态中，使用“=”是比较方便的。\n\n```\nmachine.add_transition('touch', ['liquid', 'gas', 'plasma'], '=', after='change_shape')\n```\n\n通过上面的语句， `'liquid', 'gas', 'plasma'` 三个状态通过 `touch` 触发器，可以到达的目的状态分别是 `'liquid', 'gas', 'plasma'` 。\n\n#### 有序转换\n\n比如我们现在有这样一个需求，状态的转换是遵循自定义的序列的，如给定状态 `['A', 'B', 'C']`，我们可能需要这样的状态转换 `A → B, B → C, C → A` （没有其他的非法转换）。为了实现这个功能，`Transitions` 在 `Machine` 类中提供了 `add_ordered_transitions()` 方法\n\n```\nstates = ['A', 'B', 'C']\n # See the \"alternative initialization\" section for an explanation of the 1st argument to init\nmachine = Machine(states=states, initial='A')\nmachine.add_ordered_transitions()\nmachine.next_state()\nprint(machine.state)\n>>> 'B'\n# We can also define a different order of transitions\nmachine = Machine(states=states, initial='A')\nmachine.add_ordered_transitions(['A', 'C', 'B'])\nmachine.next_state()\nprint(machine.state)\n>>> 'C'\n```\n\n#### 排队转换\n\nTransitions中的默认行为是立即处理事件。也就是说，调用绑定在 `after` 上的回调函数之前， `on_enter` 方法中的事件会预先处理。\n\n```\ndef go_to_C():\n    global machine\n    machine.to_C()\n\ndef after_advance():\n    print(\"I am in state B now!\")\n\ndef entering_C():\n    print(\"I am in state C now!\")\n\nstates = ['A', 'B', 'C']\nmachine = Machine(states=states)\n\n# we want a message when state transition to B has been completed\nmachine.add_transition('advance', 'A', 'B', after=after_advance)\n\n# call transition from state B to state C\nmachine.on_enter_B(go_to_C)\n\n# we also want a message when entering state C\nmachine.on_enter_C(entering_C)\nmachine.advance()\n>>> 'I am in state C now!'\n>>> 'I am in state B now!' # what?\n```\n\n上述状态机的执行顺序为：\n\n```\nprepare -> before -> on_enter_B -> on_enter_C -> after.\n```\n\n如果启用排队处理，则在触发下一个转换之前，转换将完成：\n\n```\nmachine = Machine(states=states, queued=True)\n...\nmachine.advance()\n>>> 'I am in state B now!'\n>>> 'I am in state C now!' # That's better!\n```\n\n执行顺序为：\n\n```\nprepare -> before -> on_enter_B -> queue(to_C) -> after  -> on_enter_C.\n```\n\n**注意**：当使用排队处理事件时，触发器的调用始终返回True，所以在排队执行过程中，无法确定一个包含排队回调函数的转换最终是否能成功，即使是在处理一个事件的时候。\n\n```\nmachine.add_transition('jump', 'A', 'C', conditions='will_fail')\n...\n# queued=False\nmachine.jump()\n>>> False\n# queued=True\nmachine.jump()\n>>> True\n```\n\n#### 条件转换\n\n在某些情况下，我们可能需要在某些条件成立的时候去执行特定的转换，这个时候，`conditions` 就派上用场了。\n\n```\n# Our Matter class, now with a bunch of methods that return booleans.\nclass Matter(object):\n    def is_flammable(self): return False\n    def is_really_hot(self): return True\n\nmachine.add_transition('heat', 'solid', 'gas', conditions='is_flammable')\nmachine.add_transition('heat', 'solid', 'liquid', conditions=['is_really_hot'])\n```\n\n在上面的示例中，如果模型初始化的状态为 `solid` ，当条件 `is_flammable` 成立时，调用 `heat()` 会转换到 `gas ` 状态。同样，如果条件 `is_really_hot` 成立，调用 `heat()` 会转换到 `liquid ` 状态。\n\n我们还可能在某些条件不成立的条件下，转换到另一状态，`Transitions` 为我们提供了 `unless` 方法。\n\n```\nmachine.add_transition('heat', 'solid', 'gas', unless=['is_flammable', 'is_really_hot'])\n```\n\n这时，如果 `is_flammable(), is_really_hot()` 返回的都是 `False` ，模型调用 `heat()` 会从 `solid` 转换到 `gas ` 状态。\n\n**注意**：条件检查方法会被动接收传递给触发函数的参数或数据对象。比如：\n\n```\nlump.heat(temp=74)\n# equivalent to lump.trigger('heat', temp=74)\n```\n\n这样会将 `temp=74` 的可选参数传递给 `is_flammable()` 方法（以 `EventData` 实例的方式），参数的传递我们在后面会介绍。\n\n#### 回调方法\n\n我们可以将回调方法绑定到状态集和转换集上，每一个转换都包含 `before` 和 `after` 属性，这也是我们比较常用的，这两个属性包含了一系列在状态转换前后可以调用的方法。\n\n```\nclass Matter(object):\n    def make_hissing_noises(self): print(\"HISSSSSSSSSSSSSSSS\")\n    def disappear(self): print(\"where'd all the liquid go?\")\n\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid', 'before': 'make_hissing_noises'},\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas', 'after': 'disappear' }\n]\n\nlump = Matter()\nmachine = Machine(lump, states, transitions=transitions, initial='solid')\nlump.melt()\n>>> \"HISSSSSSSSSSSSSSSS\"\nlump.evaporate()\n>>> \"where'd all the liquid go?\"\n```\n\n在状态转换一开始，在其他转换开始执行之前，我们也可以使用 `prepare` 回调函数：\n\n```\nclass Matter(object):\n    heat = False\n    attempts = 0\n    def count_attempts(self): self.attempts += 1\n    def is_really_hot(self): return self.heat\n    def heat_up(self): self.heat = random.random() < 0.25\n    def stats(self): print('It took you %i attempts to melt the lump!' %self.attempts)\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\ntransitions = [\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid', 'prepare': ['heat_up', 'count_attempts'], 'conditions': 'is_really_hot', 'after': 'stats'},\n]\n\nlump = Matter()\nmachine = Machine(lump, states, transitions=transitions, initial='solid')\nlump.melt()\nlump.melt()\nlump.melt()\nlump.melt()\n>>> \"It took you 4 attempts to melt the lump!\"\n```\n\n**注意**：除非当前状态是定义在转换集上有效的状态，否则，`prepare` 回调是不会起作用的。\n\n如果在每一个转换执行之前或之后都需要进行一些默认操作，我们可以在状态机初始化的时候显示使用 `before_state_change`  和 `after_state_change`  属性。\n\n```\nclass Matter(object):\n    def make_hissing_noises(self): print(\"HISSSSSSSSSSSSSSSS\")\n    def disappear(self): print(\"where'd all the liquid go?\")\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\nlump = Matter()\nm = Machine(lump, states, before_state_change='make_hissing_noises', after_state_change='disappear')\nlump.to_gas()\n>>> \"HISSSSSSSSSSSSSSSS\"\n>>> \"where'd all the liquid go?\"\n```\n\n还有一些可以独立使用的关键字：\n\n-  `prepare_event` ：通过 `prepare_event` 关键字传递给状态机的回调方法，在处理可能发生的状态转换（包括私有的 `prepare` 回调方法）之前，仅执行一次；\n-  `finalize_event` ：通过 `finalize_event` 关键字传递给状态机的回调方法，不管转换是否成功，都会被执行；\n-  `send_event` ：如果在状态转换过程中出现了错误，这个错误会绑定到 ` event_data` 上，我们可以使用 `send_event=True` 来检索错误 。\n\n```\nfrom transitions import Machine\n\nclass Matter(object):\n    def raise_error(self, event): raise ValueError(\"Oh no\")\n    def prepare(self, event): print(\"I am ready!\")\n    def finalize(self, event): print(\"Result: \", type(event.error), event.error)\n\nstates=['solid', 'liquid', 'gas', 'plasma']\n\nlump = Matter()\nm = Machine(lump, states, prepare_event='prepare', before_state_change='raise_error',\n            finalize_event='finalize', send_event=True)\ntry:\n    lump.to_gas()\nexcept ValueError:\n    pass\nprint(lump.state)\n\n>>> I am ready!\n>>> Result:  <class 'ValueError'> Oh no\n>>> initial\n```\n\n### 执行命令\n\n以下是转换集上回调方法可以执行的命令：\n\n| 回调                            | 状态       | 备注                 |\n| ----------------------------- | -------- | ------------------ |\n| `machine.prepare_event`       | 源状态      | 在私有转换执行之前仅执行一次     |\n| `transition.prepare`          | 源状态      | 转换一开始就执行           |\n| `transition.conditions`       | 源状态      | 可使转换失败或停止          |\n| `transition.unless`           | 源状态      | 可使转换失败或停止          |\n| `machine.before_state_change` | 源状态      | 声明在模型上的默认回调方法      |\n| `transition.before`           | 源状态      |                    |\n| `state.on_exit`               | 源状态      | 声明在源状态上的回调方法       |\n| `<STATE CHANGE>`              |          |                    |\n| `state.on_enter`              | 目的状态     | 声明在目的状态上的回调方法      |\n| `transition.after`            | 目的状态     |                    |\n| `machine.after_state_change`  | 目的状态     | 声明在模型上的默认回调方法      |\n| `machine.finalize_event`      | 源状态/目的状态 | 即使出现错误或异常，回调方法也会执行 |\n\n### 传递数据\n\n在大多数情况下，我们需要传递给注册在状态机中的回调方法一些参数，来反应当前模型的状态和进行一些必要计算。`Transitions` 提供了两种方法。\n\n第一种方法（默认方法）：\n\n我们可以直接传递参数给触发器方法。\n\n```\nclass Matter(object):\n    def __init__(self): self.set_environment()\n    def set_environment(self, temp=0, pressure=101.325):\n        self.temp = temp\n        self.pressure = pressure\n    def print_temperature(self): print(\"Current temperature is %d degrees celsius.\" % self.temp)\n    def print_pressure(self): print(\"Current pressure is %.2f kPa.\" % self.pressure)\n\nlump = Matter()\nmachine = Machine(lump, ['solid', 'liquid'], initial='solid')\nmachine.add_transition('melt', 'solid', 'liquid', before='set_environment')\n\nlump.melt(45)  # positional arg;\n# equivalent to lump.trigger('melt', 45)\nlump.print_temperature()\n>>> 'Current temperature is 45 degrees celsius.'\n\nmachine.set_state('solid')  # reset state so we can melt again\nlump.melt(pressure=300.23)  # keyword args also work\nlump.print_pressure()\n>>> 'Current pressure is 300.23 kPa.'\n```\n\n我们通过这种方法传递任何参数给触发器方法。\n\n但是这种方式有一种局限性：状态转换触发的每一个回调方法都必须处理所有的参数。如果我们的不同回调方法需要不同的参数，这样就会导致一些不必要的麻烦。\n\n为了解决这个问题，`Transitions` 提供了另一种方法，上文中我们提到过，参数可以以`EventData` 实例的方式传递。在`Machine` 初始化的时候设置 `send_event=True` ，这样，所有传递给非触发器的参数都以`EventData` 实例的方式传递给回调方法，为了方便我们随时访问与事件相关的源状态、模型、转换、触发等参数，`EventData` 实例会维护这些参数的内部引用。\n\n```\nclass Matter(object):\n\n    def __init__(self):\n        self.temp = 0\n        self.pressure = 101.325\n\n    # Note that the sole argument is now the EventData instance.\n    # This object stores positional arguments passed to the trigger method in the\n    # .args property, and stores keywords arguments in the .kwargs dictionary.\n    def set_environment(self, event):\n        self.temp = event.kwargs.get('temp', 0)\n        self.pressure = event.kwargs.get('pressure', 101.325)\n\n    def print_pressure(self): print(\"Current pressure is %.2f kPa.\" % self.pressure)\n\nlump = Matter()\nmachine = Machine(lump, ['solid', 'liquid'], send_event=True, initial='solid')\nmachine.add_transition('melt', 'solid', 'liquid', before='set_environment')\n\nlump.melt(temp=45, pressure=1853.68)  # keyword args\nlump.print_pressure()\n>>> 'Current pressure is 1853.68 kPa.'\n```\n\n### 其他初始化方式\n\n在以上所有的示例中，我们将新的 `Machine` 实例绑定到一个单独的模型上（`Matter` 类的实例 `lump`），虽然这种方式可以使我们的类和回调方法比较整洁，但是我们必须能跟踪到状态机上调用的方法，并且知道模型调用的这些方法绑定了哪个状态机（比如： `lump.on_enter_StateA()` vs `machine.add_transition()`）\n\n庆幸的是，`Transitions` 为我们提供了两种不同的初始化方式。\n\n第一种方式，我们可以创建一个独立的状态机，完全不需要其他模型，在初始化的时候忽略模型参数。\n\n```\nmachine = Machine(states=states, transitions=transitions, initial='solid')\nmachine.melt()\nmachine.state\n>>> 'liquid'\n```\n\n如果我们使用这种方式初始化状态机，我们就可以直接绑定所有的触发事件和回调方法到 `Machine` 实例上。\n\n这种方法有利于在一个地方整合所有的状态机功能，但如果考虑到状态逻辑应该包含在模型本身中，而不是单独出来，这种方式恐怕也不是最好的。\n\n一种替代的办法是让 `Machine` 要绑定的模型继承 `Machine` 类，只要重写 `Machine` 的 `__init__()` 方法即可：\n\n```\nclass Matter(Machine):\n    def say_hello(self): print(\"hello, new state!\")\n    def say_goodbye(self): print(\"goodbye, old state!\")\n\n    def __init__(self):\n        states = ['solid', 'liquid', 'gas']\n        Machine.__init__(self, states=states, initial='solid')\n        self.add_transition('melt', 'solid', 'liquid')\n\nlump = Matter()\nlump.state\n>>> 'solid'\nlump.melt()\nlump.state\n>>> 'liquid'\n```\n\n现在我们已经整合所有的状态机功能到 `lump` 模型中，这比将功能独立出来让人感觉更舒服。\n\n如果我们绑定多个模型到 `Machine` 中，状态机也是可以处理的。如果想要添加模型和 `Machine` 实例本身，我们可以在初始化的时候使用 `self` 关键字（ `Machine(model=['self', model1, ...])`），也可以创建一个单独的状态机，然后通过 `machine.add_model` 动态注册模型到状态机中，如果模型不再使用的情况下，应该调用  `machine.remove_model`  来回收模型。\n\n```\nclass Matter():\n    pass\n\nlump1 = Matter()\nlump2 = Matter()\n\nmachine = Machine(states=states, transitions=transitions, initial='solid', add_self=False)\n\nmachine.add_model(lump1)\nmachine.add_model(lump2, initial='liquid')\n\nlump1.state\n>>> 'solid'\nlump2.state\n>>> 'liquid'\n\nmachine.remove_model([lump1, lump2])\ndel lump1  # lump1 is garbage collected\ndel lump2  # lump2 is garbage collected\n```\n\n如果在状态机初始化的时候没有提供初始状态，在添加模型的时候就必须提供这个初始状态。\n\n```\nmachine = Machine(states=states, transitions=transitions, add_self=False)\n\nmachine.add_model(Matter())\n>>> \"MachineError: No initial state configured for machine, must specify when adding model.\"\nmachine.add_model(Matter(), initial='liquid')\n```\n\n### 日志\n\n`Transitions` 提供一些基本的日志功能，使用 `Python` 标准的 `logging` 模块将一些如状态转换、转换触发、条件检查等信息作为 `INFO` 级别的信息记录下来，我们可以在脚本中轻松地将日志记录配置为标准输出：\n\n```\n# Set up logging\nimport logging\nfrom transitions import logger\nlogger.setLevel(logging.INFO)\n\n# Business as usual\nmachine = Machine(states=states, transitions=transitions, initial='solid')\n...\n```\n\n### 存储/恢复状态机实例\n\n如果想要存储或加载状态机，必须使用`Python3.3` 或较早版本的 `dill` 。\n\n```\nimport dill as pickle # only required for Python 3.3 and earlier\n\nm = Machine(states=['A', 'B', 'C'], initial='A')\nm.to_B()\nm.state  \n>>> B\n\n# store the machine\ndump = pickle.dumps(m)\n\n# load the Machine instance again\nm2 = pickle.loads(dump)\n\nm2.state\n>>> B\n\nm2.states.keys()\n>>> ['A', 'B', 'C']\n```\n\n\n\n以上介绍了 `Transitions` 的基本使用方法，手工翻译难免有些晦涩难懂之处，敬请谅解。除了这些基本用法之外，`Transitions` 还提供了一些扩展方法，比如图表可视化机器的当前状态、用于嵌套和重用的分层状态机、并行执行的线程安全锁等，这里暂时就不介绍了，先欠着吧，等以后深入使用 `Transitions` 库的时候再去学习。\n\n`Transitions` 英文完整版介绍请移步 [Transitions](https://github.com/tyarkoni/transitions) ","slug":"transitionstranslate","published":1,"updated":"2020-10-25T06:43:32.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrueqc600dhmolc0qavznx7","content":"<p>由于项目需要，使用到了Python的状态机库 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a> ，但GitHub上是英文文档，使用过后觉得还不错，遂手工翻译一下，加深理解，水平有限，如有翻译不当之处请Email (<a href=\"mailto:kevin920902@gmail.com\" target=\"_blank\" rel=\"noopener\">kevin920902@gmail.com</a>) 我。</p>\n<h2 id=\"Transitions\"><a href=\"#Transitions\" class=\"headerlink\" title=\"Transitions\"></a>Transitions</h2><p>Python 实现的轻量级、面向对象状态机，兼容Python 2.7+ 和 Python 3.0+。</p>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install transitions</span><br></pre></td></tr></table></figure>\n<p>方法二</p>\n<p>直接在 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">GitHub</a> 上clone仓库到本地，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>俗话说，接触一个新的工具库，100页的API文档、一千字的描述文档或更多的解释说明都不如一个简单的Demo，虽然这个说法我们无法验证真伪，但下面的例子会让你快速了解 <code>Transitions</code> 的基本用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">class NarcolepticSuperhero(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    # Define some states. Most of the time, narcoleptic superheroes are just like</span><br><span class=\"line\">    # everyone else. Except for...</span><br><span class=\"line\">    states = [&apos;asleep&apos;, &apos;hanging out&apos;, &apos;hungry&apos;, &apos;sweaty&apos;, &apos;saving the world&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\"></span><br><span class=\"line\">        # No anonymous superheroes on my watch! Every narcoleptic superhero gets</span><br><span class=\"line\">        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">        # What have we accomplished today?</span><br><span class=\"line\">        self.kittens_rescued = 0</span><br><span class=\"line\"></span><br><span class=\"line\">        # Initialize the state machine</span><br><span class=\"line\">        self.machine = Machine(model=self, states=NarcolepticSuperhero.states, initial=&apos;asleep&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add some transitions. We could also define these using a static list of</span><br><span class=\"line\">        # dictionaries, as we did with states above, and then pass the list to</span><br><span class=\"line\">        # the Machine initializer as the transitions= argument.</span><br><span class=\"line\"></span><br><span class=\"line\">        # At some point, every superhero must rise and shine.</span><br><span class=\"line\">        self.machine.add_transition(trigger=&apos;wake_up&apos;, source=&apos;asleep&apos;, dest=&apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Superheroes need to keep in shape.</span><br><span class=\"line\">        self.machine.add_transition(&apos;work_out&apos;, &apos;hanging out&apos;, &apos;hungry&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Those calories won&apos;t replenish themselves!</span><br><span class=\"line\">        self.machine.add_transition(&apos;eat&apos;, &apos;hungry&apos;, &apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Superheroes are always on call. ALWAYS. But they&apos;re not always</span><br><span class=\"line\">        # dressed in work-appropriate clothing.</span><br><span class=\"line\">        self.machine.add_transition(&apos;distress_call&apos;, &apos;*&apos;, &apos;saving the world&apos;,</span><br><span class=\"line\">                         before=&apos;change_into_super_secret_costume&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # When they get off work, they&apos;re all sweaty and disgusting. But before</span><br><span class=\"line\">        # they do anything else, they have to meticulously log their latest</span><br><span class=\"line\">        # escapades. Because the legal department says so.</span><br><span class=\"line\">        self.machine.add_transition(&apos;complete_mission&apos;, &apos;saving the world&apos;, &apos;sweaty&apos;,</span><br><span class=\"line\">                         after=&apos;update_journal&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Sweat is a disorder that can be remedied with water.</span><br><span class=\"line\">        # Unless you&apos;ve had a particularly long day, in which case... bed time!</span><br><span class=\"line\">        self.machine.add_transition(&apos;clean_up&apos;, &apos;sweaty&apos;, &apos;asleep&apos;, conditions=[&apos;is_exhausted&apos;])</span><br><span class=\"line\">        self.machine.add_transition(&apos;clean_up&apos;, &apos;sweaty&apos;, &apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Our NarcolepticSuperhero can fall asleep at pretty much any time.</span><br><span class=\"line\">        self.machine.add_transition(&apos;nap&apos;, &apos;*&apos;, &apos;asleep&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_journal(self):</span><br><span class=\"line\">        &quot;&quot;&quot; Dear Diary, today I saved Mr. Whiskers. Again. &quot;&quot;&quot;</span><br><span class=\"line\">        self.kittens_rescued += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    def is_exhausted(self):</span><br><span class=\"line\">        &quot;&quot;&quot; Basically a coin toss. &quot;&quot;&quot;</span><br><span class=\"line\">        return random.random() &lt; 0.5</span><br><span class=\"line\"></span><br><span class=\"line\">    def change_into_super_secret_costume(self):</span><br><span class=\"line\">        print(&quot;Beauty, eh?&quot;)</span><br></pre></td></tr></table></figure>\n<p>现在我们已经建立了一个 <code>NarcolepticSuperhero</code> 状态机，来看看具体怎么使用吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; batman = NarcolepticSuperhero(&quot;Batman&quot;)</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.wake_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;hanging out&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.nap()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.clean_up()</span><br><span class=\"line\">MachineError: &quot;Can&apos;t trigger event clean_up from state asleep!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.wake_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.work_out()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;hungry&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Batman still hasn&apos;t done anything useful...</span><br><span class=\"line\">&gt;&gt;&gt; batman.kittens_rescued</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"># We now take you live to the scene of a horrific kitten entreement...</span><br><span class=\"line\">&gt;&gt;&gt; batman.distress_call()</span><br><span class=\"line\">&apos;Beauty, eh?&apos;</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;saving the world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Back to the crib.</span><br><span class=\"line\">&gt;&gt;&gt; batman.complete_mission()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;sweaty&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.clean_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;   # Too tired to shower!</span><br><span class=\"line\"></span><br><span class=\"line\"># Another productive day, Alfred.</span><br><span class=\"line\">&gt;&gt;&gt; batman.kittens_rescued</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细文档\"><a href=\"#详细文档\" class=\"headerlink\" title=\"详细文档\"></a>详细文档</h2><h3 id=\"基本初始化方式\"><a href=\"#基本初始化方式\" class=\"headerlink\" title=\"基本初始化方式\"></a>基本初始化方式</h3><p>使状态机正常运行非常简单。 假设你有一个对象 <code>lump</code> ( <code>Matter</code> 类的一个实例) ，并且你想要管理它的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br></pre></td></tr></table></figure>\n<p>我们将 <code>lump</code> 绑定到状态机上来初始化一个<strong>最小状态机</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\">machine = Machine(model=lump, states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;], initial=&apos;solid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Lump now has state!</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<p> 之所以称之为<strong>最小状态机</strong>，因为这种状态机在技术上是可操作的，状态机初试状态为 <code>solid</code> ，但因为我们没有增加任何的转移动作(transitions：这应该是个动词，我在这翻译为转移动作)， 所以它实际上什么也没做。</p>\n<p>下面我们来定义更多的状态和转移动作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The states</span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># And some transitions between states. We&apos;re lazy, so we&apos;ll leave out</span><br><span class=\"line\"># the inverse phase transitions (freezing, condensation, etc.).</span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;sublimate&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;ionize&apos;, &apos;source&apos;: &apos;gas&apos;, &apos;dest&apos;: &apos;plasma&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize</span><br><span class=\"line\">machine = Machine(lump, states=states, transitions=transitions, initial=&apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Now lump maintains state...</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># And that state can change...</span><br><span class=\"line\">lump.evaporate()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;gas&apos;</span><br><span class=\"line\">lump.trigger(&apos;ionize&apos;)</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;plasma&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：我们为 <code>Matter</code>  实例 <code>lump</code> 绑定了 <code>evaporate()</code>  <code>ionize()</code> 等方法，每个方法触发相应的状态转换，你不必在任何地方明确定义这些方法，每个转换的名称通过绑定到模型上来传递给状态机初始化函数(<code>lump</code>)。<code>evaporate()</code>  <code>ionize()</code>另等方法都是静态来触发状态转移，如果我们想实现动态转移，可以使用<code>trigger</code> 方法。</p>\n<h3 id=\"状态集\"><a href=\"#状态集\" class=\"headerlink\" title=\"状态集\"></a>状态集</h3><p>毫无疑问，状态机的核心是状态集，上述介绍中我们通过传递给 <code>Machine</code> 初始化函数字符串列表来定义有效的模型状态，但是在 <code>Machine</code> 内部，状态以 <code>State</code> 对象的形式存储。</p>\n<p>我们可以通过多种方式初始化和跟新状态，比如：</p>\n<ul>\n<li>传递一个给定状态名的字符串给 <code>Machine</code> 初始化函数；</li>\n<li>直接初始化每个新的 <code>State</code> 对象；</li>\n<li>传递具有初始化参数的字典。</li>\n</ul>\n<p>以下代码片段说明了实现相同目标的几种方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Create a list of 3 states to pass to the Machine</span><br><span class=\"line\"># initializer. We can mix types; in this case, we</span><br><span class=\"line\"># pass one State, one string, and one dict.</span><br><span class=\"line\">states = [</span><br><span class=\"line\">    State(name=&apos;solid&apos;),</span><br><span class=\"line\">    &apos;liquid&apos;,</span><br><span class=\"line\">    &#123; &apos;name&apos;: &apos;gas&apos;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">machine = Machine(lump, states)</span><br><span class=\"line\"></span><br><span class=\"line\"># This alternative example illustrates more explicit</span><br><span class=\"line\"># addition of states and state callbacks, but the net</span><br><span class=\"line\"># result is identical to the above.</span><br><span class=\"line\">machine = Machine(lump)</span><br><span class=\"line\">solid = State(&apos;solid&apos;)</span><br><span class=\"line\">liquid = State(&apos;liquid&apos;)</span><br><span class=\"line\">gas = State(&apos;gas&apos;)</span><br><span class=\"line\">machine.add_states([solid, liquid, gas])</span><br></pre></td></tr></table></figure>\n<h4 id=\"回调方法\"><a href=\"#回调方法\" class=\"headerlink\" title=\"回调方法\"></a>回调方法</h4><p>我们可以给一个状态添加一系列的”进入“和”退出“的回调函数，还可以在初始化期间指定回调，或者稍后再添加回调。</p>\n<p>为方便起见，每当新的状态被添加到 <code>Machine</code> 中时，方法 <code>on_enter_«state name»</code> 和 <code>on_exit_«state name»</code> 都是在 <code>Machine</code> 上（而不是 <code>Model</code> 上）上动态创建的，并且允许我们动态地添加新的进入和退出回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Our old Matter class, now with  a couple of new methods we</span><br><span class=\"line\"># can trigger when entering or exit states.</span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\"></span><br><span class=\"line\"># Same states as above, but now we give StateA an exit callback</span><br><span class=\"line\">states = [</span><br><span class=\"line\">    State(name=&apos;solid&apos;, on_exit=[&apos;say_goodbye&apos;]),</span><br><span class=\"line\">    &apos;liquid&apos;,</span><br><span class=\"line\">    &#123; &apos;name&apos;: &apos;gas&apos; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">machine = Machine(lump, states=states)</span><br><span class=\"line\">machine.add_transition(&apos;sublimate&apos;, &apos;solid&apos;, &apos;gas&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Callbacks can also be added after initialization using</span><br><span class=\"line\"># the dynamically added on_enter_ and on_exit_ methods.</span><br><span class=\"line\"># Note that the initial call to add the callback is made</span><br><span class=\"line\"># on the Machine and not on the model.</span><br><span class=\"line\">machine.on_enter_gas(&apos;say_hello&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Test out the callbacks...</span><br><span class=\"line\">machine.set_state(&apos;solid&apos;)</span><br><span class=\"line\">lump.sublimate()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;goodbye, old state!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;hello, new state!&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：首次初始化状态机时， <code>on_enter_«state name»</code> 回调函数是不会触发的。例如，我们定义了一个回调函数 <code>on_enter_A()</code> ，并给状态机初始化状态为 <code>initial=&#39;A&#39;</code> ，<code>on_enter_A()</code> 会在下次进入状态A的时候出发，首次并不会触发。如果我们想在初始化的时候就触发 <code>on_enter_A()</code> 方法，可以创建一个虚拟的初始状态，然后调用 <code>to_A()</code> 方法，而不是 <code>__init__</code> 方法。 </p>\n<p>除了在初始化状态机传递回调或动态添加回调，为增加代码的清晰度，还可以在模型类本身中定义回调。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\">    def on_enter_A(self): print(&quot;We&apos;ve just entered state A!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br></pre></td></tr></table></figure>\n<p>现在，任何时候 <code>lump</code> 转移到状态A，类<code>Matter</code> 中的 <code>on_enter_A()</code> 方法总是会触发。</p>\n<h4 id=\"检查状态\"><a href=\"#检查状态\" class=\"headerlink\" title=\"检查状态\"></a>检查状态</h4><p>我们可以随时通过以下方式检查模型的当前状态</p>\n<ul>\n<li>检查 <code>.state</code> 属性；</li>\n<li>调用 <code>is_«state name»()</code>  方法。</li>\n</ul>\n<p>如果要检索当前状态的实际状态对象，可以通过 <code>Machine</code> 实例的 <code>get_state()</code> 方法来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump.is_gas()</span><br><span class=\"line\">&gt;&gt;&gt; False</span><br><span class=\"line\">lump.is_solid()</span><br><span class=\"line\">&gt;&gt;&gt; True</span><br><span class=\"line\">machine.get_state(lump.state).name</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态转换\"><a href=\"#状态转换\" class=\"headerlink\" title=\"状态转换\"></a>状态转换</h3><p>上面的一些例子已经说明了状态转移的使用，但是在这里我们将更详细地探讨它们。</p>\n<p>与状态一样，每个状态转换在内部用 <code>Transitions</code> 对象来表示，我们可以传递一个字典或字典列表来快速初始化状态转换集合。</p>\n<p>如上面我们已经写过的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;sublimate&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;ionize&apos;, &apos;source&apos;: &apos;gas&apos;, &apos;dest&apos;: &apos;plasma&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">machine = Machine(model=Matter(), states=states, transitions=transitions)</span><br></pre></td></tr></table></figure>\n<p>使用字典定义转换有利于代码的清晰，但显得比较笨重。比较简单的方法是使用列表定义转换，只需确保每个列表中的元素与 <code>Transition</code> 初始化中的位置参数的顺序相同(比如 <code>trigger</code>, <code>source</code>, <code>destination</code> 等)</p>\n<p>我们可以这样定义转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transitions = [</span><br><span class=\"line\">    [&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;],</span><br><span class=\"line\">    [&apos;evaporate&apos;, &apos;liquid&apos;, &apos;gas&apos;],</span><br><span class=\"line\">    [&apos;sublimate&apos;, &apos;solid&apos;, &apos;gas&apos;],</span><br><span class=\"line\">    [&apos;ionize&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>另外，我们也可以在状态机初始化之后添加转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(model=lump, states=states, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, source=&apos;solid&apos;, dest=&apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<p> <code>trigger</code> 参数定义了绑定到模型上的触发方法的名称，当回调这个方法的时候，状态机会执行相应的状态转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; lump.state</span><br><span class=\"line\">&apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>当我们调用非法的转换时，<code>Machine</code> 会抛出异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lump.to_gas()</span><br><span class=\"line\">&gt;&gt;&gt; # This won&apos;t work because only objects in a solid state can melt</span><br><span class=\"line\">&gt;&gt;&gt; lump.melt()</span><br><span class=\"line\">transitions.core.MachineError: &quot;Can&apos;t trigger event melt from state gas!&quot;</span><br></pre></td></tr></table></figure>\n<p>这种做法通常是可取的，因为它有助于提醒代码中的问题。但是在某些情况下，我们希望忽略这些非法转换，这时可以设置 <code>ignore_invalid_triggers=True</code> (可以全部忽略，也可忽略特定一条)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; # Globally suppress invalid trigger exceptions</span><br><span class=\"line\">&gt;&gt;&gt; m = Machine(lump, states, initial=&apos;solid&apos;, ignore_invalid_triggers=True)</span><br><span class=\"line\">&gt;&gt;&gt; # ...or suppress for only one group of states</span><br><span class=\"line\">&gt;&gt;&gt; states = [&apos;new_state1&apos;, &apos;new_state2&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; m.add_states(states, ignore_invalid_triggers=True)</span><br><span class=\"line\">&gt;&gt;&gt; # ...or even just for a single state. Here, exceptions will only be suppressed when the current state is A.</span><br><span class=\"line\">&gt;&gt;&gt; states = [State(&apos;A&apos;, ignore_invalid_triggers=True), &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; m = Machine(lump, states)</span><br></pre></td></tr></table></figure>\n<p>如果在做状态转换之前，希望知道在当前状态下，哪些是合法的转换，可以使用 <code>get_triggers()</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m.get_triggers(&apos;solid&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;melt&apos;, &apos;sublimate&apos;]</span><br><span class=\"line\">m.get_triggers(&apos;liquid&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;evaporate&apos;]</span><br><span class=\"line\">m.get_triggers(&apos;plasma&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; []</span><br><span class=\"line\"># you can also query several states at once</span><br><span class=\"line\">m.get_triggers(&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;melt&apos;, &apos;evaporate&apos;, &apos;sublimate&apos;, &apos;ionize&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动转换所有状态\"><a href=\"#自动转换所有状态\" class=\"headerlink\" title=\"自动转换所有状态\"></a>自动转换所有状态</h4><p>除了显式添加的任何转换之外，每当将状态添加到 <code>Machine</code> 实例时，都会自动创建一个 <code>to_«state»()</code> 方法，该方法无论状态机当前处于哪种状态，都会转换到目标状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.to_liquid()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\">lump.to_solid()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<p>我们可以在状态机初始化的时候设置 <code>auto_transitions=False</code> 禁用这个功能。</p>\n<h4 id=\"多状态转换\"><a href=\"#多状态转换\" class=\"headerlink\" title=\"多状态转换\"></a>多状态转换</h4><p>给定的触发器可以附加到多个转换，其中一些可以在相同的状态下潜在地开始或结束。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, [&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;], &apos;plasma&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, &apos;plasma&apos;, &apos;solid&apos;)</span><br><span class=\"line\"># This next transition will never execute</span><br><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, &apos;plasma&apos;, &apos;gas&apos;)</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，如果当前状态是 <code>plasma</code> 调用 <code>transmogrify()</code> ，会转换到 <code>solid</code> 状态，然后继续转换到 <code>plasma</code> 状态。<strong>注意</strong>：只有第一个匹配的转换将执行，因此，上述最后一行中定义的转换将不会做任何事情。</p>\n<p>我们还可以通过使用 <code>*</code> 通配符来引发触发器从所有状态转换到特定状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;to_liquid&apos;, &apos;*&apos;, &apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<p>一个反身触发（触发器具有与源和目标相同的状态）可以使用“=”来表示目的状态，比如通过 <code>touch</code> 触发，<code>solid</code> 的目标状态为自身。如果我们希望同一个反身触发器应用到多个状态中，使用“=”是比较方便的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;touch&apos;, [&apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;], &apos;=&apos;, after=&apos;change_shape&apos;)</span><br></pre></td></tr></table></figure>\n<p>通过上面的语句， <code>&#39;liquid&#39;, &#39;gas&#39;, &#39;plasma&#39;</code> 三个状态通过 <code>touch</code> 触发器，可以到达的目的状态分别是 <code>&#39;liquid&#39;, &#39;gas&#39;, &#39;plasma&#39;</code> 。</p>\n<h4 id=\"有序转换\"><a href=\"#有序转换\" class=\"headerlink\" title=\"有序转换\"></a>有序转换</h4><p>比如我们现在有这样一个需求，状态的转换是遵循自定义的序列的，如给定状态 <code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code>，我们可能需要这样的状态转换 <code>A → B, B → C, C → A</code> （没有其他的非法转换）。为了实现这个功能，<code>Transitions</code> 在 <code>Machine</code> 类中提供了 <code>add_ordered_transitions()</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">states = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\"> # See the &quot;alternative initialization&quot; section for an explanation of the 1st argument to init</span><br><span class=\"line\">machine = Machine(states=states, initial=&apos;A&apos;)</span><br><span class=\"line\">machine.add_ordered_transitions()</span><br><span class=\"line\">machine.next_state()</span><br><span class=\"line\">print(machine.state)</span><br><span class=\"line\">&gt;&gt;&gt; &apos;B&apos;</span><br><span class=\"line\"># We can also define a different order of transitions</span><br><span class=\"line\">machine = Machine(states=states, initial=&apos;A&apos;)</span><br><span class=\"line\">machine.add_ordered_transitions([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br><span class=\"line\">machine.next_state()</span><br><span class=\"line\">print(machine.state)</span><br><span class=\"line\">&gt;&gt;&gt; &apos;C&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"排队转换\"><a href=\"#排队转换\" class=\"headerlink\" title=\"排队转换\"></a>排队转换</h4><p>Transitions中的默认行为是立即处理事件。也就是说，调用绑定在 <code>after</code> 上的回调函数之前， <code>on_enter</code> 方法中的事件会预先处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def go_to_C():</span><br><span class=\"line\">    global machine</span><br><span class=\"line\">    machine.to_C()</span><br><span class=\"line\"></span><br><span class=\"line\">def after_advance():</span><br><span class=\"line\">    print(&quot;I am in state B now!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def entering_C():</span><br><span class=\"line\">    print(&quot;I am in state C now!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">states = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\">machine = Machine(states=states)</span><br><span class=\"line\"></span><br><span class=\"line\"># we want a message when state transition to B has been completed</span><br><span class=\"line\">machine.add_transition(&apos;advance&apos;, &apos;A&apos;, &apos;B&apos;, after=after_advance)</span><br><span class=\"line\"></span><br><span class=\"line\"># call transition from state B to state C</span><br><span class=\"line\">machine.on_enter_B(go_to_C)</span><br><span class=\"line\"></span><br><span class=\"line\"># we also want a message when entering state C</span><br><span class=\"line\">machine.on_enter_C(entering_C)</span><br><span class=\"line\">machine.advance()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state C now!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state B now!&apos; # what?</span><br></pre></td></tr></table></figure>\n<p>上述状态机的执行顺序为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare -&gt; before -&gt; on_enter_B -&gt; on_enter_C -&gt; after.</span><br></pre></td></tr></table></figure>\n<p>如果启用排队处理，则在触发下一个转换之前，转换将完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, queued=True)</span><br><span class=\"line\">...</span><br><span class=\"line\">machine.advance()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state B now!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state C now!&apos; # That&apos;s better!</span><br></pre></td></tr></table></figure>\n<p>执行顺序为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare -&gt; before -&gt; on_enter_B -&gt; queue(to_C) -&gt; after  -&gt; on_enter_C.</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：当使用排队处理事件时，触发器的调用始终返回True，所以在排队执行过程中，无法确定一个包含排队回调函数的转换最终是否能成功，即使是在处理一个事件的时候。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;jump&apos;, &apos;A&apos;, &apos;C&apos;, conditions=&apos;will_fail&apos;)</span><br><span class=\"line\">...</span><br><span class=\"line\"># queued=False</span><br><span class=\"line\">machine.jump()</span><br><span class=\"line\">&gt;&gt;&gt; False</span><br><span class=\"line\"># queued=True</span><br><span class=\"line\">machine.jump()</span><br><span class=\"line\">&gt;&gt;&gt; True</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件转换\"><a href=\"#条件转换\" class=\"headerlink\" title=\"条件转换\"></a>条件转换</h4><p>在某些情况下，我们可能需要在某些条件成立的时候去执行特定的转换，这个时候，<code>conditions</code> 就派上用场了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Our Matter class, now with a bunch of methods that return booleans.</span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def is_flammable(self): return False</span><br><span class=\"line\">    def is_really_hot(self): return True</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;gas&apos;, conditions=&apos;is_flammable&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;liquid&apos;, conditions=[&apos;is_really_hot&apos;])</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，如果模型初始化的状态为 <code>solid</code> ，当条件 <code>is_flammable</code> 成立时，调用 <code>heat()</code> 会转换到 <code>gas</code> 状态。同样，如果条件 <code>is_really_hot</code> 成立，调用 <code>heat()</code> 会转换到 <code>liquid</code> 状态。</p>\n<p>我们还可能在某些条件不成立的条件下，转换到另一状态，<code>Transitions</code> 为我们提供了 <code>unless</code> 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;gas&apos;, unless=[&apos;is_flammable&apos;, &apos;is_really_hot&apos;])</span><br></pre></td></tr></table></figure>\n<p>这时，如果 <code>is_flammable(), is_really_hot()</code> 返回的都是 <code>False</code> ，模型调用 <code>heat()</code> 会从 <code>solid</code> 转换到 <code>gas</code> 状态。</p>\n<p><strong>注意</strong>：条件检查方法会被动接收传递给触发函数的参数或数据对象。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.heat(temp=74)</span><br><span class=\"line\"># equivalent to lump.trigger(&apos;heat&apos;, temp=74)</span><br></pre></td></tr></table></figure>\n<p>这样会将 <code>temp=74</code> 的可选参数传递给 <code>is_flammable()</code> 方法（以 <code>EventData</code> 实例的方式），参数的传递我们在后面会介绍。</p>\n<h4 id=\"回调方法-1\"><a href=\"#回调方法-1\" class=\"headerlink\" title=\"回调方法\"></a>回调方法</h4><p>我们可以将回调方法绑定到状态集和转换集上，每一个转换都包含 <code>before</code> 和 <code>after</code> 属性，这也是我们比较常用的，这两个属性包含了一系列在状态转换前后可以调用的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def make_hissing_noises(self): print(&quot;HISSSSSSSSSSSSSSSS&quot;)</span><br><span class=\"line\">    def disappear(self): print(&quot;where&apos;d all the liquid go?&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos;, &apos;before&apos;: &apos;make_hissing_noises&apos;&#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos;, &apos;after&apos;: &apos;disappear&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;HISSSSSSSSSSSSSSSS&quot;</span><br><span class=\"line\">lump.evaporate()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;where&apos;d all the liquid go?&quot;</span><br></pre></td></tr></table></figure>\n<p>在状态转换一开始，在其他转换开始执行之前，我们也可以使用 <code>prepare</code> 回调函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    heat = False</span><br><span class=\"line\">    attempts = 0</span><br><span class=\"line\">    def count_attempts(self): self.attempts += 1</span><br><span class=\"line\">    def is_really_hot(self): return self.heat</span><br><span class=\"line\">    def heat_up(self): self.heat = random.random() &lt; 0.25</span><br><span class=\"line\">    def stats(self): print(&apos;It took you %i attempts to melt the lump!&apos; %self.attempts)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos;, &apos;prepare&apos;: [&apos;heat_up&apos;, &apos;count_attempts&apos;], &apos;conditions&apos;: &apos;is_really_hot&apos;, &apos;after&apos;: &apos;stats&apos;&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;It took you 4 attempts to melt the lump!&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：除非当前状态是定义在转换集上有效的状态，否则，<code>prepare</code> 回调是不会起作用的。</p>\n<p>如果在每一个转换执行之前或之后都需要进行一些默认操作，我们可以在状态机初始化的时候显示使用 <code>before_state_change</code>  和 <code>after_state_change</code>  属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def make_hissing_noises(self): print(&quot;HISSSSSSSSSSSSSSSS&quot;)</span><br><span class=\"line\">    def disappear(self): print(&quot;where&apos;d all the liquid go?&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">m = Machine(lump, states, before_state_change=&apos;make_hissing_noises&apos;, after_state_change=&apos;disappear&apos;)</span><br><span class=\"line\">lump.to_gas()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;HISSSSSSSSSSSSSSSS&quot;</span><br><span class=\"line\">&gt;&gt;&gt; &quot;where&apos;d all the liquid go?&quot;</span><br></pre></td></tr></table></figure>\n<p>还有一些可以独立使用的关键字：</p>\n<ul>\n<li><code>prepare_event</code> ：通过 <code>prepare_event</code> 关键字传递给状态机的回调方法，在处理可能发生的状态转换（包括私有的 <code>prepare</code> 回调方法）之前，仅执行一次；</li>\n<li><code>finalize_event</code> ：通过 <code>finalize_event</code> 关键字传递给状态机的回调方法，不管转换是否成功，都会被执行；</li>\n<li><code>send_event</code> ：如果在状态转换过程中出现了错误，这个错误会绑定到 <code>event_data</code> 上，我们可以使用 <code>send_event=True</code> 来检索错误 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\"></span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def raise_error(self, event): raise ValueError(&quot;Oh no&quot;)</span><br><span class=\"line\">    def prepare(self, event): print(&quot;I am ready!&quot;)</span><br><span class=\"line\">    def finalize(self, event): print(&quot;Result: &quot;, type(event.error), event.error)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">m = Machine(lump, states, prepare_event=&apos;prepare&apos;, before_state_change=&apos;raise_error&apos;,</span><br><span class=\"line\">            finalize_event=&apos;finalize&apos;, send_event=True)</span><br><span class=\"line\">try:</span><br><span class=\"line\">    lump.to_gas()</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">print(lump.state)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; I am ready!</span><br><span class=\"line\">&gt;&gt;&gt; Result:  &lt;class &apos;ValueError&apos;&gt; Oh no</span><br><span class=\"line\">&gt;&gt;&gt; initial</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><p>以下是转换集上回调方法可以执行的命令：</p>\n<table>\n<thead>\n<tr>\n<th>回调</th>\n<th>状态</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>machine.prepare_event</code></td>\n<td>源状态</td>\n<td>在私有转换执行之前仅执行一次</td>\n</tr>\n<tr>\n<td><code>transition.prepare</code></td>\n<td>源状态</td>\n<td>转换一开始就执行</td>\n</tr>\n<tr>\n<td><code>transition.conditions</code></td>\n<td>源状态</td>\n<td>可使转换失败或停止</td>\n</tr>\n<tr>\n<td><code>transition.unless</code></td>\n<td>源状态</td>\n<td>可使转换失败或停止</td>\n</tr>\n<tr>\n<td><code>machine.before_state_change</code></td>\n<td>源状态</td>\n<td>声明在模型上的默认回调方法</td>\n</tr>\n<tr>\n<td><code>transition.before</code></td>\n<td>源状态</td>\n<td></td>\n</tr>\n<tr>\n<td><code>state.on_exit</code></td>\n<td>源状态</td>\n<td>声明在源状态上的回调方法</td>\n</tr>\n<tr>\n<td><code>&lt;STATE CHANGE&gt;</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>state.on_enter</code></td>\n<td>目的状态</td>\n<td>声明在目的状态上的回调方法</td>\n</tr>\n<tr>\n<td><code>transition.after</code></td>\n<td>目的状态</td>\n<td></td>\n</tr>\n<tr>\n<td><code>machine.after_state_change</code></td>\n<td>目的状态</td>\n<td>声明在模型上的默认回调方法</td>\n</tr>\n<tr>\n<td><code>machine.finalize_event</code></td>\n<td>源状态/目的状态</td>\n<td>即使出现错误或异常，回调方法也会执行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"传递数据\"><a href=\"#传递数据\" class=\"headerlink\" title=\"传递数据\"></a>传递数据</h3><p>在大多数情况下，我们需要传递给注册在状态机中的回调方法一些参数，来反应当前模型的状态和进行一些必要计算。<code>Transitions</code> 提供了两种方法。</p>\n<p>第一种方法（默认方法）：</p>\n<p>我们可以直接传递参数给触发器方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def __init__(self): self.set_environment()</span><br><span class=\"line\">    def set_environment(self, temp=0, pressure=101.325):</span><br><span class=\"line\">        self.temp = temp</span><br><span class=\"line\">        self.pressure = pressure</span><br><span class=\"line\">    def print_temperature(self): print(&quot;Current temperature is %d degrees celsius.&quot; % self.temp)</span><br><span class=\"line\">    def print_pressure(self): print(&quot;Current pressure is %.2f kPa.&quot; % self.pressure)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, [&apos;solid&apos;, &apos;liquid&apos;], initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;, before=&apos;set_environment&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump.melt(45)  # positional arg;</span><br><span class=\"line\"># equivalent to lump.trigger(&apos;melt&apos;, 45)</span><br><span class=\"line\">lump.print_temperature()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current temperature is 45 degrees celsius.&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">machine.set_state(&apos;solid&apos;)  # reset state so we can melt again</span><br><span class=\"line\">lump.melt(pressure=300.23)  # keyword args also work</span><br><span class=\"line\">lump.print_pressure()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current pressure is 300.23 kPa.&apos;</span><br></pre></td></tr></table></figure>\n<p>我们通过这种方法传递任何参数给触发器方法。</p>\n<p>但是这种方式有一种局限性：状态转换触发的每一个回调方法都必须处理所有的参数。如果我们的不同回调方法需要不同的参数，这样就会导致一些不必要的麻烦。</p>\n<p>为了解决这个问题，<code>Transitions</code> 提供了另一种方法，上文中我们提到过，参数可以以<code>EventData</code> 实例的方式传递。在<code>Machine</code> 初始化的时候设置 <code>send_event=True</code> ，这样，所有传递给非触发器的参数都以<code>EventData</code> 实例的方式传递给回调方法，为了方便我们随时访问与事件相关的源状态、模型、转换、触发等参数，<code>EventData</code> 实例会维护这些参数的内部引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.temp = 0</span><br><span class=\"line\">        self.pressure = 101.325</span><br><span class=\"line\"></span><br><span class=\"line\">    # Note that the sole argument is now the EventData instance.</span><br><span class=\"line\">    # This object stores positional arguments passed to the trigger method in the</span><br><span class=\"line\">    # .args property, and stores keywords arguments in the .kwargs dictionary.</span><br><span class=\"line\">    def set_environment(self, event):</span><br><span class=\"line\">        self.temp = event.kwargs.get(&apos;temp&apos;, 0)</span><br><span class=\"line\">        self.pressure = event.kwargs.get(&apos;pressure&apos;, 101.325)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_pressure(self): print(&quot;Current pressure is %.2f kPa.&quot; % self.pressure)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, [&apos;solid&apos;, &apos;liquid&apos;], send_event=True, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;, before=&apos;set_environment&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump.melt(temp=45, pressure=1853.68)  # keyword args</span><br><span class=\"line\">lump.print_pressure()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current pressure is 1853.68 kPa.&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他初始化方式\"><a href=\"#其他初始化方式\" class=\"headerlink\" title=\"其他初始化方式\"></a>其他初始化方式</h3><p>在以上所有的示例中，我们将新的 <code>Machine</code> 实例绑定到一个单独的模型上（<code>Matter</code> 类的实例 <code>lump</code>），虽然这种方式可以使我们的类和回调方法比较整洁，但是我们必须能跟踪到状态机上调用的方法，并且知道模型调用的这些方法绑定了哪个状态机（比如： <code>lump.on_enter_StateA()</code> vs <code>machine.add_transition()</code>）</p>\n<p>庆幸的是，<code>Transitions</code> 为我们提供了两种不同的初始化方式。</p>\n<p>第一种方式，我们可以创建一个独立的状态机，完全不需要其他模型，在初始化的时候忽略模型参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.melt()</span><br><span class=\"line\">machine.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>如果我们使用这种方式初始化状态机，我们就可以直接绑定所有的触发事件和回调方法到 <code>Machine</code> 实例上。</p>\n<p>这种方法有利于在一个地方整合所有的状态机功能，但如果考虑到状态逻辑应该包含在模型本身中，而不是单独出来，这种方式恐怕也不是最好的。</p>\n<p>一种替代的办法是让 <code>Machine</code> 要绑定的模型继承 <code>Machine</code> 类，只要重写 <code>Machine</code> 的 <code>__init__()</code> 方法即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(Machine):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        states = [&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;]</span><br><span class=\"line\">        Machine.__init__(self, states=states, initial=&apos;solid&apos;)</span><br><span class=\"line\">        self.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经整合所有的状态机功能到 <code>lump</code> 模型中，这比将功能独立出来让人感觉更舒服。</p>\n<p>如果我们绑定多个模型到 <code>Machine</code> 中，状态机也是可以处理的。如果想要添加模型和 <code>Machine</code> 实例本身，我们可以在初始化的时候使用 <code>self</code> 关键字（ <code>Machine(model=[&#39;self&#39;, model1, ...])</code>），也可以创建一个单独的状态机，然后通过 <code>machine.add_model</code> 动态注册模型到状态机中，如果模型不再使用的情况下，应该调用  <code>machine.remove_model</code>  来回收模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">lump1 = Matter()</span><br><span class=\"line\">lump2 = Matter()</span><br><span class=\"line\"></span><br><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;, add_self=False)</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_model(lump1)</span><br><span class=\"line\">machine.add_model(lump2, initial=&apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump1.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump2.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">machine.remove_model([lump1, lump2])</span><br><span class=\"line\">del lump1  # lump1 is garbage collected</span><br><span class=\"line\">del lump2  # lump2 is garbage collected</span><br></pre></td></tr></table></figure>\n<p>如果在状态机初始化的时候没有提供初始状态，在添加模型的时候就必须提供这个初始状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, transitions=transitions, add_self=False)</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_model(Matter())</span><br><span class=\"line\">&gt;&gt;&gt; &quot;MachineError: No initial state configured for machine, must specify when adding model.&quot;</span><br><span class=\"line\">machine.add_model(Matter(), initial=&apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p><code>Transitions</code> 提供一些基本的日志功能，使用 <code>Python</code> 标准的 <code>logging</code> 模块将一些如状态转换、转换触发、条件检查等信息作为 <code>INFO</code> 级别的信息记录下来，我们可以在脚本中轻松地将日志记录配置为标准输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set up logging</span><br><span class=\"line\">import logging</span><br><span class=\"line\">from transitions import logger</span><br><span class=\"line\">logger.setLevel(logging.INFO)</span><br><span class=\"line\"></span><br><span class=\"line\"># Business as usual</span><br><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"存储-恢复状态机实例\"><a href=\"#存储-恢复状态机实例\" class=\"headerlink\" title=\"存储/恢复状态机实例\"></a>存储/恢复状态机实例</h3><p>如果想要存储或加载状态机，必须使用<code>Python3.3</code> 或较早版本的 <code>dill</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dill as pickle # only required for Python 3.3 and earlier</span><br><span class=\"line\"></span><br><span class=\"line\">m = Machine(states=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;], initial=&apos;A&apos;)</span><br><span class=\"line\">m.to_B()</span><br><span class=\"line\">m.state  </span><br><span class=\"line\">&gt;&gt;&gt; B</span><br><span class=\"line\"></span><br><span class=\"line\"># store the machine</span><br><span class=\"line\">dump = pickle.dumps(m)</span><br><span class=\"line\"></span><br><span class=\"line\"># load the Machine instance again</span><br><span class=\"line\">m2 = pickle.loads(dump)</span><br><span class=\"line\"></span><br><span class=\"line\">m2.state</span><br><span class=\"line\">&gt;&gt;&gt; B</span><br><span class=\"line\"></span><br><span class=\"line\">m2.states.keys()</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br></pre></td></tr></table></figure>\n<p>以上介绍了 <code>Transitions</code> 的基本使用方法，手工翻译难免有些晦涩难懂之处，敬请谅解。除了这些基本用法之外，<code>Transitions</code> 还提供了一些扩展方法，比如图表可视化机器的当前状态、用于嵌套和重用的分层状态机、并行执行的线程安全锁等，这里暂时就不介绍了，先欠着吧，等以后深入使用 <code>Transitions</code> 库的时候再去学习。</p>\n<p><code>Transitions</code> 英文完整版介绍请移步 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于项目需要，使用到了Python的状态机库 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a> ，但GitHub上是英文文档，使用过后觉得还不错，遂手工翻译一下，加深理解，水平有限，如有翻译不当之处请Email (<a href=\"mailto:kevin920902@gmail.com\" target=\"_blank\" rel=\"noopener\">kevin920902@gmail.com</a>) 我。</p>\n<h2 id=\"Transitions\"><a href=\"#Transitions\" class=\"headerlink\" title=\"Transitions\"></a>Transitions</h2><p>Python 实现的轻量级、面向对象状态机，兼容Python 2.7+ 和 Python 3.0+。</p>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>方法一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install transitions</span><br></pre></td></tr></table></figure>\n<p>方法二</p>\n<p>直接在 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">GitHub</a> 上clone仓库到本地，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>俗话说，接触一个新的工具库，100页的API文档、一千字的描述文档或更多的解释说明都不如一个简单的Demo，虽然这个说法我们无法验证真伪，但下面的例子会让你快速了解 <code>Transitions</code> 的基本用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">class NarcolepticSuperhero(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    # Define some states. Most of the time, narcoleptic superheroes are just like</span><br><span class=\"line\">    # everyone else. Except for...</span><br><span class=\"line\">    states = [&apos;asleep&apos;, &apos;hanging out&apos;, &apos;hungry&apos;, &apos;sweaty&apos;, &apos;saving the world&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\"></span><br><span class=\"line\">        # No anonymous superheroes on my watch! Every narcoleptic superhero gets</span><br><span class=\"line\">        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">        # What have we accomplished today?</span><br><span class=\"line\">        self.kittens_rescued = 0</span><br><span class=\"line\"></span><br><span class=\"line\">        # Initialize the state machine</span><br><span class=\"line\">        self.machine = Machine(model=self, states=NarcolepticSuperhero.states, initial=&apos;asleep&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add some transitions. We could also define these using a static list of</span><br><span class=\"line\">        # dictionaries, as we did with states above, and then pass the list to</span><br><span class=\"line\">        # the Machine initializer as the transitions= argument.</span><br><span class=\"line\"></span><br><span class=\"line\">        # At some point, every superhero must rise and shine.</span><br><span class=\"line\">        self.machine.add_transition(trigger=&apos;wake_up&apos;, source=&apos;asleep&apos;, dest=&apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Superheroes need to keep in shape.</span><br><span class=\"line\">        self.machine.add_transition(&apos;work_out&apos;, &apos;hanging out&apos;, &apos;hungry&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Those calories won&apos;t replenish themselves!</span><br><span class=\"line\">        self.machine.add_transition(&apos;eat&apos;, &apos;hungry&apos;, &apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Superheroes are always on call. ALWAYS. But they&apos;re not always</span><br><span class=\"line\">        # dressed in work-appropriate clothing.</span><br><span class=\"line\">        self.machine.add_transition(&apos;distress_call&apos;, &apos;*&apos;, &apos;saving the world&apos;,</span><br><span class=\"line\">                         before=&apos;change_into_super_secret_costume&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # When they get off work, they&apos;re all sweaty and disgusting. But before</span><br><span class=\"line\">        # they do anything else, they have to meticulously log their latest</span><br><span class=\"line\">        # escapades. Because the legal department says so.</span><br><span class=\"line\">        self.machine.add_transition(&apos;complete_mission&apos;, &apos;saving the world&apos;, &apos;sweaty&apos;,</span><br><span class=\"line\">                         after=&apos;update_journal&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Sweat is a disorder that can be remedied with water.</span><br><span class=\"line\">        # Unless you&apos;ve had a particularly long day, in which case... bed time!</span><br><span class=\"line\">        self.machine.add_transition(&apos;clean_up&apos;, &apos;sweaty&apos;, &apos;asleep&apos;, conditions=[&apos;is_exhausted&apos;])</span><br><span class=\"line\">        self.machine.add_transition(&apos;clean_up&apos;, &apos;sweaty&apos;, &apos;hanging out&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # Our NarcolepticSuperhero can fall asleep at pretty much any time.</span><br><span class=\"line\">        self.machine.add_transition(&apos;nap&apos;, &apos;*&apos;, &apos;asleep&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_journal(self):</span><br><span class=\"line\">        &quot;&quot;&quot; Dear Diary, today I saved Mr. Whiskers. Again. &quot;&quot;&quot;</span><br><span class=\"line\">        self.kittens_rescued += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    def is_exhausted(self):</span><br><span class=\"line\">        &quot;&quot;&quot; Basically a coin toss. &quot;&quot;&quot;</span><br><span class=\"line\">        return random.random() &lt; 0.5</span><br><span class=\"line\"></span><br><span class=\"line\">    def change_into_super_secret_costume(self):</span><br><span class=\"line\">        print(&quot;Beauty, eh?&quot;)</span><br></pre></td></tr></table></figure>\n<p>现在我们已经建立了一个 <code>NarcolepticSuperhero</code> 状态机，来看看具体怎么使用吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; batman = NarcolepticSuperhero(&quot;Batman&quot;)</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.wake_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;hanging out&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.nap()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.clean_up()</span><br><span class=\"line\">MachineError: &quot;Can&apos;t trigger event clean_up from state asleep!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.wake_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.work_out()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;hungry&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Batman still hasn&apos;t done anything useful...</span><br><span class=\"line\">&gt;&gt;&gt; batman.kittens_rescued</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"># We now take you live to the scene of a horrific kitten entreement...</span><br><span class=\"line\">&gt;&gt;&gt; batman.distress_call()</span><br><span class=\"line\">&apos;Beauty, eh?&apos;</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;saving the world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># Back to the crib.</span><br><span class=\"line\">&gt;&gt;&gt; batman.complete_mission()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;sweaty&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; batman.clean_up()</span><br><span class=\"line\">&gt;&gt;&gt; batman.state</span><br><span class=\"line\">&apos;asleep&apos;   # Too tired to shower!</span><br><span class=\"line\"></span><br><span class=\"line\"># Another productive day, Alfred.</span><br><span class=\"line\">&gt;&gt;&gt; batman.kittens_rescued</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细文档\"><a href=\"#详细文档\" class=\"headerlink\" title=\"详细文档\"></a>详细文档</h2><h3 id=\"基本初始化方式\"><a href=\"#基本初始化方式\" class=\"headerlink\" title=\"基本初始化方式\"></a>基本初始化方式</h3><p>使状态机正常运行非常简单。 假设你有一个对象 <code>lump</code> ( <code>Matter</code> 类的一个实例) ，并且你想要管理它的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br></pre></td></tr></table></figure>\n<p>我们将 <code>lump</code> 绑定到状态机上来初始化一个<strong>最小状态机</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\">machine = Machine(model=lump, states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;], initial=&apos;solid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Lump now has state!</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<p> 之所以称之为<strong>最小状态机</strong>，因为这种状态机在技术上是可操作的，状态机初试状态为 <code>solid</code> ，但因为我们没有增加任何的转移动作(transitions：这应该是个动词，我在这翻译为转移动作)， 所以它实际上什么也没做。</p>\n<p>下面我们来定义更多的状态和转移动作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The states</span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># And some transitions between states. We&apos;re lazy, so we&apos;ll leave out</span><br><span class=\"line\"># the inverse phase transitions (freezing, condensation, etc.).</span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;sublimate&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;ionize&apos;, &apos;source&apos;: &apos;gas&apos;, &apos;dest&apos;: &apos;plasma&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize</span><br><span class=\"line\">machine = Machine(lump, states=states, transitions=transitions, initial=&apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Now lump maintains state...</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># And that state can change...</span><br><span class=\"line\">lump.evaporate()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;gas&apos;</span><br><span class=\"line\">lump.trigger(&apos;ionize&apos;)</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;plasma&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：我们为 <code>Matter</code>  实例 <code>lump</code> 绑定了 <code>evaporate()</code>  <code>ionize()</code> 等方法，每个方法触发相应的状态转换，你不必在任何地方明确定义这些方法，每个转换的名称通过绑定到模型上来传递给状态机初始化函数(<code>lump</code>)。<code>evaporate()</code>  <code>ionize()</code>另等方法都是静态来触发状态转移，如果我们想实现动态转移，可以使用<code>trigger</code> 方法。</p>\n<h3 id=\"状态集\"><a href=\"#状态集\" class=\"headerlink\" title=\"状态集\"></a>状态集</h3><p>毫无疑问，状态机的核心是状态集，上述介绍中我们通过传递给 <code>Machine</code> 初始化函数字符串列表来定义有效的模型状态，但是在 <code>Machine</code> 内部，状态以 <code>State</code> 对象的形式存储。</p>\n<p>我们可以通过多种方式初始化和跟新状态，比如：</p>\n<ul>\n<li>传递一个给定状态名的字符串给 <code>Machine</code> 初始化函数；</li>\n<li>直接初始化每个新的 <code>State</code> 对象；</li>\n<li>传递具有初始化参数的字典。</li>\n</ul>\n<p>以下代码片段说明了实现相同目标的几种方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Create a list of 3 states to pass to the Machine</span><br><span class=\"line\"># initializer. We can mix types; in this case, we</span><br><span class=\"line\"># pass one State, one string, and one dict.</span><br><span class=\"line\">states = [</span><br><span class=\"line\">    State(name=&apos;solid&apos;),</span><br><span class=\"line\">    &apos;liquid&apos;,</span><br><span class=\"line\">    &#123; &apos;name&apos;: &apos;gas&apos;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">machine = Machine(lump, states)</span><br><span class=\"line\"></span><br><span class=\"line\"># This alternative example illustrates more explicit</span><br><span class=\"line\"># addition of states and state callbacks, but the net</span><br><span class=\"line\"># result is identical to the above.</span><br><span class=\"line\">machine = Machine(lump)</span><br><span class=\"line\">solid = State(&apos;solid&apos;)</span><br><span class=\"line\">liquid = State(&apos;liquid&apos;)</span><br><span class=\"line\">gas = State(&apos;gas&apos;)</span><br><span class=\"line\">machine.add_states([solid, liquid, gas])</span><br></pre></td></tr></table></figure>\n<h4 id=\"回调方法\"><a href=\"#回调方法\" class=\"headerlink\" title=\"回调方法\"></a>回调方法</h4><p>我们可以给一个状态添加一系列的”进入“和”退出“的回调函数，还可以在初始化期间指定回调，或者稍后再添加回调。</p>\n<p>为方便起见，每当新的状态被添加到 <code>Machine</code> 中时，方法 <code>on_enter_«state name»</code> 和 <code>on_exit_«state name»</code> 都是在 <code>Machine</code> 上（而不是 <code>Model</code> 上）上动态创建的，并且允许我们动态地添加新的进入和退出回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Our old Matter class, now with  a couple of new methods we</span><br><span class=\"line\"># can trigger when entering or exit states.</span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\"></span><br><span class=\"line\"># Same states as above, but now we give StateA an exit callback</span><br><span class=\"line\">states = [</span><br><span class=\"line\">    State(name=&apos;solid&apos;, on_exit=[&apos;say_goodbye&apos;]),</span><br><span class=\"line\">    &apos;liquid&apos;,</span><br><span class=\"line\">    &#123; &apos;name&apos;: &apos;gas&apos; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">machine = Machine(lump, states=states)</span><br><span class=\"line\">machine.add_transition(&apos;sublimate&apos;, &apos;solid&apos;, &apos;gas&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Callbacks can also be added after initialization using</span><br><span class=\"line\"># the dynamically added on_enter_ and on_exit_ methods.</span><br><span class=\"line\"># Note that the initial call to add the callback is made</span><br><span class=\"line\"># on the Machine and not on the model.</span><br><span class=\"line\">machine.on_enter_gas(&apos;say_hello&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Test out the callbacks...</span><br><span class=\"line\">machine.set_state(&apos;solid&apos;)</span><br><span class=\"line\">lump.sublimate()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;goodbye, old state!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;hello, new state!&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：首次初始化状态机时， <code>on_enter_«state name»</code> 回调函数是不会触发的。例如，我们定义了一个回调函数 <code>on_enter_A()</code> ，并给状态机初始化状态为 <code>initial=&#39;A&#39;</code> ，<code>on_enter_A()</code> 会在下次进入状态A的时候出发，首次并不会触发。如果我们想在初始化的时候就触发 <code>on_enter_A()</code> 方法，可以创建一个虚拟的初始状态，然后调用 <code>to_A()</code> 方法，而不是 <code>__init__</code> 方法。 </p>\n<p>除了在初始化状态机传递回调或动态添加回调，为增加代码的清晰度，还可以在模型类本身中定义回调。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\">    def on_enter_A(self): print(&quot;We&apos;ve just entered state A!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br></pre></td></tr></table></figure>\n<p>现在，任何时候 <code>lump</code> 转移到状态A，类<code>Matter</code> 中的 <code>on_enter_A()</code> 方法总是会触发。</p>\n<h4 id=\"检查状态\"><a href=\"#检查状态\" class=\"headerlink\" title=\"检查状态\"></a>检查状态</h4><p>我们可以随时通过以下方式检查模型的当前状态</p>\n<ul>\n<li>检查 <code>.state</code> 属性；</li>\n<li>调用 <code>is_«state name»()</code>  方法。</li>\n</ul>\n<p>如果要检索当前状态的实际状态对象，可以通过 <code>Machine</code> 实例的 <code>get_state()</code> 方法来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump.is_gas()</span><br><span class=\"line\">&gt;&gt;&gt; False</span><br><span class=\"line\">lump.is_solid()</span><br><span class=\"line\">&gt;&gt;&gt; True</span><br><span class=\"line\">machine.get_state(lump.state).name</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态转换\"><a href=\"#状态转换\" class=\"headerlink\" title=\"状态转换\"></a>状态转换</h3><p>上面的一些例子已经说明了状态转移的使用，但是在这里我们将更详细地探讨它们。</p>\n<p>与状态一样，每个状态转换在内部用 <code>Transitions</code> 对象来表示，我们可以传递一个字典或字典列表来快速初始化状态转换集合。</p>\n<p>如上面我们已经写过的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;sublimate&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;gas&apos; &#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;ionize&apos;, &apos;source&apos;: &apos;gas&apos;, &apos;dest&apos;: &apos;plasma&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">machine = Machine(model=Matter(), states=states, transitions=transitions)</span><br></pre></td></tr></table></figure>\n<p>使用字典定义转换有利于代码的清晰，但显得比较笨重。比较简单的方法是使用列表定义转换，只需确保每个列表中的元素与 <code>Transition</code> 初始化中的位置参数的顺序相同(比如 <code>trigger</code>, <code>source</code>, <code>destination</code> 等)</p>\n<p>我们可以这样定义转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transitions = [</span><br><span class=\"line\">    [&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;],</span><br><span class=\"line\">    [&apos;evaporate&apos;, &apos;liquid&apos;, &apos;gas&apos;],</span><br><span class=\"line\">    [&apos;sublimate&apos;, &apos;solid&apos;, &apos;gas&apos;],</span><br><span class=\"line\">    [&apos;ionize&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>另外，我们也可以在状态机初始化之后添加转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(model=lump, states=states, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, source=&apos;solid&apos;, dest=&apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<p> <code>trigger</code> 参数定义了绑定到模型上的触发方法的名称，当回调这个方法的时候，状态机会执行相应的状态转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; lump.state</span><br><span class=\"line\">&apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>当我们调用非法的转换时，<code>Machine</code> 会抛出异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lump.to_gas()</span><br><span class=\"line\">&gt;&gt;&gt; # This won&apos;t work because only objects in a solid state can melt</span><br><span class=\"line\">&gt;&gt;&gt; lump.melt()</span><br><span class=\"line\">transitions.core.MachineError: &quot;Can&apos;t trigger event melt from state gas!&quot;</span><br></pre></td></tr></table></figure>\n<p>这种做法通常是可取的，因为它有助于提醒代码中的问题。但是在某些情况下，我们希望忽略这些非法转换，这时可以设置 <code>ignore_invalid_triggers=True</code> (可以全部忽略，也可忽略特定一条)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; # Globally suppress invalid trigger exceptions</span><br><span class=\"line\">&gt;&gt;&gt; m = Machine(lump, states, initial=&apos;solid&apos;, ignore_invalid_triggers=True)</span><br><span class=\"line\">&gt;&gt;&gt; # ...or suppress for only one group of states</span><br><span class=\"line\">&gt;&gt;&gt; states = [&apos;new_state1&apos;, &apos;new_state2&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; m.add_states(states, ignore_invalid_triggers=True)</span><br><span class=\"line\">&gt;&gt;&gt; # ...or even just for a single state. Here, exceptions will only be suppressed when the current state is A.</span><br><span class=\"line\">&gt;&gt;&gt; states = [State(&apos;A&apos;, ignore_invalid_triggers=True), &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; m = Machine(lump, states)</span><br></pre></td></tr></table></figure>\n<p>如果在做状态转换之前，希望知道在当前状态下，哪些是合法的转换，可以使用 <code>get_triggers()</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m.get_triggers(&apos;solid&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;melt&apos;, &apos;sublimate&apos;]</span><br><span class=\"line\">m.get_triggers(&apos;liquid&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;evaporate&apos;]</span><br><span class=\"line\">m.get_triggers(&apos;plasma&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; []</span><br><span class=\"line\"># you can also query several states at once</span><br><span class=\"line\">m.get_triggers(&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;melt&apos;, &apos;evaporate&apos;, &apos;sublimate&apos;, &apos;ionize&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动转换所有状态\"><a href=\"#自动转换所有状态\" class=\"headerlink\" title=\"自动转换所有状态\"></a>自动转换所有状态</h4><p>除了显式添加的任何转换之外，每当将状态添加到 <code>Machine</code> 实例时，都会自动创建一个 <code>to_«state»()</code> 方法，该方法无论状态机当前处于哪种状态，都会转换到目标状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.to_liquid()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\">lump.to_solid()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br></pre></td></tr></table></figure>\n<p>我们可以在状态机初始化的时候设置 <code>auto_transitions=False</code> 禁用这个功能。</p>\n<h4 id=\"多状态转换\"><a href=\"#多状态转换\" class=\"headerlink\" title=\"多状态转换\"></a>多状态转换</h4><p>给定的触发器可以附加到多个转换，其中一些可以在相同的状态下潜在地开始或结束。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, [&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;], &apos;plasma&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, &apos;plasma&apos;, &apos;solid&apos;)</span><br><span class=\"line\"># This next transition will never execute</span><br><span class=\"line\">machine.add_transition(&apos;transmogrify&apos;, &apos;plasma&apos;, &apos;gas&apos;)</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，如果当前状态是 <code>plasma</code> 调用 <code>transmogrify()</code> ，会转换到 <code>solid</code> 状态，然后继续转换到 <code>plasma</code> 状态。<strong>注意</strong>：只有第一个匹配的转换将执行，因此，上述最后一行中定义的转换将不会做任何事情。</p>\n<p>我们还可以通过使用 <code>*</code> 通配符来引发触发器从所有状态转换到特定状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;to_liquid&apos;, &apos;*&apos;, &apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<p>一个反身触发（触发器具有与源和目标相同的状态）可以使用“=”来表示目的状态，比如通过 <code>touch</code> 触发，<code>solid</code> 的目标状态为自身。如果我们希望同一个反身触发器应用到多个状态中，使用“=”是比较方便的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;touch&apos;, [&apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;], &apos;=&apos;, after=&apos;change_shape&apos;)</span><br></pre></td></tr></table></figure>\n<p>通过上面的语句， <code>&#39;liquid&#39;, &#39;gas&#39;, &#39;plasma&#39;</code> 三个状态通过 <code>touch</code> 触发器，可以到达的目的状态分别是 <code>&#39;liquid&#39;, &#39;gas&#39;, &#39;plasma&#39;</code> 。</p>\n<h4 id=\"有序转换\"><a href=\"#有序转换\" class=\"headerlink\" title=\"有序转换\"></a>有序转换</h4><p>比如我们现在有这样一个需求，状态的转换是遵循自定义的序列的，如给定状态 <code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code>，我们可能需要这样的状态转换 <code>A → B, B → C, C → A</code> （没有其他的非法转换）。为了实现这个功能，<code>Transitions</code> 在 <code>Machine</code> 类中提供了 <code>add_ordered_transitions()</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">states = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\"> # See the &quot;alternative initialization&quot; section for an explanation of the 1st argument to init</span><br><span class=\"line\">machine = Machine(states=states, initial=&apos;A&apos;)</span><br><span class=\"line\">machine.add_ordered_transitions()</span><br><span class=\"line\">machine.next_state()</span><br><span class=\"line\">print(machine.state)</span><br><span class=\"line\">&gt;&gt;&gt; &apos;B&apos;</span><br><span class=\"line\"># We can also define a different order of transitions</span><br><span class=\"line\">machine = Machine(states=states, initial=&apos;A&apos;)</span><br><span class=\"line\">machine.add_ordered_transitions([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br><span class=\"line\">machine.next_state()</span><br><span class=\"line\">print(machine.state)</span><br><span class=\"line\">&gt;&gt;&gt; &apos;C&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"排队转换\"><a href=\"#排队转换\" class=\"headerlink\" title=\"排队转换\"></a>排队转换</h4><p>Transitions中的默认行为是立即处理事件。也就是说，调用绑定在 <code>after</code> 上的回调函数之前， <code>on_enter</code> 方法中的事件会预先处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def go_to_C():</span><br><span class=\"line\">    global machine</span><br><span class=\"line\">    machine.to_C()</span><br><span class=\"line\"></span><br><span class=\"line\">def after_advance():</span><br><span class=\"line\">    print(&quot;I am in state B now!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def entering_C():</span><br><span class=\"line\">    print(&quot;I am in state C now!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">states = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br><span class=\"line\">machine = Machine(states=states)</span><br><span class=\"line\"></span><br><span class=\"line\"># we want a message when state transition to B has been completed</span><br><span class=\"line\">machine.add_transition(&apos;advance&apos;, &apos;A&apos;, &apos;B&apos;, after=after_advance)</span><br><span class=\"line\"></span><br><span class=\"line\"># call transition from state B to state C</span><br><span class=\"line\">machine.on_enter_B(go_to_C)</span><br><span class=\"line\"></span><br><span class=\"line\"># we also want a message when entering state C</span><br><span class=\"line\">machine.on_enter_C(entering_C)</span><br><span class=\"line\">machine.advance()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state C now!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state B now!&apos; # what?</span><br></pre></td></tr></table></figure>\n<p>上述状态机的执行顺序为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare -&gt; before -&gt; on_enter_B -&gt; on_enter_C -&gt; after.</span><br></pre></td></tr></table></figure>\n<p>如果启用排队处理，则在触发下一个转换之前，转换将完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, queued=True)</span><br><span class=\"line\">...</span><br><span class=\"line\">machine.advance()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state B now!&apos;</span><br><span class=\"line\">&gt;&gt;&gt; &apos;I am in state C now!&apos; # That&apos;s better!</span><br></pre></td></tr></table></figure>\n<p>执行顺序为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare -&gt; before -&gt; on_enter_B -&gt; queue(to_C) -&gt; after  -&gt; on_enter_C.</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：当使用排队处理事件时，触发器的调用始终返回True，所以在排队执行过程中，无法确定一个包含排队回调函数的转换最终是否能成功，即使是在处理一个事件的时候。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;jump&apos;, &apos;A&apos;, &apos;C&apos;, conditions=&apos;will_fail&apos;)</span><br><span class=\"line\">...</span><br><span class=\"line\"># queued=False</span><br><span class=\"line\">machine.jump()</span><br><span class=\"line\">&gt;&gt;&gt; False</span><br><span class=\"line\"># queued=True</span><br><span class=\"line\">machine.jump()</span><br><span class=\"line\">&gt;&gt;&gt; True</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件转换\"><a href=\"#条件转换\" class=\"headerlink\" title=\"条件转换\"></a>条件转换</h4><p>在某些情况下，我们可能需要在某些条件成立的时候去执行特定的转换，这个时候，<code>conditions</code> 就派上用场了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Our Matter class, now with a bunch of methods that return booleans.</span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def is_flammable(self): return False</span><br><span class=\"line\">    def is_really_hot(self): return True</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;gas&apos;, conditions=&apos;is_flammable&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;liquid&apos;, conditions=[&apos;is_really_hot&apos;])</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，如果模型初始化的状态为 <code>solid</code> ，当条件 <code>is_flammable</code> 成立时，调用 <code>heat()</code> 会转换到 <code>gas</code> 状态。同样，如果条件 <code>is_really_hot</code> 成立，调用 <code>heat()</code> 会转换到 <code>liquid</code> 状态。</p>\n<p>我们还可能在某些条件不成立的条件下，转换到另一状态，<code>Transitions</code> 为我们提供了 <code>unless</code> 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine.add_transition(&apos;heat&apos;, &apos;solid&apos;, &apos;gas&apos;, unless=[&apos;is_flammable&apos;, &apos;is_really_hot&apos;])</span><br></pre></td></tr></table></figure>\n<p>这时，如果 <code>is_flammable(), is_really_hot()</code> 返回的都是 <code>False</code> ，模型调用 <code>heat()</code> 会从 <code>solid</code> 转换到 <code>gas</code> 状态。</p>\n<p><strong>注意</strong>：条件检查方法会被动接收传递给触发函数的参数或数据对象。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lump.heat(temp=74)</span><br><span class=\"line\"># equivalent to lump.trigger(&apos;heat&apos;, temp=74)</span><br></pre></td></tr></table></figure>\n<p>这样会将 <code>temp=74</code> 的可选参数传递给 <code>is_flammable()</code> 方法（以 <code>EventData</code> 实例的方式），参数的传递我们在后面会介绍。</p>\n<h4 id=\"回调方法-1\"><a href=\"#回调方法-1\" class=\"headerlink\" title=\"回调方法\"></a>回调方法</h4><p>我们可以将回调方法绑定到状态集和转换集上，每一个转换都包含 <code>before</code> 和 <code>after</code> 属性，这也是我们比较常用的，这两个属性包含了一系列在状态转换前后可以调用的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def make_hissing_noises(self): print(&quot;HISSSSSSSSSSSSSSSS&quot;)</span><br><span class=\"line\">    def disappear(self): print(&quot;where&apos;d all the liquid go?&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos;, &apos;before&apos;: &apos;make_hissing_noises&apos;&#125;,</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;evaporate&apos;, &apos;source&apos;: &apos;liquid&apos;, &apos;dest&apos;: &apos;gas&apos;, &apos;after&apos;: &apos;disappear&apos; &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;HISSSSSSSSSSSSSSSS&quot;</span><br><span class=\"line\">lump.evaporate()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;where&apos;d all the liquid go?&quot;</span><br></pre></td></tr></table></figure>\n<p>在状态转换一开始，在其他转换开始执行之前，我们也可以使用 <code>prepare</code> 回调函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    heat = False</span><br><span class=\"line\">    attempts = 0</span><br><span class=\"line\">    def count_attempts(self): self.attempts += 1</span><br><span class=\"line\">    def is_really_hot(self): return self.heat</span><br><span class=\"line\">    def heat_up(self): self.heat = random.random() &lt; 0.25</span><br><span class=\"line\">    def stats(self): print(&apos;It took you %i attempts to melt the lump!&apos; %self.attempts)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">transitions = [</span><br><span class=\"line\">    &#123; &apos;trigger&apos;: &apos;melt&apos;, &apos;source&apos;: &apos;solid&apos;, &apos;dest&apos;: &apos;liquid&apos;, &apos;prepare&apos;: [&apos;heat_up&apos;, &apos;count_attempts&apos;], &apos;conditions&apos;: &apos;is_really_hot&apos;, &apos;after&apos;: &apos;stats&apos;&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;It took you 4 attempts to melt the lump!&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：除非当前状态是定义在转换集上有效的状态，否则，<code>prepare</code> 回调是不会起作用的。</p>\n<p>如果在每一个转换执行之前或之后都需要进行一些默认操作，我们可以在状态机初始化的时候显示使用 <code>before_state_change</code>  和 <code>after_state_change</code>  属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def make_hissing_noises(self): print(&quot;HISSSSSSSSSSSSSSSS&quot;)</span><br><span class=\"line\">    def disappear(self): print(&quot;where&apos;d all the liquid go?&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">m = Machine(lump, states, before_state_change=&apos;make_hissing_noises&apos;, after_state_change=&apos;disappear&apos;)</span><br><span class=\"line\">lump.to_gas()</span><br><span class=\"line\">&gt;&gt;&gt; &quot;HISSSSSSSSSSSSSSSS&quot;</span><br><span class=\"line\">&gt;&gt;&gt; &quot;where&apos;d all the liquid go?&quot;</span><br></pre></td></tr></table></figure>\n<p>还有一些可以独立使用的关键字：</p>\n<ul>\n<li><code>prepare_event</code> ：通过 <code>prepare_event</code> 关键字传递给状态机的回调方法，在处理可能发生的状态转换（包括私有的 <code>prepare</code> 回调方法）之前，仅执行一次；</li>\n<li><code>finalize_event</code> ：通过 <code>finalize_event</code> 关键字传递给状态机的回调方法，不管转换是否成功，都会被执行；</li>\n<li><code>send_event</code> ：如果在状态转换过程中出现了错误，这个错误会绑定到 <code>event_data</code> 上，我们可以使用 <code>send_event=True</code> 来检索错误 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from transitions import Machine</span><br><span class=\"line\"></span><br><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def raise_error(self, event): raise ValueError(&quot;Oh no&quot;)</span><br><span class=\"line\">    def prepare(self, event): print(&quot;I am ready!&quot;)</span><br><span class=\"line\">    def finalize(self, event): print(&quot;Result: &quot;, type(event.error), event.error)</span><br><span class=\"line\"></span><br><span class=\"line\">states=[&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;, &apos;plasma&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">m = Machine(lump, states, prepare_event=&apos;prepare&apos;, before_state_change=&apos;raise_error&apos;,</span><br><span class=\"line\">            finalize_event=&apos;finalize&apos;, send_event=True)</span><br><span class=\"line\">try:</span><br><span class=\"line\">    lump.to_gas()</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">print(lump.state)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; I am ready!</span><br><span class=\"line\">&gt;&gt;&gt; Result:  &lt;class &apos;ValueError&apos;&gt; Oh no</span><br><span class=\"line\">&gt;&gt;&gt; initial</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><p>以下是转换集上回调方法可以执行的命令：</p>\n<table>\n<thead>\n<tr>\n<th>回调</th>\n<th>状态</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>machine.prepare_event</code></td>\n<td>源状态</td>\n<td>在私有转换执行之前仅执行一次</td>\n</tr>\n<tr>\n<td><code>transition.prepare</code></td>\n<td>源状态</td>\n<td>转换一开始就执行</td>\n</tr>\n<tr>\n<td><code>transition.conditions</code></td>\n<td>源状态</td>\n<td>可使转换失败或停止</td>\n</tr>\n<tr>\n<td><code>transition.unless</code></td>\n<td>源状态</td>\n<td>可使转换失败或停止</td>\n</tr>\n<tr>\n<td><code>machine.before_state_change</code></td>\n<td>源状态</td>\n<td>声明在模型上的默认回调方法</td>\n</tr>\n<tr>\n<td><code>transition.before</code></td>\n<td>源状态</td>\n<td></td>\n</tr>\n<tr>\n<td><code>state.on_exit</code></td>\n<td>源状态</td>\n<td>声明在源状态上的回调方法</td>\n</tr>\n<tr>\n<td><code>&lt;STATE CHANGE&gt;</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>state.on_enter</code></td>\n<td>目的状态</td>\n<td>声明在目的状态上的回调方法</td>\n</tr>\n<tr>\n<td><code>transition.after</code></td>\n<td>目的状态</td>\n<td></td>\n</tr>\n<tr>\n<td><code>machine.after_state_change</code></td>\n<td>目的状态</td>\n<td>声明在模型上的默认回调方法</td>\n</tr>\n<tr>\n<td><code>machine.finalize_event</code></td>\n<td>源状态/目的状态</td>\n<td>即使出现错误或异常，回调方法也会执行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"传递数据\"><a href=\"#传递数据\" class=\"headerlink\" title=\"传递数据\"></a>传递数据</h3><p>在大多数情况下，我们需要传递给注册在状态机中的回调方法一些参数，来反应当前模型的状态和进行一些必要计算。<code>Transitions</code> 提供了两种方法。</p>\n<p>第一种方法（默认方法）：</p>\n<p>我们可以直接传递参数给触发器方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\">    def __init__(self): self.set_environment()</span><br><span class=\"line\">    def set_environment(self, temp=0, pressure=101.325):</span><br><span class=\"line\">        self.temp = temp</span><br><span class=\"line\">        self.pressure = pressure</span><br><span class=\"line\">    def print_temperature(self): print(&quot;Current temperature is %d degrees celsius.&quot; % self.temp)</span><br><span class=\"line\">    def print_pressure(self): print(&quot;Current pressure is %.2f kPa.&quot; % self.pressure)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, [&apos;solid&apos;, &apos;liquid&apos;], initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;, before=&apos;set_environment&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump.melt(45)  # positional arg;</span><br><span class=\"line\"># equivalent to lump.trigger(&apos;melt&apos;, 45)</span><br><span class=\"line\">lump.print_temperature()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current temperature is 45 degrees celsius.&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">machine.set_state(&apos;solid&apos;)  # reset state so we can melt again</span><br><span class=\"line\">lump.melt(pressure=300.23)  # keyword args also work</span><br><span class=\"line\">lump.print_pressure()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current pressure is 300.23 kPa.&apos;</span><br></pre></td></tr></table></figure>\n<p>我们通过这种方法传递任何参数给触发器方法。</p>\n<p>但是这种方式有一种局限性：状态转换触发的每一个回调方法都必须处理所有的参数。如果我们的不同回调方法需要不同的参数，这样就会导致一些不必要的麻烦。</p>\n<p>为了解决这个问题，<code>Transitions</code> 提供了另一种方法，上文中我们提到过，参数可以以<code>EventData</code> 实例的方式传递。在<code>Machine</code> 初始化的时候设置 <code>send_event=True</code> ，这样，所有传递给非触发器的参数都以<code>EventData</code> 实例的方式传递给回调方法，为了方便我们随时访问与事件相关的源状态、模型、转换、触发等参数，<code>EventData</code> 实例会维护这些参数的内部引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(object):</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.temp = 0</span><br><span class=\"line\">        self.pressure = 101.325</span><br><span class=\"line\"></span><br><span class=\"line\">    # Note that the sole argument is now the EventData instance.</span><br><span class=\"line\">    # This object stores positional arguments passed to the trigger method in the</span><br><span class=\"line\">    # .args property, and stores keywords arguments in the .kwargs dictionary.</span><br><span class=\"line\">    def set_environment(self, event):</span><br><span class=\"line\">        self.temp = event.kwargs.get(&apos;temp&apos;, 0)</span><br><span class=\"line\">        self.pressure = event.kwargs.get(&apos;pressure&apos;, 101.325)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_pressure(self): print(&quot;Current pressure is %.2f kPa.&quot; % self.pressure)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">machine = Machine(lump, [&apos;solid&apos;, &apos;liquid&apos;], send_event=True, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;, before=&apos;set_environment&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump.melt(temp=45, pressure=1853.68)  # keyword args</span><br><span class=\"line\">lump.print_pressure()</span><br><span class=\"line\">&gt;&gt;&gt; &apos;Current pressure is 1853.68 kPa.&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他初始化方式\"><a href=\"#其他初始化方式\" class=\"headerlink\" title=\"其他初始化方式\"></a>其他初始化方式</h3><p>在以上所有的示例中，我们将新的 <code>Machine</code> 实例绑定到一个单独的模型上（<code>Matter</code> 类的实例 <code>lump</code>），虽然这种方式可以使我们的类和回调方法比较整洁，但是我们必须能跟踪到状态机上调用的方法，并且知道模型调用的这些方法绑定了哪个状态机（比如： <code>lump.on_enter_StateA()</code> vs <code>machine.add_transition()</code>）</p>\n<p>庆幸的是，<code>Transitions</code> 为我们提供了两种不同的初始化方式。</p>\n<p>第一种方式，我们可以创建一个独立的状态机，完全不需要其他模型，在初始化的时候忽略模型参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">machine.melt()</span><br><span class=\"line\">machine.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>如果我们使用这种方式初始化状态机，我们就可以直接绑定所有的触发事件和回调方法到 <code>Machine</code> 实例上。</p>\n<p>这种方法有利于在一个地方整合所有的状态机功能，但如果考虑到状态逻辑应该包含在模型本身中，而不是单独出来，这种方式恐怕也不是最好的。</p>\n<p>一种替代的办法是让 <code>Machine</code> 要绑定的模型继承 <code>Machine</code> 类，只要重写 <code>Machine</code> 的 <code>__init__()</code> 方法即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter(Machine):</span><br><span class=\"line\">    def say_hello(self): print(&quot;hello, new state!&quot;)</span><br><span class=\"line\">    def say_goodbye(self): print(&quot;goodbye, old state!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        states = [&apos;solid&apos;, &apos;liquid&apos;, &apos;gas&apos;]</span><br><span class=\"line\">        Machine.__init__(self, states=states, initial=&apos;solid&apos;)</span><br><span class=\"line\">        self.add_transition(&apos;melt&apos;, &apos;solid&apos;, &apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump = Matter()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump.melt()</span><br><span class=\"line\">lump.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经整合所有的状态机功能到 <code>lump</code> 模型中，这比将功能独立出来让人感觉更舒服。</p>\n<p>如果我们绑定多个模型到 <code>Machine</code> 中，状态机也是可以处理的。如果想要添加模型和 <code>Machine</code> 实例本身，我们可以在初始化的时候使用 <code>self</code> 关键字（ <code>Machine(model=[&#39;self&#39;, model1, ...])</code>），也可以创建一个单独的状态机，然后通过 <code>machine.add_model</code> 动态注册模型到状态机中，如果模型不再使用的情况下，应该调用  <code>machine.remove_model</code>  来回收模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Matter():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">lump1 = Matter()</span><br><span class=\"line\">lump2 = Matter()</span><br><span class=\"line\"></span><br><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;, add_self=False)</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_model(lump1)</span><br><span class=\"line\">machine.add_model(lump2, initial=&apos;liquid&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">lump1.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;solid&apos;</span><br><span class=\"line\">lump2.state</span><br><span class=\"line\">&gt;&gt;&gt; &apos;liquid&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">machine.remove_model([lump1, lump2])</span><br><span class=\"line\">del lump1  # lump1 is garbage collected</span><br><span class=\"line\">del lump2  # lump2 is garbage collected</span><br></pre></td></tr></table></figure>\n<p>如果在状态机初始化的时候没有提供初始状态，在添加模型的时候就必须提供这个初始状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine = Machine(states=states, transitions=transitions, add_self=False)</span><br><span class=\"line\"></span><br><span class=\"line\">machine.add_model(Matter())</span><br><span class=\"line\">&gt;&gt;&gt; &quot;MachineError: No initial state configured for machine, must specify when adding model.&quot;</span><br><span class=\"line\">machine.add_model(Matter(), initial=&apos;liquid&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p><code>Transitions</code> 提供一些基本的日志功能，使用 <code>Python</code> 标准的 <code>logging</code> 模块将一些如状态转换、转换触发、条件检查等信息作为 <code>INFO</code> 级别的信息记录下来，我们可以在脚本中轻松地将日志记录配置为标准输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set up logging</span><br><span class=\"line\">import logging</span><br><span class=\"line\">from transitions import logger</span><br><span class=\"line\">logger.setLevel(logging.INFO)</span><br><span class=\"line\"></span><br><span class=\"line\"># Business as usual</span><br><span class=\"line\">machine = Machine(states=states, transitions=transitions, initial=&apos;solid&apos;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"存储-恢复状态机实例\"><a href=\"#存储-恢复状态机实例\" class=\"headerlink\" title=\"存储/恢复状态机实例\"></a>存储/恢复状态机实例</h3><p>如果想要存储或加载状态机，必须使用<code>Python3.3</code> 或较早版本的 <code>dill</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dill as pickle # only required for Python 3.3 and earlier</span><br><span class=\"line\"></span><br><span class=\"line\">m = Machine(states=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;], initial=&apos;A&apos;)</span><br><span class=\"line\">m.to_B()</span><br><span class=\"line\">m.state  </span><br><span class=\"line\">&gt;&gt;&gt; B</span><br><span class=\"line\"></span><br><span class=\"line\"># store the machine</span><br><span class=\"line\">dump = pickle.dumps(m)</span><br><span class=\"line\"></span><br><span class=\"line\"># load the Machine instance again</span><br><span class=\"line\">m2 = pickle.loads(dump)</span><br><span class=\"line\"></span><br><span class=\"line\">m2.state</span><br><span class=\"line\">&gt;&gt;&gt; B</span><br><span class=\"line\"></span><br><span class=\"line\">m2.states.keys()</span><br><span class=\"line\">&gt;&gt;&gt; [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</span><br></pre></td></tr></table></figure>\n<p>以上介绍了 <code>Transitions</code> 的基本使用方法，手工翻译难免有些晦涩难懂之处，敬请谅解。除了这些基本用法之外，<code>Transitions</code> 还提供了一些扩展方法，比如图表可视化机器的当前状态、用于嵌套和重用的分层状态机、并行执行的线程安全锁等，这里暂时就不介绍了，先欠着吧，等以后深入使用 <code>Transitions</code> 库的时候再去学习。</p>\n<p><code>Transitions</code> 英文完整版介绍请移步 <a href=\"https://github.com/tyarkoni/transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a> </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgruepqt0000molc6e0hto03","category_id":"ckgruepr70003molczg6ke3cq","_id":"ckgrueprp000cmolcmy1wjk1x"},{"post_id":"ckgruepr30002molco3d6hmt7","category_id":"ckgruepri0008molc9w8l0uxo","_id":"ckgrueprx000hmolcna1du481"},{"post_id":"ckgrueprb0005molcwva9w7y5","category_id":"ckgrueprq000dmolcqy9o26zu","_id":"ckgrueps5000omolczqogo6js"},{"post_id":"ckgrueprz000kmolc1pjv6r29","category_id":"ckgruepr70003molczg6ke3cq","_id":"ckgruepsg000umolck72kr7ih"},{"post_id":"ckgruepre0006molcprxcji9t","category_id":"ckgruepry000imolcwhuds15n","_id":"ckgruepsk000xmolcc5nf2ufr"},{"post_id":"ckgrueps2000mmolcf881o495","category_id":"ckgruepr70003molczg6ke3cq","_id":"ckgruepsp0011molcai8qdmf9"},{"post_id":"ckgrueps7000rmolcybdf4o03","category_id":"ckgruepr70003molczg6ke3cq","_id":"ckgruepss0014molcsfc86fce"},{"post_id":"ckgrueprg0007molcfvob77nw","category_id":"ckgruepry000imolcwhuds15n","_id":"ckgruepsw0018molc7mmi7pnv"},{"post_id":"ckgrueprj000amolc05b54w0e","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgruepsy001amolcwfo77h44"},{"post_id":"ckgruepsq0013molcmbe1a8dn","category_id":"ckgruepry000imolcwhuds15n","_id":"ckgruept2001emolcbmpkej0v"},{"post_id":"ckgrueprn000bmolcg5d04vh1","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgruept6001hmolcmulus4lp"},{"post_id":"ckgruept1001dmolcnyg1xvz0","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueptd001nmolcpjzofw3z"},{"post_id":"ckgrueprs000fmolc2opnpdxx","category_id":"ckgruepsz001bmolc5trjlbdj","_id":"ckgruepth001qmolcyms5iz2x"},{"post_id":"ckgruept4001gmolc95gj14nq","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueptm001umolcgh7n3beu"},{"post_id":"ckgruept9001lmolc6sse1mu4","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueptp001xmolcvdcn8cdy"},{"post_id":"ckgrueprv000gmolc9tgp828j","category_id":"ckgruept8001jmolcawq7i0x0","_id":"ckgrueptt0021molcc8mbeedq"},{"post_id":"ckgrueptc001mmolc9i6byde4","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueptw0023molc3xgous6n"},{"post_id":"ckgrueptf001pmolccqwg4scf","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgruepu20028molcejtwzp6c"},{"post_id":"ckgruepse000tmolcd1p6p2nq","category_id":"ckgruepte001omolco99jq327","_id":"ckgruepu6002bmolcry30e8bi"},{"post_id":"ckgruepts0020molcprxfryl7","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgruepua002fmolcv0jka8s1"},{"post_id":"ckgruepsi000wmolccrfj408a","category_id":"ckgrueptq001ymolcisqjwbr4","_id":"ckgruepud002hmolcyhz9vzxb"},{"post_id":"ckgrueptv0022molcw4tjhw8c","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgruepuh002lmolcjrkmhd48"},{"post_id":"ckgruepsn0010molcw4yft620","category_id":"ckgrueptq001ymolcisqjwbr4","_id":"ckgruepuk002omolc4t9a65ns"},{"post_id":"ckgruepsu0017molcrc1whq2x","category_id":"ckgruepu6002cmolc6b9zm807","_id":"ckgruepuq002tmolchn9486bp"},{"post_id":"ckgruepsx0019molc8ed9xk9l","category_id":"ckgruepue002imolcped5foei","_id":"ckgruepuu002vmolcnjjggjrg"},{"post_id":"ckgruepuj002nmolciqb2wxui","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgruepux002zmolcfc6gvdf8"},{"post_id":"ckgrueptk001tmolcabq8djvr","category_id":"ckgruepun002qmolc288qtdyy","_id":"ckgruepv20032molcne99ar6s"},{"post_id":"ckgruepuy0030molckj485r1m","category_id":"ckgruepu6002cmolc6b9zm807","_id":"ckgruepva0037molcu9tzblo3"},{"post_id":"ckgruepto001wmolcwgylk56g","category_id":"ckgruepuw002xmolcs1h108sa","_id":"ckgruepve003bmolcbm90na35"},{"post_id":"ckgruepu00027molcfvtuhkzq","category_id":"ckgruepu6002cmolc6b9zm807","_id":"ckgruepvj003emolcnbmlcqc4"},{"post_id":"ckgruepu4002amolcc9ivyy2l","category_id":"ckgruepva0038molcd2mz1rm9","_id":"ckgruepvt003nmolcwhft47cr"},{"post_id":"ckgruepvn003imolcrpkr6mwc","category_id":"ckgruepun002qmolc288qtdyy","_id":"ckgruepvx003rmolcv5k7p7js"},{"post_id":"ckgruepu8002emolcovbgbsw2","category_id":"ckgruepva0038molcd2mz1rm9","_id":"ckgruepvz003umolcm245sie9"},{"post_id":"ckgruepub002gmolcu2ibv0rq","category_id":"ckgruepvs003mmolcnn0q51g0","_id":"ckgruepw1003wmolcnhdcvvq7"},{"post_id":"ckgruepug002kmolchfuinfgv","category_id":"ckgruepvy003tmolcjrk2bvgx","_id":"ckgruepw30040molcsemu2o06"},{"post_id":"ckgruepuo002smolc7gz5q3h1","category_id":"ckgruepw2003xmolc4wsm8kjv","_id":"ckgruepw70045molclddesafe"},{"post_id":"ckgruepur002umolcap97n6l7","category_id":"ckgruepw40041molccdotuw4k","_id":"ckgruepwb0049molc7zj4lh2o"},{"post_id":"ckgruepuu002wmolcyhcfki7u","category_id":"ckgruepw80046molc2j1g80no","_id":"ckgruepwe004emolc77ijnfqy"},{"post_id":"ckgruepv00031molct438wz6p","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgruepwj004kmolcugmck4im"},{"post_id":"ckgruepv60035molcxynd5s2p","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgruepwn004omolcmijwi5uq"},{"post_id":"ckgruepv80036molc38uwyawg","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgruepwr004smolczcm4o3dg"},{"post_id":"ckgruepvd003amolci129wdc8","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgruepwv004wmolc3g3m6eqz"},{"post_id":"ckgruepvg003dmolcxtmis06w","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgruepwy004zmolco02266vo"},{"post_id":"ckgruepvp003kmolc5ngl9uvr","category_id":"ckgruepwu004vmolcquqdxp1w","_id":"ckgruepx20053molckv8roj0i"},{"post_id":"ckgruepvu003omolcziz49m7m","category_id":"ckgruepvy003tmolcjrk2bvgx","_id":"ckgruepx30056molc1l0wjezg"},{"post_id":"ckgrueq5t0090molcjy24ultp","category_id":"ckgrueq620094molc6nuolx89","_id":"ckgrueq6g009dmolcw54ocp8y"},{"post_id":"ckgrueq6d009bmolco5qxkur5","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueq6m009jmolcxn3w3mzw"},{"post_id":"ckgrueq5w0092molctlhkr4qz","category_id":"ckgrueq6b0099molcyn0pgl56","_id":"ckgrueq6q009omolcv1bdg885"},{"post_id":"ckgrueq6f009cmolcofz4fhd0","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueq6s009qmolcs93x8ie3"},{"post_id":"ckgrueq6i009gmolcpqk8b7ds","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueq6v009umolcdm975bjn"},{"post_id":"ckgrueq630096molc25pyi4qu","category_id":"ckgrueq6h009emolc1i4hk703","_id":"ckgrueq6y009wmolckf1xuvtx"},{"post_id":"ckgrueq6l009imolcixfclcom","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueq71009ymolc3bpsh10l"},{"post_id":"ckgrueq670097molcswddzy87","category_id":"ckgrueq6n009lmolclahk7b8w","_id":"ckgrueq7600a3molc2amv45g2"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgrueq7900a6molcjctsi38f"},{"post_id":"ckgrueq6w009vmolc2gb5napj","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgrueq7d00abmolcr117qma5"},{"post_id":"ckgrueq6a0098molc6pziklx4","category_id":"ckgrueq6t009rmolcvk3cwo9n","_id":"ckgrueq7f00aemolccdl5esnr"},{"post_id":"ckgrueq6z009xmolc2extmipw","category_id":"ckgruepst0015molcx0mzv8yg","_id":"ckgrueq7h00ahmolcirf0nfzd"},{"post_id":"ckgrueq7400a2molc9uuhmst4","category_id":"ckgruepu6002cmolc6b9zm807","_id":"ckgrueq7i00ajmolcpylxogtq"},{"post_id":"ckgrueq6p009nmolc8clyvnun","category_id":"ckgrueq71009zmolc55b81d53","_id":"ckgrueq7k00ammolcxzlz4xxi"},{"post_id":"ckgrueq7800a5molcqwrvtudb","category_id":"ckgrueptq001ymolcisqjwbr4","_id":"ckgrueq7l00aomolceymey21r"},{"post_id":"ckgrueq7b00aamolceit4fon0","category_id":"ckgruepwc004bmolc3tkie62q","_id":"ckgrueq7m00aqmolc10zk3c7j"},{"post_id":"ckgrueq6r009pmolctkfw40rj","category_id":"ckgrueq7900a7molc5qqjo5bu","_id":"ckgrueq7o00atmolc96yvqu6w"},{"post_id":"ckgrueq7e00admolcficada4v","category_id":"ckgruepri0008molc9w8l0uxo","_id":"ckgrueq7p00aumolc0604c9j1"},{"post_id":"ckgrueq9u00clmolcjcyga86d","category_id":"ckgrueq6n009lmolclahk7b8w","_id":"ckgrueqa200cqmolcbkoh3h10"},{"post_id":"ckgrueq9w00cmmolc5nem0j3f","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueqa500csmolczjqtc171"},{"post_id":"ckgrueq9y00comolcfmjl96da","category_id":"ckgruepsh000vmolc5kvkx179","_id":"ckgrueqa700cvmolcfwhivvat"},{"post_id":"ckgrueqa000cpmolcvgzso5vd","category_id":"ckgruepry000imolcwhuds15n","_id":"ckgrueqa900cxmolc0wwav0uo"},{"post_id":"ckgrueqa300crmolcyflungur","category_id":"ckgruepvy003tmolcjrk2bvgx","_id":"ckgrueqaa00d0molc0vmc7xye"},{"post_id":"ckgrueqc200demolc0i72ypwa","category_id":"ckgrueq6n009lmolclahk7b8w","_id":"ckgrueqc900djmolc5n4cfu6q"},{"post_id":"ckgrueqc600dhmolc0qavznx7","category_id":"ckgruepva0038molcd2mz1rm9","_id":"ckgrueqca00dlmolc7t1m3tj5"},{"post_id":"ckgrueqc300dfmolcva26pn6e","category_id":"ckgrueqc800dimolczio73n76","_id":"ckgrueqcc00dnmolc8izj378n"}],"PostTag":[{"post_id":"ckgruepqt0000molc6e0hto03","tag_id":"ckgruepra0004molcdtle0yg6","_id":"ckgrueps1000lmolcom2lrcdl"},{"post_id":"ckgruepqt0000molc6e0hto03","tag_id":"ckgruepri0009molcv1w1ss4w","_id":"ckgrueps4000nmolc95ti3b8q"},{"post_id":"ckgruepqt0000molc6e0hto03","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgruepsd000smolcocajuk6n"},{"post_id":"ckgruepr30002molco3d6hmt7","tag_id":"ckgruepry000jmolcttciskxo","_id":"ckgruepsm000zmolchz5m5ht4"},{"post_id":"ckgruepr30002molco3d6hmt7","tag_id":"ckgrueps6000qmolc2yzs6ufo","_id":"ckgruepsq0012molc3f5qt2bs"},{"post_id":"ckgrueprb0005molcwva9w7y5","tag_id":"ckgruepsl000ymolc4woyxl0n","_id":"ckgruept3001fmolcfjupcs35"},{"post_id":"ckgrueprb0005molcwva9w7y5","tag_id":"ckgruepsu0016molc118vh0uu","_id":"ckgruept7001imolc5dp4xk35"},{"post_id":"ckgruepre0006molcprxcji9t","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueptk001smolcsatwoyl2"},{"post_id":"ckgruepre0006molcprxcji9t","tag_id":"ckgruept8001kmolc2fh8haqr","_id":"ckgrueptn001vmolc8cajdldq"},{"post_id":"ckgrueprg0007molcfvob77nw","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueptz0026molc2ecioymv"},{"post_id":"ckgrueprg0007molcfvob77nw","tag_id":"ckgruept8001kmolc2fh8haqr","_id":"ckgruepu30029molc687xkw0f"},{"post_id":"ckgrueprj000amolc05b54w0e","tag_id":"ckgrueptx0024molcuqu90s48","_id":"ckgruepui002mmolc66ka0jwj"},{"post_id":"ckgrueprj000amolc05b54w0e","tag_id":"ckgruepu7002dmolcko2y4ym0","_id":"ckgruepum002pmolckivnwq5e"},{"post_id":"ckgrueprn000bmolcg5d04vh1","tag_id":"ckgruepuf002jmolc0rcqlsw6","_id":"ckgruepvf003cmolcg5w79jxo"},{"post_id":"ckgrueprn000bmolcg5d04vh1","tag_id":"ckgruepun002rmolcyiwr5ydq","_id":"ckgruepvk003fmolciwk8ln2l"},{"post_id":"ckgrueprn000bmolcg5d04vh1","tag_id":"ckgruepuw002ymolcydjm43jj","_id":"ckgruepvp003jmolcqt3jl5tc"},{"post_id":"ckgrueprn000bmolcg5d04vh1","tag_id":"ckgruepv40034molcsh1lzk6k","_id":"ckgruepvs003lmolck5z1hoxa"},{"post_id":"ckgrueprs000fmolc2opnpdxx","tag_id":"ckgruepvb0039molcrjcxhklq","_id":"ckgruepvw003qmolci6y2hb84"},{"post_id":"ckgrueprv000gmolc9tgp828j","tag_id":"ckgruepvm003hmolc5w6bxfl9","_id":"ckgruepvy003smolcdbumvz8h"},{"post_id":"ckgrueprz000kmolc1pjv6r29","tag_id":"ckgruepra0004molcdtle0yg6","_id":"ckgruepw3003zmolciu0dvzpv"},{"post_id":"ckgrueprz000kmolc1pjv6r29","tag_id":"ckgruepvv003pmolcz8k23gxw","_id":"ckgruepw50042molc55vmn5py"},{"post_id":"ckgrueprz000kmolc1pjv6r29","tag_id":"ckgruepw0003vmolcnr69oacx","_id":"ckgruepw60044molckejrrk3h"},{"post_id":"ckgrueps2000mmolcf881o495","tag_id":"ckgruepra0004molcdtle0yg6","_id":"ckgruepwa0048molc7gp6o8tz"},{"post_id":"ckgrueps2000mmolcf881o495","tag_id":"ckgruepw2003ymolczwbfkn4t","_id":"ckgruepwb004amolc0gto0t8v"},{"post_id":"ckgrueps2000mmolcf881o495","tag_id":"ckgruepvv003pmolcz8k23gxw","_id":"ckgruepwe004dmolc9fuij0g8"},{"post_id":"ckgrueps7000rmolcybdf4o03","tag_id":"ckgruepra0004molcdtle0yg6","_id":"ckgruepwh004hmolchf0uevbr"},{"post_id":"ckgrueps7000rmolcybdf4o03","tag_id":"ckgruepw90047molchy42vrk7","_id":"ckgruepwi004imolcjyh2k4cs"},{"post_id":"ckgrueps7000rmolcybdf4o03","tag_id":"ckgruepw0003vmolcnr69oacx","_id":"ckgruepwl004mmolcko0zqceg"},{"post_id":"ckgruepse000tmolcd1p6p2nq","tag_id":"ckgruepwg004gmolcqtoghat5","_id":"ckgruepwp004qmolc815zc4yh"},{"post_id":"ckgruepse000tmolcd1p6p2nq","tag_id":"ckgruepwk004lmolcpx1hfjyq","_id":"ckgruepws004tmolcae7uoopx"},{"post_id":"ckgruepsi000wmolccrfj408a","tag_id":"ckgruepwo004pmolcjrm77r6n","_id":"ckgruepwy004ymolc70tmlsvj"},{"post_id":"ckgruepsi000wmolccrfj408a","tag_id":"ckgruepwt004umolcshvoiyev","_id":"ckgruepx00051molcxh6xptnp"},{"post_id":"ckgruepsn0010molcw4yft620","tag_id":"ckgruepwo004pmolcjrm77r6n","_id":"ckgruepx30055molca4jbczpw"},{"post_id":"ckgruepsn0010molcw4yft620","tag_id":"ckgruepx10052molcug8w4lm6","_id":"ckgruepx40057molc5434il9t"},{"post_id":"ckgruepsq0013molcmbe1a8dn","tag_id":"ckgruepx20054molcfderdgm0","_id":"ckgruepx5005amolc3rpqkfxv"},{"post_id":"ckgruepsq0013molcmbe1a8dn","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgruepx6005bmolc49fuu8zb"},{"post_id":"ckgruepsu0017molcrc1whq2x","tag_id":"ckgruepx50059molc1qoib4bo","_id":"ckgruepx8005fmolcgjhhk6ky"},{"post_id":"ckgruepsu0017molcrc1whq2x","tag_id":"ckgruepx6005cmolcus9dk0wd","_id":"ckgruepx8005gmolcjh59degv"},{"post_id":"ckgruepsu0017molcrc1whq2x","tag_id":"ckgruepx7005dmolc93nn8zyj","_id":"ckgruepx9005imolc6thlxv98"},{"post_id":"ckgruepsx0019molc8ed9xk9l","tag_id":"ckgruepx7005emolcpbh3wwbq","_id":"ckgruepxa005kmolcq3hi4bwt"},{"post_id":"ckgruepsx0019molc8ed9xk9l","tag_id":"ckgruepx9005hmolc4k5us8s6","_id":"ckgruepxb005lmolcbec9lu3y"},{"post_id":"ckgruept1001dmolcnyg1xvz0","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgruepxg005omolc14v9cgjf"},{"post_id":"ckgruept1001dmolcnyg1xvz0","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgruepxg005pmolc9ouknk2y"},{"post_id":"ckgruept1001dmolcnyg1xvz0","tag_id":"ckgruepxc005mmolc9yq5bwx4","_id":"ckgruepxi005rmolczy350o67"},{"post_id":"ckgruept4001gmolc95gj14nq","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgruepxo005tmolcoqhx2b86"},{"post_id":"ckgruept4001gmolc95gj14nq","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgruepxp005umolcffxc7ags"},{"post_id":"ckgruept4001gmolc95gj14nq","tag_id":"ckgruepxh005qmolc7xcuhbay","_id":"ckgruepxq005wmolcyajbfdcp"},{"post_id":"ckgruept9001lmolc6sse1mu4","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgruepxs005ymolccagccn4f"},{"post_id":"ckgruept9001lmolc6sse1mu4","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgruepxu005zmolcrp0ri47h"},{"post_id":"ckgruept9001lmolc6sse1mu4","tag_id":"ckgruepxp005vmolc6jlvk87q","_id":"ckgruepxw0061molcrwnih39c"},{"post_id":"ckgrueptc001mmolc9i6byde4","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgruepxy0063molc7l35yr4e"},{"post_id":"ckgrueptc001mmolc9i6byde4","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgruepxy0064molcura735dt"},{"post_id":"ckgrueptc001mmolc9i6byde4","tag_id":"ckgruepxu0060molchcwt1lzg","_id":"ckgruepy00066molcu8s6md7h"},{"post_id":"ckgrueptf001pmolccqwg4scf","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgruepy20069molcq5x6fsal"},{"post_id":"ckgrueptf001pmolccqwg4scf","tag_id":"ckgruepxz0065molcyk06an8s","_id":"ckgruepy3006amolchiv2b42h"},{"post_id":"ckgrueptf001pmolccqwg4scf","tag_id":"ckgruepy00067molcosfwpvmb","_id":"ckgruepy4006cmolc1vcor8o2"},{"post_id":"ckgrueptk001tmolcabq8djvr","tag_id":"ckgruepy10068molc4j1wircr","_id":"ckgruepy7006fmolc46xlt718"},{"post_id":"ckgrueptk001tmolcabq8djvr","tag_id":"ckgruepy3006bmolcvfq9py95","_id":"ckgruepy7006gmolcirkjbf65"},{"post_id":"ckgrueptk001tmolcabq8djvr","tag_id":"ckgruepy5006dmolcmitjxebo","_id":"ckgruepy9006imolcwivmndqt"},{"post_id":"ckgruepto001wmolcwgylk56g","tag_id":"ckgruepy6006emolcuowklr8y","_id":"ckgruepy9006jmolcrrybpoa4"},{"post_id":"ckgruepts0020molcprxfryl7","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgruepyb006lmolcp4b4e1in"},{"post_id":"ckgruepts0020molcprxfryl7","tag_id":"ckgruepy8006hmolchla2kdmo","_id":"ckgruepyc006mmolci37p3i52"},{"post_id":"ckgrueptv0022molcw4tjhw8c","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgruepyd006omolcwbi5ud4f"},{"post_id":"ckgrueptv0022molcw4tjhw8c","tag_id":"ckgruepya006kmolco80cada7","_id":"ckgruepyd006pmolcp9llolba"},{"post_id":"ckgruepu00027molcfvtuhkzq","tag_id":"ckgruepyc006nmolc9oawk9hm","_id":"ckgruepyg006smolc030iaf36"},{"post_id":"ckgruepu00027molcfvtuhkzq","tag_id":"ckgruepye006qmolcvawq0r4u","_id":"ckgruepyh006tmolcr9w8wpzk"},{"post_id":"ckgruepu4002amolcc9ivyy2l","tag_id":"ckgruepx7005dmolc93nn8zyj","_id":"ckgruepyk006wmolc3sqm5pxh"},{"post_id":"ckgruepu4002amolcc9ivyy2l","tag_id":"ckgruepyh006umolcenxlani2","_id":"ckgruepyk006xmolcxqmouau7"},{"post_id":"ckgruepu8002emolcovbgbsw2","tag_id":"ckgruepx7005dmolc93nn8zyj","_id":"ckgruepyo0070molcm77ozab6"},{"post_id":"ckgruepu8002emolcovbgbsw2","tag_id":"ckgruepyl006ymolc8un5o2uf","_id":"ckgruepyo0071molcwhv8p0lt"},{"post_id":"ckgruepub002gmolcu2ibv0rq","tag_id":"ckgruepym006zmolc65le28ck","_id":"ckgruepyu0075molcrcca9jsq"},{"post_id":"ckgruepub002gmolcu2ibv0rq","tag_id":"ckgruepyp0072molc4adn7742","_id":"ckgruepyw0076molc372uwise"},{"post_id":"ckgruepub002gmolcu2ibv0rq","tag_id":"ckgruepyq0073molcs78a4s1k","_id":"ckgruepyy0078molcot17x3id"},{"post_id":"ckgruepug002kmolchfuinfgv","tag_id":"ckgruepyt0074molch2ekpmv4","_id":"ckgruepz0007bmolc1qvnfq0a"},{"post_id":"ckgruepug002kmolchfuinfgv","tag_id":"ckgruepyx0077molcju4db80c","_id":"ckgruepz1007cmolc20ypiohk"},{"post_id":"ckgruepug002kmolchfuinfgv","tag_id":"ckgruepwo004pmolcjrm77r6n","_id":"ckgruepz2007emolc139qicpv"},{"post_id":"ckgruepuj002nmolciqb2wxui","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgruepz3007fmolcckbnw039"},{"post_id":"ckgruepuj002nmolciqb2wxui","tag_id":"ckgruepyz007amolcy1tve1qe","_id":"ckgruepz4007hmolcl53519n0"},{"post_id":"ckgruepuo002smolc7gz5q3h1","tag_id":"ckgruepz1007dmolcey71ic7x","_id":"ckgruepz6007jmolc8d0a68k1"},{"post_id":"ckgruepuo002smolc7gz5q3h1","tag_id":"ckgruepz3007gmolcd99xxatq","_id":"ckgruepz6007kmolcthrh6rvw"},{"post_id":"ckgruepur002umolcap97n6l7","tag_id":"ckgruepz5007imolcyu842oto","_id":"ckgruepz9007nmolcnrhyo2hz"},{"post_id":"ckgruepur002umolcap97n6l7","tag_id":"ckgruepz7007lmolc687v0056","_id":"ckgruepz9007omolc6w97q69y"},{"post_id":"ckgruepuu002wmolcyhcfki7u","tag_id":"ckgruepz8007mmolcf71scumw","_id":"ckgruepzb007qmolc1t3i37yu"},{"post_id":"ckgruepuy0030molckj485r1m","tag_id":"ckgruepza007pmolc4hulhwy0","_id":"ckgruepzd007tmolczdh42866"},{"post_id":"ckgruepuy0030molckj485r1m","tag_id":"ckgruepzb007rmolc78s75o36","_id":"ckgruepzd007umolckaherc3w"},{"post_id":"ckgruepv00031molct438wz6p","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgruepzf007xmolcbznlfh87"},{"post_id":"ckgruepv00031molct438wz6p","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgruepzf007ymolckg03g1rx"},{"post_id":"ckgruepv60035molcxynd5s2p","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgruepzh0082molcey4rtjha"},{"post_id":"ckgruepv60035molcxynd5s2p","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgruepzi0083molcd4cucrxq"},{"post_id":"ckgruepv60035molcxynd5s2p","tag_id":"ckgruepzg0080molcd91si9hv","_id":"ckgruepzj0085molcsinkwo9b"},{"post_id":"ckgruepv80036molc38uwyawg","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgruepzk0087molcubuhldpy"},{"post_id":"ckgruepv80036molc38uwyawg","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgruepzl0088molckycxcn8n"},{"post_id":"ckgruepvd003amolci129wdc8","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgruepzn008cmolcykbth1xv"},{"post_id":"ckgruepvd003amolci129wdc8","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgruepzo008dmolcw3pws5bl"},{"post_id":"ckgruepvd003amolci129wdc8","tag_id":"ckgruepzm008amolcf3kmjt3p","_id":"ckgruepzp008fmolcc85hn2k9"},{"post_id":"ckgruepvg003dmolcxtmis06w","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgruepzr008hmolc2lov2wqp"},{"post_id":"ckgruepvg003dmolcxtmis06w","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgruepzr008imolctbdfcjm1"},{"post_id":"ckgruepvn003imolcrpkr6mwc","tag_id":"ckgruepy10068molc4j1wircr","_id":"ckgruepzt008mmolcmwlgrefq"},{"post_id":"ckgruepvn003imolcrpkr6mwc","tag_id":"ckgruepzr008jmolcna2ge8bi","_id":"ckgruepzu008nmolcqfu2aio4"},{"post_id":"ckgruepvn003imolcrpkr6mwc","tag_id":"ckgruepzs008kmolclx0sjlj5","_id":"ckgruepzv008pmolckrue7kjo"},{"post_id":"ckgruepvp003kmolc5ngl9uvr","tag_id":"ckgruepzt008lmolc42hefc3w","_id":"ckgruepzw008rmolcupk6gh2z"},{"post_id":"ckgruepvp003kmolc5ngl9uvr","tag_id":"ckgruepzu008omolchvo1r3lk","_id":"ckgruepzw008smolcq2ds8pa7"},{"post_id":"ckgruepvu003omolcziz49m7m","tag_id":"ckgruepzv008qmolc16lw1fqi","_id":"ckgrueq02008wmolcre98vyls"},{"post_id":"ckgruepvu003omolcziz49m7m","tag_id":"ckgruepzx008tmolcjj79u18g","_id":"ckgrueq02008xmolc9439iitx"},{"post_id":"ckgruepvu003omolcziz49m7m","tag_id":"ckgruepzx008umolcezco57lx","_id":"ckgrueq02008ymolcb2cxwh0j"},{"post_id":"ckgruepvu003omolcziz49m7m","tag_id":"ckgrueq01008vmolckot9qz6k","_id":"ckgrueq03008zmolcjojb19lh"},{"post_id":"ckgrueq5t0090molcjy24ultp","tag_id":"ckgrueq630095molcc2p9bu2t","_id":"ckgrueq6k009hmolcrlagbe2c"},{"post_id":"ckgrueq5t0090molcjy24ultp","tag_id":"ckgrueq6c009amolcqr2s11xa","_id":"ckgrueq6n009kmolcjgnetfnd"},{"post_id":"ckgrueq6w009vmolc2gb5napj","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueq7300a1molcdaq3mt3f"},{"post_id":"ckgrueq6w009vmolc2gb5napj","tag_id":"ckgruepyl006ymolc8un5o2uf","_id":"ckgrueq7700a4molcu0p6nchu"},{"post_id":"ckgrueq5w0092molctlhkr4qz","tag_id":"ckgrueq6h009fmolcyses69rm","_id":"ckgrueq7b00a9molczpgi2csa"},{"post_id":"ckgrueq5w0092molctlhkr4qz","tag_id":"ckgrueq6o009mmolcxw7mdjj2","_id":"ckgrueq7d00acmolciziaarzq"},{"post_id":"ckgrueq5w0092molctlhkr4qz","tag_id":"ckgrueq6u009smolco3twkn39","_id":"ckgrueq7g00agmolcwjbjmz4s"},{"post_id":"ckgrueq6z009xmolc2extmipw","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueq7i00aimolcx4r2nhji"},{"post_id":"ckgrueq6z009xmolc2extmipw","tag_id":"ckgruepya006kmolco80cada7","_id":"ckgrueq7j00akmolcs9hwokcf"},{"post_id":"ckgrueq7800a5molcqwrvtudb","tag_id":"ckgruepwo004pmolcjrm77r6n","_id":"ckgrueq7l00anmolc3v78pkdq"},{"post_id":"ckgrueq630096molc25pyi4qu","tag_id":"ckgrueq7200a0molcnq973039","_id":"ckgrueq7m00apmolcw0wrngcn"},{"post_id":"ckgrueq630096molc25pyi4qu","tag_id":"ckgrueq7a00a8molcwecdc0fz","_id":"ckgrueq7o00asmolcgi62wyb2"},{"post_id":"ckgrueq670097molcswddzy87","tag_id":"ckgrueq7g00afmolcv3a40ts2","_id":"ckgrueq7q00awmolcc3pk24gh"},{"post_id":"ckgrueq670097molcswddzy87","tag_id":"ckgrueq7k00almolco4coz0wo","_id":"ckgrueq7r00axmolcw6y6fsvc"},{"post_id":"ckgrueq670097molcswddzy87","tag_id":"ckgrueq7n00armolclasy9vrs","_id":"ckgrueq7t00azmolchtoa3zax"},{"post_id":"ckgrueq6a0098molc6pziklx4","tag_id":"ckgrueq7p00avmolcgv7zqqcs","_id":"ckgrueq7v00b1molcrkbybmnm"},{"post_id":"ckgrueq6a0098molc6pziklx4","tag_id":"ckgrueq7200a0molcnq973039","_id":"ckgrueq7v00b2molcg8cte72q"},{"post_id":"ckgrueq6d009bmolco5qxkur5","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueq7x00b4molcuxke97tu"},{"post_id":"ckgrueq6d009bmolco5qxkur5","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueq7x00b5molc8igs2acq"},{"post_id":"ckgrueq6d009bmolco5qxkur5","tag_id":"ckgrueq7u00b0molc2xq12krz","_id":"ckgrueq7z00b7molc5j2kw90f"},{"post_id":"ckgrueq6f009cmolcofz4fhd0","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueq7z00b8molcu6bx76tw"},{"post_id":"ckgrueq6f009cmolcofz4fhd0","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueq8100bamolcqed7bpxw"},{"post_id":"ckgrueq6f009cmolcofz4fhd0","tag_id":"ckgrueq7w00b3molcxq9zvny9","_id":"ckgrueq8200bbmolcmpepa1fj"},{"post_id":"ckgrueq6i009gmolcpqk8b7ds","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueq8400bdmolcvof7j9wm"},{"post_id":"ckgrueq6i009gmolcpqk8b7ds","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueq8500bemolcmg1gnx74"},{"post_id":"ckgrueq6i009gmolcpqk8b7ds","tag_id":"ckgrueq7y00b6molck146j4q9","_id":"ckgrueq8600bfmolcsv90bjc0"},{"post_id":"ckgrueq6l009imolcixfclcom","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueq8700bhmolcw5s1q1dw"},{"post_id":"ckgrueq6l009imolcixfclcom","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueq8700bimolcm7k3jq80"},{"post_id":"ckgrueq6l009imolcixfclcom","tag_id":"ckgrueq8000b9molcqfbymxyb","_id":"ckgrueq8800bkmolc8v8g03md"},{"post_id":"ckgrueq6p009nmolc8clyvnun","tag_id":"ckgrueq8300bcmolcyhfbbyjo","_id":"ckgrueq8a00bmmolch6e9lghd"},{"post_id":"ckgrueq6p009nmolc8clyvnun","tag_id":"ckgrueq8600bgmolc5x35ia6w","_id":"ckgrueq8b00bnmolc1hvvlir7"},{"post_id":"ckgrueq6p009nmolc8clyvnun","tag_id":"ckgrueq8800bjmolcb63vmzis","_id":"ckgrueq8c00bpmolc9dysu9qk"},{"post_id":"ckgrueq6r009pmolctkfw40rj","tag_id":"ckgruepy6006emolcuowklr8y","_id":"ckgrueq8f00brmolcospawpdw"},{"post_id":"ckgrueq6r009pmolctkfw40rj","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgrueq8g00bsmolcsxgao94k"},{"post_id":"ckgrueq6r009pmolctkfw40rj","tag_id":"ckgrueq8900blmolct37oipjo","_id":"ckgrueq8i00bumolc1wpzfm2u"},{"post_id":"ckgrueq6r009pmolctkfw40rj","tag_id":"ckgrueq8b00bomolcmm3kxhpa","_id":"ckgrueq8k00bvmolc6t8z8hoc"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueq8q00c0molcgku7udgm"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgrueq8e00bqmolcafdxlh6q","_id":"ckgrueq8q00c1molce0q626so"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgrueq8h00btmolc9bt5ra8n","_id":"ckgrueq8s00c3molcnsgdz2gn"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgrueq8l00bwmolc8blg960h","_id":"ckgrueq8s00c4molcmo8z3z33"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgrueq8n00bxmolcg2luls2z","_id":"ckgrueq8u00c6molc0dg6a1yc"},{"post_id":"ckgrueq6u009tmolcd9voy6e0","tag_id":"ckgrueq8n00bymolcd854n54b","_id":"ckgrueq8v00c7molcnsmfub52"},{"post_id":"ckgrueq7400a2molc9uuhmst4","tag_id":"ckgrueq8o00bzmolcg3rg9xf0","_id":"ckgrueq8w00c9molc0vcq498v"},{"post_id":"ckgrueq7400a2molc9uuhmst4","tag_id":"ckgruepzb007rmolc78s75o36","_id":"ckgrueq8w00camolc04bhvvrw"},{"post_id":"ckgrueq7400a2molc9uuhmst4","tag_id":"ckgrueq8r00c2molcr4bkdc3p","_id":"ckgrueq8x00cbmolcnkr6rj18"},{"post_id":"ckgrueq7400a2molc9uuhmst4","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueq8z00cdmolcsjoc96lq"},{"post_id":"ckgrueq7b00aamolceit4fon0","tag_id":"ckgruepzc007smolcdj57x7s8","_id":"ckgrueq8z00cemolcx3uahmlv"},{"post_id":"ckgrueq7b00aamolceit4fon0","tag_id":"ckgruepzd007vmolctofmeb6v","_id":"ckgrueq9000cfmolcpxfmw7cv"},{"post_id":"ckgrueq7b00aamolceit4fon0","tag_id":"ckgrueq8t00c5molcend6m8ar","_id":"ckgrueq9100cgmolcbmdssghb"},{"post_id":"ckgrueq7e00admolcficada4v","tag_id":"ckgruepwo004pmolcjrm77r6n","_id":"ckgrueq9100chmolc6m636u23"},{"post_id":"ckgrueq7e00admolcficada4v","tag_id":"ckgrueq8v00c8molcdr5oa1h0","_id":"ckgrueq9200cimolc8d0pxagn"},{"post_id":"ckgrueq7e00admolcficada4v","tag_id":"ckgruepyx0077molcju4db80c","_id":"ckgrueq9200cjmolcq37vg1qp"},{"post_id":"ckgrueq7e00admolcficada4v","tag_id":"ckgrueq8y00ccmolc65ih0vf6","_id":"ckgrueq9300ckmolcpy0ggyhr"},{"post_id":"ckgrueq9u00clmolcjcyga86d","tag_id":"ckgrueq7g00afmolcv3a40ts2","_id":"ckgrueqa700cumolciqpexaih"},{"post_id":"ckgrueq9u00clmolcjcyga86d","tag_id":"ckgrueq9x00cnmolc01f4vbk8","_id":"ckgrueqa800cwmolc2btbkeht"},{"post_id":"ckgrueqa300crmolcyflungur","tag_id":"ckgrueq8v00c8molcdr5oa1h0","_id":"ckgrueqaa00czmolc9z4t2mo7"},{"post_id":"ckgrueqa300crmolcyflungur","tag_id":"ckgruepyx0077molcju4db80c","_id":"ckgrueqab00d1molctlouizry"},{"post_id":"ckgrueq9w00cmmolc5nem0j3f","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueqac00d3molcy7j6hddp"},{"post_id":"ckgrueq9w00cmmolc5nem0j3f","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueqad00d4molcklqg8t7a"},{"post_id":"ckgrueq9w00cmmolc5nem0j3f","tag_id":"ckgrueqa600ctmolcmgihxwqr","_id":"ckgrueqae00d6molc5qnsvpda"},{"post_id":"ckgrueq9y00comolcfmjl96da","tag_id":"ckgruepxa005jmolc6l3t1viq","_id":"ckgrueqae00d7molc3nmcyqnd"},{"post_id":"ckgrueq9y00comolcfmjl96da","tag_id":"ckgrueprr000emolcckbpyqpn","_id":"ckgrueqae00d8molclmhvd3ee"},{"post_id":"ckgrueq9y00comolcfmjl96da","tag_id":"ckgrueqa900cymolc378nyqfi","_id":"ckgrueqaf00d9molcogqgg17y"},{"post_id":"ckgrueqa000cpmolcvgzso5vd","tag_id":"ckgrueqab00d2molcy7lb4kwz","_id":"ckgrueqaf00damolc57k9666q"},{"post_id":"ckgrueqa000cpmolcvgzso5vd","tag_id":"ckgruept8001kmolc2fh8haqr","_id":"ckgrueqag00dbmolcg1d4tnna"},{"post_id":"ckgrueqa000cpmolcvgzso5vd","tag_id":"ckgruept0001cmolcqbbxt3o3","_id":"ckgrueqag00dcmolcyecqa7gt"},{"post_id":"ckgrueqa000cpmolcvgzso5vd","tag_id":"ckgrueqad00d5molcrmj0mu7d","_id":"ckgrueqag00ddmolcin33n0pp"},{"post_id":"ckgrueqc200demolc0i72ypwa","tag_id":"ckgrueq7g00afmolcv3a40ts2","_id":"ckgrueqcc00domolcwcjo4aap"},{"post_id":"ckgrueqc200demolc0i72ypwa","tag_id":"ckgrueqc500dgmolcglb28we2","_id":"ckgrueqcd00dpmolclvqaii1g"},{"post_id":"ckgrueqc200demolc0i72ypwa","tag_id":"ckgrueqca00dkmolci5j1movy","_id":"ckgrueqcg00drmolcnvt2oiaq"},{"post_id":"ckgrueqc300dfmolcva26pn6e","tag_id":"ckgrueqcb00dmmolc18rq41ht","_id":"ckgrueqci00dumolcg1p0o03d"},{"post_id":"ckgrueqc300dfmolcva26pn6e","tag_id":"ckgrueq8300bcmolcyhfbbyjo","_id":"ckgrueqci00dvmolct4zi2g5f"},{"post_id":"ckgrueqc300dfmolcva26pn6e","tag_id":"ckgrueqcf00dqmolc32obk2qp","_id":"ckgrueqcj00dxmolcoj7nx60a"},{"post_id":"ckgrueqc300dfmolcva26pn6e","tag_id":"ckgrueqcg00dsmolc1ezezvnl","_id":"ckgrueqck00dymolcbcqmdy27"},{"post_id":"ckgrueqc600dhmolc0qavznx7","tag_id":"ckgrueqch00dtmolci6cnug8v","_id":"ckgrueqcl00dzmolcso0yy7kk"},{"post_id":"ckgrueqc600dhmolc0qavznx7","tag_id":"ckgruepx7005dmolc93nn8zyj","_id":"ckgrueqcl00e0molcxr6o1qtl"},{"post_id":"ckgrueqc600dhmolc0qavznx7","tag_id":"ckgrueqcj00dwmolceah087yf","_id":"ckgrueqcm00e1molcxaw9fjms"}],"Tag":[{"name":"Hexo","_id":"ckgruepra0004molcdtle0yg6"},{"name":"原理","_id":"ckgruepri0009molcv1w1ss4w"},{"name":"命令","_id":"ckgrueprr000emolcckbpyqpn"},{"name":"Apache","_id":"ckgruepry000jmolcttciskxo"},{"name":"虚拟主机","_id":"ckgrueps6000qmolc2yzs6ufo"},{"name":"重构","_id":"ckgruepsl000ymolc4woyxl0n"},{"name":"代码的坏味道","_id":"ckgruepsu0016molc118vh0uu"},{"name":"PHP","_id":"ckgruept0001cmolcqbbxt3o3"},{"name":"算法","_id":"ckgruept8001kmolc2fh8haqr"},{"name":"Linux/Unix","_id":"ckgrueptx0024molcuqu90s48"},{"name":"Python3","_id":"ckgruepu7002dmolcko2y4ym0"},{"name":"CGI","_id":"ckgruepuf002jmolc0rcqlsw6"},{"name":"FCGI","_id":"ckgruepun002rmolcyiwr5ydq"},{"name":"PHP-FPM","_id":"ckgruepuw002ymolcydjm43jj"},{"name":"PHP-CGI","_id":"ckgruepv40034molcsh1lzk6k"},{"name":"Git","_id":"ckgruepvb0039molcrjcxhklq"},{"name":"GO","_id":"ckgruepvm003hmolc5w6bxfl9"},{"name":"主题","_id":"ckgruepvv003pmolcz8k23gxw"},{"name":"博客","_id":"ckgruepw0003vmolcnr69oacx"},{"name":"NexT","_id":"ckgruepw2003ymolczwbfkn4t"},{"name":"GitHub","_id":"ckgruepw90047molchy42vrk7"},{"name":"生活","_id":"ckgruepwg004gmolcqtoghat5"},{"name":"Life","_id":"ckgruepwk004lmolcpx1hfjyq"},{"name":"HTTP","_id":"ckgruepwo004pmolcjrm77r6n"},{"name":"POST","_id":"ckgruepwt004umolcshvoiyev"},{"name":"状态码","_id":"ckgruepx10052molcug8w4lm6"},{"name":"约瑟夫环","_id":"ckgruepx20054molcfderdgm0"},{"name":"计算密集型任务","_id":"ckgruepx50059molc1qoib4bo"},{"name":"I/O密集型任务","_id":"ckgruepx6005cmolcus9dk0wd"},{"name":"Python","_id":"ckgruepx7005dmolc93nn8zyj"},{"name":"gf","_id":"ckgruepx7005emolcpbh3wwbq"},{"name":"gf-cli","_id":"ckgruepx9005hmolc4k5us8s6"},{"name":"Linux","_id":"ckgruepxa005jmolc6l3t1viq"},{"name":"cd","_id":"ckgruepxc005mmolc9yq5bwx4"},{"name":"cp","_id":"ckgruepxh005qmolc7xcuhbay"},{"name":"ln","_id":"ckgruepxp005vmolc6jlvk87q"},{"name":"ping","_id":"ckgruepxu0060molchcwt1lzg"},{"name":"用户态","_id":"ckgruepxz0065molcyk06an8s"},{"name":"内核态","_id":"ckgruepy00067molcosfwpvmb"},{"name":"MySQL","_id":"ckgruepy10068molc4j1wircr"},{"name":"InnoDB","_id":"ckgruepy3006bmolcvfq9py95"},{"name":"MyISAM","_id":"ckgruepy5006dmolcmitjxebo"},{"name":"Nginx","_id":"ckgruepy6006emolcuowklr8y"},{"name":"$_SERVER","_id":"ckgruepy8006hmolchla2kdmo"},{"name":"变量的内部存储","_id":"ckgruepya006kmolco80cada7"},{"name":"操作系统","_id":"ckgruepyc006nmolc9oawk9hm"},{"name":"进程调度","_id":"ckgruepye006qmolcvawq0r4u"},{"name":"上下文管理器","_id":"ckgruepyh006umolcenxlani2"},{"name":"垃圾回收","_id":"ckgruepyl006ymolc8un5o2uf"},{"name":"requests","_id":"ckgruepym006zmolc65le28ck"},{"name":"session","_id":"ckgruepyp0072molc4adn7742"},{"name":"会话对象","_id":"ckgruepyq0073molcs78a4s1k"},{"name":"session共享","_id":"ckgruepyt0074molch2ekpmv4"},{"name":"网络编程","_id":"ckgruepyx0077molcju4db80c"},{"name":"知识点","_id":"ckgruepyz007amolcy1tve1qe"},{"name":"设计模式","_id":"ckgruepz1007dmolcey71ic7x"},{"name":"单例模式","_id":"ckgruepz3007gmolcd99xxatq"},{"name":"SQLAlchemy","_id":"ckgruepz5007imolcyu842oto"},{"name":"bug","_id":"ckgruepz7007lmolc687v0056"},{"name":"Sublime Text 3","_id":"ckgruepz8007mmolcf71scumw"},{"name":"子进程","_id":"ckgruepza007pmolc4hulhwy0"},{"name":"线程","_id":"ckgruepzb007rmolc78s75o36"},{"name":"Tornado","_id":"ckgruepzc007smolcdj57x7s8"},{"name":"翻译文档","_id":"ckgruepzd007vmolctofmeb6v"},{"name":"并发网络爬虫","_id":"ckgruepzg0080molcd91si9hv"},{"name":"用户指南","_id":"ckgruepzm008amolcf3kmjt3p"},{"name":"UNIQUE KEY","_id":"ckgruepzr008jmolcna2ge8bi"},{"name":"PRIMARY KEY","_id":"ckgruepzs008kmolclx0sjlj5"},{"name":"Windows","_id":"ckgruepzt008lmolc42hefc3w"},{"name":"端口占用","_id":"ckgruepzu008omolchvo1r3lk"},{"name":"阻塞","_id":"ckgruepzv008qmolc16lw1fqi"},{"name":"非阻塞","_id":"ckgruepzx008tmolcjj79u18g"},{"name":"异步","_id":"ckgruepzx008umolcezco57lx"},{"name":"同步","_id":"ckgrueq01008vmolckot9qz6k"},{"name":"抽象类","_id":"ckgrueq630095molcc2p9bu2t"},{"name":"接口","_id":"ckgrueq6c009amolcqr2s11xa"},{"name":"datatables","_id":"ckgrueq6h009fmolcyses69rm"},{"name":"jquery","_id":"ckgrueq6o009mmolcxw7mdjj2"},{"name":"前端","_id":"ckgrueq6u009smolco3twkn39"},{"name":"kafka","_id":"ckgrueq7200a0molcnq973039"},{"name":"文件存储","_id":"ckgrueq7a00a8molcwecdc0fz"},{"name":"Laravel","_id":"ckgrueq7g00afmolcv3a40ts2"},{"name":"多用户登录","_id":"ckgrueq7k00almolco4coz0wo"},{"name":"验证原理","_id":"ckgrueq7n00armolclasy9vrs"},{"name":"librdkafka","_id":"ckgrueq7p00avmolcgv7zqqcs"},{"name":"crontab","_id":"ckgrueq7u00b0molc2xq12krz"},{"name":"ps","_id":"ckgrueq7w00b3molcxq9zvny9"},{"name":"tar","_id":"ckgrueq7y00b6molck146j4q9"},{"name":"top","_id":"ckgrueq8000b9molcqfbymxyb"},{"name":"数据库","_id":"ckgrueq8300bcmolcyhfbbyjo"},{"name":"事物","_id":"ckgrueq8600bgmolc5x35ia6w"},{"name":"事物隔离","_id":"ckgrueq8800bjmolcb63vmzis"},{"name":"Supervisor","_id":"ckgrueq8900blmolct37oipjo"},{"name":"项目部署","_id":"ckgrueq8b00bomolcmm3kxhpa"},{"name":"self","_id":"ckgrueq8e00bqmolcafdxlh6q"},{"name":"final","_id":"ckgrueq8h00btmolc9bt5ra8n"},{"name":"this","_id":"ckgrueq8l00bwmolc8blg960h"},{"name":"parent","_id":"ckgrueq8n00bxmolcg2luls2z"},{"name":"static","_id":"ckgrueq8n00bymolcd854n54b"},{"name":"进程","_id":"ckgrueq8o00bzmolcg3rg9xf0"},{"name":"程序","_id":"ckgrueq8r00c2molcr4bkdc3p"},{"name":"协程","_id":"ckgrueq8t00c5molcend6m8ar"},{"name":"TCP/IP","_id":"ckgrueq8v00c8molcdr5oa1h0"},{"name":"Web","_id":"ckgrueq8y00ccmolc65ih0vf6"},{"name":"后台用户认证","_id":"ckgrueq9x00cnmolc01f4vbk8"},{"name":"netstat","_id":"ckgrueqa600ctmolcmgihxwqr"},{"name":"ls","_id":"ckgrueqa900cymolc378nyqfi"},{"name":"排序","_id":"ckgrueqab00d2molcy7lb4kwz"},{"name":"时间复杂度","_id":"ckgrueqad00d5molcrmj0mu7d"},{"name":"控制反转(IoC)","_id":"ckgrueqc500dgmolcglb28we2"},{"name":"依赖注入(DI)","_id":"ckgrueqca00dkmolci5j1movy"},{"name":"分布式锁","_id":"ckgrueqcb00dmmolc18rq41ht"},{"name":"redis","_id":"ckgrueqcf00dqmolc32obk2qp"},{"name":"zookeeper","_id":"ckgrueqcg00dsmolc1ezezvnl"},{"name":"Transitions","_id":"ckgrueqch00dtmolci6cnug8v"},{"name":"状态机库","_id":"ckgrueqcj00dwmolceah087yf"}]}}