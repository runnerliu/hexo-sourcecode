<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小杨的BLOG</title>
  <subtitle>On the way to become a Software Architect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://runnerliu.github.io/"/>
  <updated>2018-06-06T14:36:42.002Z</updated>
  <id>http://runnerliu.github.io/</id>
  
  <author>
    <name>liuxiaoyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Datatables使用系列-基础配置</title>
    <link href="http://runnerliu.github.io/2018/05/27/datatables1/"/>
    <id>http://runnerliu.github.io/2018/05/27/datatables1/</id>
    <published>2018-05-27T08:48:21.000Z</published>
    <updated>2018-06-06T14:36:42.002Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://datatables.net/" target="_blank" rel="external">Datatables</a> 为是 <a href="https://jquery.com/" target="_blank" rel="external">JQuery</a> 的一款表格插件库，是一个高度灵活的工具，可以将任何 HTML 表格添加高级的交互功能。特别是后台开发者，对前端相关框架或知识并不是很熟悉，在做一些内部使用的工具时，总会涉及到页面展示的功能，<a href="http://www.bootcss.com/p/buttons/" target="_blank" rel="external">Buttons</a> 同样是一个高度可定制的、免费并且开源的按钮 CSS 样式库。类似插件对于后台开发者来说，简直是福音。本文主要介绍 <a href="https://datatables.net/" target="_blank" rel="external">Datatables</a> 的基本配置和使用。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>从 <a href="https://datatables.net/download/" target="_blank" rel="external">Download</a> 页面可下载需要使用的 JS 文件和其他的插件，可以根据需求选择不同的样式、包文件和扩展文件，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Step 1. Choose a styling framework</div><div class="line">    Bootstrap 4</div><div class="line">Step 2. Select packages</div><div class="line">    jQuery 3</div><div class="line">    Bootstrap 4</div><div class="line">    DataTables</div><div class="line">Extensions</div><div class="line">    可选</div><div class="line">Step 3. Pick a download method</div><div class="line">    Minify</div><div class="line">    Concatenate</div><div class="line">    下载方式常用是CDN和本地文件方式（推荐）</div></pre></td></tr></table></figure>
<p>然后我们下载打包好的文件到本地就可以了。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>将文件打包下载后，因为一般页面都是在 web 应用中使用，所以笔者创建了一个简单的 <a href="http://www.tornadoweb.org/en/stable/" target="_blank" rel="external">Tornado</a> 应用，将所有的静态文件放到了 <code>/static</code> 目录下：</p>
<p> <img src="/images/2018-05-27T222132.png" alt="2018-05-27T222132"></p>
<p><strong>注意：</strong> <code>jquery.js</code> 文件是必需的，目前使用 <code>3.0</code> 版本。</p>
<p>然后我们可以创建一个简单的 HTML 静态页面，引入基本的 <code>js</code>  文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Datatables&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/Bootstrap-4-4.0.0/css/bootstrap.css&quot;/&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/js/DataTables-1.10.16/css/dataTables.bootstrap4.css&quot;/&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/datatables.min.css&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;script src=&quot;static/js/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;static/js/Bootstrap-4-4.0.0/js/bootstrap.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/jquery.dataTables.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;static/js/DataTables-1.10.16/js/dataTables.bootstrap4.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 如果在调试过程中，出现表格显示错误，请检查 <code>css</code> 文件和 <code>js</code>  文件的引用顺序。</p>
<p>接下来创建一个 <code>div</code> 作为表格区域：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;table id=&quot;test_dt&quot; class=&quot;table table-striped table-bordered&quot; cellspacing=&quot;0&quot; style=&quot;width: 100%&quot;&gt;</div><div class="line">        &lt;thead&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;th&gt;id&lt;/th&gt;</div><div class="line">            &lt;th&gt;username&lt;/th&gt;</div><div class="line">            &lt;th&gt;sex&lt;/th&gt;</div><div class="line">            &lt;th&gt;address&lt;/th&gt;</div><div class="line">            &lt;th&gt;age&lt;/th&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;/thead&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><code>table</code> 中的 <code>class</code> 属性都是在 <code>css</code> 文件中定义好的，直接引用即可。</p>
<p>然后就是通过 <code>js</code> 为 <code>test_dt</code> 表格填充数据，数据源一般 <a href="https://datatables.net/examples/data_sources/" target="_blank" rel="external">Data sources</a> 这些，我们在 <code>web</code> 应用中使用最多的就是 <a href="https://datatables.net/examples/ajax/" target="_blank" rel="external">Ajax</a> 方式了，可以局部刷新页面。</p>
<p>本文数据源方式使用 <a href="https://datatables.net/examples/ajax/objects.html" target="_blank" rel="external">Ajax data source (objects)</a> 这种方式，<code>js</code> 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">function init_table()&#123;</div><div class="line">    $(&apos;#test_dt&apos;).DataTable(&#123;</div><div class="line">        order: [[ 0, &quot;desc&quot;]],</div><div class="line">        searching: true,</div><div class="line">        stateSave: true,</div><div class="line">        paging: true,</div><div class="line">        pagingType: &apos;full_numbers&apos;,</div><div class="line">        autoWidth: true,</div><div class="line">        responsive: false,</div><div class="line">        pageLength: 10,</div><div class="line">        destroy: true,</div><div class="line">        ajax: &#123;</div><div class="line">            &apos;url&apos;: &apos;/index&apos;,</div><div class="line">            &apos;dataSrc&apos;: handle_data_src,</div><div class="line">            &apos;type&apos;: &apos;POST&apos;,</div><div class="line">            &apos;async&apos;: false,</div><div class="line">            &apos;data&apos;: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        columns:[</div><div class="line">            &#123;</div><div class="line">                &quot;data&quot;:&quot;id&quot;,</div><div class="line">                &quot;width&quot;: &quot;10%&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;data&quot;:&quot;username&quot;,</div><div class="line">                &quot;width&quot;: &quot;10%&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;data&quot;:&quot;sex&quot;,</div><div class="line">                &quot;width&quot;: &quot;10%&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;data&quot;:&quot;address&quot;,</div><div class="line">                &quot;width&quot;: &quot;10%&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;data&quot;:&quot;age&quot;,</div><div class="line">                &quot;width&quot;: &quot;10%&quot;</div><div class="line">            &#125;,</div><div class="line">        ],</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>POST</code> 方式获取表格数据，方便表格的刷新操作。其中 <code>dataSrc</code> 参数可以对请求的数据在显示到表格前做其他处理。</p>
<p>效果图基本如下：</p>
<p><img src="/images/2018-05-27T223227.png" alt="2018-05-27T223227"></p>
<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>Datatables 支持参数配置方式以提供各种场景下对表格的需求，目前笔者主要使用的参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>order</td>
<td>表格在初始化的时候的排序</td>
<td><a href="https://datatables.net/reference/option/order" target="_blank" rel="external">order</a></td>
</tr>
<tr>
<td>searching</td>
<td>允许表格搜索</td>
<td>true false</td>
</tr>
<tr>
<td>stateSave</td>
<td>允许浏览器缓存 Datatables，以便下次恢复之前的状态</td>
<td>true false</td>
</tr>
<tr>
<td>paging</td>
<td>允许表格分页</td>
<td>true false</td>
</tr>
<tr>
<td>pagingType</td>
<td>分页按钮显示选项</td>
<td><a href="http://www.datatables.club/reference/option/pagingType.html" target="_blank" rel="external">pagingType</a></td>
</tr>
<tr>
<td>autoWidth</td>
<td>定义是否由控件自动控制列宽</td>
<td>true false</td>
</tr>
<tr>
<td>pageLength</td>
<td>单页显示的数据条数</td>
<td>integer</td>
</tr>
<tr>
<td>destroy</td>
<td>销毁已经存在的 Datatables 实例并替换新的选项</td>
<td>true false</td>
</tr>
<tr>
<td>ajax</td>
<td>异步获取数据填充到表格显示</td>
<td><a href="http://www.datatables.club/reference/option/ajax.html" target="_blank" rel="external">ajax</a></td>
</tr>
<tr>
<td>columns</td>
<td>设定列的所有初始属性</td>
<td><a href="http://www.datatables.club/reference/option/columns.html" target="_blank" rel="external">columns</a></td>
</tr>
<tr>
<td>info</td>
<td>控制总数信息（标准界面右下角显示总数和过滤条数的控件）的显隐</td>
<td>true false</td>
</tr>
</tbody>
</table>
<p>其他参数设置可参考 <a href="https://datatables.net/manual/options" target="_blank" rel="external">Options</a> 。</p>
<h3 id="Tips-持续更新"><a href="#Tips-持续更新" class="headerlink" title="Tips[持续更新]"></a>Tips[持续更新]</h3><p>ajax.reload()</p>
<p>场景：间隔一定时间进行局部刷新。</p>
<p>该场景下如果每次都初始化 datatables ，则会使表格在刷新时失去鼠标控制，用户体验较差。使用 <code>ajax.reload(callback, resetPaging)</code> 方式可以在重复初始化 <code>datatables</code> 下重新加载数据，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;#test_dt&apos;).DataTable().ajax.reload(null, false);</div></pre></td></tr></table></figure>
<p>当使用该方式时，如果 <code>ajax</code> 提交的请求 <code>data</code> 字段带的参数值需要动态更新的话，可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;data&apos;: function(d)&#123;</div><div class="line">    d.test_name = test_name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>js</code> 函数动态更新参数值，这样在 <code>reload</code> 表格时，提交的参数就是动态获取的了。</p>
<p>render</p>
<p>场景：获取数据后，需要根据某列值对数据进行预处理。</p>
<p>我们可以在 <code>dataSrc</code> 中对数据进行处理，但是 <code>Datatables</code> 提供了另外一种更加方便的处理方式，即 <a href="https://datatables.net/reference/option/columns.render" target="_blank" rel="external">columns.render</a> 方法，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;data&quot;:&quot;address&quot;,</div><div class="line">    render: function (data, type, row, meta) &#123;</div><div class="line">        var node = &quot;&lt;span &quot;;</div><div class="line">        if (data &lt;= bw_warn) &#123;</div><div class="line">            node += &quot;style=&apos;color:red;font-weight: bold;&apos;&quot;</div><div class="line">        &#125;</div><div class="line">        node += &quot;&gt;&quot; + data + &quot;&lt;/span&gt;&quot;</div><div class="line">        return node;</div><div class="line">    &#125;,</div><div class="line">    &quot;width&quot;: &quot;10%&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>可以根据列值，对该列的显示添加其他的 <code>css</code> 属性。</p>
<p>Read More:</p>
<blockquote>
<p><a href="https://datatables.net/" target="_blank" rel="external">Datatables</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://datatables.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Datatables&lt;/a&gt; 为是 &lt;a href=&quot;https://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="前端" scheme="http://runnerliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="datatables" scheme="http://runnerliu.github.io/tags/datatables/"/>
    
      <category term="jquery" scheme="http://runnerliu.github.io/tags/jquery/"/>
    
      <category term="前端" scheme="http://runnerliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy bug系列(一)</title>
    <link href="http://runnerliu.github.io/2018/05/13/sqlalchemybug1/"/>
    <id>http://runnerliu.github.io/2018/05/13/sqlalchemybug1/</id>
    <published>2018-05-13T07:13:50.000Z</published>
    <updated>2018-06-06T14:28:22.587Z</updated>
    
    <content type="html"><![CDATA[<p>项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def query(self, filters, orders=&apos;&apos;):</div><div class="line">    try:</div><div class="line">        if not isinstance(filters, str) or not isinstance(orders, str):</div><div class="line">            return False</div><div class="line">        if not len(orders):</div><div class="line">            return self.s.query(Node).filter(filters).first()</div><div class="line">        else:</div><div class="line">            r = self.s.query(Node).filter(filters).order_by(orders).all()</div><div class="line">            if len(r):</div><div class="line">                return r[0]</div><div class="line">            return None</div><div class="line">    except Exception as e:</div><div class="line">        self.logger.error(traceback.format_exc())</div><div class="line">        return None</div><div class="line">    finally:</div><div class="line">        Session.remove()</div></pre></td></tr></table></figure>
<p>但是在跑了一段时间后出现了如下问题：</p>
<blockquote>
<p>(sqlalchemy.exc.InvalidRequestError) Can’t reconnect until invalid transaction is rolled back</p>
</blockquote>
<p>错误中很明显是数据库的连接由于事务某些错误出现了问题，SQLAlchemy 在尝试重新连接时失败了。</p>
<p>几经翻找资料后，问题产生原因如下：</p>
<p>从数据库连接池（pool）中获取的 <code>connection</code> 没有以 <code>session.commit()</code> 或 <code>session.rollback()</code> 或 <code>session.close()</code> 的某一种放回 pool 中。这时 <code>connection</code> 的事务（<code>transaction</code> ）没有完结，而在后续与数据库交互中，由于某些原因（如死锁、超时）数据库连接池中的 <code>connection</code> 又死掉了，当获取到这个连接时，SQLAlchemy 尝试重新连接。但由于 <code>transaction</code> 还没完结，无法重连。就抛出了上述错误。</p>
<p>解决办法：</p>
<ol>
<li><p>显示调用事务结束</p>
<p>使用 <code>try...except...</code> 代码块，<code>except</code> 中捕获到异常时，调用 <code>session.rollback()</code> 回滚事务。</p>
</li>
<li><p>打开 <code>autocommit</code></p>
<p>使用 SQLAlchemy 的初始化方式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Base = declarative_base()</div><div class="line">engine = create_engine(</div><div class="line">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;.format(</div><div class="line">        mysql_config[&apos;default&apos;][&apos;user&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;password&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;host&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;port&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;name&apos;],</div><div class="line">    ),</div><div class="line">    encoding=&quot;utf-8&quot;,</div><div class="line">    echo=False,</div><div class="line">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</div><div class="line">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</div><div class="line">)</div><div class="line">Session = scoped_session(sessionmaker(bind=engine))</div></pre></td></tr></table></figure>
<p>默认是使用事务操作，我们可以在初始化语句中加上 <code>autocommit=true</code> 关闭事务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">engine = create_engine(</div><div class="line">    &quot;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?autocommit=true&quot;.format(</div><div class="line">        mysql_config[&apos;default&apos;][&apos;user&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;password&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;host&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;port&apos;],</div><div class="line">        mysql_config[&apos;default&apos;][&apos;name&apos;],</div><div class="line">    ),</div><div class="line">    encoding=&quot;utf-8&quot;,</div><div class="line">    echo=False,</div><div class="line">    pool_recycle=mysql_config[&apos;connect_pool&apos;][&apos;pool_recycle&apos;],</div><div class="line">    pool_size=mysql_config[&apos;connect_pool&apos;][&apos;pool_size&apos;]</div><div class="line">)</div></pre></td></tr></table></figure>
<p>这样生成的查询语句就会立即执行。<strong>注意：</strong>个人感觉这并不是一个好方法，还是老老实实捕获异常吧。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目框架采用 Tornado ，SQLAlchemy 作为数据库ORM，简陋的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
    
    </summary>
    
      <category term="SQLAlchemy" scheme="http://runnerliu.github.io/categories/SQLAlchemy/"/>
    
    
      <category term="SQLAlchemy" scheme="http://runnerliu.github.io/tags/SQLAlchemy/"/>
    
      <category term="bug" scheme="http://runnerliu.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>HTTP POST提交数据分常见方式</title>
    <link href="http://runnerliu.github.io/2018/05/13/httppostmethod/"/>
    <id>http://runnerliu.github.io/2018/05/13/httppostmethod/</id>
    <published>2018-05-13T06:17:00.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">HTTP/1.1协议</a> 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。其中 POST 一般用来向服务端提交数据，我们在写类似接口文档这种被业务方调用的服务时，涉及到 POST 的默认提交方式基本都是：<code>application/x-www-form-urlencoded</code> 。本 文主要讨论 POST 提交数据的几种方式。</p>
<p>我们知道，HTTP 协议是以 <strong>ASCII</strong> 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>
<blockquote>
<p><method> <request-url> <version></version></request-url></method></p>
<headers>

<entity-body>

</entity-body></headers></blockquote>
<p>协议规定 POST 提交的数据必须放在消息主体（<code>entity-body</code>）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>
<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 java php python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 <code>Content-Type</code>字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 <code>Content-Type</code> 和消息主体编码方式两部分。下面进入正题。</p>
<h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><p>这种方式是最常见的 POST 提交数据的方式。浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</div><div class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</div></pre></td></tr></table></figure>
<p>首先，Content-Type 被指定为 <code>application/x-www-form-urlencoded</code> ；其次，提交的数据按照 <code>key1=val1&amp;key2=val2</code> 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。</p>
<p>通常，我们用 Ajax 提交数据时，也是使用这种方式。例如 <a href="http://jquery.com/" target="_blank" rel="external">JQuery</a> 和 <a href="http://www.qwrap.com/" target="_blank" rel="external">QWrap</a> 的 Ajax，<code>Content-Type</code> 默认值都是 <code>application/x-www-form-urlencoded;charset=utf-8</code> 。</p>
<h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><p>在使用表单上传文件时，必须让 <code>&lt;form&gt;</code> 表单的 <code>enctype</code> 等于 <code>multipart/form-data</code>。直接来看一个请求示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line"></div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;text&quot;</div><div class="line"></div><div class="line">title</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</div><div class="line">Content-Type: image/png</div><div class="line"></div><div class="line">PNG ... content of chrome.png ...</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</div></pre></td></tr></table></figure>
<p>这个例子稍微复杂点。首先生成了一个 <code>boundary</code> 用于分割不同的字段，为了避免与正文内容重复，<code>boundary</code> 很长很复杂。然后 <code>Content-Type</code> 里指明了数据是以 <code>multipart/form-data</code> 来编码，本次请求的 <code>boundary</code> 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 <code>--boundary</code> 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 <code>--boundary--</code> 标示结束。关于 <code>multipart/form-data</code> 的详细定义，请前往 <a href="http://www.ietf.org/rfc/rfc1867.txt" target="_blank" rel="external">rfc1867</a> 查看。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。</p>
<p>以上提到的两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 \<form\> 表单也 <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4" target="_blank" rel="external">只支持这两种方式</a>（通过 <code>&lt;form&gt;</code> 元素的 <code>enctype</code> 属性指定，默认为 <code>application/x-www-form-urlencoded</code>。其实 <code>enctype</code> 还支持 <code>text/plain</code>，不过用得非常少）。</form\></p>
<p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</p>
<h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><p><code>application/json</code> 这个 <code>Content-Type</code> 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。</p>
<p>Google 的 <a href="http://angularjs.org/" target="_blank" rel="external">AngularJS</a> 中的 Ajax 功能，默认就是提交 JSON 字符串。例如下面这段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var data = &#123;&apos;title&apos;:&apos;test&apos;, &apos;sub&apos; : [1,2,3]&#125;;</div><div class="line">$http.post(url, data).success(function(result) &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最终发送的请求是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1 </div><div class="line">Content-Type: application/json;charset=utf-8</div><div class="line"></div><div class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</div></pre></td></tr></table></figure>
<p>这种方案，可以方便的提交复杂的结构化数据，特别适合 RESTful 的接口。各大抓包工具如 Chrome 自带的开发者工具、Firebug、Fiddler，都会以树形结构展示 JSON 数据，非常友好。但也有些服务端语言还没有支持这种方式，例如 php 就无法通过 $_POST 对象从上面的请求中获得内容。这时候，需要自己动手处理下：在请求头中 <code>Content-Type</code> 为 <code>application/json</code> 时，从 <code>php://input</code> 里获得原始输入流，再 <code>json_decode</code> 成对象。一些 php 框架已经开始这么做了。</p>
<p>当然 AngularJS 也可以配置为使用 <code>x-www-form-urlencoded</code> 方式提交数据。如有需要，可以参考 <a href="http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/" target="_blank" rel="external">这里</a>。</p>
<h3 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h3><p>这种方式目前几乎很少在用，因为 JSON 方式更加灵活方便，而 xml 方式显得比较臃肿和繁琐。<code>XML-RPC（XML Remote Procedure Call）</code> 协议是一套允许运行在不同操作系统、不同环境的程序实现基于 Internet 过程调用的规范和一系列的实现。这种远程过程调用使用 HTTP 作为传输协议，XML 作为传送信息的编码格式。</p>
<p>典型的 <code>XML-RPC</code> 请求是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1 </div><div class="line">Content-Type: text/xml</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;methodCall&gt;</div><div class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</div><div class="line">    &lt;params&gt;</div><div class="line">        &lt;param&gt;</div><div class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</div><div class="line">        &lt;/param&gt;</div><div class="line">    &lt;/params&gt;</div><div class="line">&lt;/methodCall&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/1.1协议&lt;/a&gt; 规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELE
    
    </summary>
    
      <category term="HTTP" scheme="http://runnerliu.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://runnerliu.github.io/tags/HTTP/"/>
    
      <category term="POST" scheme="http://runnerliu.github.io/tags/POST/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://runnerliu.github.io/2018/05/06/distlock/"/>
    <id>http://runnerliu.github.io/2018/05/06/distlock/</id>
    <published>2018-05-06T05:28:07.000Z</published>
    <updated>2018-06-06T14:34:32.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔者同样遇到了这种问题：</p>
<blockquote>
<p>高并发情境下数据库的数据重复写入问题</p>
</blockquote>
<p>数据的重复写入实际上就是对共享资源的竞争操作，导致数据出现不一致，给线上业务带来影响。解决这种问题，最直接的思路是在数据库层面寻求解决方案，借助数据库的锁机制，或者在业务上通过数据库语句的限制避免重复数据，如：</p>
<ul>
<li>insert ignore into 语句；</li>
<li>on duplicate key update 语句；</li>
<li>insert … select … where not exist 语句；</li>
<li>replace into 语句。</li>
</ul>
<p>以上语句在简单业务中避免mysql插入重复数据是有一定效果的，但是在复杂场景下并不能满足需求。因为高并发业务除了要求数据一致性外，对性能、稳定性的要求也较高，单纯使用数据库语句很难达到预期效果，因此，从单机锁发展而来的分布式锁提供了一种新的解决方案。</p>
<h3 id="SQL语句解决方案"><a href="#SQL语句解决方案" class="headerlink" title="SQL语句解决方案"></a>SQL语句解决方案</h3><p>insert ignore into</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]</div><div class="line">    [INTO] tbl_name</div><div class="line">    [PARTITION (partition_name [, partition_name] ...)]</div><div class="line">    [(col_name [, col_name] ...)]</div><div class="line">    SELECT ...</div><div class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</div><div class="line"></div><div class="line">value:</div><div class="line">    &#123;expr | DEFAULT&#125;</div><div class="line"></div><div class="line">assignment:</div><div class="line">    col_name = value</div><div class="line"></div><div class="line">assignment_list:</div><div class="line">    assignment [, assignment] ...</div></pre></td></tr></table></figure>
<blockquote>
<p>Specify <strong>IGNORE</strong> to ignore rows that would cause duplicate-key violations. </p>
</blockquote>
<p>通过mysql给出的官方解释：IGNORE 关键字会忽略重复键的行。当插入数据时，如出现错误（重复数据），将不返回错误，只以警告形式返回。所以使用 IGNORE 请确保语句本身没有问题，否则语句的其他错误也会被忽略掉。如果使用 IGNORE 关键字，则插入的字段必须是主键或唯一索引。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show tables;</div><div class="line">+----------------------------+</div><div class="line">| Tables_in_openlivedb       |</div><div class="line">+----------------------------+</div><div class="line">| admin                      |</div><div class="line">| auth_group                 |</div><div class="line">| auth_group_permissions     |</div><div class="line">| auth_permission            |</div><div class="line">| auth_user                  |</div><div class="line">| auth_user_groups           |</div><div class="line">| auth_user_user_permissions |</div><div class="line">| cmd_template               |</div><div class="line">| cutter_node                |</div><div class="line">| django_admin_log           |</div><div class="line">| django_content_type        |</div><div class="line">| django_migrations          |</div><div class="line">| django_session             |</div><div class="line">| flv_slice                  |</div><div class="line">| mp4_slice                  |</div><div class="line">| test_table                 |</div><div class="line">| ts_slice                   |</div><div class="line">+----------------------------+</div><div class="line">17 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  4 | liuxiaoyang_test2 |                                  |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;);</div><div class="line">Query OK, 0 rows affected, 2 warnings (0.09 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  4 | liuxiaoyang_test2 |                                  |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test3&apos;);</div><div class="line">Query OK, 1 row affected, 1 warning (0.11 sec)</div></pre></td></tr></table></figure>
<p>以上操作可以看出，插入重复数据时，显示 <code>Query OK, 0 rows affected, 2 warnings (0.09 sec)</code> 表明出现了警告，当在业务中直接执行时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">am = AdminManager()</div><div class="line">r = am.execute(&quot;select * from admin&quot;)</div><div class="line">for i in r:</div><div class="line">    print(i.username)</div><div class="line">r2 = am.execute(&quot;INSERT IGNORE INTO admin (username, password) VALUES (&apos;liuxiaoyang_test2&apos;, &apos;123&apos;)&quot;)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">liuxiaoyang</div><div class="line">liuxiaoyang_test2</div><div class="line">/usr/local/lib/python3.5/dist-packages/pymysql/cursors.py:165: Warning: (1062, &quot;Duplicate entry &apos;liuxiaoyang_test2&apos; for key &apos;username_unique&apos;&quot;)</div><div class="line">  result = self._query(query)</div></pre></td></tr></table></figure>
<p>同样返回了警告信息。</p>
<p>on duplicate key update</p>
<blockquote>
<p>If you specify an <strong>ON DUPLICATE KEY UPDATE</strong> clause and a row to be inserted would cause a duplicate value in a UNIQUE index or PRIMARY KEY, an UPDATE of the old row occurs.</p>
</blockquote>
<p>当遇到重复键时，对旧行执行 UPDATE 语句，否则插入新行。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  4 | liuxiaoyang_test2 | 123                              |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT IGNORE INTO admin (username) VALUES (&apos;liuxiaoyang_test2&apos;) ON DUPLICATE KEY UPDATE password=&apos;345&apos;;</div><div class="line">Query OK, 2 rows affected, 1 warning (0.09 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  4 | liuxiaoyang_test2 | 345                              |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>对于on duplicate key update语句，必需主键或唯一索引。</p>
<p>insert … select … where not exist</p>
<p>该方法利用了子查询，写法比较繁琐，性能较差，不推荐使用。</p>
<p>replace into </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">REPLACE [LOW_PRIORITY | DELAYED]</div><div class="line">    [INTO] tbl_name</div><div class="line">    [PARTITION (partition_name [, partition_name] ...)]</div><div class="line">    [(col_name [, col_name] ...)]</div><div class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</div><div class="line"></div><div class="line">value:</div><div class="line">    &#123;expr | DEFAULT&#125;</div><div class="line"></div><div class="line">value_list:</div><div class="line">    value [, value] ...</div><div class="line"></div><div class="line">assignment:</div><div class="line">    col_name = value</div><div class="line"></div><div class="line">assignment_list:</div><div class="line">    assignment [, assignment] ...</div></pre></td></tr></table></figure>
<blockquote>
<p>REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. </p>
</blockquote>
<p>replace into 语句与insert语句类似，只不过它在插入时，如果存在主键或唯一键相同的记录，则会先删除，然后再插入新记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  5 | liuxiaoyang_test2 | 789                              |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; replace into admin(username, password) values(&apos;liuxiaoyang_test2&apos;, &apos;1111&apos;);</div><div class="line">Query OK, 2 rows affected (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from admin;</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">| id | username          | password                         |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">|  1 | liuxiaoyang       | 96e79218965eb72c92a549dd5a330112 |</div><div class="line">|  6 | liuxiaoyang_test2 | 1111                             |</div><div class="line">+----+-------------------+----------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<blockquote>
<p>MySQL uses the following algorithm for REPLACE:</p>
<ol>
<li>try to insert the new row into the table        </li>
<li>While the insertion fails because a duplicate-key error occurs for a primary key or unique index:<ul>
<li>Delete from the table the conflicting row that has the duplicate key value;</li>
<li>try again to insert the new row into the table.</li>
</ul>
</li>
</ol>
</blockquote>
<p>以上方法也会有些限制，如目前大多数业务的删除只是逻辑删除，并不做物理删除，在这种场景下就需要寻找其他方案。除了以上方法，mysql还提供了共享锁、排他锁等机制，mysql的锁机制会单独进行介绍，在此就不赘述。</p>
<h3 id="分布式锁解决方案"><a href="#分布式锁解决方案" class="headerlink" title="分布式锁解决方案"></a>分布式锁解决方案</h3><h4 id="何为锁"><a href="#何为锁" class="headerlink" title="何为锁"></a>何为锁</h4><p>在单进程的系统中，当存在多个线程可以同时改变某个变量（可变共享变量）时，就需要对变量或代码块做同步，使其在修改这种变量时能够线性执行消除并发修改变量；</p>
<p>而同步的本质是通过锁来实现的。为了实现多个线程在一个时刻同一个代码块只能有一个线程可执行，那么需要在某个地方做个标记，这个标记必须每个线程都能看到，当标记不存在时可以设置该标记，其余后续线程发现已经有标记了则等待拥有标记的线程结束同步代码块取消标记后再去尝试设置标记。这个标记可以理解为锁，不同地方实现锁的方式也不一样，只要能满足所有线程都能看得到标记即可；</p>
<p>除了利用内存数据做锁，其实任何互斥的都能做锁（只考虑互斥情况），如流水表中流水号与时间结合做幂等校验可以看作是一个不会释放的锁，或者使用某个文件是否存在作为锁等。只需要满足在对标记进行修改能保证原子性和内存可见性即可。</p>
<h4 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式"></a>什么是分布式</h4><p>分布式的 CAP 理论告诉我们：</p>
<blockquote>
<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p>
</blockquote>
<p>目前很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。基于 CAP理论，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。</p>
<p>分布式场景</p>
<blockquote>
<p>此处主要指集群模式下，多个相同服务同时运行</p>
</blockquote>
<p>在许多的场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如<strong>分布式事务</strong>、<strong>分布式锁</strong>等。很多时候我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，通过线程安全队列或者其他方式解决，但是在分布式环境下，这并不是一件容易的事儿。</p>
<ul>
<li>分布式与单机情况下最大的不同在于其不是多线程而是<strong>多进程</strong>；</li>
<li>多线程由于可以共享堆内存，因此可以简单的采取内存作为标记存储位置。而进程之间甚至可能都不在同一台物理机上，因此需要将标记存储在一个所有进程都能看到的地方。</li>
</ul>
<p>分布式锁</p>
<ul>
<li>当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数；</li>
<li>与单机模式下的锁不仅需要保证进程可见，还需要考虑进程与锁之间的网络问题；</li>
<li>分布式锁还是可以将标记存在内存，只是该内存不是某个进程分配的内存而是公共内存如 Redis、Memcache。至于利用数据库、文件等做锁与单机的实现是一样的，只要保证标记能互斥就行。</li>
</ul>
<h4 id="我们需要怎样的分布式锁"><a href="#我们需要怎样的分布式锁" class="headerlink" title="我们需要怎样的分布式锁"></a>我们需要怎样的分布式锁</h4><ul>
<li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； </li>
<li>高可用的获取锁与释放锁； </li>
<li>高性能的获取锁与释放锁； </li>
<li>具备可重入特性； </li>
<li>具备锁失效机制，防止死锁； </li>
<li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</li>
</ul>
<h4 id="分布式锁-基于数据库"><a href="#分布式锁-基于数据库" class="headerlink" title="分布式锁-基于数据库"></a>分布式锁-基于数据库</h4><p>乐观锁 - 基于表主键唯一做分布式锁</p>
<p>利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。</p>
<p>这种简单的实现有以下几个问题：</p>
<ul>
<li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用；</li>
<li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁；</li>
<li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作；</li>
<li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了；</li>
<li>这把锁是非公平锁，所有等待锁的线程凭运气去争夺锁；</li>
<li>在 mysql 数据库中采用主键冲突防重，在大并发情况下有可能会造成锁表现象。</li>
</ul>
<p>当然，我们也可以有其他方式解决上面的问题。</p>
<ul>
<li>数据库是单点？搞两个数据库，数据之前双向同步，一旦挂掉快速切换到备库上；</li>
<li>没有失效时间？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍；</li>
<li>非阻塞的？搞一个 while 循环，直到 insert 成功再返回成功；</li>
<li>非重入的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了；</li>
<li>非公平的？再建一张中间表，将等待锁的线程全记录下来，并根据创建时间排序，只有最先创建的允许获取锁；</li>
<li>比较好的办法是在程序中生产主键进行防重。</li>
</ul>
<p>乐观锁 - 基于表字段版本号做分布式锁</p>
<p>这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。</p>
<p>悲观锁 - 基于数据库排他锁做分布式锁</p>
<p>在查询语句后面增加 <code>for update</code>，数据库会在查询过程中给数据库表增加排他锁 （注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上）。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p>
<p>我们可以认为获得排他锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过 <code>connection.commit()</code> 操作来释放锁。</p>
<p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p>
<ul>
<li>阻塞锁？ <code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功；</li>
<li>锁定之后服务宕机，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。</li>
</ul>
<p>但是还是无法直接解决数据库单点和可重入问题。虽然我们对方法字段名使用了唯一索引，并且显示使用 <code>for update</code>来使用行级锁。但是，MySQL 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。</p>
<p>还有一个问题，就是我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。</p>
<h4 id="分布式锁-基于Redis"><a href="#分布式锁-基于Redis" class="headerlink" title="分布式锁-基于Redis"></a>分布式锁-基于Redis</h4><p>Redis分布式锁主要使用其SETNX()、EXPIRE() 方法实现。</p>
<blockquote>
<p>SETNX key value : 将 <code>key</code> 的值设为 <code>value</code> ，当且仅当 <code>key</code> 不存在。若给定的 <code>key</code> 已经存在，则 ＳETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p>
<p>EXPIRE key seconds : 为给定 <code>key</code> 设置生存时间，当 <code>key</code> 过期时(生存时间为 <code>0</code> )，它会被自动删除。</p>
</blockquote>
<p>但是从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p>
<ul>
<li><code>EX second</code> ：设置键的过期时间为 <code>second</code> 秒。 <code>SET key value EX second</code> 效果等同于 <code>SETEX key second value</code> 。</li>
<li><code>PX millisecond</code> ：设置键的过期时间为 <code>millisecond</code> 毫秒。 <code>SET key value PX millisecond</code> 效果等同于 <code>PSETEX key millisecondvalue</code> 。</li>
<li><code>NX</code> ：只在键不存在时，才对键进行设置操作。 <code>SET key value NX</code> 效果等同于 <code>SETNX key value</code> 。</li>
<li><code>XX</code> ：只在键已经存在时，才对键进行设置操作。</li>
</ul>
<p>所以SETNX()、EXPIRE() 方法被融合进了SET方法，而<a href="http://redisdoc.com/string/set.html" target="_blank" rel="external">官网</a> 给出</p>
<blockquote>
<p>因为 <a href="http://redisdoc.com/string/set.html#set" target="_blank" rel="external">SET</a> 命令可以通过参数来实现和 <a href="http://redisdoc.com/string/setnx.html#setnx" target="_blank" rel="external">SETNX</a> 、 <a href="http://redisdoc.com/string/setex.html#setex" target="_blank" rel="external">SETEX</a> 和 <a href="http://redisdoc.com/string/psetex.html#psetex" target="_blank" rel="external">PSETEX</a> 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除<a href="http://redisdoc.com/string/setnx.html#setnx" target="_blank" rel="external">SETNX</a> 、 <a href="http://redisdoc.com/string/setex.html#setex" target="_blank" rel="external">SETEX</a> 和 <a href="http://redisdoc.com/string/psetex.html#psetex" target="_blank" rel="external">PSETEX</a> 这三个命令。</p>
</blockquote>
<p>在使用Redis实现分布式锁时，我们可以通过SET来实现。</p>
<p>设计思路</p>
<blockquote>
<p>获取锁：</p>
<ul>
<li>调用 set 尝试获取锁，如果设置成功，表示获取到了锁；</li>
<li>设置失败，<ul>
<li>等待一定时间后，再次尝试获取锁；</li>
<li>若已达到最大获取锁时间未获取到锁，获取锁失败。</li>
</ul>
</li>
</ul>
<p>释放锁：</p>
<ul>
<li>确保每个客户端释放的是自己的锁；</li>
<li>确保释放锁操作的原子性。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">import traceback</div><div class="line"></div><div class="line">from contextlib import contextmanager</div><div class="line">from lib.utils import get_logger</div><div class="line">from tornado import gen</div><div class="line"></div><div class="line">DEFAULT_EXPIRES = 3</div><div class="line">ACQUIRE_TIMEOUT = 1</div><div class="line"></div><div class="line">lock_logger = get_logger(&quot;redis_netlock&quot;)</div><div class="line"></div><div class="line">@contextmanager</div><div class="line">def dist_lock(key, client, unique_id acquire_timeout=ACQUIRE_TIMEOUT):</div><div class="line">    key = &apos;lock_%s&apos; % key</div><div class="line">    try:</div><div class="line">        t = _acquire_lock(key, client, unique_id, acquire_timeout)</div><div class="line">        yield t</div><div class="line">    finally:</div><div class="line">        _release_lock(key, client, t)</div><div class="line"></div><div class="line"></div><div class="line">def _acquire_lock(key, client, unique_id, acquire_timeout):</div><div class="line">    end = time.time() + acquire_timeout</div><div class="line">    while time.time() &lt; end:</div><div class="line">        if client.set(key, unique_id, ex=DEFAULT_EXPIRES, nx=True):</div><div class="line">            return unique_id</div><div class="line">        else:</div><div class="line">            gen.sleep(.01)</div><div class="line">    return None</div><div class="line"></div><div class="line"></div><div class="line">def _release_lock(key, client, t):</div><div class="line">    try:</div><div class="line">        lua_command = &quot;&quot;&quot;</div><div class="line">            if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1]</div><div class="line">            then</div><div class="line">                return redis.call(&quot;del&quot;,KEYS[1])</div><div class="line">            else</div><div class="line">                return 0</div><div class="line">            end</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        lua_script = client.register_script(lua_command)</div><div class="line">        lock_logger.debug(lua_script(keys=[key], args=[t]))</div><div class="line">    except Exception as e:</div><div class="line">        lock_logger.error(traceback.format_exc())</div></pre></td></tr></table></figure>
<p>unique_id：uuid1() 提供的全球唯一值，保证每个客户端释放的是自己的锁。</p>
<p>使用lua脚本释放锁是为了保证释放锁操作的原子性：</p>
<blockquote>
<p><strong>Atomicity of scripts</strong></p>
<p>Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.</p>
<p>However this also means that executing slow scripts is not a good idea. It is not hard to create fast scripts, as the script overhead is very low, but if you are going to use slow scripts you should be aware that while the script is running no other client can execute commands.</p>
</blockquote>
<p>获取锁时，给定超时时间是１s，避免出现死锁现象。</p>
<p>使用redis分布式锁的问题是，失效时间的设置。如果设置的失效时间太短，方法没等执行完，锁就自动释放了，那么就会产生并发问题。</p>
<h4 id="分布式锁-基于RedLock"><a href="#分布式锁-基于RedLock" class="headerlink" title="分布式锁-基于RedLock"></a>分布式锁-基于RedLock</h4><p>Redlock 是 Redis 的作者 antirez 给出的集群模式的 Redis 分布式锁，它基于 N 个完全独立的 Redis 节点（通常情况下 N 可以设置成 5）。</p>
<p>算法的步骤如下：</p>
<ol>
<li>客户端获取当前时间，以毫秒为单位；</li>
<li>客户端尝试获取 N 个节点的锁，（每个节点获取锁的方式和前面说的缓存锁一样），N 个节点以相同的 key 和 value 获取锁。客户端需要设置接口访问超时，接口超时时间需要远远小于锁超时时间，比如锁自动释放的时间是 10s，那么接口超时大概设置 5-50ms。这样可以在有 redis 节点宕机后，访问该节点时能尽快超时，而减小锁的正常使用；</li>
<li>客户端计算在获得锁的时候花费了多少时间，方法是用当前时间减去在步骤一获取的时间，只有客户端获得了超过 3 个节点的锁，而且获取锁的时间小于锁的超时时间，客户端才获得了分布式锁；</li>
<li>客户端获取的锁的时间为设置的锁超时时间减去步骤三计算出的获取锁花费时间；</li>
<li>如果客户端获取锁失败了，客户端会依次删除所有的锁。</li>
</ol>
<p>使用 Redlock 算法，可以保证在挂掉最多 2 个节点的时候，分布式锁服务仍然能工作，这相比之前的数据库锁和缓存锁大大提高了可用性，由于 redis 的高效性能，分布式缓存锁性能并不比数据库锁差。</p>
<h4 id="分布式锁-基于Zookeeper"><a href="#分布式锁-基于Zookeeper" class="headerlink" title="分布式锁-基于Zookeeper"></a>分布式锁-基于Zookeeper</h4><p>ZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务，更新是全序的。</p>
<p> <img src="/images/2018-05-06T184140.png" alt="2018-05-06T184140"></p>
<p>上图为系统架构，左边区域表示一个ZooKeeper集群，locker是ZooKeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_3表示多个客户端，Share_Service表示需要互斥访问的共享资源。</p>
<p>Zookeeper实现分布式锁的思路：</p>
<ol>
<li>多个客户端竞争创建 lock 临时节点；</li>
<li>其中某个客户端成功创建 lock 节点，其他客户端对 lock 节点设置 watcher；</li>
<li>持有锁的客户端删除 lock 节点或该客户端崩溃，由 Zookeeper 删除 lock 节点；</li>
<li>其他客户端获得 lock 节点被删除的通知；</li>
<li><p>重复上述4个步骤，直至无客户端在等待获取锁了。</p>
<p><img src="/images/2018-05-06T190223.png" alt="2018-05-06T190223"></p>
</li>
</ol>
<p>Zookeeper方式性能上可能并没有缓存服务那么高，因为每次在创建锁和释放锁的过程中，都要动态创建、销毁临时节点来实现锁功能。ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同步到所有的 Follower 机器上。</p>
<p>由于目前理解有限，一些细节需要进一步确定和实践，不当之处请指正。</p>
<p>Read More:</p>
<blockquote>
<p><a href="https://www.cnblogs.com/austinspark-jessylu/p/8043726.html" target="_blank" rel="external">分布式锁的几种实现方式</a> <a href="http://www.importnew.com/27477.html" target="_blank" rel="external">Redis分布式锁的正确实现方式（Java版）</a> <a href="https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w" target="_blank" rel="external">基于Redis的分布式锁到底安全吗（上）？</a> <a href="http://www.54tianzhisheng.cn/2018/04/24/Distributed_lock/#%E5%9F%BA%E4%BA%8E-Redlock-%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81" target="_blank" rel="external">分布式锁看这篇就够了</a> <a href="https://segmentfault.com/a/1190000010895869" target="_blank" rel="external">基于 Zookeeper 的分布式锁实现</a> <a href="http://redisdoc.com/" target="_blank" rel="external">Redis命令参考</a> <a href="https://redis.io/commands/eval" target="_blank" rel="external">Redis Lua scripting</a> <a href="https://dev.mysql.com/doc/" target="_blank" rel="external">mysql document</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;进入正题之前，先来说说问题的产生背景。目前绝大多数的业务都跑在高并发的情境下，而数据库（大多数是mysql）数据一致性的问题是不可避免的，笔
    
    </summary>
    
      <category term="分布式锁" scheme="http://runnerliu.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    
      <category term="分布式锁" scheme="http://runnerliu.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
      <category term="数据库" scheme="http://runnerliu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="redis" scheme="http://runnerliu.github.io/tags/redis/"/>
    
      <category term="zookeeper" scheme="http://runnerliu.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Kafka文件存储机制</title>
    <link href="http://runnerliu.github.io/2018/04/30/kafkasave/"/>
    <id>http://runnerliu.github.io/2018/04/30/kafkasave/</id>
    <published>2018-04-30T12:05:02.000Z</published>
    <updated>2018-06-06T14:32:57.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><blockquote>
<p>Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统（也可以当做 MQ 系统），常见可以用于 web/nginx 日志、访问日志，消息服务等等，  Linkedin 于2010年贡献给了 Apache 基金会并成为顶级开源项目。</p>
</blockquote>
<p>一个商业化消息队列的性能好坏，其文件存储机制设计是衡量一个消息队列服务技术水平和最关键指标之一。下面将从  Kafka 文件存储机制和物理结构角度，分析 Kafka 是如何实现高效文件存储，及实际应用效果。</p>
<h3 id="Kafka文件存储机制"><a href="#Kafka文件存储机制" class="headerlink" title="Kafka文件存储机制"></a>Kafka文件存储机制</h3><p>Kafka部分名词解释如下：</p>
<ul>
<li>Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；</li>
<li>Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；</li>
<li>Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列；</li>
<li>Segment：partition物理上由多个segment组成；</li>
<li>offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。</li>
</ul>
<p>分析过程分为以下4个步骤：</p>
<ul>
<li>topic中partition存储分布；</li>
<li>partiton中文件存储方式；</li>
<li>partiton中segment文件存储结构；</li>
<li>在partition中如何通过offset查找message。</li>
</ul>
<p>通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。</p>
<h4 id="topic中partition存储分布"><a href="#topic中partition存储分布" class="headerlink" title="topic中partition存储分布"></a>topic中partition存储分布</h4><p>假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka broker中server.properties文件配置（参数log.dirs=xxx/message-folder），例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4，存储路径和目录规则为：xxx/message-folder。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">|--report_push-0</div><div class="line">|--report_push-1</div><div class="line">|--report_push-2</div><div class="line">|--report_push-3</div><div class="line">|--launch_info-0</div><div class="line">|--launch_info-1</div><div class="line">|--launch_info-2</div><div class="line">|--launch_info-3</div></pre></td></tr></table></figure>
<p>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。</p>
<p>如果是多broker分布情况，请参考<a href="http://blog.csdn.net/lizhitao/article/details/41778193" target="_blank" rel="external">kafka集群partition分布原理分析</a></p>
<h4 id="partiton中文件存储方式"><a href="#partiton中文件存储方式" class="headerlink" title="partiton中文件存储方式"></a>partiton中文件存储方式</h4><p>下面示意图形象说明了partition中文件存储方式：</p>
<p> <img src="/images/2018-04-30T203835.png" alt="2018-04-30T203835"></p>
<ul>
<li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除；</li>
<li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。</li>
</ul>
<p>这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。</p>
<h4 id="partiton中segment文件存储结构"><a href="#partiton中segment文件存储结构" class="headerlink" title="partiton中segment文件存储结构"></a>partiton中segment文件存储结构</h4><ul>
<li>segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和”.log”分别表示为segment索引文件、数据文件；</li>
<li>segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li>
</ul>
<p>下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1 partition，设置每个segment大小为500MB，并启动producer向Kafka broker写入大量数据，如下图所示segment文件列表形象说明了上述2个规则：</p>
<p> <img src="/images/2018-04-30T204111.png" alt="2018-04-30T204111"></p>
<p>以上述图2中一对segment file文件为例，说明segment中index&lt;—&gt;data file对应关系物理结构如下：</p>
<p> <img src="/images/2018-04-30T204213.png" alt="2018-04-30T204213"></p>
<p>上述图3中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。</p>
<p>其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。</p>
<p>从上图了解到segment data file由许多message组成，下面详细说明message物理结构如下：</p>
<p> <img src="/images/2018-04-30T204327.png" alt="2018-04-30T204327"></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>8 byte offset</td>
<td>在parition内的每条消息都有一个有序的id号，这个id号被称为偏移，它可以唯一确定每条消息在parition内的位置。即offset表示partiion的第多少message</td>
</tr>
<tr>
<td>4 byte message size</td>
<td>message大小</td>
</tr>
<tr>
<td>4 byte CRC32</td>
<td>用crc32校验message</td>
</tr>
<tr>
<td>1 byte “magic”</td>
<td>表示本次发布Kafka服务程序协议版本号</td>
</tr>
<tr>
<td>1 byte “attributes”</td>
<td>表示为独立版本、或标识压缩类型、或编码类型。</td>
</tr>
<tr>
<td>4 byte key length</td>
<td>表示key的长度,当key为-1时，K byte key字段不填</td>
</tr>
<tr>
<td>K byte key</td>
<td>可选</td>
</tr>
<tr>
<td>value bytes payload</td>
<td>表示实际消息数据</td>
</tr>
</tbody>
</table>
<h4 id="在partition中如何通过offset查找message"><a href="#在partition中如何通过offset查找message" class="headerlink" title="在partition中如何通过offset查找message"></a>在partition中如何通过offset查找message</h4><p>例如读取offset=368776的message，需要通过下面2个步骤查找。</p>
<ul>
<li>第一步查找segment file<br>上述图为例，其中00000000000000000000.index表示最开始的文件，起始偏移量（offset）为0，第二个文件00000000000000368769.index的消息量起始偏移量为368770 = 368769 + 1，同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 + 1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset<strong>二分查找</strong>文件列表，就可以快速定位到具体文件。当offset=368776时定位到00000000000000368769.index|log；</li>
<li>第二步通过segment file查找message<br>通过第一步定位到segment file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。</li>
</ul>
<p>这样做的优点，segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。</p>
<h3 id="实际运行效果"><a href="#实际运行效果" class="headerlink" title="实际运行效果"></a>实际运行效果</h3><p>实验环境：</p>
<ul>
<li>Kafka集群：由2台虚拟机组成</li>
<li>cpu：4核</li>
<li>物理内存：8GB</li>
<li>网卡：千兆网卡</li>
<li>jvm heap: 4GB</li>
<li><p>详细Kafka服务端配置及其优化请参考：<a href="http://blog.csdn.net/lizhitao/article/details/25667831" target="_blank" rel="external">kafka server.properties配置详解</a></p>
<p><img src="/images/2018-04-30T205037.png" alt="2018-04-30T205037"></p>
</li>
</ul>
<p>从上图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:</p>
<p>写message</p>
<ul>
<li>消息从堆转入page cache（即物理内存）；</li>
<li>由异步线程刷盘,消息从page cache刷入磁盘。</li>
</ul>
<p>读message</p>
<ul>
<li>消息直接从page cache转入socket发送出去；</li>
<li>当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Kafka高效文件存储设计特点</p>
<ul>
<li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用；</li>
<li>通过索引信息可以快速定位message和确定response的最大大小；</li>
<li>通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作；</li>
<li>通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。</li>
</ul>
<p>Read More:</p>
<blockquote>
<p><a href="https://tech.meituan.com/kafka-fs-design-theory.html" target="_blank" rel="external">Kafka文件存储机制那些事</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Kafka是最初由 Linkedin 公司开发，是一个分布式、分区的、多副本的、多订阅者，
    
    </summary>
    
      <category term="消息队列" scheme="http://runnerliu.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="http://runnerliu.github.io/tags/kafka/"/>
    
      <category term="文件存储" scheme="http://runnerliu.github.io/tags/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ls</title>
    <link href="http://runnerliu.github.io/2018/04/15/linuxls/"/>
    <id>http://runnerliu.github.io/2018/04/15/linuxls/</id>
    <published>2018-04-14T23:56:20.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>Linux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls [OPTION]... [FILE]...</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>列出目标目录中所有的子目录和文件。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>显示所有文件及目录（ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出）</td>
</tr>
<tr>
<td>-A</td>
<td>同 -a ，但不列出 “.”（当前目录）及 “..”（父目录）</td>
</tr>
<tr>
<td>-C</td>
<td>多列显示输出结果。这是默认选项</td>
</tr>
<tr>
<td>-l</td>
<td>除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</td>
</tr>
<tr>
<td>-F</td>
<td>在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</td>
</tr>
<tr>
<td>-c</td>
<td>与”-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与”-l”选项连用时，则排序的一句是文件的状态改变时间</td>
</tr>
<tr>
<td>-d</td>
<td>仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表</td>
</tr>
<tr>
<td>-f</td>
<td>此参数的效果和同时指定”aU”参数相同，并关闭”lst”参数的效果；</td>
</tr>
<tr>
<td>-i</td>
<td>显示文件索引节点号（inode）。一个索引节点代表一个文件</td>
</tr>
<tr>
<td>-k</td>
<td>以KB（千字节）为单位显示文件大小</td>
</tr>
<tr>
<td>-m</td>
<td>用”,”号区隔每个文件和目录的名称</td>
</tr>
<tr>
<td>-n</td>
<td>以用户识别码和群组识别码替代其名称</td>
</tr>
<tr>
<td>-r</td>
<td>将文件以相反次序显示(原定依英文字母次序)</td>
</tr>
<tr>
<td>-s</td>
<td>显示文件和目录的大小，以区块为单位</td>
</tr>
<tr>
<td>-t</td>
<td>将文件依建立时间之先后次序列出</td>
</tr>
<tr>
<td>-L</td>
<td>如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录</td>
</tr>
<tr>
<td>-R</td>
<td>递归列出该目录中的所有文件</td>
</tr>
<tr>
<td>–full-time</td>
<td>列出完整的日期与时间</td>
</tr>
<tr>
<td>–color[=WHEN] (WHEN=never/always/auto)</td>
<td>使用不同的颜色高亮显示不同类型的</td>
</tr>
<tr>
<td>-g</td>
<td>类似 -l，但不列出所有者</td>
</tr>
<tr>
<td>-h</td>
<td>以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td>
</tr>
<tr>
<td>-S</td>
<td>根据文件大小排序</td>
</tr>
<tr>
<td>-X</td>
<td>根据扩展名排序</td>
</tr>
<tr>
<td>-x</td>
<td>逐行列出项目而不是逐栏列出</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li><code>ls -l ly</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls -l ly</div><div class="line">total 48</div><div class="line">drwxr-xr-x  8 root root 4096 Dec 14 11:49 analysisweb</div><div class="line">drwxr-xr-x  9 root root 4096 Dec 28 16:19 atsbtsp</div><div class="line">drwxr-xr-x  2 root root 4096 Sep 12 14:37 auth_server_ratio</div><div class="line">drwxr-xr-x  7 root root 4096 Jan  2 10:10 datawritehbase</div><div class="line">drwxr-xr-x 10 root root 4096 Dec 13 14:54 hbasequeryweb</div><div class="line">drwxr-xr-x  7 root root 4096 Oct  9 18:46 live_alarm_monitor</div><div class="line">drwxr-xr-x  9 root root 4096 Oct 27 11:59 openrestywork</div><div class="line">drwxr-xr-x  9 root root 4096 Dec 27 16:20 prepullvidcs</div><div class="line">drwxr-xr-x  2 root root 4096 Nov 23 20:26 push_ffmpeg</div><div class="line">drwxr-xr-x  3 root root 4096 Jan  4 18:46 testkafka</div><div class="line">drwxr-xr-x  3 root root 4096 Nov 29 14:32 virtualenv</div><div class="line">drwxr-xr-x  5 root root 4096 Oct 12 10:27 xiu_server_stat</div></pre></td></tr></table></figure>
<p>单列显示某目录。</p>
<ul>
<li><code>ls</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls</div><div class="line">ly  zabbix</div></pre></td></tr></table></figure>
<p>显示当前目录下非影藏文件与目录</p>
<ul>
<li><code>ls -a</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls -a</div><div class="line">.  ..  ly  zabbix</div></pre></td></tr></table></figure>
<p>显示当前目录下包括影藏文件在内的所有文件列表</p>
<ul>
<li><code>ls -l</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# </div><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls -l</div><div class="line">total 8</div><div class="line">drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</div><div class="line">drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</div></pre></td></tr></table></figure>
<p>输出长格式列表</p>
<ul>
<li><code>ls -i -l</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls -i -l</div><div class="line">total 8</div><div class="line">393222 drwxr-xr-x  15 root   root   4096 Jan  3 18:05 ly</div><div class="line">393219 drwxr-xr-x.  2 zabbix zabbix 4096 Dec 21 18:05 zabbix</div></pre></td></tr></table></figure>
<p>输出文件的inode信息</p>
<ul>
<li><code>ls -m</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt home]# ls -m</div><div class="line">ly, zabbix</div></pre></td></tr></table></figure>
<p>水平输出文件列表</p>
<ul>
<li><code>ls -t -l</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -t -l</div><div class="line">total 303312</div><div class="line">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</div><div class="line">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</div><div class="line">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</div><div class="line">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</div><div class="line">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</div><div class="line">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</div><div class="line">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</div><div class="line">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</div><div class="line">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</div><div class="line">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</div><div class="line">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</div><div class="line">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</div><div class="line">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</div><div class="line">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</div><div class="line">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</div><div class="line">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</div><div class="line">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</div><div class="line">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</div><div class="line">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</div><div class="line">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</div><div class="line">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</div><div class="line">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</div><div class="line">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</div><div class="line">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</div><div class="line">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</div><div class="line">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</div><div class="line">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</div><div class="line">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</div><div class="line">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</div><div class="line">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</div></pre></td></tr></table></figure>
<p>最近修改的文件显示在最前面</p>
<ul>
<li><code>ls -F -l</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -F -l</div><div class="line">total 303312</div><div class="line">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</div><div class="line">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</div><div class="line">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client/</div><div class="line">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6/</div><div class="line">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</div><div class="line">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1/</div><div class="line">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</div><div class="line">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</div><div class="line">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1/</div><div class="line">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3/</div><div class="line">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64/</div><div class="line">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5/</div><div class="line">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</div><div class="line">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38/</div><div class="line">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</div><div class="line">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka/</div><div class="line">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9/</div><div class="line">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</div><div class="line">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13/</div><div class="line">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</div><div class="line">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1/</div><div class="line">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</div><div class="line">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6/</div><div class="line">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</div><div class="line">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama/</div><div class="line">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar/</div><div class="line">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0/</div><div class="line">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</div><div class="line">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0/</div><div class="line">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</div></pre></td></tr></table></figure>
<p>安装特殊字符对文件进行分类</p>
<ul>
<li><code>ls -l --color=auto | ls -l --color=never | ls -l --color=always</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=auto</div><div class="line">total 303312</div><div class="line">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</div><div class="line">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</div><div class="line">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</div><div class="line">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</div><div class="line">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</div><div class="line">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</div><div class="line">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</div><div class="line">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</div><div class="line">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</div><div class="line">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</div><div class="line">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</div><div class="line">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</div><div class="line">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</div><div class="line">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</div><div class="line">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</div><div class="line">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</div><div class="line">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</div><div class="line">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</div><div class="line">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</div><div class="line">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</div><div class="line">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</div><div class="line">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</div><div class="line">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</div><div class="line">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</div><div class="line">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</div><div class="line">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</div><div class="line">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</div><div class="line">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</div><div class="line">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</div><div class="line">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=never</div><div class="line">total 303312</div><div class="line">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</div><div class="line">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</div><div class="line">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</div><div class="line">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</div><div class="line">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</div><div class="line">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</div><div class="line">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</div><div class="line">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</div><div class="line">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</div><div class="line">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</div><div class="line">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</div><div class="line">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</div><div class="line">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</div><div class="line">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</div><div class="line">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</div><div class="line">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</div><div class="line">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</div><div class="line">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</div><div class="line">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</div><div class="line">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</div><div class="line">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</div><div class="line">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</div><div class="line">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</div><div class="line">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</div><div class="line">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</div><div class="line">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</div><div class="line">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</div><div class="line">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</div><div class="line">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</div><div class="line">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l --color=always</div><div class="line">total 303312</div><div class="line">-rw-------.  1 root root       1267 Mar 12  2014 anaconda-ks.cfg</div><div class="line">-rw-r--r--   1 root root    1595408 Nov  7  2016 get-pip.py</div><div class="line">drwxr-xr-x  10 root root       4096 Jan  3 13:26 go_kafka_client</div><div class="line">drwxr-xr-x  26 root root       4096 Aug 22 11:04 hbase-1.2.6</div><div class="line">-rw-r--r--   1 root root   16054584 May 29  2017 hbase-1.2.6-src.tar.gz</div><div class="line">drwxrwxr-x  10 root root       4096 Jan  4 15:21 librdkafka-0.11.1</div><div class="line">-rw-r--r--   1 root root     859238 Jan  3 13:01 librdkafka-0.11.1.tar.gz</div><div class="line">-rw-r--r--   1 root root  194351104 Jul  7 15:25 long.flv</div><div class="line">drwxr-xr-x   9 1001  1001      4096 Aug 30 20:05 nginx-1.12.1</div><div class="line">-rw-r--r--   1 root root     981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">drwxr-xr-x  10  502 games      4096 Jan  2 11:13 node-v8.9.3</div><div class="line">drwxrwxr-x   7  500   500      4096 Jan  2 11:40 node-v8.9.3-linux-x64</div><div class="line">-rw-r--r--   1 root root   11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--   1 root root   31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line">drwxrwxr-x   6 1000  1000      4096 Oct 27 11:35 openresty-1.11.2.5</div><div class="line">-rw-r--r--   1 root root    4183884 Oct 27 10:55 openresty-1.11.2.5.tar.gz</div><div class="line">drwxr-xr-x   9 1169  1169     12288 Aug 30 20:02 pcre-8.38</div><div class="line">-rw-r--r--   1 root root    2053336 Aug 30 19:55 pcre-8.38.tar.gz</div><div class="line">drwxr-xr-x  11 root root       4096 Jan  4 14:26 pykafka</div><div class="line">drwxr-xr-x   9 1125  1125      4096 Apr 25  2009 pyOpenSSL-0.9</div><div class="line">-rw-r--r--   1 root root     197981 Apr 25  2009 pyOpenSSL-0.9.tar.gz</div><div class="line">drwxr-xr-x  18 1000  1000      4096 Aug 28 15:15 Python-2.7.13</div><div class="line">-rw-r--r--   1 root root   17076672 Dec 18  2016 Python-2.7.13.tgz</div><div class="line">drwxr-xr-x  18  501   501      4096 Aug 11 09:13 Python-3.6.1</div><div class="line">-rw-r--r--   1 root root   22540566 Mar 21  2017 Python-3.6.1.tgz</div><div class="line">drwxrwxr-x   6 root root       4096 Dec  5 01:01 redis-4.0.6</div><div class="line">-rw-r--r--   1 root root    1723533 Dec  5 01:02 redis-4.0.6.tar.gz</div><div class="line">drwxr-xr-x   8 root root      12288 Jan  3 13:31 sarama</div><div class="line">drwxr-xr-x   2 root root       4096 Jan  4 17:54 testtar</div><div class="line">drwxr-xr-x  11 1000 ftp        4096 Aug 22 12:01 thrift-0.10.0</div><div class="line">-rw-r--r--   1 root root    3340748 Jun 20  2017 thrift-0.10.0.tar.gz</div><div class="line">drwxr-xr-x   7  501 games      4096 Aug 11 09:26 Twisted-17.5.0</div><div class="line">-rw-r--r--   1 root root    2993816 Jun 11  2017 Twisted-17.5.0.tar.bz2</div></pre></td></tr></table></figure>
<p>单列列出文件并标记颜色</p>
<ul>
<li><code>ls -l n*</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# ls -l n*</div><div class="line">-rw-r--r--  1 root root    981093 Jul 11 23:45 nginx-1.12.1.tar.gz</div><div class="line">-rw-r--r--  1 root root  11395380 Dec  8 22:11 node-v8.9.3-linux-x64.tar.xz</div><div class="line">-rw-r--r--  1 root root  31121503 Dec  8 23:23 node-v8.9.3.tar.gz</div><div class="line"></div><div class="line">nginx-1.12.1:</div><div class="line">total 732</div><div class="line">drwxr-xr-x 6 1001 1001   4096 Aug 30 20:00 auto</div><div class="line">-rw-r--r-- 1 1001 1001 277349 Jul 11 21:24 CHANGES</div><div class="line">-rw-r--r-- 1 1001 1001 422542 Jul 11 21:24 CHANGES.ru</div><div class="line">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 conf</div><div class="line">-rwxr-xr-x 1 1001 1001   2481 Jul 11 21:24 configure</div><div class="line">drwxr-xr-x 4 1001 1001   4096 Aug 30 20:00 contrib</div><div class="line">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 html</div><div class="line">-rw-r--r-- 1 1001 1001   1397 Jul 11 21:24 LICENSE</div><div class="line">-rw-r--r-- 1 root root    376 Aug 30 20:11 Makefile</div><div class="line">drwxr-xr-x 2 1001 1001   4096 Aug 30 20:00 man</div><div class="line">drwxr-xr-x 3 root root   4096 Aug 30 20:12 objs</div><div class="line">-rw-r--r-- 1 1001 1001     49 Jul 11 21:24 README</div><div class="line">drwxr-xr-x 9 1001 1001   4096 Aug 30 20:00 src</div><div class="line"></div><div class="line">node-v8.9.3:</div><div class="line">total 596</div><div class="line">-rwxr-xr-x  1  502 games  1944 Dec  8 23:22 android-configure</div><div class="line">-rw-r--r--  1  502 games 62552 Dec  8 23:22 AUTHORS</div><div class="line">drwxr-xr-x 32  502 games  4096 Jan  2 11:13 benchmark</div><div class="line">-rw-r--r--  1  502 games   263 Dec  8 23:22 BSDmakefile</div><div class="line">-rw-r--r--  1  502 games 13117 Dec  8 23:22 BUILDING.md</div><div class="line">-rw-r--r--  1  502 games 53576 Dec  8 23:22 CHANGELOG.md</div><div class="line">-rw-r--r--  1  502 games   181 Dec  8 23:22 CODE_OF_CONDUCT.md</div><div class="line">-rw-r--r--  1  502 games 30242 Dec  8 23:22 COLLABORATOR_GUIDE.md</div><div class="line">-rw-r--r--  1  502 games 14659 Dec  8 23:22 common.gypi</div><div class="line">-rw-r--r--  1 root root   2748 Jan  2 11:13 config.gypi</div><div class="line">-rw-r--r--  1 root root    223 Jan  2 11:13 config.mk</div><div class="line">-rwxr-xr-x  1  502 games 50245 Dec  8 23:22 configure</div><div class="line">-rw-r--r--  1  502 games 37017 Dec  8 23:22 CONTRIBUTING.md</div><div class="line">-rw-r--r--  1  502 games  3454 Dec  8 23:22 CPP_STYLE_GUIDE.md</div><div class="line">drwxr-xr-x 13  502 games  4096 Jan  2 11:13 deps</div><div class="line">drwxr-xr-x  6  502 games  4096 Jan  2 11:13 doc</div><div class="line">-rw-r--r--  1  502 games  5832 Dec  8 23:22 GOVERNANCE.md</div><div class="line">-rw-r--r--  1 root root  60153 Jan  2 11:13 icu_config.gypi</div><div class="line">drwxr-xr-x  3  502 games  4096 Jan  2 11:13 lib</div><div class="line">-rw-r--r--  1  502 games 59059 Dec  8 23:22 LICENSE</div><div class="line">-rw-r--r--  1  502 games 37468 Dec  8 23:22 Makefile</div><div class="line">-rw-r--r--  1  502 games 24881 Dec  8 23:23 node.gyp</div><div class="line">-rw-r--r--  1  502 games 10585 Dec  8 23:23 node.gypi</div><div class="line">drwxr-xr-x  5 root root   4096 Jan  2 11:14 out</div><div class="line">-rw-r--r--  1  502 games 26525 Dec  8 23:22 README.md</div><div class="line">drwxr-xr-x  4  502 games  4096 Jan  2 11:13 src</div><div class="line">drwxr-xr-x 22  502 games  4096 Jan  2 11:13 test</div><div class="line">drwxr-xr-x  9  502 games  4096 Jan  2 11:13 tools</div><div class="line">-rw-r--r--  1  502 games 24869 Dec  8 23:23 vcbuild.bat</div><div class="line"></div><div class="line">node-v8.9.3-linux-x64:</div><div class="line">total 164</div><div class="line">drwxrwxr-x 2  500  500  4096 Jan  2 12:14 bin</div><div class="line">-rw-rw-r-- 1  500  500 53576 Dec  8 22:10 CHANGELOG.md</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  2 11:40 etc</div><div class="line">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 include</div><div class="line">drwxrwxr-x 3  500  500  4096 Dec  8 22:10 lib</div><div class="line">-rw-rw-r-- 1  500  500 59059 Dec  8 22:10 LICENSE</div><div class="line">-rw-rw-r-- 1  500  500 26525 Dec  8 22:10 README.md</div><div class="line">drwxrwxr-x 5  500  500  4096 Dec  8 22:10 share</div></pre></td></tr></table></figure>
<p>单列列出以某个字符开头的文件和目录的详细内容</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/10/23/2734829.html" target="_blank" rel="external">每天一个linux命令(1)：ls命令</a> <a href="http://www.runoob.com/linux/linux-comm-ls.html" target="_blank" rel="external">Linux ls命令</a> <a href="http://man.linuxde.net/ls" target="_blank" rel="external">ls命令</a>  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录），在Linux中是使用率较高的命令，ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。&lt;/p&gt;
&lt;h4 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;hea
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ls" scheme="http://runnerliu.github.io/tags/ls/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-cd</title>
    <link href="http://runnerliu.github.io/2018/04/15/linuxcd/"/>
    <id>http://runnerliu.github.io/2018/04/15/linuxcd/</id>
    <published>2018-04-14T23:48:17.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>Linux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 <code>home</code> 目录。</p>
<p>另外，”~” 也表示为 <code>home</code> 目录的意思，”.” 则是表示当前所在的目录，”..” 则表示目前目录位置的上一层目录。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd [dir](dir表示要切换的目录)</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>切换当前目录至dir。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><p>暂无</p>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li><code>cd / | cd //</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# pwd</div><div class="line">/root/usr/local</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd /</div><div class="line">[root@hcdn-others-worker-dev100-bjlt /]# pwd</div><div class="line">/</div></pre></td></tr></table></figure>
<p>进入系统根目录</p>
<ul>
<li><code>cd ..</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# pwd</div><div class="line">/root/usr/local</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd ..</div><div class="line">[root@hcdn-others-worker-dev100-bjlt usr]# pwd</div><div class="line">/root/usr</div></pre></td></tr></table></figure>
<p>切换到父目录</p>
<ul>
<li><code>cd -</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# pwd</div><div class="line">/root/usr/local</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd -</div><div class="line">/root/usr</div><div class="line">[root@hcdn-others-worker-dev100-bjlt usr]# cd</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# cd -</div><div class="line">/root/usr</div></pre></td></tr></table></figure>
<p>切换到上次使用的目录</p>
<ul>
<li><code>cd</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# pwd</div><div class="line">/root/usr/local</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</div><div class="line">/root</div></pre></td></tr></table></figure>
<p>切换到当前用户主目录</p>
<ul>
<li><code>cd ~</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd ~</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# pwd</div><div class="line">/root</div></pre></td></tr></table></figure>
<p>切换到当前用户主目录</p>
<ul>
<li><code>cd /root/usr/local/</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# pwd</div><div class="line">/root/usr/local</div></pre></td></tr></table></figure>
<p>切换到指定目录</p>
<ul>
<li><code>cd !$</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# cd /root/usr/local/</div><div class="line">[root@hcdn-others-worker-dev100-bjlt local]# cd -</div><div class="line">/root</div><div class="line">[root@hcdn-others-worker-dev100-bjlt ~]# cd !$</div><div class="line">cd -</div><div class="line">/root/usr/local</div></pre></td></tr></table></figure>
<p>将上一命令得参数作为 <code>cd</code> 参数使用</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/10/24/2736501.html" target="_blank" rel="external">每天一个linux命令(2)：cd命令</a> <a href="http://www.runoob.com/linux/linux-comm-cd.html" target="_blank" rel="external">Linux cd命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux cd命令用于切换当前工作目录至目标目录。其中目标目录表示法可为绝对路径或相对路径，若目录名称省略，则变换至使用者的 &lt;code&gt;home&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;另外，”~” 也表示为 &lt;code&gt;home&lt;/code&gt; 目录的意思，”.” 则是表示
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="cd" scheme="http://runnerliu.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>librdkafka的安装和使用</title>
    <link href="http://runnerliu.github.io/2018/01/04/librdkafkainstallanduse/"/>
    <id>http://runnerliu.github.io/2018/01/04/librdkafkainstallanduse/</id>
    <published>2018-01-04T14:17:29.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kafka.apache.org/" target="_blank" rel="external">kafka</a> 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Powered+By" target="_blank" rel="external">多家不同类型的公司</a> 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 <a href="https://github.com/Parsely/pykafka" target="_blank" rel="external">pykafka</a> 、<a href="https://github.com/confluentinc/confluent-kafka-python" target="_blank" rel="external">confluent-kafka-python</a> 、<a href="https://github.com/edenhill/librdkafka" target="_blank" rel="external">librdkafka</a> ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 <a href="http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html" target="_blank" rel="external">simpleconsumer</a> 、<a href="http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html" target="_blank" rel="external">balancedconsumer</a> 两种消费方式。</p>
<p>其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。</p>
<blockquote>
<p><strong>librdkafka</strong> is a C library implementation of the <a href="http://kafka.apache.org/" target="_blank" rel="external">Apache Kafka</a> protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.</p>
</blockquote>
<p>由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。</p>
<h4 id="安装librdkafka"><a href="#安装librdkafka" class="headerlink" title="安装librdkafka"></a>安装librdkafka</h4><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/edenhill/librdkafka.git</div></pre></td></tr></table></figure>
<p>将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。</p>
<p>如果github上无法下载，请转到百度网盘：链接: <a href="https://pan.baidu.com/s/1sl0uj2d" target="_blank" rel="external">https://pan.baidu.com/s/1sl0uj2d</a> 密码: af7k</p>
<p>下载的是0.11.1版本，本文安装的也是这个版本。</p>
<p>本文直接下载到/root/目录下，执行<code>cd librdkafka-0.11.1</code>进行目录</p>
<p>依次执行一下命令进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>librdkafka依赖的环境如下，如果未安装请自行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The GNU toolchain</div><div class="line">GNU make</div><div class="line">pthreads</div><div class="line">zlib (optional, for gzip compression support)</div><div class="line">libssl-dev (optional, for SSL and SASL SCRAM support)</div><div class="line">libsasl2-dev (optional, for SASL GSSAPI support)</div></pre></td></tr></table></figure>
<p>如果安装成功，会在<code>/usr/local/lib</code>目录中出现以下文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib</div><div class="line">[root@hcdn-others-worker-dev100-bjlt lib]# ll</div><div class="line">total 15200</div><div class="line">-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a</div><div class="line">-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a</div><div class="line">lrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -&gt; librdkafka.so.1</div><div class="line">lrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -&gt; librdkafka++.so.1</div><div class="line">-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1</div><div class="line">-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1</div><div class="line">drwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig</div></pre></td></tr></table></figure>
<p>librdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是<code>/lib</code>、<code>/usr/lib</code>，而librdkafka默认安装到了<code>/usr/local/lib</code>，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件<code>/etc/ld.so.conf</code>，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include ld.so.conf.d/*.conf</div></pre></td></tr></table></figure>
<p>可以看到，<code>/etc/ld.so.conf</code>包含了ld.so.conf.d目录中的所有<code>.conf</code>文件，所以我们新建一个配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll</div><div class="line">total 24</div><div class="line">...</div><div class="line">-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf</div><div class="line">...</div></pre></td></tr></table></figure>
<p>在<code>librdkafka.conf</code>文件中将<code>/usr/local/lib</code>路径包含进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib</div></pre></td></tr></table></figure>
<p>保存退出后执行以下命令更新动态链接库的搜索配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldconfig</div></pre></td></tr></table></figure>
<p>通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。</p>
<h4 id="安装pykafka"><a href="#安装pykafka" class="headerlink" title="安装pykafka"></a>安装pykafka</h4><p>Python可以通过pip工具安装pykafka</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pykafka</div></pre></td></tr></table></figure>
<p>但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Parsely/pykafka.git</div></pre></td></tr></table></figure>
<p>下载pykafka的源码包到本地，这时别着急执行<code>./configure</code>，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。</p>
<blockquote>
<p>PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by <code>setup.py develop</code>) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare <code>C_INCLUDE_PATH</code>, <code>LIBRARY_PATH</code>, and <code>LD_LIBRARY_PATH</code> in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.</p>
</blockquote>
<p>我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？</p>
<p>在<code>pykafka/pykafka/rdkafka/_rd_kafkamodule.c</code>文件中有这样一行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#include &lt;librdkafka/rdkafka.h&gt;</div></pre></td></tr></table></figure>
<p>所以我们需要在刚才下载的pykafka源码包中新建一个目录，将<code>rdkafka.h</code>放进去，保证我们在编译安装时能够找到它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt pykafka]# ll</div><div class="line">total 128</div><div class="line">...</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka</div><div class="line">...</div></pre></td></tr></table></figure>
<p><code>rdkafka.h</code>文件可以在刚才下载的librdkafka源码包中找到，即<code>librdkafka/src/</code>目录下</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：/root代表librdkafka-0.11.1的存放目录</p>
<p>完成以上工作，依次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd pykafka/</div><div class="line">python setup.py build</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>不出意外的话，就可以安装成功，这时在Python的安装目录的<code>site-packages/</code>目录下会产生<code>pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg</code>目录，内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll</div><div class="line">total 12</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO</div><div class="line">drwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka</div><div class="line">drwxr-xr-x 4 root root 4096 Jan  4 15:22 tests</div></pre></td></tr></table></figure>
<p>表明安装成功了，在<code>pykafka/rdkafka/</code>目录中可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll</div><div class="line">total 172</div><div class="line">-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py</div><div class="line">-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py</div><div class="line">-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__</div><div class="line">-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so</div><div class="line">-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c</div><div class="line">-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py</div><div class="line">-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py</div></pre></td></tr></table></figure>
<h4 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h4><ul>
<li>使用执行报错1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes &gt; 1048618 remaining bytes</div><div class="line">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)</div></pre></td></tr></table></figure>
<p>错误给出的提示是<code>incorrect broker.version.fallback?</code>，一番google后，找到了问题所在，请看 <a href="https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility" target="_blank" rel="external">Broker version compatibility</a> ，librdkafka不同版本的broker对程序的配置要求不同，主要是<code>api.version.request</code> 、<code>broker.version.fallback</code>这两个参数的配置，在<code>pykafka/rdkafka/simple_consumer.py</code>文件中有这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">ver10 = parse_version(self._broker_version) &gt;= parse_version(&quot;0.10.0&quot;)</div><div class="line">...</div><div class="line">conf = &#123;</div><div class="line">    ...</div><div class="line">    &quot;api.version.request&quot;: ver10,</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">if not ver10:</div><div class="line">    conf[&quot;broker.version.fallback&quot;] = self._broker_version</div><div class="line">...</div></pre></td></tr></table></figure>
<p>所以在使用时加上了<code>broker_version</code>参数，这个参数需要知道<strong>kafka集群的broker的版本</strong>，这个非常重要！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=&quot;0.8.2&quot;)</div></pre></td></tr></table></figure>
<p>这样使用就没有问题了。</p>
<p>但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：</p>
<table>
<thead>
<tr>
<th>pykafka</th>
<th>pykafka-with-librdkafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>43.136744260787964</td>
<td>35.90807628631592</td>
</tr>
<tr>
<td>44.06431531906128</td>
<td>37.58351707458496</td>
</tr>
<tr>
<td>43.47287678718567</td>
<td>37.0159432888031</td>
</tr>
</tbody>
</table>
<p>理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kafka&lt;/a&gt; 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 &lt;a href=&quot;https://cwiki.apache.org/
    
    </summary>
    
      <category term="kafka" scheme="http://runnerliu.github.io/categories/kafka/"/>
    
    
      <category term="librdkafka" scheme="http://runnerliu.github.io/tags/librdkafka/"/>
    
      <category term="kafka" scheme="http://runnerliu.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-tar</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxtar/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxtar/</id>
    <published>2018-01-04T14:15:40.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候<code>tar</code>命令是必不可少的一个功能强大的工具。</p>
<p>tar命令可以为Linux的文件和目录创建档案。利用<code>tar</code>可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。</p>
<p>首先区分一下打包和压缩的概念：</p>
<ul>
<li>打包是将一大堆文件或目录变成一个总的文件；</li>
<li>压缩是将一个大的文件通过一些压缩算法变成一个小文件。</li>
</ul>
<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（<code>tar</code>命令），然后再用压缩程序进行压缩（<code>gzip</code>、<code>bzip2</code>命令）。</p>
<p>Linux下最常用的打包程序就是<code>tar</code>了，使用<code>tar</code>程序打出来的包我们常称为<code>tar</code>包，<code>tar</code>包文件的命令通常都是以<code>.tar</code>结尾的。生成<code>tar</code>包后，就可以用其它的程序来进行压缩。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar [参数] [文件]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>用来压缩和解压文件，<code>tar</code>本身不具有压缩功能，是调用压缩功能实现的压缩。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-A</td>
<td>新增文件到以存在的备份文件</td>
</tr>
<tr>
<td>-B</td>
<td>设置区块大小</td>
</tr>
<tr>
<td>-c</td>
<td>建立新的备份文件</td>
</tr>
<tr>
<td>-C &lt;目录&gt;</td>
<td>这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td>
</tr>
<tr>
<td>-d</td>
<td>记录文件的差别</td>
</tr>
<tr>
<td>-r</td>
<td>添加文件到已经压缩的文件</td>
</tr>
<tr>
<td>-u</td>
<td>添加改变了和现有的文件到已经存在的压缩文件</td>
</tr>
<tr>
<td>-x</td>
<td>从备份文件中还原文件</td>
</tr>
<tr>
<td>-t</td>
<td>列出备份文件的内容</td>
</tr>
<tr>
<td>-z</td>
<td>通过gzip指令处理备份文件</td>
</tr>
<tr>
<td>-j</td>
<td>支持bzip2解压文件</td>
</tr>
<tr>
<td>-Z</td>
<td>通过compress指令处理备份文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示操作过程</td>
</tr>
<tr>
<td>-l</td>
<td>文件系统边界设置</td>
</tr>
<tr>
<td>-k</td>
<td>保留原有文件不覆盖</td>
</tr>
<tr>
<td>-m</td>
<td>保留文件不被覆盖</td>
</tr>
<tr>
<td>-w</td>
<td>确认压缩文件的正确性</td>
</tr>
<tr>
<td>-f &lt;备份文件&gt;</td>
<td>指定备份文件</td>
</tr>
<tr>
<td>-b &lt;区块数目&gt;</td>
<td>设置每笔记录的区块数目，每个区块大小为12Bytes</td>
</tr>
<tr>
<td>-p</td>
<td>用原来的文件权限还原文件</td>
</tr>
<tr>
<td>-P</td>
<td>文件名使用绝对名称，不移除文件名称前的”/“号</td>
</tr>
<tr>
<td>-N</td>
<td>只将较指定日期更新的文件保存到备份文件里</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>–exclude &lt;文件&gt;</td>
<td>排除某个文件</td>
</tr>
</tbody>
</table>
<h4 id="常见的解压-压缩命令"><a href="#常见的解压-压缩命令" class="headerlink" title="常见的解压/压缩命令"></a>常见的解压/压缩命令</h4><p><code>.tar</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解包：tar xvf FileName.tar</div><div class="line">打包：tar cvf FileName.tar DirName</div></pre></td></tr></table></figure>
<p><code>.gz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：gunzip FileName.gz</div><div class="line">解压2：gzip -d FileName.gz</div><div class="line">压缩：gzip FileName</div></pre></td></tr></table></figure>
<p><code>.tar.gz</code>文件 和 <code>.tgz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar zxvf FileName.tar.gz</div><div class="line">压缩：tar zcvf FileName.tar.gz DirName</div></pre></td></tr></table></figure>
<p><code>.bz2</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：bzip2 -d FileName.bz2</div><div class="line">解压2：bunzip2 FileName.bz2</div><div class="line">压缩： bzip2 -z FileName</div></pre></td></tr></table></figure>
<p><code>.tar.bz2</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar jxvf FileName.tar.bz2</div><div class="line">压缩：tar jcvf FileName.tar.bz2 DirName</div></pre></td></tr></table></figure>
<p><code>.bz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：bzip2 -d FileName.bz</div><div class="line">解压2：bunzip2 FileName.bz</div><div class="line">压缩：未知</div></pre></td></tr></table></figure>
<p><code>.tar.bz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar jxvf FileName.tar.bz</div><div class="line">压缩：未知</div></pre></td></tr></table></figure>
<p><code>.Z</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：uncompress FileName.Z</div><div class="line">压缩：compress FileName</div></pre></td></tr></table></figure>
<p><code>.tar.Z</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar Zxvf FileName.tar.Z</div><div class="line">压缩：tar Zcvf FileName.tar.Z DirName</div></pre></td></tr></table></figure>
<p><code>.zip</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：unzip FileName.zip</div><div class="line">压缩：zip FileName.zip DirName</div></pre></td></tr></table></figure>
<p><code>.rar</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：rar x FileName.rar</div><div class="line">压缩：rar a FileName.rar DirName</div></pre></td></tr></table></figure>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 24</div><div class="line">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>将文件只打包不压缩、以gzip压缩、以bzip2压缩。</p>
<ul>
<li>tar -ztvf testlog.tar.gz</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz </div><div class="line">-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log</div></pre></td></tr></table></figure>
<p>查看testlog.tar.gz中有哪些文件。</p>
<ul>
<li>tar -zxvf testlog.tar.gz</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 24</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz</div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 28</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>将testlog.tar.gz解压缩。</p>
<ul>
<li>tar -zcvf testlogs.tar.gz testlog1.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log </div><div class="line">testlog1.log</div><div class="line">testlog2.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 36</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz </div><div class="line">-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log</div><div class="line">-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 32</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log</div><div class="line">testlog1.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 36</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>从压缩包中解压出指定文件。</p>
<ul>
<li>tar -N “2018/01/03” -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份</li>
<li>tar –exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件</li>
</ul>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html" target="_blank" rel="external">每天一个linux命令（28）：tar命令</a> <a href="http://www.runoob.com/linux/linux-comm-tar.html" target="_blank" rel="external">Linux tar命令</a>  <a href="http://wangchujiang.com/linux-command/c/tar.html" target="_blank" rel="external">tar</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候&lt;code&gt;tar&lt;/code&gt;命令是必不可少的一个功能强大的工具。&lt;/p&gt;
&lt;p&gt;tar命令可以为Linux的文件和目录创建档案。利用&lt;code&gt;tar&lt;/code&gt;可以为某一特定文件创建档案（备份文
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="tar" scheme="http://runnerliu.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ln</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxln/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxln/</id>
    <published>2018-01-04T14:14:10.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln [参数] [源文件或目录] [目标文件或目录]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>Linux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p>
<p>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。</p>
<p>软链接</p>
<ul>
<li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li>
<li>软链接可以 跨文件系统 ，硬链接不可以</li>
<li>软链接可以对一个不存在的文件名进行链接</li>
<li>软链接可以对目录进行链接</li>
</ul>
<p>硬链接</p>
<ul>
<li>硬链接，以文件副本的形式存在。但不占用实际空间</li>
<li>不允许给目录创建硬链接</li>
<li>硬链接只有在同一个文件系统中才能创建</li>
</ul>
<p>注意</p>
<ul>
<li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li>
<li>ln的链接又分软链接和硬链接两种，软链接就是<code>ln –s 源文件 目标文件</code>，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接<code>ln 源文件 目标文件</code>，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；</li>
<li>ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li>
</ul>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>删除，覆盖以前建立的链接</td>
</tr>
<tr>
<td>-d</td>
<td>允许超级用户制作目录的硬链接</td>
</tr>
<tr>
<td>-f</td>
<td>强制执行</td>
</tr>
<tr>
<td>-i</td>
<td>交互模式，文件存在则提示用户是否覆盖</td>
</tr>
<tr>
<td>-n</td>
<td>把符号链接视为一般目录</td>
</tr>
<tr>
<td>-s</td>
<td>软链接(符号链接)</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细的处理过程</td>
</tr>
<tr>
<td>-S</td>
<td>“-S&lt;字尾备份字符串&gt; “或 “–suffix=&lt;字尾备份字符串&gt;”</td>
</tr>
<tr>
<td>-V</td>
<td>“-V&lt;备份方式&gt;”或”–version-control=&lt;备份方式&gt;”</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ln -s cplog.log cplog-link.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 4</div><div class="line">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log</div></pre></td></tr></table></figure>
<p>为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。</p>
<ul>
<li>ln cplog.log cplog-hard.log </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 8</div><div class="line">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log</div></pre></td></tr></table></figure>
<p>为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。</p>
<ul>
<li>ln cplog.log test/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log</div></pre></td></tr></table></figure>
<p>将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。</p>
<ul>
<li>ln -sv /root/testln/test /root/testln/test2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2</div><div class="line">`test2/test&apos; -&gt; `test&apos;</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">lrwxrwxrwx 1 root root 4 Jan  3 20:38 test -&gt; test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2</div><div class="line">`/root/testln/test2/test&apos; -&gt; `/root/testln/test&apos;</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">lrwxrwxrwx 1 root root 17 Jan  3 20:39 test -&gt; /root/testln/test</div></pre></td></tr></table></figure>
<p>创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。</p>
<p>目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html" target="_blank" rel="external">每天一个linux命令（35）：ln 命令</a> <a href="http://www.runoob.com/linux/linux-comm-ln.html" target="_blank" rel="external">Linux ln命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ln" scheme="http://runnerliu.github.io/tags/ln/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-cp</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxcp/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxcp/</id>
    <published>2018-01-04T14:11:57.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 </p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp [options] source dest</div><div class="line">cp [options] source... directory</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容</td>
</tr>
<tr>
<td>-b</td>
<td>为每个已存在的目标文件创建备份</td>
</tr>
<tr>
<td>-d</td>
<td>复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式</td>
</tr>
<tr>
<td>-f</td>
<td>覆盖已经存在的目标文件而不给出提示</td>
</tr>
<tr>
<td>-i</td>
<td>与-f选项相反，在覆盖目标文件之前给出提示</td>
</tr>
<tr>
<td>-H</td>
<td>跟随源文件中的命令行符号链接</td>
</tr>
<tr>
<td>-l</td>
<td>不复制文件，只是生成链接文件</td>
</tr>
<tr>
<td>-L</td>
<td>总是跟随符号链接</td>
</tr>
<tr>
<td>-n</td>
<td>不要覆盖已存在的文件</td>
</tr>
<tr>
<td>-P</td>
<td>不跟随源文件中的符号链接</td>
</tr>
<tr>
<td>-p</td>
<td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td>
</tr>
<tr>
<td>-R / -r</td>
<td>若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>
</tr>
<tr>
<td>-s</td>
<td>复制时创建新的链接，类似于Windows系统中的快捷方式</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>cp cplog.log test1/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">复制前：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test1</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 0</div><div class="line"></div><div class="line">复制后：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log</div></pre></td></tr></table></figure>
<p>在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  </p>
<ul>
<li>cp cplog.log test1/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/</div><div class="line">cp: overwrite `test1/cplog.log&apos;? y</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div></pre></td></tr></table></figure>
<p>在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。</p>
<ul>
<li>cp -a test1 test2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">目的目录存在：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2</div><div class="line">total 4</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line"></div><div class="line">目的目录不存在：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div></pre></td></tr></table></figure>
<p>注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</p>
<ul>
<li>cp -s cplog.log cplog-1.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 16</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</div></pre></td></tr></table></figure>
<p>cplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html" target="_blank" rel="external">每天一个linux命令（8）：cp 命令</a> <a href="http://www.runoob.com/linux/linux-comm-cp.html" target="_blank" rel="external">Linux cp命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="cp" scheme="http://runnerliu.github.io/tags/cp/"/>
    
  </entry>
  
  <entry>
    <title>Windows查看端口占用并关闭进程</title>
    <link href="http://runnerliu.github.io/2018/01/02/windowskillprocess/"/>
    <id>http://runnerliu.github.io/2018/01/02/windowskillprocess/</id>
    <published>2018-01-02T14:59:25.000Z</published>
    <updated>2018-06-06T14:28:22.587Z</updated>
    
    <content type="html"><![CDATA[<p>开始–&gt;运行–&gt;cmd，进入命令提示符输入<code>netstat -ano</code> 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&gt; “选择列”。</p>
<p>经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。</p>
<p>假设我们需要确定哪个进程占用了8083端口。</p>
<h4 id="查看所有端口的占用情况"><a href="#查看所有端口的占用情况" class="headerlink" title="查看所有端口的占用情况"></a>查看所有端口的占用情况</h4><p><code>netstat -ano</code>，结果如图</p>
<p><img src="/images/2017-12-19 161752.png" alt="2017-12-19 161752"></p>
<h4 id="查看指定端口的占用情况"><a href="#查看指定端口的占用情况" class="headerlink" title="查看指定端口的占用情况"></a>查看指定端口的占用情况</h4><p><code>netstat -aon | findstr &quot;9050&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162037.png" alt="2017-12-19 162037"></p>
<p>可以看到8083端口被进程号为2648的进程占用。</p>
<h4 id="查看PID对应的进程"><a href="#查看PID对应的进程" class="headerlink" title="查看PID对应的进程"></a>查看PID对应的进程</h4><p><code>tasklist | findstr &quot;2648&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162446.png" alt="2017-12-19 162446"></p>
<h4 id="杀死相应进程"><a href="#杀死相应进程" class="headerlink" title="杀死相应进程"></a>杀死相应进程</h4><p><code>tasklist|findstr &quot;2016&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162624.png" alt="2017-12-19 162624"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始–&amp;gt;运行–&amp;gt;cmd，进入命令提示符输入&lt;code&gt;netstat -ano&lt;/code&gt; 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&amp;gt; “选择列”。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="http://runnerliu.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://runnerliu.github.io/tags/Windows/"/>
    
      <category term="端口占用" scheme="http://runnerliu.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="http://runnerliu.github.io/2018/01/02/pythoncontextmanager/"/>
    <id>http://runnerliu.github.io/2018/01/02/pythoncontextmanager/</id>
    <published>2018-01-02T14:54:29.000Z</published>
    <updated>2018-06-06T14:28:22.571Z</updated>
    
    <content type="html"><![CDATA[<h4 id="何为上下文管理器"><a href="#何为上下文管理器" class="headerlink" title="何为上下文管理器"></a>何为上下文管理器</h4><p>上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。</p>
<p>例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。</p>
<h4 id="需求的产生"><a href="#需求的产生" class="headerlink" title="需求的产生"></a>需求的产生</h4><p>在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。</p>
<p>在没有接触到上下文管理器之前，我们可以用”try/finally”语句来解决这样的问题。或许在有些人看来，”try/finally”语句显得有些繁琐。上下文管理器就是被设计用来简化”try/finally”语句的，这样可以让程序更加简洁。</p>
<h4 id="上下文管理协议"><a href="#上下文管理协议" class="headerlink" title="上下文管理协议"></a>上下文管理协议</h4><p>那么在Python中怎么实现一个上下文管理器呢？主要依靠<code>__enter__</code>、<code>__exit__</code>这两个”魔术方法”。</p>
<blockquote>
<p><code>__enter__(self)</code> </p>
<p>Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of __enter__ is bound to the target of the with statement, or the name after the as.</p>
<p><code>__exit__(self, exception_type, exception_value, traceback)</code> </p>
<p>Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception<em>value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure </em>_exit__ returns True after all is said and done. If you don’t want the exception to be handled by the context manager, just let it happen.</p>
</blockquote>
<p>也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现<code>__enter__</code>和<code>__exit__</code>方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。</p>
<h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><p>在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行__enter__方法），并在代码块结束后退出该上下文（执行__exit__方法）。</p>
<p>with语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with context_expr [as var]:</div><div class="line">    with_suite</div></pre></td></tr></table></figure>
<ul>
<li>context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境</li>
<li>as var: 可选部分，通过变量方式保存上下文管理器对象</li>
<li>with_suite: 需要放在上下文环境中执行的语句块</li>
</ul>
<p>在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with File(&apos;demo.txt&apos;, &apos;w&apos;) as opened_file:</div><div class="line">    opened_file.write(&apos;Hola!&apos;)</div></pre></td></tr></table></figure>
<p> with语句先暂存了File类的<code>__exit__()</code>方法，然后它调用File类的<code>__enter__()</code>方方法，<code>__enter__</code>方法打开文件并返回给with语句，打开的文件句柄被传递给<code>opened_file</code>参数，然后使用<code>.write()</code>来写文件，with语句调用之前暂存的<code>__exit__</code>方法关闭了文件。</p>
<h4 id="自定义上下文管理器"><a href="#自定义上下文管理器" class="headerlink" title="自定义上下文管理器"></a>自定义上下文管理器</h4><p>了解上下文管理器的执行流程和方法后，我们可以通过实现<code>__enter__()</code>、<code>__exit__()</code>函数来自定义上下文管理器，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">filename = &apos;my_file.txt&apos;</div><div class="line">mode = &apos;w&apos; # Mode that allows to write to the file</div><div class="line">writer = open(filename, mode)</div><div class="line"></div><div class="line">class PypixOpen(object):</div><div class="line">    def __init__(self, filename, mode):</div><div class="line">        self.filename = filename</div><div class="line">        self.mode = mode</div><div class="line"></div><div class="line">    def __enter__(self):</div><div class="line">        self.openedFile = open(self.filename, self.mode)</div><div class="line">        return self.openedFile</div><div class="line"></div><div class="line">    def __exit__(self, *unused):</div><div class="line">        self.openedFile.close()</div><div class="line"></div><div class="line"># Script starts from here</div><div class="line"></div><div class="line">with PypixOpen(filename, mode) as writer:</div><div class="line">    writer.write(&quot;Hello World from our new Context Manager!&quot;)</div></pre></td></tr></table></figure>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>上下文管理器根据<code>__exit__()</code> 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。</p>
<p><code>__exit__ ()</code>接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常</p>
<p>下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Open:</div><div class="line">    def __init__(self, file, mode):</div><div class="line">        self.open_file = open(file, mode)</div><div class="line">    def __enter__(self):</div><div class="line">        return self.open_file</div><div class="line">    def __exit__(self, type, value, tb):</div><div class="line">        self.open_file.close()</div><div class="line">        if type is AttributeError:</div><div class="line">            print(&apos;handing some exception&apos;)</div><div class="line">            return True</div><div class="line">            </div><div class="line">with Open(&apos;aaa&apos;, &apos;w&apos;) as f:</div><div class="line">    f.writeee(&apos;aaaa&apos;)</div><div class="line">    </div><div class="line">    </div><div class="line">&gt;&gt;&gt; handing some exception</div></pre></td></tr></table></figure>
<h4 id="contextmanager"><a href="#contextmanager" class="headerlink" title="contextmanager"></a>contextmanager</h4><p>由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。</p>
<p>有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，<code>yield</code> 语句前面的部分被认为是<code>__enter__()</code> 方法的代码，后面的部分被认为是 <code>__exit__()</code>方法的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from contextlib import contextmanager</div><div class="line">@contextmanager</div><div class="line">def file(path, mode):</div><div class="line">    open_file = open(path, mode)</div><div class="line">    yield open_file</div><div class="line">    open_file.close()</div></pre></td></tr></table></figure>
<p>Python解释器遇到了<code>yield</code>关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（<code>file</code>）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给<code>file</code>函数，我们实际上是在调用GeneratorContextManager对象。</p>
<p>Read More: </p>
<blockquote>
<p><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/" target="_blank" rel="external">上下文管理器(Context managers)</a> <a href="http://kuanghy.github.io/2015/08/08/python-with" target="_blank" rel="external">Python上下文管理器与with语句</a> <a href="http://www.cnblogs.com/wilber2013/p/4638967.html" target="_blank" rel="external">Python上下文管理器</a> <a href="https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/" target="_blank" rel="external">Python - 上下文管理</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;何为上下文管理器&quot;&gt;&lt;a href=&quot;#何为上下文管理器&quot; class=&quot;headerlink&quot; title=&quot;何为上下文管理器&quot;&gt;&lt;/a&gt;何为上下文管理器&lt;/h4&gt;&lt;p&gt;上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的
    
    </summary>
    
      <category term="Python" scheme="http://runnerliu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://runnerliu.github.io/tags/Python/"/>
    
      <category term="上下文管理器" scheme="http://runnerliu.github.io/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-netstat</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxnetstat/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxnetstat/</id>
    <published>2018-01-02T14:49:16.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</div></pre></td></tr></table></figure>
<h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>Linux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>
<h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a / -all</td>
<td>显示所有连接中的Socket</td>
</tr>
<tr>
<td>-A&lt;网络类型&gt; / –&lt;网络类型&gt;</td>
<td>列出该网络类型连接中的相关地址</td>
</tr>
<tr>
<td>-c / –continuous</td>
<td>持续列出网络状态</td>
</tr>
<tr>
<td>-C / –cache</td>
<td>显示路由器配置的快取信息</td>
</tr>
<tr>
<td>-e / –extend</td>
<td>显示网络其他相关信息</td>
</tr>
<tr>
<td>-F / –fib</td>
<td>显示FIB</td>
</tr>
<tr>
<td>-g / –groups</td>
<td>显示多重广播功能群组组员名单</td>
</tr>
<tr>
<td>-h / –help</td>
<td>在线帮助</td>
</tr>
<tr>
<td>-i / –interfaces</td>
<td>显示网络界面信息表单</td>
</tr>
<tr>
<td>-l / –listening</td>
<td>显示监控中的服务器的Socket</td>
</tr>
<tr>
<td>-M / –masquerade</td>
<td>显示伪装的网络连线</td>
</tr>
<tr>
<td>-n / –numeric</td>
<td>直接使用IP地址，而不通过域名服务器</td>
</tr>
<tr>
<td>-N / –netlink / –symbolic</td>
<td>显示网络硬件外围设备的符号连接名称</td>
</tr>
<tr>
<td>-o / –timers</td>
<td>显示计时器</td>
</tr>
<tr>
<td>-p / –programs</td>
<td>显示正在使用Socket的程序识别码和程序名称</td>
</tr>
<tr>
<td>-r / –route</td>
<td>显示路由表</td>
</tr>
<tr>
<td>-s / –statistice</td>
<td>显示网络工作信息统计表</td>
</tr>
<tr>
<td>-t / –tcp</td>
<td>显示TCP传输协议的连线状况</td>
</tr>
<tr>
<td>-u / –udp</td>
<td>显示UDP传输协议的连线状况</td>
</tr>
<tr>
<td>-v / –verbose</td>
<td>显示指令执行过程</td>
</tr>
<tr>
<td>-V / –version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>-w / –raw</td>
<td>显示RAW传输协议的连线状况</td>
</tr>
<tr>
<td>-x / –unix</td>
<td>此参数的效果和指定”-A unix”参数相同</td>
</tr>
<tr>
<td>–ip / –inet</td>
<td>此参数的效果和指定”-A inet”参数相同</td>
</tr>
</tbody>
</table>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul>
<li>netstat</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (w/o servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED </div><div class="line">Active UNIX domain sockets (w/o servers)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</div><div class="line">unix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd</div><div class="line">unix  3      [ ]         STREAM     CONNECTED     253334334 </div><div class="line">unix  3      [ ]         STREAM     CONNECTED     253334333</div></pre></td></tr></table></figure>
<p><code>netstat</code> 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。</p>
<p>Proto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LISTEN</td>
<td>侦听来自远方的TCP端口的连接请求</td>
</tr>
<tr>
<td>SYN-SENT</td>
<td>在发送连接请求后等待匹配的连接请求</td>
</tr>
<tr>
<td>SYN-RECEIVED</td>
<td>在收到和发送一个连接请求后等待对方对连接请求的确认</td>
</tr>
<tr>
<td>ESTABLISHED</td>
<td>一个打开的连接</td>
</tr>
<tr>
<td>FIN-WAIT-1</td>
<td>等待远程TCP连接中断请求，或先前的连接中断请求的确认</td>
</tr>
<tr>
<td>FIN-WAIT-2</td>
<td>从远程TCP等待连接中断请求</td>
</tr>
<tr>
<td>CLOSE-WAIT</td>
<td>等待从本地用户发来的连接中断请求</td>
</tr>
<tr>
<td>CLOSING</td>
<td>等待远程TCP对连接中断的确认</td>
</tr>
<tr>
<td>LAST-ACK</td>
<td>等待原来的发向远程TCP的连接中断请求的确认</td>
</tr>
<tr>
<td>TIME-WAIT</td>
<td>等待足够的时间以确保远程TCP接收到连接中断请求的确认</td>
</tr>
<tr>
<td>CLOSED</td>
<td>没有任何连接状态</td>
</tr>
</tbody>
</table>
<ul>
<li>netstat -a</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 *:tproxy                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-cli                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-srv                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </div><div class="line">Active UNIX domain sockets (servers and established)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</div><div class="line">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</div></pre></td></tr></table></figure>
<p>显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。</p>
<ul>
<li>netstat -nu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (w/o servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State</div></pre></td></tr></table></figure>
<p>显示当前UDP的连接情况</p>
<ul>
<li>netstat -apu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name </div><div class="line">udp        0      0 *:947               *:*                                     1200/rpcbind     </div><div class="line">udp        0      0 *:domain            *:*                                     9306/dnsmasq     </div><div class="line">udp        0      0 *:983               *:*                                     1231/rpc.statd   </div><div class="line">udp        0      0 *:sunrpc            *:*                                     1200/rpcbind     </div><div class="line">udp        0      0 *:ipp               *:*                                     1141/portreserve </div><div class="line">udp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       </div><div class="line">udp        0      0 localhost:ntp       *:*                                     4247/ntpd       </div><div class="line">udp        0      0 *:ntp               *:*                                     4247/ntpd       </div><div class="line">udp        0      0 *:62630             *:*                                     1231/rpc.statd</div></pre></td></tr></table></figure>
<p>显示UDP端口号的使用情况</p>
<ul>
<li>netstat -i</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Kernel Interface table</div><div class="line">Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</div><div class="line">eth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU</div><div class="line">lo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU</div></pre></td></tr></table></figure>
<p>显示网卡列表</p>
<ul>
<li>netstat -g</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IPv6/IPv4 Group Memberships</div><div class="line">Interface       RefCnt Group</div><div class="line">--------------- ------ ---------------------</div><div class="line">lo              1      all-systems.mcast.net</div><div class="line">eth0            1      all-systems.mcast.net</div></pre></td></tr></table></figure>
<p>显示组播组的关系</p>
<ul>
<li>netstat -s</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">Ip:</div><div class="line">    2402314477 total packets received</div><div class="line">    0 forwarded</div><div class="line">    0 incoming packets discarded</div><div class="line">    2331780718 incoming packets delivered</div><div class="line">    2692824123 requests sent out</div><div class="line">Icmp:</div><div class="line">    484304 ICMP messages received</div><div class="line">    0 input ICMP message failed.</div><div class="line">    ICMP input histogram:</div><div class="line">        destination unreachable: 159</div><div class="line">        timeout in transit: 3</div><div class="line">        echo requests: 83130</div><div class="line">        echo replies: 400987</div><div class="line">        timestamp request: 25</div><div class="line">    505861 ICMP messages sent</div><div class="line">    0 ICMP messages failed</div><div class="line">    ICMP output histogram:</div><div class="line">        destination unreachable: 21437</div><div class="line">        echo request: 401269</div><div class="line">        echo replies: 83130</div><div class="line">        timestamp replies: 25</div><div class="line">IcmpMsg:</div><div class="line">        InType0: 400987</div><div class="line">        InType3: 159</div><div class="line">        InType8: 83130</div><div class="line">        InType11: 3</div><div class="line">        InType13: 25</div><div class="line">        OutType0: 83130</div><div class="line">        OutType3: 21437</div><div class="line">        OutType8: 401269</div><div class="line">        OutType14: 25</div><div class="line">Tcp:</div><div class="line">    62593872 active connections openings</div><div class="line">    177834 passive connection openings</div><div class="line">    153086 failed connection attempts</div><div class="line">    999 connection resets received</div><div class="line">    89 connections established</div><div class="line">    2250692557 segments received</div><div class="line">    2608392230 segments send out</div><div class="line">    3325843 segments retransmited</div><div class="line">    132 bad segments received.</div><div class="line">    610130 resets sent</div><div class="line">Udp:</div><div class="line">    80565656 packets received</div><div class="line">    21451 packets to unknown port received.</div><div class="line">    0 packet receive errors</div><div class="line">    80600189 packets sent</div><div class="line">UdpLite:</div><div class="line">TcpExt:</div><div class="line">    1100 invalid SYN cookies received</div><div class="line">    361 resets received for embryonic SYN_RECV sockets</div><div class="line">    466 packets pruned from receive queue because of socket buffer overrun</div><div class="line">    61819153 TCP sockets finished time wait in fast timer</div><div class="line">    2987 TCP sockets finished time wait in slow timer</div><div class="line">    660268 delayed acks sent</div><div class="line">    260 delayed acks further delayed because of locked socket</div><div class="line">    Quick ack mode was activated 1051984 times</div><div class="line">    25934905 packets directly queued to recvmsg prequeue.</div><div class="line">    911172308 packets directly received from backlog</div><div class="line">    3173278514 packets directly received from prequeue</div><div class="line">    1186216864 packets header predicted</div><div class="line">    3170682 packets header predicted and directly queued to user</div><div class="line">    357381509 acknowledgments not containing data received</div><div class="line">    411743100 predicted acknowledgments</div><div class="line">    1093102 times recovered from packet loss due to SACK data</div><div class="line">    Detected reordering 12642 times using FACK</div><div class="line">    Detected reordering 14884 times using SACK</div><div class="line">    Detected reordering 11 times using time stamp</div><div class="line">    13885 congestion windows fully recovered</div><div class="line">    252 congestion windows partially recovered using Hoe heuristic</div><div class="line">    TCPDSACKUndo: 193430</div><div class="line">    51009 congestion windows recovered after partial ack</div><div class="line">    168112 TCP data loss events</div><div class="line">    TCPLostRetransmit: 14829</div><div class="line">    108524 timeouts after SACK recovery</div><div class="line">    4274 timeouts in loss state</div><div class="line">    2496500 fast retransmits</div><div class="line">    158451 forward retransmits</div><div class="line">    230933 retransmits in slow start</div><div class="line">    280735 other TCP timeouts</div><div class="line">    38730 sack retransmits failed</div><div class="line">    23520 packets collapsed in receive queue due to low socket buffer</div><div class="line">    1051963 DSACKs sent for old packets</div><div class="line">    20 DSACKs sent for out of order packets</div><div class="line">    365231 DSACKs received</div><div class="line">    692 DSACKs for out of order packets received</div><div class="line">    414 connections reset due to unexpected data</div><div class="line">    896 connections reset due to early user close</div><div class="line">    761 connections aborted due to timeout</div><div class="line">    TCPDSACKIgnoredOld: 509</div><div class="line">    TCPDSACKIgnoredNoUndo: 425</div><div class="line">    TCPSackShiftFallback: 22772083</div><div class="line">    TCPBacklogDrop: 2192</div><div class="line">    TCPChallengeACK: 125</div><div class="line">    TCPSYNChallenge: 125</div><div class="line">    TCPFromZeroWindowAdv: 85</div><div class="line">    TCPToZeroWindowAdv: 85</div><div class="line">    TCPWantZeroWindowAdv: 163030</div><div class="line">IpExt:</div><div class="line">    InBcastPkts: 1232</div><div class="line">    InOctets: 1540584137119</div><div class="line">    OutOctets: 1474239597014</div><div class="line">    InBcastOctets: 191368</div></pre></td></tr></table></figure>
<p>显示网络统计信息</p>
<ul>
<li>netstat -l</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 *:tproxy                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-cli                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-srv                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-client            *:*                         LISTEN      </div><div class="line">tcp        0      0 *:domain                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:oa-system                 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:ssh                       *:*                         LISTEN      </div><div class="line">tcp        0      0 *:8023                      *:*                         LISTEN      </div><div class="line">tcp        0      0 localhost:smtp              *:*                         LISTEN      </div><div class="line">tcp        0      0 *:12602                     *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:30050                     *:*                         LISTEN      </div><div class="line">tcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:eforward                  *:*                         LISTEN      </div><div class="line">tcp        0      0 *:svn                       *:*                         LISTEN      </div><div class="line">tcp        0      0 *:16010                     *:*                         LISTEN      </div><div class="line">tcp        0      0 *:6379                      *:*                         LISTEN      </div><div class="line">tcp        0      0 *:23212                     *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:sunrpc                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:http                      *:*                         LISTEN      </div><div class="line">udp        0      0 *:947                       *:*                                     </div><div class="line">udp        0      0 *:domain                    *:*                                     </div><div class="line">udp        0      0 *:983                       *:*                                     </div><div class="line">udp        0      0 *:sunrpc                    *:*                                     </div><div class="line">udp        0      0 *:ipp                       *:*                                     </div><div class="line">udp        0      0 hcdn-others-worker-dev10:ntp *:*                                     </div><div class="line">udp        0      0 localhost:ntp               *:*                                     </div><div class="line">udp        0      0 *:ntp                       *:*                                     </div><div class="line">udp        0      0 *:62630                     *:*                                     </div><div class="line">Active UNIX domain sockets (only servers)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18425  private/error</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18437  private/local</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache</div></pre></td></tr></table></figure>
<p>显示监听的套接口</p>
<ul>
<li>netstat -ap | grep python3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   </div><div class="line">tcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3</div></pre></td></tr></table></figure>
<p>显示程序运行的端口</p>
<p>然后利用<code>ps -ef | grep &#39;15484&#39;</code> 命令可查找该端口运行的程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      6262   946  0 15:45 pts/0    00:00:00 grep 15484</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div></pre></td></tr></table></figure>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html" target="_blank" rel="external">每天一个linux命令（56）：netstat命令</a> <a href="http://www.runoob.com/linux/linux-comm-netstat.html" target="_blank" rel="external">Linux netstat命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="netstat" scheme="http://runnerliu.github.io/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ping</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxping/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxping/</id>
    <published>2018-01-02T14:45:06.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping [参数] [主机名称或IP地址]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p>
<p>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>使用Socket的SO_DEBUG功能</td>
</tr>
<tr>
<td>-c &lt;完成次数&gt;</td>
<td>设置完成要求回应的次数</td>
</tr>
<tr>
<td>-f</td>
<td>极限检测</td>
</tr>
<tr>
<td>-i &lt;间隔秒数&gt;</td>
<td>指定收发信息的间隔时间</td>
</tr>
<tr>
<td>-l &lt;网络界面&gt;</td>
<td>使用指定的网络界面送出数据包</td>
</tr>
<tr>
<td>-l &lt;前置载入&gt;</td>
<td>设置在送出要求信息之前，先行发出的数据包</td>
</tr>
<tr>
<td>-n</td>
<td>只输出数值</td>
</tr>
<tr>
<td>-p</td>
<td>设置填满数据包的范本样式</td>
</tr>
<tr>
<td>-q</td>
<td>不显示指令执行过程，开头和结尾的相关信息除外</td>
</tr>
<tr>
<td>-r</td>
<td>忽略普通的Routing Table，直接将数据包送到远端主机上</td>
</tr>
<tr>
<td>-R</td>
<td>记录路由过程</td>
</tr>
<tr>
<td>-s &lt;数据包大小&gt;</td>
<td>设置数据包的大小</td>
</tr>
<tr>
<td>-t &lt;存活时间&gt;</td>
<td>设置存活数值TTL的大小</td>
</tr>
<tr>
<td>-v</td>
<td>详细显示指令的执行过程</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ping 10.3.14.6</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms</div><div class="line">^C</div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">5 packets transmitted, 5 received, 0% packet loss, time 4990ms</div><div class="line">rtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms</div><div class="line"></div><div class="line">需要手动Ctrl+c终止</div></pre></td></tr></table></figure>
<p>ping通主机</p>
<ul>
<li>ping 10.3.14.6</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.</div><div class="line">From 10.13.41.63 icmp_seq=1 Destination Host Unreachable</div><div class="line">From 10.13.41.634 icmp_seq=2 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=3 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=4 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=5 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=6 Destination Host Unreachable</div><div class="line"></div><div class="line">--- 10.3.14.6 ping statistics ---</div><div class="line">8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms</div><div class="line">, pipe 4</div></pre></td></tr></table></figure>
<p>ping不通主机</p>
<ul>
<li>ping -c 10 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms</div><div class="line"></div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">10 packets transmitted, 10 received, 0% packet loss, time 9005ms</div><div class="line">rtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms</div></pre></td></tr></table></figure>
<p>ping指定次数</p>
<ul>
<li>ping -c 10 -i 0.5 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms</div><div class="line"></div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">10 packets transmitted, 10 received, 0% packet loss, time 4506ms</div><div class="line">rtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms</div></pre></td></tr></table></figure>
<p>ping指定次数和时间间隔</p>
<ul>
<li>ping -c 5 www.zhihu.com</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms</div><div class="line"></div><div class="line">--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---</div><div class="line">5 packets transmitted, 5 received, 0% packet loss, time 4006ms</div><div class="line">rtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms</div></pre></td></tr></table></figure>
<p>通过域名ping公网地址</p>
<ul>
<li>ping -i 3 -s 1024 -t 255 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms</div><div class="line">^C</div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">17 packets transmitted, 17 received, 0% packet loss, time 48798ms</div><div class="line">rtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms</div></pre></td></tr></table></figure>
<p>ping多参数使用</p>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html" target="_blank" rel="external">每天一个linux命令（54）：ping命令</a> <a href="http://www.runoob.com/linux/linux-comm-ping.html" target="_blank" rel="external">Linux ping命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ping" scheme="http://runnerliu.github.io/tags/ping/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ps</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxps/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxps/</id>
    <published>2018-01-02T14:38:35.000Z</published>
    <updated>2018-06-06T14:28:22.555Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p>
<p>要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p>
<h4 id="Linux上的进程状态"><a href="#Linux上的进程状态" class="headerlink" title="Linux上的进程状态"></a>Linux上的进程状态</h4><ul>
<li>运行（正在运行或在运行队列中等待）</li>
<li>中断（休眠中，受阻，在等待某个条件的形成或接受到信号）</li>
<li>不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）</li>
<li>僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）</li>
<li>停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）</li>
</ul>
<h4 id="ps命令标识进程状态码"><a href="#ps命令标识进程状态码" class="headerlink" title="ps命令标识进程状态码"></a>ps命令标识进程状态码</h4><ul>
<li>R: 运行</li>
<li>S: 中断</li>
<li>D: 不可中断</li>
<li>Z: 僵死</li>
<li>T: 停止</li>
</ul>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps [参数]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>ps命令用来显示当前进程的状态。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>-a</td>
<td>显示同一终端下的所有程序</td>
</tr>
<tr>
<td>-A</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>c</td>
<td>显示进程的真实名称</td>
</tr>
<tr>
<td>-N</td>
<td>反向选择</td>
</tr>
<tr>
<td>-e</td>
<td>等于”-A”</td>
</tr>
<tr>
<td>e</td>
<td>显示环境变量</td>
</tr>
<tr>
<td>f</td>
<td>显示程序间的关系</td>
</tr>
<tr>
<td>-H</td>
<td>显示树状结构</td>
</tr>
<tr>
<td>r</td>
<td>显示当前终端的进程</td>
</tr>
<tr>
<td>T</td>
<td>显示当前终端的所有程序</td>
</tr>
<tr>
<td>u</td>
<td>指定用户的所有进程</td>
</tr>
<tr>
<td>-au</td>
<td>显示较详细的资讯</td>
</tr>
<tr>
<td>-aux</td>
<td>显示所有包含其他使用者的行程</td>
</tr>
<tr>
<td>-C &lt;命令&gt;d</td>
<td>列出指定命令的状况</td>
</tr>
<tr>
<td>–lines &lt;行数&gt;</td>
<td>每页显示的行数</td>
</tr>
<tr>
<td>–width &lt;字符数&gt;</td>
<td>每页显示的字符数</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本显示</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ps -A</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PID TTY          TIME CMD</div><div class="line">    1 ?        00:00:16 init</div><div class="line">    2 ?        00:00:00 kthreadd</div><div class="line">    3 ?        00:00:21 migration/0</div><div class="line">    4 ?        00:00:36 ksoftirqd/0</div><div class="line">    5 ?        00:00:00 stopper/0</div><div class="line">    6 ?        00:00:08 watchdog/0</div><div class="line">    7 ?        00:00:21 migration/1</div><div class="line">    8 ?        00:00:00 stopper/1</div><div class="line">    9 ?        00:00:35 ksoftirqd/1</div><div class="line">   10 ?        00:00:07 watchdog/1</div><div class="line">   11 ?        00:00:21 migration/2</div><div class="line">   12 ?        00:00:00 stopper/2</div><div class="line">   13 ?        00:00:34 ksoftirqd/2</div></pre></td></tr></table></figure>
<p>显示所有进程</p>
<ul>
<li>ps -u root</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PID TTY          TIME CMD</div><div class="line">    1 ?        00:00:16 init</div><div class="line">    2 ?        00:00:00 kthreadd</div><div class="line">    3 ?        00:00:21 migration/0</div><div class="line">    4 ?        00:00:36 ksoftirqd/0</div><div class="line">    5 ?        00:00:00 stopper/0</div><div class="line">    6 ?        00:00:08 watchdog/0</div><div class="line">    7 ?        00:00:21 migration/1</div><div class="line">    8 ?        00:00:00 stopper/1</div><div class="line">    9 ?        00:00:35 ksoftirqd/1</div><div class="line">   10 ?        00:00:07 watchdog/1</div></pre></td></tr></table></figure>
<p>显示特定用户的进程信息</p>
<ul>
<li>ps -ef</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root     12426 10831  0 16:47 pts/0    00:00:00 ps -ef</div><div class="line">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</div><div class="line">root     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/</div><div class="line">root     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</div><div class="line">root     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d</div><div class="line">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</div></pre></td></tr></table></figure>
<p>显示所有进程信息（包括命令行）</p>
<ul>
<li>ps -ef | grep python</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">root      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py</div><div class="line">850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py</div><div class="line">root     12567 10831  0 16:48 pts/0    00:00:00 grep python</div><div class="line">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</div><div class="line">root     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py</div><div class="line">root     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py</div><div class="line">root     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py</div><div class="line">root     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py</div><div class="line">root     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</div></pre></td></tr></table></figure>
<p>查找特定进程</p>
<ul>
<li>ps aux</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init</div><div class="line">root         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]</div><div class="line">root         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]</div><div class="line">root         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]</div><div class="line">root         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]</div><div class="line">root         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]</div><div class="line">root         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]</div><div class="line">root        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]</div><div class="line">root        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]</div><div class="line">......</div><div class="line">root      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]</div><div class="line">root      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">dbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system</div><div class="line">root      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid</div><div class="line">68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald</div><div class="line">root      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner</div><div class="line">root      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0</div><div class="line">68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket</div><div class="line">root      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon</div><div class="line">root      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master</div><div class="line">postfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u</div><div class="line">root      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd</div><div class="line">......</div><div class="line">root     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 </div><div class="line">root     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash</div><div class="line">root     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux</div><div class="line">root     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</div><div class="line">root     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l</div><div class="line">root     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</div><div class="line">root     17973  0.0  0.0  11540   676 ?        S&lt;    2017   0:00 /sbin/udevd -d</div><div class="line">......</div><div class="line">root     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/</div><div class="line">root     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops </div><div class="line">root     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]</div><div class="line">root     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]</div><div class="line">root     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]</div><div class="line">root     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]</div><div class="line">root     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      </div><div class="line">root     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</div></pre></td></tr></table></figure>
<p>列出目前所有正在内存中的进程</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>进程所属账号</td>
</tr>
<tr>
<td>PID</td>
<td>进程id号</td>
</tr>
<tr>
<td>%CPU</td>
<td>进程所占CPU资源百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程所占物理内存百分比</td>
</tr>
<tr>
<td>VSZ</td>
<td>进程所占虚拟内存大小</td>
</tr>
<tr>
<td>RSS</td>
<td>进程所占固定内存大小</td>
</tr>
<tr>
<td>TTY</td>
<td>进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序</td>
</tr>
<tr>
<td>STAT</td>
<td>进程当前状态</td>
</tr>
<tr>
<td>START</td>
<td>进程被触发启动的时间</td>
</tr>
<tr>
<td>TIME</td>
<td>进程实际使用CPU的时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程的启动指令</td>
</tr>
</tbody>
</table>
<ul>
<li>ps aux | egrep ‘(cron|syslog)’</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond</div><div class="line">root     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)</div><div class="line">root     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5</div></pre></td></tr></table></figure>
<p>显示与 cron、syslog服务有关进程的PID号</p>
<ul>
<li>ps -aux | more : 分页查看</li>
<li>ps -aux &gt; ps001.txt : 输出到文件中</li>
<li>ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段</li>
</ul>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html" target="_blank" rel="external">每天一个linux命令（41）：ps命令</a> <a href="http://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="external">Linux ps命令</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。&lt;/p&gt;
&lt;p&gt;要对进程进行监测和控制，首先必须要了解当
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ps" scheme="http://runnerliu.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 添加右键菜单</title>
    <link href="http://runnerliu.github.io/2017/10/11/sublimetext3rightclick/"/>
    <id>http://runnerliu.github.io/2017/10/11/sublimetext3rightclick/</id>
    <published>2017-10-11T11:38:35.000Z</published>
    <updated>2018-06-06T14:28:22.587Z</updated>
    
    <content type="html"><![CDATA[<p>每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。</p>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Version]</div><div class="line">Signature=&quot;$Windows NT$&quot;</div><div class="line"></div><div class="line">[DefaultInstall]</div><div class="line">AddReg=SublimeText3</div><div class="line"></div><div class="line">[SublimeText3]</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</div><div class="line">hkcr,&quot;Directory\shell\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\sublime_text.exe, 0&quot;</div><div class="line">hkcr,&quot;Directory\shell\SublimeText3\command&quot;,,,&quot;&quot;&quot;%1%\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。</p>
<blockquote>
<p>重命名文件之前，需要先在 工具-&gt;文件夹选项-&gt;查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。</p>
</blockquote>
<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[HKEY_CLASSES_ROOT\*\shell\SublimeText3]</div><div class="line">@=&quot;Edit with Sublime Text 3&quot;</div><div class="line">&quot;Icon&quot;=&quot;D:\\Sublime Text 3\\sublime_text.exe,0&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\*\shell\SublimeText3\command]</div><div class="line">@=&quot;D:\\Sublime Text 3\\sublime_text.exe %1&quot;</div><div class="line"></div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\shell\SublimeText3]</div><div class="line">@=&quot;Edit with Sublime Text 3&quot;</div><div class="line">&quot;Icon&quot;=&quot;D:\\Sublime Text 3\\sublime_text.exe,0&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\shell\SublimeText3\command]</div><div class="line">@=&quot;D:\\Sublime Text 3\\sublime_text.exe %1&quot;</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。</p>
<blockquote>
<p>需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。</p>
</blockquote>
<p>删除右键菜单脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[-HKEY_CLASSES_ROOT\*\shell\SublimeText3]</div><div class="line">[-HKEY_CLASSES_ROOT\Directory\shell\SublimeText3]</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。</p>
<p>Read More：</p>
<blockquote>
<p><a href="https://my.oschina.net/adairs/blog/466777" target="_blank" rel="external">将Sublime Text3添加到右键菜单中</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。&lt;/p&gt;
&lt;h4 id=&quot;方式1&quot;&gt;&lt;a href=&quot;#方式1&quot;
    
    </summary>
    
      <category term="辅助研发杂记" scheme="http://runnerliu.github.io/categories/%E8%BE%85%E5%8A%A9%E7%A0%94%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Sublime Text 3" scheme="http://runnerliu.github.io/tags/Sublime-Text-3/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令的简单使用</title>
    <link href="http://runnerliu.github.io/2017/10/09/gitcommand/"/>
    <id>http://runnerliu.github.io/2017/10/09/gitcommand/</id>
    <published>2017-10-09T12:39:43.000Z</published>
    <updated>2018-06-06T14:28:22.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code> 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p>
<p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add .             # 将所有修改添加到暂存区</div><div class="line">git add *             # Ant风格添加修改</div><div class="line">git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区</div><div class="line">git add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区</div><div class="line">git add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java</div></pre></td></tr></table></figure>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit</code> 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>
<h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p><code>git commit</code> 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>
<p>要添加的内容可以通过以下几种方式指定：</p>
<ol>
<li>在使用 <code>git commit</code> 命令之前，通过使用 <code>git add</code> 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为<code>added</code>）；</li>
<li>通过使用 <code>git rm</code> 从工作树和索引中删除文件，再次使用 <code>git commit</code> 命令;</li>
<li>通过将文件作为参数列出到 <code>git commit</code> 命令（不使用 <code>--interactive</code> 或 <code>--patch</code> 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；</li>
<li>通过使用带有 <code>-a</code> 选项的 <code>git commit</code> 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 <code>rm</code> 文件 ，然后执行实际提交；</li>
<li>通过使用 <code>--interactive</code> 或 <code>--patch</code> 选项与 <code>git commit</code> 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。</li>
</ol>
<p>如果提交后立即发现错误，可以使用 <code>git reset</code> 命令恢复。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;the commit message&quot; # git add 存储到暂存区之后将内容提交</div></pre></td></tr></table></figure>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><code>git push</code> 命令用于将本地分支的更新，推送到远程主机。</p>
<h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 <code>&lt;repository&gt;</code> 参数推送的位置时，将查询当前分支的 <code>branch.*.remote</code> 配置以确定要在哪里推送。 如果配置丢失，则默认为<code>origin</code>。</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。</div><div class="line">git push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。</div><div class="line">git push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。</div><div class="line">git push --all origin # 将所有本地分支都推送到origin主机。</div></pre></td></tr></table></figure>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><code>git clone</code> 命令将存储库克隆到新目录中。</p>
<h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone &lt;版本库的网址&gt;</div><div class="line">如：git clone http://github.com/jquery/jquery.git</div></pre></td></tr></table></figure>
<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</div></pre></td></tr></table></figure>
<p>该命令可指定不同的目录名。</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p><code>git fetch</code> 命令用于从另一个存储库下载对象和引用。</p>
<h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到<code>git fetch</code> 命令。</p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>更新远程代码到本地仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">方式一：</div><div class="line">1. 查看远程仓库：git remote -v</div><div class="line">2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master</div><div class="line">3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master</div><div class="line">4. 远程仓库和本地仓库的合并：git merge origin/master</div><div class="line"></div><div class="line">方式二：</div><div class="line">1. 查看远程仓库：git remote -v</div><div class="line">2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp</div><div class="line">3. 比较本地仓库和远程仓库的区别：git diff temp</div><div class="line">4. 合并temp分支到master分支：git merge temp</div><div class="line">5. 删除temp分支：git branch -d temp</div><div class="line">注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D &lt;分支名&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-add&quot;&gt;&lt;a href=&quot;#git-add&quot; class=&quot;headerlink&quot; title=&quot;git add&quot;&gt;&lt;/a&gt;git add&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要
    
    </summary>
    
      <category term="Git" scheme="http://runnerliu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://runnerliu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>项目部署Nginx+Tornado+Supervisor</title>
    <link href="http://runnerliu.github.io/2017/09/03/nginxtornadosupervisor/"/>
    <id>http://runnerliu.github.io/2017/09/03/nginxtornadosupervisor/</id>
    <published>2017-09-03T08:21:00.000Z</published>
    <updated>2018-06-06T14:28:22.571Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。</p>
<p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。</p>
<p>总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。</p>
<h4 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h4><p>Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 <a href="http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi" target="_blank" rel="external">epoll</a> 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。</p>
<p>程序入口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import os.path</div><div class="line"></div><div class="line">import tornado.escape</div><div class="line">import tornado.ioloop</div><div class="line">import tornado.web</div><div class="line">from tornado.httpserver import HTTPServer</div><div class="line">from tornado.options import define, options</div><div class="line"></div><div class="line">from handlers import stream_handler</div><div class="line"></div><div class="line">define(&quot;port&quot;, default=8888, help=&quot;run on the given port&quot;, type=int)</div><div class="line">define(&quot;debug&quot;, default=False, help=&quot;run in debug mode&quot;)</div><div class="line"></div><div class="line"></div><div class="line">class Application(tornado.web.Application):</div><div class="line">    def __init__(self):</div><div class="line">        handlers = [</div><div class="line">            # (r&quot;/&quot;, main_handler.MainHandler),</div><div class="line">            (r&quot;/stream.*?&quot;, stream_handler.StreamHandler),</div><div class="line">        ]</div><div class="line">        settings = dict(</div><div class="line">            template_path=os.path.join(os.path.dirname(__file__), &quot;templates&quot;),</div><div class="line">            static_path=os.path.join(os.path.dirname(__file__), &quot;static&quot;),</div><div class="line">            debug=options.debug,</div><div class="line">        )</div><div class="line">        super(Application, self).__init__(handlers, **settings)</div><div class="line"></div><div class="line">    pass</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    tornado.options.parse_command_line()</div><div class="line">    http_server = HTTPServer(Application())</div><div class="line">    http_server.listen(options.port)</div><div class="line">    tornado.ioloop.IOLoop.instance().start()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>执行以下命令运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python27 app.py --port=8081</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 Python 解释器，<code>python27</code> 是我为 Python 2.7.13 创建的软连接。</p>
<p>以下一行代码必须有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tornado.options.parse_command_line()</div></pre></td></tr></table></figure>
<p>因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。</p>
<h4 id="Supervisor-管理-Tornado-进程"><a href="#Supervisor-管理-Tornado-进程" class="headerlink" title="Supervisor 管理 Tornado 进程"></a>Supervisor 管理 Tornado 进程</h4><p>Supervisor 的安装可以在官方文章中找到，可使用 <code>yum pip easy_insatll</code> 等方法。最简单的就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip27 install supervisor</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 pip 包，<code>pip27</code> 是我为 Python 2.7.13 使用的。</p>
<p>创建文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/supervisor</div></pre></td></tr></table></figure>
<p>创建配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
<p>修改 <code>/etc/supervisor/supervisord.conf</code> 文件内容，在文件结尾 <code>[include]</code> 节点处</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">; [include]</div><div class="line">; files = relative/directory/*.ini</div><div class="line"></div><div class="line">=&gt;</div><div class="line"></div><div class="line">[include]</div><div class="line">files = conf.d/*.conf</div></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>在 <code>/etc/supervisor/</code> 下创建 <code>conf.d</code> 文件夹，及 <code>ProjectName.conf</code> (以项目名称命名的，例如：tornados.conf)</p>
<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi tornados.conf</div></pre></td></tr></table></figure>
<p>添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">[group:tornados]</div><div class="line">programs=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7</div><div class="line"></div><div class="line">[program:tornado-0]</div><div class="line"># 执行的命令</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line"># 项目目录</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line"># 用户</div><div class="line">user=root</div><div class="line"># 自动重启</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line"># log文件路径</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log</div><div class="line"># log级别</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-1]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-2]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-3]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-4]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8024</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-5]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8025</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-6]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8026</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-7]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8027</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log</div><div class="line">loglevel=info</div></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>执行以下命令启动 Supervisor ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h</p>
<p>解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 <code>ps -ef | grep supervisor</code> 查看进程，杀掉 supervisor 的所有进程，重新运行 <a href="https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that" target="_blank" rel="external">参考这里</a> </p>
<p>坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock </p>
<p>解决办法：执行 <code>unlink /tmp/supervisor.sock</code> <a href="https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down" target="_blank" rel="external">参考这里</a> </p>
</blockquote>
<p>如果执行成功，<code>ps -ef | grep python</code> 结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">root     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025</div><div class="line">root     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024</div><div class="line">root     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027</div><div class="line">root     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026</div></pre></td></tr></table></figure>
<h4 id="Nginx-作反向代理"><a href="#Nginx-作反向代理" class="headerlink" title="Nginx 作反向代理"></a>Nginx 作反向代理</h4><p><img src="/images/2017-9-1 161933.jpg" alt="2017-9-1 161933"></p>
<p>安装好 Nginx 后，编辑 nginx.conf 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    # 我启动了8个Tornado实例，配置不同端口</div><div class="line">    upstream tornados &#123;</div><div class="line">        server 127.0.0.1:8020;</div><div class="line">        server 127.0.0.1:8021;</div><div class="line">        server 127.0.0.1:8022;</div><div class="line">        server 127.0.0.1:8023;</div><div class="line">        server 127.0.0.1:8024;</div><div class="line">        server 127.0.0.1:8025;</div><div class="line">        server 127.0.0.1:8026;</div><div class="line">        server 127.0.0.1:8027;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    proxy_next_upstream error;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        # nginx 监听8081端口</div><div class="line">        listen       8081;</div><div class="line">		</div><div class="line">		# 静态文件的路径</div><div class="line">        location /static/&#123;</div><div class="line">            alias /home/ly/analysisweb/static/;</div><div class="line">            expires 24h;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass_header Server;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">            proxy_redirect off;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_pass http://tornados;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可参考 <a href="http://tornado-zh.readthedocs.io/zh/latest/guide/running.html" target="_blank" rel="external">运行和部署</a> </p>
<p>以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 
    
    </summary>
    
      <category term="工程" scheme="http://runnerliu.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="Nginx" scheme="http://runnerliu.github.io/tags/Nginx/"/>
    
      <category term="Tornado" scheme="http://runnerliu.github.io/tags/Tornado/"/>
    
      <category term="Supervisor" scheme="http://runnerliu.github.io/tags/Supervisor/"/>
    
      <category term="项目部署" scheme="http://runnerliu.github.io/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 开机启动</title>
    <link href="http://runnerliu.github.io/2017/09/03/nginxstartpoweron/"/>
    <id>http://runnerliu.github.io/2017/09/03/nginxstartpoweron/</id>
    <published>2017-09-03T08:18:37.000Z</published>
    <updated>2018-06-06T14:28:22.571Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。</p>
<p>首先，在 Linux 系统的 <code>/etc/init.d/</code> 目录下创建 nginx 文件，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>在脚本中添加如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># nginx Startup script for the Nginx HTTP Server</div><div class="line"># it is v.0.0.2 version.</div><div class="line"># chkconfig: - 85 15</div><div class="line"># description: Nginx is a high-performance web and proxy server.</div><div class="line">#              It has a lot of features, but it&apos;s not for everyone.</div><div class="line"># processname: nginx</div><div class="line"># pidfile: /var/run/nginx.pid</div><div class="line"># config: /usr/local/nginx/conf/nginx.conf</div><div class="line"># 启动 nginx 需要执行的命令</div><div class="line">nginxd=/usr/local/nginx/sbin/nginx</div><div class="line"># nginx 的配置文件路径</div><div class="line">nginx_config=/usr/local/nginx/conf/nginx.conf</div><div class="line">nginx_pid=/var/run/nginx.pid</div><div class="line">RETVAL=0</div><div class="line">prog=&quot;nginx&quot;</div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"># Source networking configuration.</div><div class="line">. /etc/sysconfig/network</div><div class="line"># Check that networking is up.</div><div class="line">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</div><div class="line">[ -x $nginxd ] || exit 0</div><div class="line"># Start nginx daemons functions.</div><div class="line">start() &#123;</div><div class="line">if [ -e $nginx_pid ];then</div><div class="line">   echo &quot;nginx already running....&quot;</div><div class="line">   exit 1</div><div class="line">fi</div><div class="line">   echo -n $&quot;Starting $prog: &quot;</div><div class="line">   daemon $nginxd -c $&#123;nginx_config&#125;</div><div class="line">   RETVAL=$?</div><div class="line">   echo</div><div class="line">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</div><div class="line">   return $RETVAL</div><div class="line">&#125;</div><div class="line"># Stop nginx daemons functions.</div><div class="line">stop() &#123;</div><div class="line">        echo -n $&quot;Stopping $prog: &quot;</div><div class="line">        killproc $nginxd</div><div class="line">        RETVAL=$?</div><div class="line">        echo</div><div class="line">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</div><div class="line">&#125;</div><div class="line"># reload nginx service functions.</div><div class="line">reload() &#123;</div><div class="line">    echo -n $&quot;Reloading $prog: &quot;</div><div class="line">    #kill -HUP `cat $&#123;nginx_pid&#125;`</div><div class="line">    killproc $nginxd -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    echo</div><div class="line">&#125;</div><div class="line"># See how we were called.</div><div class="line">case &quot;$1&quot; in</div><div class="line">start)</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">stop)</div><div class="line">        stop</div><div class="line">        ;;</div><div class="line">reload)</div><div class="line">        reload</div><div class="line">        ;;</div><div class="line">restart)</div><div class="line">        stop</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">status)</div><div class="line">        status $prog</div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">*)</div><div class="line">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</div><div class="line">        exit 1</div><div class="line">esac</div><div class="line">exit $RETVAL</div></pre></td></tr></table></figure>
<p>以下是根据 nginx 具体安装路径填写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 启动 nginx 需要执行的命令</div><div class="line">nginxd=/usr/local/nginx/sbin/nginx</div><div class="line"># nginx 的配置文件路径</div><div class="line">nginx_config=/usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>保存脚本文件后设置文件的执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>然后，就可以通过该脚本对 nginx 服务进行管理了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div><div class="line">/etc/init.d/nginx stop</div></pre></td></tr></table></figure>
<p>上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。</p>
<blockquote>
<p>chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>
</blockquote>
<p>先将 nginx 服务加入 chkconfig 管理列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line">service nginx stop</div></pre></td></tr></table></figure>
<p>设置终端模式开机启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。&lt;/p&gt;
&lt;p&gt;首先，在 Linux 系统的 &lt;code&gt;/etc/init.
    
    </summary>
    
      <category term="Nginx" scheme="http://runnerliu.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://runnerliu.github.io/tags/Nginx/"/>
    
  </entry>
  
</feed>
