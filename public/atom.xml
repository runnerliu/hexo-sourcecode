<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小杨的BLOG</title>
  <subtitle>On the way to become a Software Architect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://runnerliu.github.io/"/>
  <updated>2018-01-04T14:18:52.439Z</updated>
  <id>http://runnerliu.github.io/</id>
  
  <author>
    <name>liuxiaoyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>librdkafka的安装和使用</title>
    <link href="http://runnerliu.github.io/2018/01/04/librdkafkainstallanduse/"/>
    <id>http://runnerliu.github.io/2018/01/04/librdkafkainstallanduse/</id>
    <published>2018-01-04T14:17:29.000Z</published>
    <updated>2018-01-04T14:18:52.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kafka.apache.org/" target="_blank" rel="external">kafka</a> 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 <a href="https://cwiki.apache.org/confluence/display/KAFKA/Powered+By" target="_blank" rel="external">多家不同类型的公司</a> 作为多种类型的数据管道和消息系统使用。Python对kafka的操作库主要有 <a href="https://github.com/Parsely/pykafka" target="_blank" rel="external">pykafka</a> 、<a href="https://github.com/confluentinc/confluent-kafka-python" target="_blank" rel="external">confluent-kafka-python</a> 、<a href="https://github.com/edenhill/librdkafka" target="_blank" rel="external">librdkafka</a> ，pykafka是Python内置的kafka操作模块，纯Python编写，提供 <a href="http://pykafka.readthedocs.io/en/latest/api/simpleconsumer.html" target="_blank" rel="external">simpleconsumer</a> 、<a href="http://pykafka.readthedocs.io/en/latest/api/balancedconsumer.html" target="_blank" rel="external">balancedconsumer</a> 两种消费方式。</p>
<p>其实严格意义上来说，librdkafka并不是kafka的操作库，它是Apache Kafka协议的C库实现，包含Producer和Consumer支持。</p>
<blockquote>
<p><strong>librdkafka</strong> is a C library implementation of the <a href="http://kafka.apache.org/" target="_blank" rel="external">Apache Kafka</a> protocol, containing both Producer and Consumer support. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.</p>
</blockquote>
<p>由于项目的需要，原本使用pykafka作为数据的读取库，但是可能是达到了Python的读瓶颈，pykafka无法满足目前的要求，所以准备采用librdkafka来提高从kafka中读数据的效率。网上对Python环境中librdkafka的安装并没有详细的教程，通过自己的摸索和踩坑，终于是安装成功了。</p>
<h4 id="安装librdkafka"><a href="#安装librdkafka" class="headerlink" title="安装librdkafka"></a>安装librdkafka</h4><p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/edenhill/librdkafka.git</div></pre></td></tr></table></figure>
<p>将librdkafka源码库下载到本地，如果没有安装git，请自行搜索安装。</p>
<p>如果github上无法下载，请转到百度网盘：链接: <a href="https://pan.baidu.com/s/1sl0uj2d" target="_blank" rel="external">https://pan.baidu.com/s/1sl0uj2d</a> 密码: af7k</p>
<p>下载的是0.11.1版本，本文安装的也是这个版本。</p>
<p>本文直接下载到/root/目录下，执行<code>cd librdkafka-0.11.1</code>进行目录</p>
<p>依次执行一下命令进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>librdkafka依赖的环境如下，如果未安装请自行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The GNU toolchain</div><div class="line">GNU make</div><div class="line">pthreads</div><div class="line">zlib (optional, for gzip compression support)</div><div class="line">libssl-dev (optional, for SSL and SASL SCRAM support)</div><div class="line">libsasl2-dev (optional, for SASL GSSAPI support)</div></pre></td></tr></table></figure>
<p>如果安装成功，会在<code>/usr/local/lib</code>目录中出现以下文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt librdkafka-0.11.1]# cd /usr/local/lib</div><div class="line">[root@hcdn-others-worker-dev100-bjlt lib]# ll</div><div class="line">total 15200</div><div class="line">-rwxr-xr-x 1 root root 8122982 Jan  4 15:21 librdkafka.a</div><div class="line">-rwxr-xr-x 1 root root 2305704 Jan  4 15:21 librdkafka++.a</div><div class="line">lrwxrwxrwx 1 root root      15 Jan  4 15:21 librdkafka.so -&gt; librdkafka.so.1</div><div class="line">lrwxrwxrwx 1 root root      17 Jan  4 15:21 librdkafka++.so -&gt; librdkafka++.so.1</div><div class="line">-rwxr-xr-x 1 root root 4225307 Jan  4 15:21 librdkafka.so.1</div><div class="line">-rwxr-xr-x 1 root root  899617 Jan  4 15:21 librdkafka++.so.1</div><div class="line">drwxr-xr-x 2 root root    4096 Jan  4 15:21 pkgconfig</div></pre></td></tr></table></figure>
<p>librdkafka.so、librdkafka.so.1是librdkafka的动态链接库，因为Linux默认的动态链接库路径是<code>/lib</code>、<code>/usr/lib</code>，而librdkafka默认安装到了<code>/usr/local/lib</code>，为了使Python解释器可以找到librdkafka的动态链接库，本文采取的方法是修改系统文件<code>/etc/ld.so.conf</code>，这个文件中指定了默认的动态链接库查找路径，默认只有一行配置，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include ld.so.conf.d/*.conf</div></pre></td></tr></table></figure>
<p>可以看到，<code>/etc/ld.so.conf</code>包含了ld.so.conf.d目录中的所有<code>.conf</code>文件，所以我们新建一个配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt ld.so.conf.d]# ll</div><div class="line">total 24</div><div class="line">...</div><div class="line">-rw-r--r--  1 root root  15 Jan  4 11:02 librdkafka.conf</div><div class="line">...</div></pre></td></tr></table></figure>
<p>在<code>librdkafka.conf</code>文件中将<code>/usr/local/lib</code>路径包含进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib</div></pre></td></tr></table></figure>
<p>保存退出后执行以下命令更新动态链接库的搜索配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldconfig</div></pre></td></tr></table></figure>
<p>通过以上操作，Python解释器就可以找到刚才安装的librdkafka的动态链接库了。</p>
<h4 id="安装pykafka"><a href="#安装pykafka" class="headerlink" title="安装pykafka"></a>安装pykafka</h4><p>Python可以通过pip工具安装pykafka</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pykafka</div></pre></td></tr></table></figure>
<p>但是我们需要使用librdkafka扩展，使用pip工具是无法安装librdkafka的，所以我们需要源码编译安装pykafka。</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Parsely/pykafka.git</div></pre></td></tr></table></figure>
<p>下载pykafka的源码包到本地，这时别着急执行<code>./configure</code>，文档中介绍：要使用librdkafka扩展，需要确保头文件和共享库是Python可以找到它们的地方，无论是在构建扩展还是在运行时。</p>
<blockquote>
<p>PyKafka includes a C extension that makes use of librdkafka to speed up producer and consumer operation. To use the librdkafka extension, you need to make sure the header files and shared library are somewhere where python can find them, both when you build the extension (which is taken care of by <code>setup.py develop</code>) and at run time. Typically, this means that you need to either install librdkafka in a place conventional for your system, or declare <code>C_INCLUDE_PATH</code>, <code>LIBRARY_PATH</code>, and <code>LD_LIBRARY_PATH</code> in your shell environment to point to the installation location of the librdkafka shared objects. You can find this location with locate librdkafka.so.</p>
</blockquote>
<p>我们已经将librdkafka的动态链接库加载到系统的搜索路径中，所以这个没问题，但是头文件在哪里？</p>
<p>在<code>pykafka/pykafka/rdkafka/_rd_kafkamodule.c</code>文件中有这样一行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#include &lt;librdkafka/rdkafka.h&gt;</div></pre></td></tr></table></figure>
<p>所以我们需要在刚才下载的pykafka源码包中新建一个目录，将<code>rdkafka.h</code>放进去，保证我们在编译安装时能够找到它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt pykafka]# ll</div><div class="line">total 128</div><div class="line">...</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 14:22 librdkafka</div><div class="line">...</div></pre></td></tr></table></figure>
<p><code>rdkafka.h</code>文件可以在刚才下载的librdkafka源码包中找到，即<code>librdkafka/src/</code>目录下</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /root/librdkafka-0.11.1/src/rdkafka.h /root/pykafka/librdkafka/</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：/root代表librdkafka-0.11.1的存放目录</p>
<p>完成以上工作，依次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd pykafka/</div><div class="line">python setup.py build</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>不出意外的话，就可以安装成功，这时在Python的安装目录的<code>site-packages/</code>目录下会产生<code>pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg</code>目录，内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt pykafka-2.7.0.dev2-py3.6-linux-x86_64.egg]# ll</div><div class="line">total 12</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  4 15:22 EGG-INFO</div><div class="line">drwxr-xr-x 7 root root 4096 Jan  4 15:22 pykafka</div><div class="line">drwxr-xr-x 4 root root 4096 Jan  4 15:22 tests</div></pre></td></tr></table></figure>
<p>表明安装成功了，在<code>pykafka/rdkafka/</code>目录中可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt rdkafka]# ll</div><div class="line">total 172</div><div class="line">-rw-r--r-- 1 root root  1188 Jan  4 15:22 helpers.py</div><div class="line">-rw-r--r-- 1 root root    89 Jan  4 15:22 __init__.py</div><div class="line">-rw-r--r-- 1 root root  8343 Jan  4 15:22 producer.py</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 16:07 __pycache__</div><div class="line">-rwxr-xr-x 1 root root 83815 Jan  4 15:22 _rd_kafka.cpython-36m-x86_64-linux-gnu.so</div><div class="line">-rw-r--r-- 1 root root 41405 Jan  4 15:22 _rd_kafkamodule.c</div><div class="line">-rw-r--r-- 1 root root   314 Jan  4 15:22 _rd_kafka.py</div><div class="line">-rw-r--r-- 1 root root 12674 Jan  4 16:04 simple_consumer.py</div></pre></td></tr></table></figure>
<h4 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h4><ul>
<li>使用执行报错1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: expected 36732025 bytes &gt; 1048618 remaining bytes</div><div class="line">pykafka.rdkafka#consumer-1 [PROTOERR] [thrd:openlive-kafka-online005-bjlt.qiyi.virtual:9092/bootstrap]: openlive-kafka-online005-bjlt.qiyi.virtual:9092/5: Protocol parse failure at 8/1048626 (rd_kafka_fetch_reply_handle:2496) (incorrect broker.version.fallback?)</div></pre></td></tr></table></figure>
<p>错误给出的提示是<code>incorrect broker.version.fallback?</code>，一番google后，找到了问题所在，请看 <a href="https://github.com/edenhill/librdkafka/wiki/Broker-version-compatibility" target="_blank" rel="external">Broker version compatibility</a> ，librdkafka不同版本的broker对程序的配置要求不同，主要是<code>api.version.request</code> 、<code>broker.version.fallback</code>这两个参数的配置，在<code>pykafka/rdkafka/simple_consumer.py</code>文件中有这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">ver10 = parse_version(self._broker_version) &gt;= parse_version(&quot;0.10.0&quot;)</div><div class="line">...</div><div class="line">conf = &#123;</div><div class="line">    ...</div><div class="line">    &quot;api.version.request&quot;: ver10,</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">if not ver10:</div><div class="line">    conf[&quot;broker.version.fallback&quot;] = self._broker_version</div><div class="line">...</div></pre></td></tr></table></figure>
<p>所以在使用时加上了<code>broker_version</code>参数，这个参数需要知道<strong>kafka集群的broker的版本</strong>，这个非常重要！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.client = KafkaClient(zookeeper_hosts=zookeeper_hosts, broker_version=&quot;0.8.2&quot;)</div></pre></td></tr></table></figure>
<p>这样使用就没有问题了。</p>
<p>但是在实际测试中，裸pykafka和pykafka-with-librdkafka的读性能并没有差太多，以下是我在实际中测试从kafka中读取50w条数据的耗时比较：</p>
<table>
<thead>
<tr>
<th>pykafka</th>
<th>pykafka-with-librdkafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>43.136744260787964</td>
<td>35.90807628631592</td>
</tr>
<tr>
<td>44.06431531906128</td>
<td>37.58351707458496</td>
</tr>
<tr>
<td>43.47287678718567</td>
<td>37.0159432888031</td>
</tr>
</tbody>
</table>
<p>理论上，使用了C库的读取，其性能应该有很大提升才对，但是测试表明性能提升并不到，这个问题还有待探讨。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kafka&lt;/a&gt; 是一种高吞吐量的分布式发布订阅消息系统。现在它已被 &lt;a href=&quot;https://cwiki.apache.org/
    
    </summary>
    
      <category term="kafka" scheme="http://runnerliu.github.io/categories/kafka/"/>
    
    
      <category term="librdkafka" scheme="http://runnerliu.github.io/tags/librdkafka/"/>
    
      <category term="kafka" scheme="http://runnerliu.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-tar</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxtar/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxtar/</id>
    <published>2018-01-04T14:15:40.000Z</published>
    <updated>2018-01-04T14:16:45.830Z</updated>
    
    <content type="html"><![CDATA[<p>通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候<code>tar</code>命令是必不可少的一个功能强大的工具。</p>
<p>tar命令可以为Linux的文件和目录创建档案。利用<code>tar</code>可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。</p>
<p>首先区分一下打包和压缩的概念：</p>
<ul>
<li>打包是将一大堆文件或目录变成一个总的文件；</li>
<li>压缩是将一个大的文件通过一些压缩算法变成一个小文件。</li>
</ul>
<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（<code>tar</code>命令），然后再用压缩程序进行压缩（<code>gzip</code>、<code>bzip2</code>命令）。</p>
<p>Linux下最常用的打包程序就是<code>tar</code>了，使用<code>tar</code>程序打出来的包我们常称为<code>tar</code>包，<code>tar</code>包文件的命令通常都是以<code>.tar</code>结尾的。生成<code>tar</code>包后，就可以用其它的程序来进行压缩。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar [参数] [文件]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>用来压缩和解压文件，<code>tar</code>本身不具有压缩功能，是调用压缩功能实现的压缩。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-A</td>
<td>新增文件到以存在的备份文件</td>
</tr>
<tr>
<td>-B</td>
<td>设置区块大小</td>
</tr>
<tr>
<td>-c</td>
<td>建立新的备份文件</td>
</tr>
<tr>
<td>-C &lt;目录&gt;</td>
<td>这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项</td>
</tr>
<tr>
<td>-d</td>
<td>记录文件的差别</td>
</tr>
<tr>
<td>-r</td>
<td>添加文件到已经压缩的文件</td>
</tr>
<tr>
<td>-u</td>
<td>添加改变了和现有的文件到已经存在的压缩文件</td>
</tr>
<tr>
<td>-x</td>
<td>从备份文件中还原文件</td>
</tr>
<tr>
<td>-t</td>
<td>列出备份文件的内容</td>
</tr>
<tr>
<td>-z</td>
<td>通过gzip指令处理备份文件</td>
</tr>
<tr>
<td>-j</td>
<td>支持bzip2解压文件</td>
</tr>
<tr>
<td>-Z</td>
<td>通过compress指令处理备份文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示操作过程</td>
</tr>
<tr>
<td>-l</td>
<td>文件系统边界设置</td>
</tr>
<tr>
<td>-k</td>
<td>保留原有文件不覆盖</td>
</tr>
<tr>
<td>-m</td>
<td>保留文件不被覆盖</td>
</tr>
<tr>
<td>-w</td>
<td>确认压缩文件的正确性</td>
</tr>
<tr>
<td>-f &lt;备份文件&gt;</td>
<td>指定备份文件</td>
</tr>
<tr>
<td>-b &lt;区块数目&gt;</td>
<td>设置每笔记录的区块数目，每个区块大小为12Bytes</td>
</tr>
<tr>
<td>-p</td>
<td>用原来的文件权限还原文件</td>
</tr>
<tr>
<td>-P</td>
<td>文件名使用绝对名称，不移除文件名称前的”/“号</td>
</tr>
<tr>
<td>-N</td>
<td>只将较指定日期更新的文件保存到备份文件里</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>–exclude &lt;文件&gt;</td>
<td>排除某个文件</td>
</tr>
</tbody>
</table>
<h4 id="常见的解压-压缩命令"><a href="#常见的解压-压缩命令" class="headerlink" title="常见的解压/压缩命令"></a>常见的解压/压缩命令</h4><p><code>.tar</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解包：tar xvf FileName.tar</div><div class="line">打包：tar cvf FileName.tar DirName</div></pre></td></tr></table></figure>
<p><code>.gz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：gunzip FileName.gz</div><div class="line">解压2：gzip -d FileName.gz</div><div class="line">压缩：gzip FileName</div></pre></td></tr></table></figure>
<p><code>.tar.gz</code>文件 和 <code>.tgz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar zxvf FileName.tar.gz</div><div class="line">压缩：tar zcvf FileName.tar.gz DirName</div></pre></td></tr></table></figure>
<p><code>.bz2</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：bzip2 -d FileName.bz2</div><div class="line">解压2：bunzip2 FileName.bz2</div><div class="line">压缩： bzip2 -z FileName</div></pre></td></tr></table></figure>
<p><code>.tar.bz2</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar jxvf FileName.tar.bz2</div><div class="line">压缩：tar jcvf FileName.tar.bz2 DirName</div></pre></td></tr></table></figure>
<p><code>.bz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解压1：bzip2 -d FileName.bz</div><div class="line">解压2：bunzip2 FileName.bz</div><div class="line">压缩：未知</div></pre></td></tr></table></figure>
<p><code>.tar.bz</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar jxvf FileName.tar.bz</div><div class="line">压缩：未知</div></pre></td></tr></table></figure>
<p><code>.Z</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：uncompress FileName.Z</div><div class="line">压缩：compress FileName</div></pre></td></tr></table></figure>
<p><code>.tar.Z</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：tar Zxvf FileName.tar.Z</div><div class="line">压缩：tar Zcvf FileName.tar.Z DirName</div></pre></td></tr></table></figure>
<p><code>.zip</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：unzip FileName.zip</div><div class="line">压缩：zip FileName.zip DirName</div></pre></td></tr></table></figure>
<p><code>.rar</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解压：rar x FileName.rar</div><div class="line">压缩：rar a FileName.rar DirName</div></pre></td></tr></table></figure>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>tar -cvf testlog.tar testlog.log | tar -zcvf testlog.tar.gz testlog.log | tar -jcvf testlog.tar.bz2 testlog.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 94 Jan  4 17:07 testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -cvf testlog.tar testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlog.tar.gz testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -jcvf testlog.tar.bz2 testlog.log </div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 24</div><div class="line">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>将文件只打包不压缩、以gzip压缩、以bzip2压缩。</p>
<ul>
<li>tar -ztvf testlog.tar.gz</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlog.tar.gz </div><div class="line">-rw-r--r-- root/root        94 2018-01-04 17:07 testlog.log</div></pre></td></tr></table></figure>
<p>查看testlog.tar.gz中有哪些文件。</p>
<ul>
<li>tar -zxvf testlog.tar.gz</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 24</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlog.tar.gz</div><div class="line">testlog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 28</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    94 Jan  4 17:07 testlog.log</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>将testlog.tar.gz解压缩。</p>
<ul>
<li>tar -zcvf testlogs.tar.gz testlog1.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zcvf testlogs.tar.gz testlog1.log testlog2.log </div><div class="line">testlog1.log</div><div class="line">testlog2.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 36</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -ztvf testlogs.tar.gz </div><div class="line">-rw-r--r-- root/root        13 2018-01-04 17:21 testlog1.log</div><div class="line">-rw-r--r-- root/root        25 2018-01-04 17:21 testlog2.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# rm -rf testlog1.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 32</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# tar -zxvf testlogs.tar.gz testlog1.log</div><div class="line">testlog1.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testtar]# ll</div><div class="line">total 36</div><div class="line">drwxr-xr-x 2 root root  4096 Jan  4 17:17 testlog</div><div class="line">-rw-r--r-- 1 root root    13 Jan  4 17:21 testlog1.log</div><div class="line">-rw-r--r-- 1 root root    25 Jan  4 17:21 testlog2.log</div><div class="line">-rw-r--r-- 1 root root   152 Jan  4 17:21 testlogs.tar.gz</div><div class="line">-rw-r--r-- 1 root root 10240 Jan  4 17:08 testlog.tar</div><div class="line">-rw-r--r-- 1 root root   128 Jan  4 17:08 testlog.tar.bz2</div><div class="line">-rw-r--r-- 1 root root   125 Jan  4 17:08 testlog.tar.gz</div></pre></td></tr></table></figure>
<p>从压缩包中解压出指定文件。</p>
<ul>
<li>tar -N “2018/01/03” -zcvf testlog.tar.gz test: 指定文件夹中的文件比某个日期新的才备份</li>
<li>tar –exclude testlog/testlog1.log -zcvf testlogs.tar.gz testlog/*: 排除文件夹中的某个文件</li>
</ul>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html" target="_blank" rel="external">每天一个linux命令（28）：tar命令</a> <a href="http://www.runoob.com/linux/linux-comm-tar.html" target="_blank" rel="external">Linux tar命令</a>  <a href="http://wangchujiang.com/linux-command/c/tar.html" target="_blank" rel="external">tar</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过SSH访问服务器，难免会要用到压缩、解压缩、打包、解包等操作，这时候&lt;code&gt;tar&lt;/code&gt;命令是必不可少的一个功能强大的工具。&lt;/p&gt;
&lt;p&gt;tar命令可以为Linux的文件和目录创建档案。利用&lt;code&gt;tar&lt;/code&gt;可以为某一特定文件创建档案（备份文
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="tar" scheme="http://runnerliu.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ln</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxln/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxln/</id>
    <published>2018-01-04T14:14:10.000Z</published>
    <updated>2018-01-04T14:15:16.941Z</updated>
    
    <content type="html"><![CDATA[<p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln [参数] [源文件或目录] [目标文件或目录]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>Linux文件系统中，有所谓的链接（link），我们可以将其视为档案的别名，而链接又可分为两种：硬链接（hard link）与软链接（symbolic link），硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p>
<p>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。</p>
<p>软链接</p>
<ul>
<li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li>
<li>软链接可以 跨文件系统 ，硬链接不可以</li>
<li>软链接可以对一个不存在的文件名进行链接</li>
<li>软链接可以对目录进行链接</li>
</ul>
<p>硬链接</p>
<ul>
<li>硬链接，以文件副本的形式存在。但不占用实际空间</li>
<li>不允许给目录创建硬链接</li>
<li>硬链接只有在同一个文件系统中才能创建</li>
</ul>
<p>注意</p>
<ul>
<li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li>
<li>ln的链接又分软链接和硬链接两种，软链接就是<code>ln –s 源文件 目标文件</code>，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接<code>ln 源文件 目标文件</code>，没有参数-s，它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化；</li>
<li>ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li>
</ul>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>删除，覆盖以前建立的链接</td>
</tr>
<tr>
<td>-d</td>
<td>允许超级用户制作目录的硬链接</td>
</tr>
<tr>
<td>-f</td>
<td>强制执行</td>
</tr>
<tr>
<td>-i</td>
<td>交互模式，文件存在则提示用户是否覆盖</td>
</tr>
<tr>
<td>-n</td>
<td>把符号链接视为一般目录</td>
</tr>
<tr>
<td>-s</td>
<td>软链接(符号链接)</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细的处理过程</td>
</tr>
<tr>
<td>-S</td>
<td>“-S&lt;字尾备份字符串&gt; “或 “–suffix=&lt;字尾备份字符串&gt;”</td>
</tr>
<tr>
<td>-V</td>
<td>“-V&lt;备份方式&gt;”或”–version-control=&lt;备份方式&gt;”</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本信息</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ln -s cplog.log cplog-link.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -s cplog.log cplog-link.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 4</div><div class="line">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:00 cplog.log</div></pre></td></tr></table></figure>
<p>为cplog.log文件创建软链接cplog-link.log，如果cplog.log丢失，其软链接cplog-link.log也将失效。</p>
<ul>
<li>ln cplog.log cplog-hard.log </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log cplog-hard.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 8</div><div class="line">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root  9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 2 root root 28 Jan  3 20:00 cplog.log</div></pre></td></tr></table></figure>
<p>为cplog.log创建硬链接cplog-hard.log，cplog.log与cplog-hard.log的各项属性相同。</p>
<ul>
<li>ln cplog.log test/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln cplog.log test/</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 3 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# vi cplog.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog-hard.log</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:25 cplog-link.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 3 root root   72 Jan  3 20:31 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:31 test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 3 root root 72 Jan  3 20:31 cplog.log</div></pre></td></tr></table></figure>
<p>将文件cplog.log创建硬链接到当前目录中已存在的目录，当修改./test/cplog.log文件时，会同步到源文件中。</p>
<ul>
<li>ln -sv /root/testln/test /root/testln/test2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test/</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2/</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv test test2</div><div class="line">`test2/test&apos; -&gt; `test&apos;</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">lrwxrwxrwx 1 root root 4 Jan  3 20:38 test -&gt; test</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# rm -rf test2/test </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ln -sv /root/testln/test /root/testln/test2</div><div class="line">`/root/testln/test2/test&apos; -&gt; `/root/testln/test&apos;</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testln]# ll test2</div><div class="line">total 0</div><div class="line">lrwxrwxrwx 1 root root 17 Jan  3 20:39 test -&gt; /root/testln/test</div></pre></td></tr></table></figure>
<p>创建test目录到test2目录的软链接时，必须使用绝对路径，如果使用相对路径，则目的路径中的链接不断闪烁，表示链接失败。</p>
<p>目录链接只能是软链接，在链接目标目录中修改文件都会在源文件目录中同步变化。</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html" target="_blank" rel="external">每天一个linux命令（35）：ln 命令</a> <a href="http://www.runoob.com/linux/linux-comm-ln.html" target="_blank" rel="external">Linux ln命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ln" scheme="http://runnerliu.github.io/tags/ln/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-cp</title>
    <link href="http://runnerliu.github.io/2018/01/04/linuxcp/"/>
    <id>http://runnerliu.github.io/2018/01/04/linuxcp/</id>
    <published>2018-01-04T14:11:57.000Z</published>
    <updated>2018-01-04T14:13:33.841Z</updated>
    
    <content type="html"><![CDATA[<p>Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。 </p>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp [options] source dest</div><div class="line">cp [options] source... directory</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容</td>
</tr>
<tr>
<td>-b</td>
<td>为每个已存在的目标文件创建备份</td>
</tr>
<tr>
<td>-d</td>
<td>复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式</td>
</tr>
<tr>
<td>-f</td>
<td>覆盖已经存在的目标文件而不给出提示</td>
</tr>
<tr>
<td>-i</td>
<td>与-f选项相反，在覆盖目标文件之前给出提示</td>
</tr>
<tr>
<td>-H</td>
<td>跟随源文件中的命令行符号链接</td>
</tr>
<tr>
<td>-l</td>
<td>不复制文件，只是生成链接文件</td>
</tr>
<tr>
<td>-L</td>
<td>总是跟随符号链接</td>
</tr>
<tr>
<td>-n</td>
<td>不要覆盖已存在的文件</td>
</tr>
<tr>
<td>-P</td>
<td>不跟随源文件中的符号链接</td>
</tr>
<tr>
<td>-p</td>
<td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td>
</tr>
<tr>
<td>-R / -r</td>
<td>若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</td>
</tr>
<tr>
<td>-s</td>
<td>复制时创建新的链接，类似于Windows系统中的快捷方式</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>cp cplog.log test1/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">复制前：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test1</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:00 test2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 0</div><div class="line"></div><div class="line">复制后：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:01 cplog.log</div></pre></td></tr></table></figure>
<p>在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。  </p>
<ul>
<li>cp cplog.log test1/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp cplog.log test1/</div><div class="line">cp: overwrite `test1/cplog.log&apos;? y</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div></pre></td></tr></table></figure>
<p>在目标目录中存在同名文件时，会询问是否覆盖，这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。</p>
<ul>
<li>cp -a test1 test2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">目的目录存在：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test1</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test2</div><div class="line">total 4</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line"></div><div class="line">目的目录不存在：</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -a test1 test3</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll test3/</div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 28 Jan  3 20:04 cplog.log</div></pre></td></tr></table></figure>
<p>注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</p>
<ul>
<li>cp -s cplog.log cplog-1.log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# cp -s cplog.log cplog-1.log </div><div class="line">[root@hcdn-others-worker-dev100-bjlt testcp]# ll</div><div class="line">total 16</div><div class="line">lrwxrwxrwx 1 root root    9 Jan  3 20:09 cplog-1.log -&gt; cplog.log</div><div class="line">-rw-r--r-- 1 root root   28 Jan  3 20:00 cplog.log</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test1</div><div class="line">drwxr-xr-x 3 root root 4096 Jan  3 20:06 test2</div><div class="line">drwxr-xr-x 2 root root 4096 Jan  3 20:01 test3</div></pre></td></tr></table></figure>
<p>cplog-1.log是由 -s 的参数造成的，建立的是一个快捷方式，所以会看到在文件的最右边，显示这个文件是连结到的目的地。</p>
<p>Read More: </p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/10/29/2744185.html" target="_blank" rel="external">每天一个linux命令（8）：cp 命令</a> <a href="http://www.runoob.com/linux/linux-comm-cp.html" target="_blank" rel="external">Linux cp命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux cp命令主要用于复制文件或目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="cp" scheme="http://runnerliu.github.io/tags/cp/"/>
    
  </entry>
  
  <entry>
    <title>Windows查看端口占用并关闭进程</title>
    <link href="http://runnerliu.github.io/2018/01/02/windowskillprocess/"/>
    <id>http://runnerliu.github.io/2018/01/02/windowskillprocess/</id>
    <published>2018-01-02T14:59:25.000Z</published>
    <updated>2018-01-02T15:03:53.153Z</updated>
    
    <content type="html"><![CDATA[<p>开始–&gt;运行–&gt;cmd，进入命令提示符输入<code>netstat -ano</code> 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&gt; “选择列”。</p>
<p>经常，我们在启动应用的时候发现系统需要的端口被别的程序占用，如何知道谁占有了我们需要的端口，下面介绍一种非常简单的方法。</p>
<p>假设我们需要确定哪个进程占用了8083端口。</p>
<h4 id="查看所有端口的占用情况"><a href="#查看所有端口的占用情况" class="headerlink" title="查看所有端口的占用情况"></a>查看所有端口的占用情况</h4><p><code>netstat -ano</code>，结果如图</p>
<p><img src="/images/2017-12-19 161752.png" alt="2017-12-19 161752"></p>
<h4 id="查看指定端口的占用情况"><a href="#查看指定端口的占用情况" class="headerlink" title="查看指定端口的占用情况"></a>查看指定端口的占用情况</h4><p><code>netstat -aon | findstr &quot;9050&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162037.png" alt="2017-12-19 162037"></p>
<p>可以看到8083端口被进程号为2648的进程占用。</p>
<h4 id="查看PID对应的进程"><a href="#查看PID对应的进程" class="headerlink" title="查看PID对应的进程"></a>查看PID对应的进程</h4><p><code>tasklist | findstr &quot;2648&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162446.png" alt="2017-12-19 162446"></p>
<h4 id="杀死相应进程"><a href="#杀死相应进程" class="headerlink" title="杀死相应进程"></a>杀死相应进程</h4><p><code>tasklist|findstr &quot;2016&quot;</code>，结果如图</p>
<p><img src="/images/2017-12-19 162624.png" alt="2017-12-19 162624"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始–&amp;gt;运行–&amp;gt;cmd，进入命令提示符输入&lt;code&gt;netstat -ano&lt;/code&gt; 即可看到所有连接的PID，然后在任务管理器中找到这个PID所对应的程序，如果任务管理器中没有PID这一项，可以在任务管理器中选”查看” -&amp;gt; “选择列”。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="http://runnerliu.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://runnerliu.github.io/tags/Windows/"/>
    
      <category term="端口占用" scheme="http://runnerliu.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="http://runnerliu.github.io/2018/01/02/pythoncontextmanager/"/>
    <id>http://runnerliu.github.io/2018/01/02/pythoncontextmanager/</id>
    <published>2018-01-02T14:54:29.000Z</published>
    <updated>2018-01-02T14:55:41.069Z</updated>
    
    <content type="html"><![CDATA[<h4 id="何为上下文管理器"><a href="#何为上下文管理器" class="headerlink" title="何为上下文管理器"></a>何为上下文管理器</h4><p>上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的时候，通常会将一系列操作放到一个语句块中，当某一条件为真时执行该语句快。有时候，我们需要再执行一个语句块时保持某种状态，并且在离开语句块后结束这种状态。</p>
<p>例如对文件的操作，我们在打开一个文件进行读写操作时需要保持文件处于打开状态，而等操作完成之后要将文件关闭。所以，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾。上下文管理器是在Python2.5加入的功能，它能够让你的代码可读性更强并且错误更少。</p>
<h4 id="需求的产生"><a href="#需求的产生" class="headerlink" title="需求的产生"></a>需求的产生</h4><p>在正常的管理各种系统资源（文件、锁定和连接），在涉及到异常时通常是个棘手的问题。异常很可能导致控制流跳过负责释放关键资源的语句。例如打开一个文件进行操作时，如果意外情况发生（磁盘已满、特殊的终端信号让其终止等），就会抛出异常，这样可能最后的文件关闭操作就不会执行。如果这样的问题频繁出现，则可能耗尽系统资源。</p>
<p>在没有接触到上下文管理器之前，我们可以用”try/finally”语句来解决这样的问题。或许在有些人看来，”try/finally”语句显得有些繁琐。上下文管理器就是被设计用来简化”try/finally”语句的，这样可以让程序更加简洁。</p>
<h4 id="上下文管理协议"><a href="#上下文管理协议" class="headerlink" title="上下文管理协议"></a>上下文管理协议</h4><p>那么在Python中怎么实现一个上下文管理器呢？主要依靠<code>__enter__</code>、<code>__exit__</code>这两个”魔术方法”。</p>
<blockquote>
<p><code>__enter__(self)</code> </p>
<p>Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of __enter__ is bound to the target of the with statement, or the name after the as.</p>
<p><code>__exit__(self, exception_type, exception_value, traceback)</code> </p>
<p>Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, exception_type, exception<em>value, and traceback will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure </em>_exit__ returns True after all is said and done. If you don’t want the exception to be handled by the context manager, just let it happen.</p>
</blockquote>
<p>也就是说，当我们需要创建一个上下文管理器类型的时候，就需要实现<code>__enter__</code>和<code>__exit__</code>方法，这对方法就称为上下文管理协议（Context Manager Protocol），定义了一种运行时上下文环境。</p>
<h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><p>在Python中，可以通过with语句来方便的使用上下文管理器，with语句可以在代码块运行前进入一个运行时上下文（执行__enter__方法），并在代码块结束后退出该上下文（执行__exit__方法）。</p>
<p>with语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with context_expr [as var]:</div><div class="line">    with_suite</div></pre></td></tr></table></figure>
<ul>
<li>context_expr: 支持上下文管理协议的对象，也就是上下文管理器对象，负责维护上下文环境</li>
<li>as var: 可选部分，通过变量方式保存上下文管理器对象</li>
<li>with_suite: 需要放在上下文环境中执行的语句块</li>
</ul>
<p>在Python的内置类型中，很多类型都是支持上下文管理协议的，例如file、thread.LockType、threading.Lock等等。这里我们就以file类型为例，看看with语句的使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">with File(&apos;demo.txt&apos;, &apos;w&apos;) as opened_file:</div><div class="line">    opened_file.write(&apos;Hola!&apos;)</div></pre></td></tr></table></figure>
<p> with语句先暂存了File类的<code>__exit__()</code>方法，然后它调用File类的<code>__enter__()</code>方方法，<code>__enter__</code>方法打开文件并返回给with语句，打开的文件句柄被传递给<code>opened_file</code>参数，然后使用<code>.write()</code>来写文件，with语句调用之前暂存的<code>__exit__</code>方法关闭了文件。</p>
<h4 id="自定义上下文管理器"><a href="#自定义上下文管理器" class="headerlink" title="自定义上下文管理器"></a>自定义上下文管理器</h4><p>了解上下文管理器的执行流程和方法后，我们可以通过实现<code>__enter__()</code>、<code>__exit__()</code>函数来自定义上下文管理器，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">filename = &apos;my_file.txt&apos;</div><div class="line">mode = &apos;w&apos; # Mode that allows to write to the file</div><div class="line">writer = open(filename, mode)</div><div class="line"></div><div class="line">class PypixOpen(object):</div><div class="line">    def __init__(self, filename, mode):</div><div class="line">        self.filename = filename</div><div class="line">        self.mode = mode</div><div class="line"></div><div class="line">    def __enter__(self):</div><div class="line">        self.openedFile = open(self.filename, self.mode)</div><div class="line">        return self.openedFile</div><div class="line"></div><div class="line">    def __exit__(self, *unused):</div><div class="line">        self.openedFile.close()</div><div class="line"></div><div class="line"># Script starts from here</div><div class="line"></div><div class="line">with PypixOpen(filename, mode) as writer:</div><div class="line">    writer.write(&quot;Hello World from our new Context Manager!&quot;)</div></pre></td></tr></table></figure>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>上下文管理器根据<code>__exit__()</code> 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 False ，则异常由上下文管理器处理，如果为 True 则由用户自己处理。</p>
<p><code>__exit__ ()</code>接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常</p>
<p>下面这个例子，捕捉了 AttributeError 的异常，并打印出警告: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Open:</div><div class="line">    def __init__(self, file, mode):</div><div class="line">        self.open_file = open(file, mode)</div><div class="line">    def __enter__(self):</div><div class="line">        return self.open_file</div><div class="line">    def __exit__(self, type, value, tb):</div><div class="line">        self.open_file.close()</div><div class="line">        if type is AttributeError:</div><div class="line">            print(&apos;handing some exception&apos;)</div><div class="line">            return True</div><div class="line">            </div><div class="line">with Open(&apos;aaa&apos;, &apos;w&apos;) as f:</div><div class="line">    f.writeee(&apos;aaaa&apos;)</div><div class="line">    </div><div class="line">    </div><div class="line">&gt;&gt;&gt; handing some exception</div></pre></td></tr></table></figure>
<h4 id="contextmanager"><a href="#contextmanager" class="headerlink" title="contextmanager"></a>contextmanager</h4><p>由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 contextlib。</p>
<p>有了 contextlib 创建上下文管理的最好方式就是使用 contextmanager 装饰器，通过 contextmanager 装饰一个生成器函数，<code>yield</code> 语句前面的部分被认为是<code>__enter__()</code> 方法的代码，后面的部分被认为是 <code>__exit__()</code>方法的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from contextlib import contextmanager</div><div class="line">@contextmanager</div><div class="line">def file(path, mode):</div><div class="line">    open_file = open(path, mode)</div><div class="line">    yield open_file</div><div class="line">    open_file.close()</div></pre></td></tr></table></figure>
<p>Python解释器遇到了<code>yield</code>关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。因为这个装饰器，contextmanager会被调用并传入函数名（<code>file</code>）作为参数。contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。这个GeneratorContextManager被赋值给<code>file</code>函数，我们实际上是在调用GeneratorContextManager对象。</p>
<p>Read More: </p>
<blockquote>
<p><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/context_managers/" target="_blank" rel="external">上下文管理器(Context managers)</a> <a href="http://kuanghy.github.io/2015/08/08/python-with" target="_blank" rel="external">Python上下文管理器与with语句</a> <a href="http://www.cnblogs.com/wilber2013/p/4638967.html" target="_blank" rel="external">Python上下文管理器</a> <a href="https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/" target="_blank" rel="external">Python - 上下文管理</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;何为上下文管理器&quot;&gt;&lt;a href=&quot;#何为上下文管理器&quot; class=&quot;headerlink&quot; title=&quot;何为上下文管理器&quot;&gt;&lt;/a&gt;何为上下文管理器&lt;/h4&gt;&lt;p&gt;上下文管理器是管理上下文的，负责冲锋和垫后，而让开发人员专心完成自己的事情。我们在编写程序的
    
    </summary>
    
      <category term="Python" scheme="http://runnerliu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://runnerliu.github.io/tags/Python/"/>
    
      <category term="上下文管理器" scheme="http://runnerliu.github.io/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-netstat</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxnetstat/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxnetstat/</id>
    <published>2018-01-02T14:49:16.000Z</published>
    <updated>2018-01-02T14:50:37.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</div></pre></td></tr></table></figure>
<h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>Linux netstat命令用于显示网络状态，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>
<h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a / -all</td>
<td>显示所有连接中的Socket</td>
</tr>
<tr>
<td>-A&lt;网络类型&gt; / –&lt;网络类型&gt;</td>
<td>列出该网络类型连接中的相关地址</td>
</tr>
<tr>
<td>-c / –continuous</td>
<td>持续列出网络状态</td>
</tr>
<tr>
<td>-C / –cache</td>
<td>显示路由器配置的快取信息</td>
</tr>
<tr>
<td>-e / –extend</td>
<td>显示网络其他相关信息</td>
</tr>
<tr>
<td>-F / –fib</td>
<td>显示FIB</td>
</tr>
<tr>
<td>-g / –groups</td>
<td>显示多重广播功能群组组员名单</td>
</tr>
<tr>
<td>-h / –help</td>
<td>在线帮助</td>
</tr>
<tr>
<td>-i / –interfaces</td>
<td>显示网络界面信息表单</td>
</tr>
<tr>
<td>-l / –listening</td>
<td>显示监控中的服务器的Socket</td>
</tr>
<tr>
<td>-M / –masquerade</td>
<td>显示伪装的网络连线</td>
</tr>
<tr>
<td>-n / –numeric</td>
<td>直接使用IP地址，而不通过域名服务器</td>
</tr>
<tr>
<td>-N / –netlink / –symbolic</td>
<td>显示网络硬件外围设备的符号连接名称</td>
</tr>
<tr>
<td>-o / –timers</td>
<td>显示计时器</td>
</tr>
<tr>
<td>-p / –programs</td>
<td>显示正在使用Socket的程序识别码和程序名称</td>
</tr>
<tr>
<td>-r / –route</td>
<td>显示路由表</td>
</tr>
<tr>
<td>-s / –statistice</td>
<td>显示网络工作信息统计表</td>
</tr>
<tr>
<td>-t / –tcp</td>
<td>显示TCP传输协议的连线状况</td>
</tr>
<tr>
<td>-u / –udp</td>
<td>显示UDP传输协议的连线状况</td>
</tr>
<tr>
<td>-v / –verbose</td>
<td>显示指令执行过程</td>
</tr>
<tr>
<td>-V / –version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>-w / –raw</td>
<td>显示RAW传输协议的连线状况</td>
</tr>
<tr>
<td>-x / –unix</td>
<td>此参数的效果和指定”-A unix”参数相同</td>
</tr>
<tr>
<td>–ip / –inet</td>
<td>此参数的效果和指定”-A inet”参数相同</td>
</tr>
</tbody>
</table>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul>
<li>netstat</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (w/o servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 hcdn-others-worker-de:62710 10.15.207.143:8433          ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:30881 openlive-hbase-online:websm ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-dev:9546 10.153.149.218:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:53486 10.153.149.192:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:38198 10.153.149.213:XmlIpcRegSvc ESTABLISHED </div><div class="line">tcp        0      0 hcdn-others-worker-de:24007 10.153.149.214:XmlIpcRegSvc ESTABLISHED </div><div class="line">Active UNIX domain sockets (w/o servers)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</div><div class="line">unix  2      [ ]         DGRAM                    12672370 @/org/kernel/udev/udevd</div><div class="line">unix  3      [ ]         STREAM     CONNECTED     253334334 </div><div class="line">unix  3      [ ]         STREAM     CONNECTED     253334333</div></pre></td></tr></table></figure>
<p><code>netstat</code> 命令的输出结果可以分为两个部分：Active Internet connections（有源TCP连接），其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列，这些数字一般都应该是0，如果不是则表示软件包正在队列中堆积；Active UNIX domain sockets（有源Unix域套接口），和网络套接字一样，但只能用于本机通信，性能可以提高一倍。</p>
<p>Proto显示连接使用的协议，RefCnt显示连接到本套接口上的进程号，Type显示套接口的类型，State显示套接口当前的状态，Path表示连接到套接口的其它进程使用的路径名。</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LISTEN</td>
<td>侦听来自远方的TCP端口的连接请求</td>
</tr>
<tr>
<td>SYN-SENT</td>
<td>在发送连接请求后等待匹配的连接请求</td>
</tr>
<tr>
<td>SYN-RECEIVED</td>
<td>在收到和发送一个连接请求后等待对方对连接请求的确认</td>
</tr>
<tr>
<td>ESTABLISHED</td>
<td>一个打开的连接</td>
</tr>
<tr>
<td>FIN-WAIT-1</td>
<td>等待远程TCP连接中断请求，或先前的连接中断请求的确认</td>
</tr>
<tr>
<td>FIN-WAIT-2</td>
<td>从远程TCP等待连接中断请求</td>
</tr>
<tr>
<td>CLOSE-WAIT</td>
<td>等待从本地用户发来的连接中断请求</td>
</tr>
<tr>
<td>CLOSING</td>
<td>等待远程TCP对连接中断的确认</td>
</tr>
<tr>
<td>LAST-ACK</td>
<td>等待原来的发向远程TCP的连接中断请求的确认</td>
</tr>
<tr>
<td>TIME-WAIT</td>
<td>等待足够的时间以确保远程TCP接收到连接中断请求的确认</td>
</tr>
<tr>
<td>CLOSED</td>
<td>没有任何连接状态</td>
</tr>
</tbody>
</table>
<ul>
<li>netstat -a</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 *:tproxy                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-cli                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-srv                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </div><div class="line">Active UNIX domain sockets (servers and established)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</div><div class="line">unix  2      [ ]         DGRAM                    17227  @/org/freedesktop/hal/udev_event</div></pre></td></tr></table></figure>
<p>显示所有有效连接的列表，包括ESTABLISHED、LISTENING的连接。</p>
<ul>
<li>netstat -nu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (w/o servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State</div></pre></td></tr></table></figure>
<p>显示当前UDP的连接情况</p>
<ul>
<li>netstat -apu</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address       Foreign Address             State       PID/Program name </div><div class="line">udp        0      0 *:947               *:*                                     1200/rpcbind     </div><div class="line">udp        0      0 *:domain            *:*                                     9306/dnsmasq     </div><div class="line">udp        0      0 *:983               *:*                                     1231/rpc.statd   </div><div class="line">udp        0      0 *:sunrpc            *:*                                     1200/rpcbind     </div><div class="line">udp        0      0 *:ipp               *:*                                     1141/portreserve </div><div class="line">udp        0      0 hcdn-others-worker-dev10:ntp *:*                            4247/ntpd       </div><div class="line">udp        0      0 localhost:ntp       *:*                                     4247/ntpd       </div><div class="line">udp        0      0 *:ntp               *:*                                     4247/ntpd       </div><div class="line">udp        0      0 *:62630             *:*                                     1231/rpc.statd</div></pre></td></tr></table></figure>
<p>显示UDP端口号的使用情况</p>
<ul>
<li>netstat -i</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Kernel Interface table</div><div class="line">Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</div><div class="line">eth0       1500   0 2334710561      0      0      0 2493027803      0      0      0 BMRU</div><div class="line">lo        65536   0 199796252      0      0      0 199796252      0      0      0 LRU</div></pre></td></tr></table></figure>
<p>显示网卡列表</p>
<ul>
<li>netstat -g</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IPv6/IPv4 Group Memberships</div><div class="line">Interface       RefCnt Group</div><div class="line">--------------- ------ ---------------------</div><div class="line">lo              1      all-systems.mcast.net</div><div class="line">eth0            1      all-systems.mcast.net</div></pre></td></tr></table></figure>
<p>显示组播组的关系</p>
<ul>
<li>netstat -s</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">Ip:</div><div class="line">    2402314477 total packets received</div><div class="line">    0 forwarded</div><div class="line">    0 incoming packets discarded</div><div class="line">    2331780718 incoming packets delivered</div><div class="line">    2692824123 requests sent out</div><div class="line">Icmp:</div><div class="line">    484304 ICMP messages received</div><div class="line">    0 input ICMP message failed.</div><div class="line">    ICMP input histogram:</div><div class="line">        destination unreachable: 159</div><div class="line">        timeout in transit: 3</div><div class="line">        echo requests: 83130</div><div class="line">        echo replies: 400987</div><div class="line">        timestamp request: 25</div><div class="line">    505861 ICMP messages sent</div><div class="line">    0 ICMP messages failed</div><div class="line">    ICMP output histogram:</div><div class="line">        destination unreachable: 21437</div><div class="line">        echo request: 401269</div><div class="line">        echo replies: 83130</div><div class="line">        timestamp replies: 25</div><div class="line">IcmpMsg:</div><div class="line">        InType0: 400987</div><div class="line">        InType3: 159</div><div class="line">        InType8: 83130</div><div class="line">        InType11: 3</div><div class="line">        InType13: 25</div><div class="line">        OutType0: 83130</div><div class="line">        OutType3: 21437</div><div class="line">        OutType8: 401269</div><div class="line">        OutType14: 25</div><div class="line">Tcp:</div><div class="line">    62593872 active connections openings</div><div class="line">    177834 passive connection openings</div><div class="line">    153086 failed connection attempts</div><div class="line">    999 connection resets received</div><div class="line">    89 connections established</div><div class="line">    2250692557 segments received</div><div class="line">    2608392230 segments send out</div><div class="line">    3325843 segments retransmited</div><div class="line">    132 bad segments received.</div><div class="line">    610130 resets sent</div><div class="line">Udp:</div><div class="line">    80565656 packets received</div><div class="line">    21451 packets to unknown port received.</div><div class="line">    0 packet receive errors</div><div class="line">    80600189 packets sent</div><div class="line">UdpLite:</div><div class="line">TcpExt:</div><div class="line">    1100 invalid SYN cookies received</div><div class="line">    361 resets received for embryonic SYN_RECV sockets</div><div class="line">    466 packets pruned from receive queue because of socket buffer overrun</div><div class="line">    61819153 TCP sockets finished time wait in fast timer</div><div class="line">    2987 TCP sockets finished time wait in slow timer</div><div class="line">    660268 delayed acks sent</div><div class="line">    260 delayed acks further delayed because of locked socket</div><div class="line">    Quick ack mode was activated 1051984 times</div><div class="line">    25934905 packets directly queued to recvmsg prequeue.</div><div class="line">    911172308 packets directly received from backlog</div><div class="line">    3173278514 packets directly received from prequeue</div><div class="line">    1186216864 packets header predicted</div><div class="line">    3170682 packets header predicted and directly queued to user</div><div class="line">    357381509 acknowledgments not containing data received</div><div class="line">    411743100 predicted acknowledgments</div><div class="line">    1093102 times recovered from packet loss due to SACK data</div><div class="line">    Detected reordering 12642 times using FACK</div><div class="line">    Detected reordering 14884 times using SACK</div><div class="line">    Detected reordering 11 times using time stamp</div><div class="line">    13885 congestion windows fully recovered</div><div class="line">    252 congestion windows partially recovered using Hoe heuristic</div><div class="line">    TCPDSACKUndo: 193430</div><div class="line">    51009 congestion windows recovered after partial ack</div><div class="line">    168112 TCP data loss events</div><div class="line">    TCPLostRetransmit: 14829</div><div class="line">    108524 timeouts after SACK recovery</div><div class="line">    4274 timeouts in loss state</div><div class="line">    2496500 fast retransmits</div><div class="line">    158451 forward retransmits</div><div class="line">    230933 retransmits in slow start</div><div class="line">    280735 other TCP timeouts</div><div class="line">    38730 sack retransmits failed</div><div class="line">    23520 packets collapsed in receive queue due to low socket buffer</div><div class="line">    1051963 DSACKs sent for old packets</div><div class="line">    20 DSACKs sent for out of order packets</div><div class="line">    365231 DSACKs received</div><div class="line">    692 DSACKs for out of order packets received</div><div class="line">    414 connections reset due to unexpected data</div><div class="line">    896 connections reset due to early user close</div><div class="line">    761 connections aborted due to timeout</div><div class="line">    TCPDSACKIgnoredOld: 509</div><div class="line">    TCPDSACKIgnoredNoUndo: 425</div><div class="line">    TCPSackShiftFallback: 22772083</div><div class="line">    TCPBacklogDrop: 2192</div><div class="line">    TCPChallengeACK: 125</div><div class="line">    TCPSYNChallenge: 125</div><div class="line">    TCPFromZeroWindowAdv: 85</div><div class="line">    TCPToZeroWindowAdv: 85</div><div class="line">    TCPWantZeroWindowAdv: 163030</div><div class="line">IpExt:</div><div class="line">    InBcastPkts: 1232</div><div class="line">    InOctets: 1540584137119</div><div class="line">    OutOctets: 1474239597014</div><div class="line">    InBcastOctets: 191368</div></pre></td></tr></table></figure>
<p>显示网络统计信息</p>
<ul>
<li>netstat -l</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State      </div><div class="line">tcp        0      0 *:tproxy                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-cli                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:us-srv                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-svcdisc           *:*                         LISTEN      </div><div class="line">tcp        0      0 *:intu-ec-client            *:*                         LISTEN      </div><div class="line">tcp        0      0 *:domain                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:oa-system                 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:ssh                       *:*                         LISTEN      </div><div class="line">tcp        0      0 *:8023                      *:*                         LISTEN      </div><div class="line">tcp        0      0 localhost:smtp              *:*                         LISTEN      </div><div class="line">tcp        0      0 *:12602                     *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:27162 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:30050                     *:*                         LISTEN      </div><div class="line">tcp        0      0 *:xmltec-xmlmail            *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:21988 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:eforward                  *:*                         LISTEN      </div><div class="line">tcp        0      0 *:svn                       *:*                         LISTEN      </div><div class="line">tcp        0      0 *:16010                     *:*                         LISTEN      </div><div class="line">tcp        0      0 *:6379                      *:*                         LISTEN      </div><div class="line">tcp        0      0 *:23212                     *:*                         LISTEN      </div><div class="line">tcp        0      0 hcdn-others-worker-de:28271 *:*                         LISTEN      </div><div class="line">tcp        0      0 *:sunrpc                    *:*                         LISTEN      </div><div class="line">tcp        0      0 *:http                      *:*                         LISTEN      </div><div class="line">udp        0      0 *:947                       *:*                                     </div><div class="line">udp        0      0 *:domain                    *:*                                     </div><div class="line">udp        0      0 *:983                       *:*                                     </div><div class="line">udp        0      0 *:sunrpc                    *:*                                     </div><div class="line">udp        0      0 *:ipp                       *:*                                     </div><div class="line">udp        0      0 hcdn-others-worker-dev10:ntp *:*                                     </div><div class="line">udp        0      0 localhost:ntp               *:*                                     </div><div class="line">udp        0      0 *:ntp                       *:*                                     </div><div class="line">udp        0      0 *:62630                     *:*                                     </div><div class="line">Active UNIX domain sockets (only servers)</div><div class="line">Proto RefCnt Flags       Type       State         I-Node Path</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     12688527 /var/run/abrt/abrt.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     288268830 /tmp/supervisor.sock.3241</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     7341   @/com/ubuntu/upstart</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17201  @/var/run/hald/dbus-vA2CSxY4CU</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17196  @/var/run/hald/dbus-5pcejJb6np</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     9429   /var/run/rpcbind.sock</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     9644   /var/run/cgred.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     16960  /var/run/dbus/system_bus_socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17142  /var/run/acpid.socket</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     17754  /var/run/mcelog-client</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18360  public/cleanup</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18367  private/tlsmgr</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18376  private/rewrite</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18384  private/bounce</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18388  private/defer</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18392  private/trace</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18397  private/verify</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18401  public/flush</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18405  private/proxymap</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18409  private/proxywrite</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18413  private/smtp</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18417  private/relay</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18421  public/showq</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18425  private/error</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18429  private/retry</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18433  private/discard</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18437  private/local</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18441  private/virtual</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18445  private/lmtp</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18449  private/anvil</div><div class="line">unix  2      [ ACC ]     STREAM     LISTENING     18453  private/scache</div></pre></td></tr></table></figure>
<p>显示监听的套接口</p>
<ul>
<li>netstat -ap | grep python3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcp        0      0 *:us-srv            *:*                         LISTEN      15484/python3   </div><div class="line">tcp        0      0 *:xmltec-xmlmail    *:*                         LISTEN      14886/python3</div></pre></td></tr></table></figure>
<p>显示程序运行的端口</p>
<p>然后利用<code>ps -ef | grep &#39;15484&#39;</code> 命令可查找该端口运行的程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      6262   946  0 15:45 pts/0    00:00:00 grep 15484</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div></pre></td></tr></table></figure>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html" target="_blank" rel="external">每天一个linux命令（56）：netstat命令</a> <a href="http://www.runoob.com/linux/linux-comm-netstat.html" target="_blank" rel="external">Linux netstat命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="netstat" scheme="http://runnerliu.github.io/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ping</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxping/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxping/</id>
    <published>2018-01-02T14:45:06.000Z</published>
    <updated>2018-01-02T14:46:20.146Z</updated>
    
    <content type="html"><![CDATA[<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping [参数] [主机名称或IP地址]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>ping命令用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p>
<p>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和（信息）包丢失情况的统计信息，并且在完成之后显示一个简要总结。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>使用Socket的SO_DEBUG功能</td>
</tr>
<tr>
<td>-c &lt;完成次数&gt;</td>
<td>设置完成要求回应的次数</td>
</tr>
<tr>
<td>-f</td>
<td>极限检测</td>
</tr>
<tr>
<td>-i &lt;间隔秒数&gt;</td>
<td>指定收发信息的间隔时间</td>
</tr>
<tr>
<td>-l &lt;网络界面&gt;</td>
<td>使用指定的网络界面送出数据包</td>
</tr>
<tr>
<td>-l &lt;前置载入&gt;</td>
<td>设置在送出要求信息之前，先行发出的数据包</td>
</tr>
<tr>
<td>-n</td>
<td>只输出数值</td>
</tr>
<tr>
<td>-p</td>
<td>设置填满数据包的范本样式</td>
</tr>
<tr>
<td>-q</td>
<td>不显示指令执行过程，开头和结尾的相关信息除外</td>
</tr>
<tr>
<td>-r</td>
<td>忽略普通的Routing Table，直接将数据包送到远端主机上</td>
</tr>
<tr>
<td>-R</td>
<td>记录路由过程</td>
</tr>
<tr>
<td>-s &lt;数据包大小&gt;</td>
<td>设置数据包的大小</td>
</tr>
<tr>
<td>-t &lt;存活时间&gt;</td>
<td>设置存活数值TTL的大小</td>
</tr>
<tr>
<td>-v</td>
<td>详细显示指令的执行过程</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ping 10.3.14.6</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.921 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.848 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.862 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.912 ms</div><div class="line">^C</div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">5 packets transmitted, 5 received, 0% packet loss, time 4990ms</div><div class="line">rtt min/avg/max/mdev = 0.848/0.909/1.004/0.061 ms</div><div class="line"></div><div class="line">需要手动Ctrl+c终止</div></pre></td></tr></table></figure>
<p>ping通主机</p>
<ul>
<li>ping 10.3.14.6</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.6 (10.3.14.6) 56(84) bytes of data.</div><div class="line">From 10.13.41.63 icmp_seq=1 Destination Host Unreachable</div><div class="line">From 10.13.41.634 icmp_seq=2 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=3 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=4 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=5 Destination Host Unreachable</div><div class="line">From 10.13.41.63 icmp_seq=6 Destination Host Unreachable</div><div class="line"></div><div class="line">--- 10.3.14.6 ping statistics ---</div><div class="line">8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms</div><div class="line">, pipe 4</div></pre></td></tr></table></figure>
<p>ping不通主机</p>
<ul>
<li>ping -c 10 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=0.914 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.525 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.09 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.01 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.956 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.11 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.870 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.891 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.922 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.02 ms</div><div class="line"></div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">10 packets transmitted, 10 received, 0% packet loss, time 9005ms</div><div class="line">rtt min/avg/max/mdev = 0.525/0.932/1.115/0.158 ms</div></pre></td></tr></table></figure>
<p>ping指定次数</p>
<ul>
<li>ping -c 10 -i 0.5 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 56(84) bytes of data.</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.00 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=0.889 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=0.893 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=0.865 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=0.893 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=0.868 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=0.881 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=0.885 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=0.605 ms</div><div class="line">64 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=0.569 ms</div><div class="line"></div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">10 packets transmitted, 10 received, 0% packet loss, time 4506ms</div><div class="line">rtt min/avg/max/mdev = 0.569/0.835/1.003/0.130 ms</div></pre></td></tr></table></figure>
<p>ping指定次数和时间间隔</p>
<ul>
<li>ping -c 5 www.zhihu.com</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PING 6ej19t5k0le6q937.alicloudlayer.com (47.95.51.100) 56(84) bytes of data.</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=1 ttl=45 time=3.08 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=2 ttl=45 time=3.02 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=3 ttl=45 time=3.01 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=4 ttl=45 time=3.05 ms</div><div class="line">64 bytes from 47.95.51.100: icmp_seq=5 ttl=45 time=3.03 ms</div><div class="line"></div><div class="line">--- 6ej19t5k0le6q937.alicloudlayer.com ping statistics ---</div><div class="line">5 packets transmitted, 5 received, 0% packet loss, time 4006ms</div><div class="line">rtt min/avg/max/mdev = 3.012/3.042/3.088/0.074 ms</div></pre></td></tr></table></figure>
<p>通过域名ping公网地址</p>
<ul>
<li>ping -i 3 -s 1024 -t 255 10.3.14.62</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">PING 10.3.14.62 (10.3.14.62) 1024(1052) bytes of data.</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=1 ttl=119 time=1.18 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=2 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=3 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=4 ttl=119 time=1.19 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=5 ttl=119 time=1.20 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=6 ttl=119 time=1.23 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=7 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=8 ttl=119 time=1.22 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=9 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=10 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=11 ttl=119 time=1.19 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=12 ttl=119 time=1.28 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=13 ttl=119 time=1.20 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=14 ttl=119 time=1.23 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=15 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=16 ttl=119 time=1.21 ms</div><div class="line">1032 bytes from 10.3.14.62: icmp_seq=17 ttl=119 time=1.18 ms</div><div class="line">^C</div><div class="line">--- 10.3.14.62 ping statistics ---</div><div class="line">17 packets transmitted, 17 received, 0% packet loss, time 48798ms</div><div class="line">rtt min/avg/max/mdev = 1.187/1.215/1.285/0.038 ms</div></pre></td></tr></table></figure>
<p>ping多参数使用</p>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html" target="_blank" rel="external">每天一个linux命令（54）：ping命令</a> <a href="http://www.runoob.com/linux/linux-comm-ping.html" target="_blank" rel="external">Linux ping命令</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ping" scheme="http://runnerliu.github.io/tags/ping/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令-ps</title>
    <link href="http://runnerliu.github.io/2018/01/02/linuxps/"/>
    <id>http://runnerliu.github.io/2018/01/02/linuxps/</id>
    <published>2018-01-02T14:38:35.000Z</published>
    <updated>2018-01-02T14:41:40.880Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p>
<p>要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，ps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p>
<h4 id="Linux上的进程状态"><a href="#Linux上的进程状态" class="headerlink" title="Linux上的进程状态"></a>Linux上的进程状态</h4><ul>
<li>运行（正在运行或在运行队列中等待）</li>
<li>中断（休眠中，受阻，在等待某个条件的形成或接受到信号）</li>
<li>不可中断（收到信号不唤醒和不可运行，进程必须等待直到有中断发生）</li>
<li>僵死（进程已终止，但进程描述符存在，直到父进程调用wait4()系统调用后释放）</li>
<li>停止（进程收到SIGSTOP、SIGSTP、SIGTIN、SIGTOU信号后停止运行运行）</li>
</ul>
<h4 id="ps命令标识进程状态码"><a href="#ps命令标识进程状态码" class="headerlink" title="ps命令标识进程状态码"></a>ps命令标识进程状态码</h4><ul>
<li>R: 运行</li>
<li>S: 中断</li>
<li>D: 不可中断</li>
<li>Z: 僵死</li>
<li>T: 停止</li>
</ul>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps [参数]</div></pre></td></tr></table></figure>
<h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>ps命令用来显示当前进程的状态。</p>
<h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>-a</td>
<td>显示同一终端下的所有程序</td>
</tr>
<tr>
<td>-A</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>c</td>
<td>显示进程的真实名称</td>
</tr>
<tr>
<td>-N</td>
<td>反向选择</td>
</tr>
<tr>
<td>-e</td>
<td>等于”-A”</td>
</tr>
<tr>
<td>e</td>
<td>显示环境变量</td>
</tr>
<tr>
<td>f</td>
<td>显示程序间的关系</td>
</tr>
<tr>
<td>-H</td>
<td>显示树状结构</td>
</tr>
<tr>
<td>r</td>
<td>显示当前终端的进程</td>
</tr>
<tr>
<td>T</td>
<td>显示当前终端的所有程序</td>
</tr>
<tr>
<td>u</td>
<td>指定用户的所有进程</td>
</tr>
<tr>
<td>-au</td>
<td>显示较详细的资讯</td>
</tr>
<tr>
<td>-aux</td>
<td>显示所有包含其他使用者的行程</td>
</tr>
<tr>
<td>-C &lt;命令&gt;d</td>
<td>列出指定命令的状况</td>
</tr>
<tr>
<td>–lines &lt;行数&gt;</td>
<td>每页显示的行数</td>
</tr>
<tr>
<td>–width &lt;字符数&gt;</td>
<td>每页显示的字符数</td>
</tr>
<tr>
<td>–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本显示</td>
</tr>
</tbody>
</table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul>
<li>ps -A</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PID TTY          TIME CMD</div><div class="line">    1 ?        00:00:16 init</div><div class="line">    2 ?        00:00:00 kthreadd</div><div class="line">    3 ?        00:00:21 migration/0</div><div class="line">    4 ?        00:00:36 ksoftirqd/0</div><div class="line">    5 ?        00:00:00 stopper/0</div><div class="line">    6 ?        00:00:08 watchdog/0</div><div class="line">    7 ?        00:00:21 migration/1</div><div class="line">    8 ?        00:00:00 stopper/1</div><div class="line">    9 ?        00:00:35 ksoftirqd/1</div><div class="line">   10 ?        00:00:07 watchdog/1</div><div class="line">   11 ?        00:00:21 migration/2</div><div class="line">   12 ?        00:00:00 stopper/2</div><div class="line">   13 ?        00:00:34 ksoftirqd/2</div></pre></td></tr></table></figure>
<p>显示所有进程</p>
<ul>
<li>ps -u root</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PID TTY          TIME CMD</div><div class="line">    1 ?        00:00:16 init</div><div class="line">    2 ?        00:00:00 kthreadd</div><div class="line">    3 ?        00:00:21 migration/0</div><div class="line">    4 ?        00:00:36 ksoftirqd/0</div><div class="line">    5 ?        00:00:00 stopper/0</div><div class="line">    6 ?        00:00:08 watchdog/0</div><div class="line">    7 ?        00:00:21 migration/1</div><div class="line">    8 ?        00:00:00 stopper/1</div><div class="line">    9 ?        00:00:35 ksoftirqd/1</div><div class="line">   10 ?        00:00:07 watchdog/1</div></pre></td></tr></table></figure>
<p>显示特定用户的进程信息</p>
<ul>
<li>ps -ef</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root     12426 10831  0 16:47 pts/0    00:00:00 ps -ef</div><div class="line">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     17080     1  0  2017 ?        00:00:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</div><div class="line">root     17094 17080  0  2017 ?        04:35:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/local/hbase-1.2.6/</div><div class="line">root     17890     1  0  2017 ?        00:05:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</div><div class="line">root     17973 18967  0  2017 ?        00:00:00 /sbin/udevd -d</div><div class="line">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</div></pre></td></tr></table></figure>
<p>显示所有进程信息（包括命令行）</p>
<ul>
<li>ps -ef | grep python</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root      3244     1  0  2017 ?        00:02:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root      3245  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root      3246  3244  0  2017 ?        00:00:01 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root      3247  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root      3248  3244  0  2017 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">root      8472     1  0  2017 ?        00:01:20 python3 monitor.py tasks/live_stream_length_task.py</div><div class="line">850      12515  9226  1 16:48 ?        00:00:00 /opt/cloud-agent/agent/plugin/env/bin/python plugin/python/sys/basic/60_ifstat.py</div><div class="line">root     12567 10831  0 16:48 pts/0    00:00:00 grep python</div><div class="line">root     14886     1  0  2017 ?        00:00:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484     1  0  2017 ?        00:00:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     18634     1  0  2017 ?        00:18:54 python27 /home/ly/datawritehbase/tasks/live_stream_ugcppcpgc/stream_list_old.py</div><div class="line">root     18635     1 99  2017 ?        28-05:56:25 python27 /home/ly/datawritehbase/tasks/multicdn_kafka_hbase/mcdn_main.py</div><div class="line">root     18636     1 99  2017 ?        28-20:46:31 python27 /home/ly/datawritehbase/tasks/nginx_kafka_hbase/nginx_main.py</div><div class="line">root     18638     1  3  2017 ?        20:43:58 python27 /home/ly/datawritehbase/tasks/stream_hbase/stream_main_old.py</div><div class="line">root     20253     1  0  2017 ?        00:01:00 python27 /home/ly/hbasequeryweb/app.py</div><div class="line">root     30087     1  1  2017 ?        11:27:44 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</div></pre></td></tr></table></figure>
<p>查找特定进程</p>
<ul>
<li>ps aux</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.0  19356  1544 ?        Ss    2017   0:16 /sbin/init</div><div class="line">root         2  0.0  0.0      0     0 ?        S     2017   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S     2017   0:21 [migration/0]</div><div class="line">root         4  0.0  0.0      0     0 ?        S     2017   0:36 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/0]</div><div class="line">root         6  0.0  0.0      0     0 ?        S     2017   0:08 [watchdog/0]</div><div class="line">root         7  0.0  0.0      0     0 ?        S     2017   0:21 [migration/1]</div><div class="line">root         8  0.0  0.0      0     0 ?        S     2017   0:00 [stopper/1]</div><div class="line">root         9  0.0  0.0      0     0 ?        S     2017   0:35 [ksoftirqd/1]</div><div class="line">root        10  0.0  0.0      0     0 ?        S     2017   0:07 [watchdog/1]</div><div class="line">root        11  0.0  0.0      0     0 ?        S     2017   0:21 [migration/2]</div><div class="line">......</div><div class="line">root      1392  0.0  0.0      0     0 ?        S     2017   1:29 [flush-252:0]</div><div class="line">root      3244  0.0  0.0 209168 14424 ?        Ss    2017   2:29 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root      3245  0.0  0.2 248368 37396 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root      3246  0.0  0.2 253408 42800 ?        S     2017   0:01 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root      3247  0.0  0.2 243556 32756 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root      3248  0.0  0.2 245124 34528 ?        S     2017   0:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">dbus      3857  0.0  0.0  21540  1364 ?        Ss    2017   0:00 dbus-daemon --system</div><div class="line">root      3886  0.0  0.0   4076   648 ?        Ss    2017   0:00 /usr/sbin/acpid</div><div class="line">68        3895  0.0  0.0  25068  3848 ?        Ss    2017   0:37 hald</div><div class="line">root      3896  0.0  0.0  18104  1132 ?        S     2017   0:00 hald-runner</div><div class="line">root      3924  0.0  0.0  20220  1080 ?        S     2017   0:00 hald-addon-input: Listening on /dev/input/event2 /dev/input/event0</div><div class="line">68        3934  0.0  0.0  17804  1036 ?        S     2017   0:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket</div><div class="line">root      3981  0.0  0.0   6244   292 ?        Ss    2017   0:00 /usr/sbin/mcelog --daemon</div><div class="line">root      4093  0.0  0.0  78728  3312 ?        Ss    2017   0:30 /usr/libexec/postfix/master</div><div class="line">postfix   4108  0.0  0.0  78980  3444 ?        S     2017   0:04 qmgr -l -t fifo -u</div><div class="line">root      4159  0.0  0.0  21452   476 ?        Ss    2017   0:00 /usr/sbin/atd</div><div class="line">......</div><div class="line">root     10826  0.0  0.0 101072  4024 ?        Ss   16:30   0:00 sshd: root@pts/0 </div><div class="line">root     10831  0.0  0.0 109096  2556 pts/0    Ss   16:30   0:00 -bash</div><div class="line">root     12865  0.0  0.0 110240  1136 pts/0    R+   16:51   0:00 ps aux</div><div class="line">root     14886  0.0  0.2 533372 40212 ?        Sl    2017   0:01 python3 /home/ly/prepullvidcs/app.py</div><div class="line">root     15484  0.0  0.1 233608 30092 ?        S     2017   0:01 python3 /home/ly/atsbtsp/app.py</div><div class="line">root     17080  0.0  0.0 106100  1380 ?        S     2017   0:00 bash /usr/local/hbase-1.2.6/bin/hbase-daemon.sh --config /usr/local/hbase-1.2.6/bin/../conf foreground_start master</div><div class="line">root     17094  0.1  9.1 6203172 1486980 ?     Sl    2017 275:00 /usr/lib/java-1.8/jdk1.8.0_144/bin/java -Dproc_master -XX:OnOutOfMemoryError=kill -9 %p -XX:+UseConcMarkSweepGC -XX:PermSize=128m -XX:MaxPermSize=128m -Dhbase.log.dir=/usr/l</div><div class="line">root     17890  0.0  0.0 587052 10368 ?        Sl    2017   5:22 /usr/local/zabbix/share/zabbix/externalscripts/zabbix-agentd-updater</div><div class="line">root     17973  0.0  0.0  11540   676 ?        S&lt;    2017   0:00 /sbin/udevd -d</div><div class="line">......</div><div class="line">root     25290  0.0  0.0 175824  1008 ?        Ss    2017   0:00 svnserve -dr /var/svndata/</div><div class="line">root     25793  0.0  0.0  76792  1384 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops </div><div class="line">root     25794  0.0  0.0  76792  1472 ?        S    03:28   0:07 /usr/local/zabbix/sbin/zabbix_agentd_ops: collector [idle 1 sec]</div><div class="line">root     25795  0.0  0.0  76792  1040 ?        S    03:28   0:00 /usr/local/zabbix/sbin/zabbix_agentd_ops: listener #1 [waiting for connection]</div><div class="line">root     25796  0.0  0.0  78984  2008 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #1 [idle 1 sec]</div><div class="line">root     25797  0.0  0.0  78984  1996 ?        S    03:28   0:06 /usr/local/zabbix/sbin/zabbix_agentd_ops: active checks #2 [idle 1 sec]</div><div class="line">root     26648  0.0  0.0 125472  7688 ?        Ssl   2017   5:33 ./redis-server *:6379      </div><div class="line">root     30087  1.7  0.6 7316724 106248 ?      Sl    2017 687:47 python27 /home/ly/datawritehbase/tasks/rtmp_kafka_hbase/rtmp_main.py</div></pre></td></tr></table></figure>
<p>列出目前所有正在内存中的进程</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>进程所属账号</td>
</tr>
<tr>
<td>PID</td>
<td>进程id号</td>
</tr>
<tr>
<td>%CPU</td>
<td>进程所占CPU资源百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程所占物理内存百分比</td>
</tr>
<tr>
<td>VSZ</td>
<td>进程所占虚拟内存大小</td>
</tr>
<tr>
<td>RSS</td>
<td>进程所占固定内存大小</td>
</tr>
<tr>
<td>TTY</td>
<td>进程在哪个终端机上运行。若与终端机无关，则显示 ？；tty1-tty6 是本机上面的登入者程序；若为 pts/0 等等的，则表示为由网络连接进主机的程序</td>
</tr>
<tr>
<td>STAT</td>
<td>进程当前状态</td>
</tr>
<tr>
<td>START</td>
<td>进程被触发启动的时间</td>
</tr>
<tr>
<td>TIME</td>
<td>进程实际使用CPU的时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程的启动指令</td>
</tr>
</tbody>
</table>
<ul>
<li>ps aux | egrep ‘(cron|syslog)’</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root      9278  0.0  0.0 117256  1276 ?        Ss   11:10   0:00 crond</div><div class="line">root     13816  0.0  0.0 101016   844 pts/0    S+   17:00   0:00 egrep (cron|syslog)</div><div class="line">root     22016  0.0  0.0 159736  5856 ?        Sl    2017   2:06 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5</div></pre></td></tr></table></figure>
<p>显示与 cron、syslog服务有关进程的PID号</p>
<ul>
<li>ps -aux | more : 分页查看</li>
<li>ps -aux &gt; ps001.txt : 输出到文件中</li>
<li>ps -o pid,ppid,pgrp,session,tpgid,comm : 输出指定字段</li>
</ul>
<p>Read More：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html" target="_blank" rel="external">每天一个linux命令（41）：ps命令</a> <a href="http://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="external">Linux ps命令</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux中的ps命令是Process Status的缩写。用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。&lt;/p&gt;
&lt;p&gt;要对进程进行监测和控制，首先必须要了解当
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="命令" scheme="http://runnerliu.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="ps" scheme="http://runnerliu.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 添加右键菜单</title>
    <link href="http://runnerliu.github.io/2017/10/11/sublimetext3rightclick/"/>
    <id>http://runnerliu.github.io/2017/10/11/sublimetext3rightclick/</id>
    <published>2017-10-11T11:38:35.000Z</published>
    <updated>2017-10-11T11:48:46.438Z</updated>
    
    <content type="html"><![CDATA[<p>每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。</p>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Version]</div><div class="line">Signature=&quot;$Windows NT$&quot;</div><div class="line"></div><div class="line">[DefaultInstall]</div><div class="line">AddReg=SublimeText3</div><div class="line"></div><div class="line">[SublimeText3]</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</div><div class="line">hkcr,&quot;Directory\shell\SublimeText3&quot;,,,&quot;Edit with Sublime Text 3&quot;</div><div class="line">hkcr,&quot;*\\shell\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\sublime_text.exe, 0&quot;</div><div class="line">hkcr,&quot;Directory\shell\SublimeText3\command&quot;,,,&quot;&quot;&quot;%1%\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.inf，注意文件编码方式为ANSI，右击安装就可以了。</p>
<blockquote>
<p>重命名文件之前，需要先在 工具-&gt;文件夹选项-&gt;查看，把隐藏已知文件类型的扩展名前边的复选框不勾选。</p>
</blockquote>
<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[HKEY_CLASSES_ROOT\*\shell\SublimeText3]</div><div class="line">@=&quot;Edit with Sublime Text 3&quot;</div><div class="line">&quot;Icon&quot;=&quot;D:\\Sublime Text 3\\sublime_text.exe,0&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\*\shell\SublimeText3\command]</div><div class="line">@=&quot;D:\\Sublime Text 3\\sublime_text.exe %1&quot;</div><div class="line"></div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\shell\SublimeText3]</div><div class="line">@=&quot;Edit with Sublime Text 3&quot;</div><div class="line">&quot;Icon&quot;=&quot;D:\\Sublime Text 3\\sublime_text.exe,0&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\shell\SublimeText3\command]</div><div class="line">@=&quot;D:\\Sublime Text 3\\sublime_text.exe %1&quot;</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_addright.reg，注意文件编码方式为ANSI，然后双击就可以了。</p>
<blockquote>
<p>需要把里边的 Sublime 的安装目录，替换成实际的 Sublime 安装目录。</p>
</blockquote>
<p>删除右键菜单脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line">[-HKEY_CLASSES_ROOT\*\shell\SublimeText3]</div><div class="line">[-HKEY_CLASSES_ROOT\Directory\shell\SublimeText3]</div></pre></td></tr></table></figure>
<p>把以上代码，复制到 Sublime Text 3 的安装目录，然后重命名为：sublime_delright.reg，文件编码方式依然为ANSI，然后双击就可以了。</p>
<p>Read More：</p>
<blockquote>
<p><a href="https://my.oschina.net/adairs/blog/466777" target="_blank" rel="external">将Sublime Text3添加到右键菜单中</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次安装 Sublime Text 3 后邮件菜单总是没有，但是 notepad++ 安装后会自动加到邮件菜单，对于 Sublime Text 3 的忠实粉丝来说简直丧心病狂，所以搜罗了一些方法来完成这件事儿。&lt;/p&gt;
&lt;h4 id=&quot;方式1&quot;&gt;&lt;a href=&quot;#方式1&quot;
    
    </summary>
    
      <category term="辅助研发杂记" scheme="http://runnerliu.github.io/categories/%E8%BE%85%E5%8A%A9%E7%A0%94%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Sublime Text 3" scheme="http://runnerliu.github.io/tags/Sublime-Text-3/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令的简单使用</title>
    <link href="http://runnerliu.github.io/2017/10/09/gitcommand/"/>
    <id>http://runnerliu.github.io/2017/10/09/gitcommand/</id>
    <published>2017-10-09T12:39:43.000Z</published>
    <updated>2017-10-09T13:25:00.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code> 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要提交的文件的信息添加到索引库中。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>将要提交的文件的信息添加到索引库中（将修改添加到暂存区），以准备为下一次提交分段的内容。 它通常将现有路径的当前内容作为一个整体添加，但是通过一些选项，它也可以用于添加内容，只对所应用的工作树文件进行一些更改，或删除工作树中不存在的路径了。</p>
<p>该命令可以在提交之前多次执行。它只在运行 <code>git add</code> 命令时添加指定文件的内容; 如果希望随后的更改包含在下一个提交中，那么必须再次运行 <code>git add</code> 将新的内容添加到索引。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add .             # 将所有修改添加到暂存区</div><div class="line">git add *             # Ant风格添加修改</div><div class="line">git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区</div><div class="line">git add Hello*        # 将所有以Hello开头的文件的修改添加到暂存区</div><div class="line">git add Hello?        # 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java</div></pre></td></tr></table></figure>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit</code> 命令用于将更改记录提交到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>
<h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p><code>git commit</code> 命令将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>
<p>要添加的内容可以通过以下几种方式指定：</p>
<ol>
<li>在使用 <code>git commit</code> 命令之前，通过使用 <code>git add</code> 对索引进行递增的“添加”更改（注意：修改后的文件的状态必须为<code>added</code>）；</li>
<li>通过使用 <code>git rm</code> 从工作树和索引中删除文件，再次使用 <code>git commit</code> 命令;</li>
<li>通过将文件作为参数列出到 <code>git commit</code> 命令（不使用 <code>--interactive</code> 或 <code>--patch</code> 选项），在这种情况下，提交将忽略索引中分段的更改，而是记录列出的文件的当前内容（必须已知到Git的内容）；</li>
<li>通过使用带有 <code>-a</code> 选项的 <code>git commit</code> 命令来自动从所有已知文件（即所有已经在索引中列出的文件）中添加“更改”，并自动从已从工作树中删除索引中的 <code>rm</code> 文件 ，然后执行实际提交；</li>
<li>通过使用 <code>--interactive</code> 或 <code>--patch</code> 选项与 <code>git commit</code> 命令一起确定除了索引中的内容之外哪些文件应该是提交的一部分，然后才能完成操作。</li>
</ol>
<p>如果提交后立即发现错误，可以使用 <code>git reset</code> 命令恢复。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;the commit message&quot; # git add 存储到暂存区之后将内容提交</div></pre></td></tr></table></figure>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><code>git push</code> 命令用于将本地分支的更新，推送到远程主机。</p>
<h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>使用本地引用更新远程引用，同时发送完成给定引用所需的对象。可以在每次推入存储库时，通过在那里设置挂钩触发一些事件。当命令行不指定使用 <code>&lt;repository&gt;</code> 参数推送的位置时，将查询当前分支的 <code>branch.*.remote</code> 配置以确定要在哪里推送。 如果配置丢失，则默认为<code>origin</code>。</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git push origin master # 将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。</div><div class="line">git push origin # 将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。</div><div class="line">git push -u origin master # 将本地的master分支推送到origin主机，同时指定origin为默认主机。</div><div class="line">git push --all origin # 将所有本地分支都推送到origin主机。</div></pre></td></tr></table></figure>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><code>git clone</code> 命令将存储库克隆到新目录中。</p>
<h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>将存储库克隆到新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支，并从克隆检出的存储库作为当前活动分支的初始分支。</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone &lt;版本库的网址&gt;</div><div class="line">如：git clone http://github.com/jquery/jquery.git</div></pre></td></tr></table></figure>
<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</div></pre></td></tr></table></figure>
<p>该命令可指定不同的目录名。</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p><code>git fetch</code> 命令用于从另一个存储库下载对象和引用。</p>
<h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>从一个或多个其他存储库中获取分支或标签以及完成其历史所必需的对象。远程跟踪分支已更新，需要将这些更新取回本地，这时就要用到<code>git fetch</code> 命令。</p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>更新远程代码到本地仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">方式一：</div><div class="line">1. 查看远程仓库：git remote -v</div><div class="line">2. 从远程origin仓库的master分支获取最新版本到本地：git fetch origin master</div><div class="line">3. 比较本地仓库和远程仓库的区别：git log -p master.. origin/master</div><div class="line">4. 远程仓库和本地仓库的合并：git merge origin/master</div><div class="line"></div><div class="line">方式二：</div><div class="line">1. 查看远程仓库：git remote -v</div><div class="line">2. 从远程的origin仓库的master分支下载到本地并新建一个分支temp：git fetch origin master:temp</div><div class="line">3. 比较本地仓库和远程仓库的区别：git diff temp</div><div class="line">4. 合并temp分支到master分支：git merge temp</div><div class="line">5. 删除temp分支：git branch -d temp</div><div class="line">注意：如果该分支没有合并到主分支会报错，可以用以下命令强制删除 git branch -D &lt;分支名&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-add&quot;&gt;&lt;a href=&quot;#git-add&quot; class=&quot;headerlink&quot; title=&quot;git add&quot;&gt;&lt;/a&gt;git add&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; 命令将文件内容添加到索引（将修改添加到暂存区）。也就是将要
    
    </summary>
    
      <category term="Git" scheme="http://runnerliu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://runnerliu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>项目部署Nginx+Tornado+Supervisor</title>
    <link href="http://runnerliu.github.io/2017/09/03/nginxtornadosupervisor/"/>
    <id>http://runnerliu.github.io/2017/09/03/nginxtornadosupervisor/</id>
    <published>2017-09-03T08:21:00.000Z</published>
    <updated>2017-09-03T08:32:31.162Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 同时也可以用作负载平衡器，以减小单点服务器的压力。</p>
<p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 是一个进程管理工具，我们可以使用它管理多个 Tornado 实例，非常方便。</p>
<p>总的思路是：Nginx 通过唯一监听端口接收大量请求，然后将请求分发到不同的 Tornado 实例上，Supervisor 将多个 Tornado 实例进程统一管理。</p>
<h4 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h4><p>Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 <a href="http://kaimingwan.com/post/linux/epollshi-xian-yuan-li-qian-xi" target="_blank" rel="external">epoll</a> 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。Tornado 由于内置了支持 epoll/kqueue 等高效网络库，而具备了处理高并发的能力。</p>
<p>程序入口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import os.path</div><div class="line"></div><div class="line">import tornado.escape</div><div class="line">import tornado.ioloop</div><div class="line">import tornado.web</div><div class="line">from tornado.httpserver import HTTPServer</div><div class="line">from tornado.options import define, options</div><div class="line"></div><div class="line">from handlers import stream_handler</div><div class="line"></div><div class="line">define(&quot;port&quot;, default=8888, help=&quot;run on the given port&quot;, type=int)</div><div class="line">define(&quot;debug&quot;, default=False, help=&quot;run in debug mode&quot;)</div><div class="line"></div><div class="line"></div><div class="line">class Application(tornado.web.Application):</div><div class="line">    def __init__(self):</div><div class="line">        handlers = [</div><div class="line">            # (r&quot;/&quot;, main_handler.MainHandler),</div><div class="line">            (r&quot;/stream.*?&quot;, stream_handler.StreamHandler),</div><div class="line">        ]</div><div class="line">        settings = dict(</div><div class="line">            template_path=os.path.join(os.path.dirname(__file__), &quot;templates&quot;),</div><div class="line">            static_path=os.path.join(os.path.dirname(__file__), &quot;static&quot;),</div><div class="line">            debug=options.debug,</div><div class="line">        )</div><div class="line">        super(Application, self).__init__(handlers, **settings)</div><div class="line"></div><div class="line">    pass</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    tornado.options.parse_command_line()</div><div class="line">    http_server = HTTPServer(Application())</div><div class="line">    http_server.listen(options.port)</div><div class="line">    tornado.ioloop.IOLoop.instance().start()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>执行以下命令运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python27 app.py --port=8081</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 Python 解释器，<code>python27</code> 是我为 Python 2.7.13 创建的软连接。</p>
<p>以下一行代码必须有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tornado.options.parse_command_line()</div></pre></td></tr></table></figure>
<p>因为我们运行程序脚本时，需要指定不同的端口，这是在执行 Tornado 的解析命令行。</p>
<h4 id="Supervisor-管理-Tornado-进程"><a href="#Supervisor-管理-Tornado-进程" class="headerlink" title="Supervisor 管理 Tornado 进程"></a>Supervisor 管理 Tornado 进程</h4><p>Supervisor 的安装可以在官方文章中找到，可使用 <code>yum pip easy_insatll</code> 等方法。最简单的就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip27 install supervisor</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 因为我的机器上安装了不同版本的 pip 包，<code>pip27</code> 是我为 Python 2.7.13 使用的。</p>
<p>创建文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/supervisor</div></pre></td></tr></table></figure>
<p>创建配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
<p>修改 <code>/etc/supervisor/supervisord.conf</code> 文件内容，在文件结尾 <code>[include]</code> 节点处</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">; [include]</div><div class="line">; files = relative/directory/*.ini</div><div class="line"></div><div class="line">=&gt;</div><div class="line"></div><div class="line">[include]</div><div class="line">files = conf.d/*.conf</div></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>在 <code>/etc/supervisor/</code> 下创建 <code>conf.d</code> 文件夹，及 <code>ProjectName.conf</code> (以项目名称命名的，例如：tornados.conf)</p>
<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi tornados.conf</div></pre></td></tr></table></figure>
<p>添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">[group:tornados]</div><div class="line">programs=tornado-0,tornado-1,tornado-2,tornado-3,tornado-4,tornado-5,tornado-6,tornado-7</div><div class="line"></div><div class="line">[program:tornado-0]</div><div class="line"># 执行的命令</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line"># 项目目录</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line"># 用户</div><div class="line">user=root</div><div class="line"># 自动重启</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line"># log文件路径</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado0.log</div><div class="line"># log级别</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-1]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado1.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-2]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado2.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-3]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado3.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-4]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8024</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado4.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-5]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8025</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado5.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-6]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8026</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado6.log</div><div class="line">loglevel=info</div><div class="line"></div><div class="line">[program:tornado-7]</div><div class="line">command=python27 /home/ly/analysisweb/app.py --port=8027</div><div class="line">directory=/home/ly/analysisweb/</div><div class="line">user=root</div><div class="line">autorestart=true</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile=/home/ly/analysisweb/log/supervisor/tornado7.log</div><div class="line">loglevel=info</div></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>执行以下命令启动 Supervisor ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisord -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>坑1：出现错误 Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord –h</p>
<p>解决办法：是因为有一个使用 supervisor 配置的应用程序正在运行。执行 <code>ps -ef | grep supervisor</code> 查看进程，杀掉 supervisor 的所有进程，重新运行 <a href="https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that" target="_blank" rel="external">参考这里</a> </p>
<p>坑2：出现错误 Unlinking stale socket /tmp/supervisor.sock </p>
<p>解决办法：执行 <code>unlink /tmp/supervisor.sock</code> <a href="https://stackoverflow.com/questions/14479894/stopping-supervisord-shut-down" target="_blank" rel="external">参考这里</a> </p>
</blockquote>
<p>如果执行成功，<code>ps -ef | grep python</code> 结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root     21314     1  0 15:22 ?        00:00:00 /usr/bin/python27 /usr/local/python2.7/bin/supervisord -c /etc/supervisor/supervisord.conf</div><div class="line">root     21315 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8021</div><div class="line">root     21316 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8020</div><div class="line">root     21317 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8023</div><div class="line">root     21318 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8022</div><div class="line">root     21319 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8025</div><div class="line">root     21320 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8024</div><div class="line">root     21321 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8027</div><div class="line">root     21322 21314  0 15:22 ?        00:00:00 python27 /home/ly/analysisweb/app.py --port=8026</div></pre></td></tr></table></figure>
<h4 id="Nginx-作反向代理"><a href="#Nginx-作反向代理" class="headerlink" title="Nginx 作反向代理"></a>Nginx 作反向代理</h4><p><img src="/images/2017-9-1 161933.jpg" alt="2017-9-1 161933"></p>
<p>安装好 Nginx 后，编辑 nginx.conf 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    # 我启动了8个Tornado实例，配置不同端口</div><div class="line">    upstream tornados &#123;</div><div class="line">        server 127.0.0.1:8020;</div><div class="line">        server 127.0.0.1:8021;</div><div class="line">        server 127.0.0.1:8022;</div><div class="line">        server 127.0.0.1:8023;</div><div class="line">        server 127.0.0.1:8024;</div><div class="line">        server 127.0.0.1:8025;</div><div class="line">        server 127.0.0.1:8026;</div><div class="line">        server 127.0.0.1:8027;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    proxy_next_upstream error;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        # nginx 监听8081端口</div><div class="line">        listen       8081;</div><div class="line">		</div><div class="line">		# 静态文件的路径</div><div class="line">        location /static/&#123;</div><div class="line">            alias /home/ly/analysisweb/static/;</div><div class="line">            expires 24h;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass_header Server;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">            proxy_redirect off;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_pass http://tornados;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可参考 <a href="http://tornado-zh.readthedocs.io/zh/latest/guide/running.html" target="_blank" rel="external">运行和部署</a> </p>
<p>以上，就完成了Nginx+Tornado+Supervisor 的项目部署，分别启动 nginx、supervisord ，就可以达到不错的负载均衡效果（我的项目中没有访问静态资源的情景，所以主要还是作负载均衡用）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中应用到了 Tornado 框架，开始时只是单进程裸跑 Tornado 实例，但是在高并发的情况下，单进程无法满足上千的连接请求。Nginx 是我们熟知的反向代理服务器，它可以支持上万的平行连接，在与 PHP、Python 集成后可以应用在大规模的集群上，Nginx 
    
    </summary>
    
      <category term="工程" scheme="http://runnerliu.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="Nginx" scheme="http://runnerliu.github.io/tags/Nginx/"/>
    
      <category term="Tornado" scheme="http://runnerliu.github.io/tags/Tornado/"/>
    
      <category term="Supervisor" scheme="http://runnerliu.github.io/tags/Supervisor/"/>
    
      <category term="项目部署" scheme="http://runnerliu.github.io/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 开机启动</title>
    <link href="http://runnerliu.github.io/2017/09/03/nginxstartpoweron/"/>
    <id>http://runnerliu.github.io/2017/09/03/nginxstartpoweron/</id>
    <published>2017-09-03T08:18:37.000Z</published>
    <updated>2017-09-03T08:20:37.579Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。</p>
<p>首先，在 Linux 系统的 <code>/etc/init.d/</code> 目录下创建 nginx 文件，使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>在脚本中添加如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># nginx Startup script for the Nginx HTTP Server</div><div class="line"># it is v.0.0.2 version.</div><div class="line"># chkconfig: - 85 15</div><div class="line"># description: Nginx is a high-performance web and proxy server.</div><div class="line">#              It has a lot of features, but it&apos;s not for everyone.</div><div class="line"># processname: nginx</div><div class="line"># pidfile: /var/run/nginx.pid</div><div class="line"># config: /usr/local/nginx/conf/nginx.conf</div><div class="line"># 启动 nginx 需要执行的命令</div><div class="line">nginxd=/usr/local/nginx/sbin/nginx</div><div class="line"># nginx 的配置文件路径</div><div class="line">nginx_config=/usr/local/nginx/conf/nginx.conf</div><div class="line">nginx_pid=/var/run/nginx.pid</div><div class="line">RETVAL=0</div><div class="line">prog=&quot;nginx&quot;</div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"># Source networking configuration.</div><div class="line">. /etc/sysconfig/network</div><div class="line"># Check that networking is up.</div><div class="line">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</div><div class="line">[ -x $nginxd ] || exit 0</div><div class="line"># Start nginx daemons functions.</div><div class="line">start() &#123;</div><div class="line">if [ -e $nginx_pid ];then</div><div class="line">   echo &quot;nginx already running....&quot;</div><div class="line">   exit 1</div><div class="line">fi</div><div class="line">   echo -n $&quot;Starting $prog: &quot;</div><div class="line">   daemon $nginxd -c $&#123;nginx_config&#125;</div><div class="line">   RETVAL=$?</div><div class="line">   echo</div><div class="line">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</div><div class="line">   return $RETVAL</div><div class="line">&#125;</div><div class="line"># Stop nginx daemons functions.</div><div class="line">stop() &#123;</div><div class="line">        echo -n $&quot;Stopping $prog: &quot;</div><div class="line">        killproc $nginxd</div><div class="line">        RETVAL=$?</div><div class="line">        echo</div><div class="line">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</div><div class="line">&#125;</div><div class="line"># reload nginx service functions.</div><div class="line">reload() &#123;</div><div class="line">    echo -n $&quot;Reloading $prog: &quot;</div><div class="line">    #kill -HUP `cat $&#123;nginx_pid&#125;`</div><div class="line">    killproc $nginxd -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    echo</div><div class="line">&#125;</div><div class="line"># See how we were called.</div><div class="line">case &quot;$1&quot; in</div><div class="line">start)</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">stop)</div><div class="line">        stop</div><div class="line">        ;;</div><div class="line">reload)</div><div class="line">        reload</div><div class="line">        ;;</div><div class="line">restart)</div><div class="line">        stop</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">status)</div><div class="line">        status $prog</div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">*)</div><div class="line">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</div><div class="line">        exit 1</div><div class="line">esac</div><div class="line">exit $RETVAL</div></pre></td></tr></table></figure>
<p>以下是根据 nginx 具体安装路径填写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 启动 nginx 需要执行的命令</div><div class="line">nginxd=/usr/local/nginx/sbin/nginx</div><div class="line"># nginx 的配置文件路径</div><div class="line">nginx_config=/usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>保存脚本文件后设置文件的执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>然后，就可以通过该脚本对 nginx 服务进行管理了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div><div class="line">/etc/init.d/nginx stop</div></pre></td></tr></table></figure>
<p>上面的方法完成了用脚本管理 nginx 服务的功能，但是还是不太方便，比如要设置 nginx 开机启动等。这时可以使用 chkconfig 来设置。</p>
<blockquote>
<p>chkconfig 命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记 chkconfig 不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>
</blockquote>
<p>先将 nginx 服务加入 chkconfig 管理列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add /etc/init.d/nginx</div></pre></td></tr></table></figure>
<p>加完这个之后，就可以使用 service 对 nginx 进行启动，重启等操作了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line">service nginx stop</div></pre></td></tr></table></figure>
<p>设置终端模式开机启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 是一个很强大的高性能 Web 和反向代理服务器。虽然使用命令行可以对 nginx 进行各种操作，比如启动等，但是还是根据不太方便。下面介绍在 Linux 下安装后，如何设置开机自启动。&lt;/p&gt;
&lt;p&gt;首先，在 Linux 系统的 &lt;code&gt;/etc/init.
    
    </summary>
    
      <category term="Nginx" scheme="http://runnerliu.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://runnerliu.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>数据库事物及其隔离级别</title>
    <link href="http://runnerliu.github.io/2017/08/28/mysqltransaction/"/>
    <id>http://runnerliu.github.io/2017/08/28/mysqltransaction/</id>
    <published>2017-08-28T11:52:05.000Z</published>
    <updated>2017-08-28T12:05:56.719Z</updated>
    
    <content type="html"><![CDATA[<p>学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了事务的四中隔离级别。</p>
<h3 id="事务-ACID-特性"><a href="#事务-ACID-特性" class="headerlink" title="事务 ACID 特性"></a>事务 ACID 特性</h3><h4 id="原子性：Atomicity"><a href="#原子性：Atomicity" class="headerlink" title="原子性：Atomicity"></a>原子性：Atomicity</h4><p>事务必须是原子工作单元；对于其执行的数据修改操作，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p>
<h4 id="一致性：Consistency"><a href="#一致性：Consistency" class="headerlink" title="一致性：Consistency"></a>一致性：Consistency</h4><p>事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>
<h4 id="隔离性：Isolation"><a href="#隔离性：Isolation" class="headerlink" title="隔离性：Isolation"></a>隔离性：Isolation</h4><p>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为隔离性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。</p>
<p>即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>
<h4 id="持久性：Durability"><a href="#持久性：Durability" class="headerlink" title="持久性：Durability"></a>持久性：Durability</h4><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p>
<p>例如我们在操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>
<p>以上介绍完事务的 ACID 特性，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>
<h3 id="并发事务的问题"><a href="#并发事务的问题" class="headerlink" title="并发事务的问题"></a>并发事务的问题</h3><h4 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h4><p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。</p>
<p>例如，两个编辑人员制作了同一文档的电子复本。每个编辑人员独立地更改其复本，然后保存更改后的复本，这样就覆盖了原始文档。最后保存其更改复本的编辑人员覆盖了第一个编辑人员所做的更改。如果在第一个编辑人员完成之后第二个编辑人员才能进行更改，则可以避免该问题。</p>
<h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>读“脏”数据是指事务 T1 修改某一数据，并将其写回磁盘，事务 T2 读取同一数据后，T1 由于某种原因被除撤消，而此时T1 把已修改过的数据又恢复原值，T2 读到的数据与数据库的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。简单来说就是，事务 T2 读取了事务 T1 还未提交的更新。</p>
<p>例如：一个编辑人员正在更改电子文档。在更改过程中，另一个编辑人员复制了该文档（该复本包含到目前为止所做的全部更改）并将其分发给预期的用户。此后，第一个编辑人员认为所做的更改是错误的，于是删除了所做的编辑并保存了文档。分发给用户的文档包含不再存在的编辑内容，并且这些编辑内容应认为从未存在过。如果在第一个编辑人员确定最终更改前任何人都不能读取更改的文档，则可以避免该问题。</p>
<h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法读取前一次结果。</p>
<h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>按一定条件从数据库中读取了某些记录后，T2 删除了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录消失；T1 按一定条件从数据库中读取某些数据记录后，T2 插入了一些记录，当 T1 再次按相同条件读取数据时，发现多了一些记录。</p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><h4 id="读取未提交内容：Read-Uncommitted"><a href="#读取未提交内容：Read-Uncommitted" class="headerlink" title="读取未提交内容：Read Uncommitted"></a>读取未提交内容：Read Uncommitted</h4><ul>
<li>所有事务都可以看到其他未提交事务的执行结果</li>
<li>一个事物更新的时候不允许另一更新，但允许另一事务读取，不会出现丢失更新</li>
<li>该级别引发的问题是 - 脏读：读取到了未提交的数据</li>
</ul>
<p>该隔离级别可以通过“排他写锁”实现。</p>
<h4 id="读取提交内容：Read-Committed"><a href="#读取提交内容：Read-Committed" class="headerlink" title="读取提交内容：Read Committed"></a>读取提交内容：Read Committed</h4><ul>
<li>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）</li>
<li>一个事物更新的时候不允许读取，必须等到更新事物提交后才能读取</li>
<li>这种隔离级别出现的问题是 - 不可重复读：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。导致这种情况的原因可能有：<ul>
<li>有一个交叉的事务有新的commit，导致了数据的改变</li>
<li>一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit</li>
</ul>
</li>
</ul>
<h4 id="可重复读：Repeatable-Read"><a href="#可重复读：Repeatable-Read" class="headerlink" title="可重复读：Repeatable Read"></a>可重复读：Repeatable Read</h4><ul>
<li>这是 MySQL 的默认事务隔离级别</li>
<li>一个事物读取时，不允许更新，但允许插入</li>
<li>此级别可能出现的问题 - 幻读：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行</li>
<li>InnoDB 和 Falcon 存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题</li>
</ul>
<h4 id="序列化：Serializable"><a href="#序列化：Serializable" class="headerlink" title="序列化：Serializable"></a>序列化：Serializable</h4><ul>
<li>这是最高的隔离级别</li>
<li>它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁</li>
<li>在这个级别，可能导致大量的超时现象和锁竞争</li>
</ul>
<blockquote>
<p>Read More：</p>
<p><a href="https://www.oschina.net/question/258230_134502" target="_blank" rel="external">数据库事物隔离级别通俗理解</a></p>
<p><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607?fr=aladdin" target="_blank" rel="external">数据库事务</a></p>
<p><a href="https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/2638091?fr=aladdin" target="_blank" rel="external">事务隔离级别</a></p>
<p><a href="http://blog.csdn.net/u012712087/article/details/46402433" target="_blank" rel="external">更改MySQL的默认事务隔离级别</a></p>
<p><a href="http://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="external">数据库事务的四大特性以及事务的隔离级别</a></p>
<p><a href="http://www.cnblogs.com/snsdzjlz320/p/5761387.html" target="_blank" rel="external">[MySQL]–通过例子理解事务的4中隔离级别</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习 MySQL 、SQL Server 或者 Oracle 这些关系型数据库的时候，必须了解的概念之一就是事务，在各种大中小型项目中，事务的使用非常频繁和广泛。本文简单介绍 MySQL 中事务的四大特性，以及在不考虑事务隔离时，对数据的不同操作会产生的一些影响，同时介绍了
    
    </summary>
    
      <category term="数据库" scheme="http://runnerliu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://runnerliu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事物" scheme="http://runnerliu.github.io/tags/%E4%BA%8B%E7%89%A9/"/>
    
      <category term="事物隔离" scheme="http://runnerliu.github.io/tags/%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://runnerliu.github.io/2017/08/27/singleinstancepython/"/>
    <id>http://runnerliu.github.io/2017/08/27/singleinstancepython/</id>
    <published>2017-08-27T04:43:23.000Z</published>
    <updated>2017-08-28T12:27:58.051Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>特点：</p>
<ul>
<li>单例类只能有一个实例；</li>
<li>单例类必须自己创建自己的唯一实例；</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>使用场景：</p>
<ul>
<li>Python 的 logger 就是一个单例模式，用以日志记录；</li>
<li>Windows 的资源管理器是一个单例模式；</li>
<li>线程池，数据库连接池等资源池一般也用单例模式；</li>
<li>网站计数器。</li>
</ul>
<p>优点：</p>
<ul>
<li>在内存中只有一个对象，节省内存空间；</li>
<li>避免频繁地创建销毁对象，可以提高性能；</li>
<li>避免对共享资源的多重占用；</li>
<li>可以全局访问。</li>
</ul>
<h3 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h3><p>维护类中的共享变量的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Singleton(object):</div><div class="line">    _instance = None</div><div class="line">   </div><div class="line">    # 这里不能使用__init__，因为__init__是在instance已经生成以后才去调用的</div><div class="line">    # __new__负责创建新的实例并返回新的实例，__init__负责新创建实例的初始化工作无返回</div><div class="line">    </div><div class="line">    def __new__(cls, *args, **kwargs):  </div><div class="line">        if cls.__instance is None:</div><div class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</div><div class="line">        return cls._instance</div><div class="line">    </div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典，这样它们具有相同的属性和方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Singleton(object):</div><div class="line">    _state = &#123;&#125;</div><div class="line">    def __new__(cls, *args, **kw):</div><div class="line">        ob = super(Singleton, cls).__new__(cls, *args, **kw)</div><div class="line">        ob.__dict__ = cls._state</div><div class="line">        return ob</div><div class="line">    </div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>Python的装饰器方式，每次执行类中方法时，都会先执行装饰器方法，获取类实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def singleton(cls, *args, **kw):</div><div class="line">    instances = &#123;&#125;</div><div class="line">    def getinstance():</div><div class="line">        if cls not in instances:</div><div class="line">            instances[cls] = cls(*args, **kw)</div><div class="line">        return instances[cls]</div><div class="line">    return getinstance</div><div class="line"></div><div class="line">@singleton</div><div class="line">class MyClass:</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>以上都是非线程安全的方法，一般我们在使用时已经足够。但是在多线程程序中，可能出现多个线程同时访问造成单例失败，我们可以引入锁机制来解决这个问题。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line"></div><div class="line">class Singleton(object):</div><div class="line"></div><div class="line">    _instance = None</div><div class="line"></div><div class="line">    lock = threading.RLock()</div><div class="line"></div><div class="line">    def __new__(cls):</div><div class="line">        cls.lock.acquire()</div><div class="line">        if cls._instance is None:</div><div class="line">            cls._instance = super(Singleton, cls).__new__(cls)</div><div class="line">        cls.lock.release()</div><div class="line">        return cls._instance</div><div class="line">    </div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line">try:</div><div class="line">    from synchronize import make_synchronized</div><div class="line">except ImportError:</div><div class="line">    def make_synchronized(func):</div><div class="line">        import threading</div><div class="line">        func.__lock__ = threading.Lock()</div><div class="line"></div><div class="line">        def synced_func(*args, **kws):</div><div class="line">            with func.__lock__:</div><div class="line">                return func(*args, **kws)</div><div class="line"></div><div class="line">        return synced_func</div><div class="line"></div><div class="line">class Singleton(object):</div><div class="line">    instance = None</div><div class="line"></div><div class="line">    @make_synchronized</div><div class="line">    def __new__(cls, *args, **kwargs):</div><div class="line">        if cls.instance is None:</div><div class="line">            cls.instance = object.__new__(cls, *args, **kwargs)</div><div class="line">        return cls.instance</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        pass</div><div class="line">        </div><div class="line">    pass</div></pre></td></tr></table></figure>
<h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><table>
<thead>
<tr>
<th>类型</th>
<th>设计模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建型</td>
<td>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</td>
</tr>
<tr>
<td>结构型</td>
<td>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</td>
</tr>
<tr>
<td>行为型</td>
<td>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td>
</tr>
</tbody>
</table>
<h3 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h3><p><strong>总原则</strong>：开闭原则</p>
<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p>
<p><strong>单一职责原则</strong></p>
<p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 </p>
<p><strong>里氏替换原则</strong></p>
<p>里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>
<p><strong>依赖倒转原则</strong></p>
<p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>
<p><strong>接口隔离原则</strong></p>
<p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>
<p><strong>迪米特法则（最少知道原则）</strong></p>
<p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p>
<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>
<p><strong>合成复用原则</strong></p>
<p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;br&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例类只能有一个实
    
    </summary>
    
      <category term="设计模式" scheme="http://runnerliu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://runnerliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://runnerliu.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>阻塞|非阻塞 - 异步|同步</title>
    <link href="http://runnerliu.github.io/2017/07/20/zsfzsybtb/"/>
    <id>http://runnerliu.github.io/2017/07/20/zsfzsybtb/</id>
    <published>2017-07-20T07:05:19.000Z</published>
    <updated>2017-07-20T07:15:17.045Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。</p>
<p><strong>阻塞</strong> 与 <strong>非阻塞</strong> 、<strong>同步</strong> 与 <strong>异步</strong>不能简单的从字面理解，提供一个从分布式系统角度的回答。</p>
<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>同步和异步关注的是消息通信机制。</p>
<p>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>
<p>典型的异步编程模型比如 Node.js。举个通俗的例子：</p>
<p>你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</p>
<h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>
<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>
<p>还是上面的例子，你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p>
<blockquote>
<p>参考文章：</p>
<p>作者：严肃<br>链接：<a href="https://www.zhihu.com/question/19732473/answer/20851256" target="_blank" rel="external">https://www.zhihu.com/question/19732473/answer/20851256</a><br>来源：知乎</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在看网络编程中同步异步、阻塞与非阻塞方面的东西，发现网上各种说法解释不一，而且有些解释不透彻，感觉解释人自己都没明白。于是在知乎上找到了能让人豁然开朗的答案，如下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞&lt;/strong&gt; 与 &lt;strong&gt;非阻塞&lt;/strong&gt; 
    
    </summary>
    
      <category term="网络编程" scheme="http://runnerliu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="阻塞" scheme="http://runnerliu.github.io/tags/%E9%98%BB%E5%A1%9E/"/>
    
      <category term="非阻塞" scheme="http://runnerliu.github.io/tags/%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    
      <category term="异步" scheme="http://runnerliu.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="同步" scheme="http://runnerliu.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux的用户态和内核态</title>
    <link href="http://runnerliu.github.io/2017/07/16/linuxyhtnht/"/>
    <id>http://runnerliu.github.io/2017/07/16/linuxyhtnht/</id>
    <published>2017-07-16T07:18:39.000Z</published>
    <updated>2017-07-16T07:36:17.821Z</updated>
    
    <content type="html"><![CDATA[<p><strong>内核态</strong>:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。</p>
<p><strong>用户态</strong>：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺，CPU 资源可以被其他程序获取。</p>
<h3 id="Unix-Linux的体系架构"><a href="#Unix-Linux的体系架构" class="headerlink" title="Unix/Linux的体系架构"></a>Unix/Linux的体系架构</h3><p><img src="/images/2017-7-16 152145.png" alt="2017-7-16 152145"></p>
<p>如上图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。</p>
<p><strong>内核从本质上看是一种软件—控制计算机的硬件资源，并提供上层应用程序运行的环境</strong>。</p>
<p>用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、I/O 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。</p>
<p><strong>系统调用是操作系统的最小功能单位</strong>，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如 Linux 的不同版本提供了 240-260 个系统调用，FreeBSD 大约提供了 320 个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。</p>
<p>Shell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。</p>
<p>用户态的应用程序可以通过三种方式来访问内核态的资源：</p>
<ul>
<li>系统调用；</li>
<li>库函数；</li>
<li>Shell 脚本。</li>
</ul>
<p>下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。</p>
<p>主要表现为：</p>
<ul>
<li>向下控制硬件资源；</li>
<li>向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理；</li>
<li>向上则向应用程序提供系统调用的接口。</li>
</ul>
<p>从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。</p>
<p><img src="/images/2017-7-16 152540.jpg" alt="2017-7-16 152540"></p>
<h3 id="用户态和内核态的切换"><a href="#用户态和内核态的切换" class="headerlink" title="用户态和内核态的切换"></a>用户态和内核态的切换</h3><p>因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。</p>
<p>Intel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高，Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。</p>
<p>用户态到内核态的切换方式：</p>
<ul>
<li>系统调用；</li>
<li>异常事件： 当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。</li>
<li>外围设备的中断：当外围设备完成用户的请求操作后，会像 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。</li>
</ul>
<p><strong>注意</strong>：系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如 Linux int 80h 中断。所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。</p>
<blockquote>
<p>参考文章：</p>
<p><a href="http://www.cnblogs.com/zemliu/p/3695503.html" target="_blank" rel="external">内核态(Kernel Mode)与用户态(User Mode)</a></p>
<p><a href="http://www.cnblogs.com/bakari/p/5520860.html" target="_blank" rel="external">Linux探秘之用户态与内核态</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;内核态&lt;/strong&gt;:：CPU 可以访问内存所有数据，包括外围设备：硬盘、网卡。CPU 也可以将自己从一个程序切换到另一个程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户态&lt;/strong&gt;：只能受限的访问内存，且不允许访问外围设备。占用 CPU 的能力被剥夺
    
    </summary>
    
      <category term="Linux/Unix" scheme="http://runnerliu.github.io/categories/Linux-Unix/"/>
    
    
      <category term="Linux" scheme="http://runnerliu.github.io/tags/Linux/"/>
    
      <category term="用户态" scheme="http://runnerliu.github.io/tags/%E7%94%A8%E6%88%B7%E6%80%81/"/>
    
      <category term="内核态" scheme="http://runnerliu.github.io/tags/%E5%86%85%E6%A0%B8%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python的垃圾回收机制</title>
    <link href="http://runnerliu.github.io/2017/07/16/pythongc/"/>
    <id>http://runnerliu.github.io/2017/07/16/pythongc/</id>
    <published>2017-07-16T06:33:22.000Z</published>
    <updated>2017-07-16T06:51:27.395Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>Python 语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早 George E. Collins 在1960的时候首次提出，50 年后的今天，该算法依然被很多编程语言使用，『引用计数法』的原理是：每个对象维护一个 ob_refcnt 字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数 ob_refcnt  加1，每当该对象的引用失效时计数 ob_refcnt 减 1，一旦对象的引用计数为 0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如 Java 并没有采用该算法做来垃圾的收集机制。</p>
<p>python里每一个东西都是对象，它们的核心就是一个结构体：PyObject</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef struct_object &#123;</div><div class="line">	int ob_refcnt;</div><div class="line"> 	struct_typeobject *ob_type;</div><div class="line">&#125;PyObject;</div></pre></td></tr></table></figure>
<p>什么是循环引用？A 和 B 相互引用而再没有外部引用 A 与 B 中的任何一个，它们的引用计数虽然都为 1，但显然应该被回收，例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = &#123; &#125;     #对象A的引用计数为 1 </div><div class="line">b = &#123; &#125;     #对象B的引用计数为 1 </div><div class="line">a[&apos;b&apos;] = b  #B的引用计数增1 </div><div class="line">b[&apos;a&apos;] = a  #A的引用计数增1 </div><div class="line">del a       #A的引用减 1，最后A对象的引用为 1 </div><div class="line">del b       #B的引用减 1, 最后B对象的引用为 1</div></pre></td></tr></table></figure>
<p><img src="/images/2017-7-16 143933.jpg" alt="2017-7-16 143933"></p>
<p>在这个例子中程序执行完 del 语句后，A、B 对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对 GC 来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到 0。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏(内存空间在使用完毕后未释放)。为了解决对象的循环引用问题，Python 引入了标记-清除和分代回收两种 GC 机制。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>『标记清除 Mark—Sweep 』算法是一种基于追踪回技术实现的垃圾回收算法。它分为两个阶段：</p>
<p>第一阶段是标记阶段，GC 会把所有的『活动对象』打上标记;</p>
<p>第二阶段是把那些没有标记的对象『非活动对象』进行回收。</p>
<p>那么 GC 又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>
<p>对象之间通过引用(指针)连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象(root object)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>
<p><img src="/images/2017-7-16 144138.jpg" alt="2017-7-16 144138"></p>
<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为 root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而 4 和 5 不可达，那么 1、2、3 就是活动对象，4 和 5 是非活动对象会被 GC 回收。</p>
<p>标记清除算法作为 Python 的辅助垃圾收集技术主要处理的是一些容器对象，比如 list、dict、tuple，instance 等，因为对于字符串、数值对象是不可能造成循环引用问题。Python 使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p>分代回收是一种以空间换时间的操作方式，Python 将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#define NUM_GENERATIONS 3</div><div class="line">#define GEN_HEAD(n) (&amp;generations[n].head)</div><div class="line"></div><div class="line">/* linked lists of container objects */</div><div class="line">static struct gc_generation generations[NUM_GENERATIONS] = &#123;</div><div class="line">    /* PyGC_Head,               threshold,  count */</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(0), GEN_HEAD(0), 0&#125;&#125;,   700,    0&#125;,</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(1), GEN_HEAD(1), 0&#125;&#125;,   10,     0&#125;,</div><div class="line">    &#123;&#123;&#123;GEN_HEAD(2), GEN_HEAD(2), 0&#125;&#125;,   10,     0&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Python 将内存分为了3 代，分别为年轻代(第0代)、中年代(第1代)、老年代(第2代)，他们对应的是 3 个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python 垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为 Python 的辅助垃圾收集技术处理那些容器对象。</p>
<blockquote>
<p>参考文章：</p>
<p><a href="http://hbprotoss.github.io/posts/pythonla-ji-hui-shou-ji-zhi.html" target="_blank" rel="external">Python垃圾回收机制</a>  </p>
<p><a href="http://developer.51cto.com/art/201706/542251.htm" target="_blank" rel="external">Python中的垃圾回收机制</a>  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一篇文章分析了 PHP 的垃圾回收机制，今天看了一下Python的GC，感觉大同小异，总结如下。&lt;/p&gt;
&lt;h3 id=&quot;引用计数&quot;&gt;&lt;a href=&quot;#引用计数&quot; class=&quot;headerlink&quot; title=&quot;引用计数&quot;&gt;&lt;/a&gt;引用计数&lt;/h3&gt;&lt;p&gt;Py
    
    </summary>
    
      <category term="Python" scheme="http://runnerliu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://runnerliu.github.io/tags/Python/"/>
    
      <category term="垃圾回收" scheme="http://runnerliu.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎InnoDB与MyISAM的区别</title>
    <link href="http://runnerliu.github.io/2017/07/15/myisaminnodb/"/>
    <id>http://runnerliu.github.io/2017/07/15/myisaminnodb/</id>
    <published>2017-07-15T11:29:44.000Z</published>
    <updated>2017-08-28T13:04:45.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为 .MYD  (MYData)。索引文件的扩展名是 .MYI  (MYIndex)；</p>
<p>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p>
<h3 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h3><p>MyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表；</p>
<p>InnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。</p>
<h3 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h3><p>MyISAM：强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持；</p>
<p>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务、回滚和崩溃修复能力的事务安全型表。</p>
<h3 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h3><p>MyISAM：如果执行大量的 SELECT，MyISAM 是更好的选择。(因为没有支持行级锁)，在增删的时候需要锁定整个表格，效率会低一些。相关的是 InnoDB 支持行级锁，删除插入的时候只需要锁定该行就行，效率较高；</p>
<p>InnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用<code>truncate table</code> 这个命令。</p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>MyISAM：不支持；InnoDB：支持。</p>
<h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>InnoDB 支持数据行锁定，MyISAM 不支持行锁定，只支持锁定整个表。即 MyISAM 同一个表上的读锁和写锁是互斥的，</p>
<p>MyISAM 并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以 MyISAM 不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为 MyISAM 是锁表，所以某项读操作比较耗时会使其他写进程饿死。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>InnoDB 从5.6.4才开始支持全文索引，而 MyISAM 一直支持。全文索引是指对 char、varchar 和 text 中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实很简单，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>MyISAM 支持 GIS 数据，InnoDB 不支持。即 MyISAM 支持以下空间数据对象：Point，Line，Polygon，Surface等。</p>
<p>对于AUTO_INCREMENT 类型的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM 表中，可以和其他字段一起建立联合索引。</p>
<p>InnoDB 中不保存表的具体行数，也就是说，执行 <code>select count(*) from table</code> 时，InnoDB 要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出保存好的行数即可。注意的是，当 <code>count(*)</code> 语句包含 where 条件时，两种表的操作是一样的。</p>
<p>InnoDB 表的行锁也不是绝对的，假如在执行一个 SQL 语句时 MySQL 不能确定要扫描的范围，InnoDB 表同样会锁全表，例如 <code>update table set num=1 where name like &#39;%aaa%&#39;</code> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;存储结构&quot;&gt;&lt;a href=&quot;#存储结构&quot; class=&quot;headerlink&quot; title=&quot;存储结构&quot;&gt;&lt;/a&gt;存储结构&lt;/h3&gt;&lt;p&gt;MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表
    
    </summary>
    
      <category term="MySQL" scheme="http://runnerliu.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://runnerliu.github.io/tags/MySQL/"/>
    
      <category term="InnoDB" scheme="http://runnerliu.github.io/tags/InnoDB/"/>
    
      <category term="MyISAM" scheme="http://runnerliu.github.io/tags/MyISAM/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中UNIQUE KEY与PRIMARY KEY的区别</title>
    <link href="http://runnerliu.github.io/2017/07/15/uniqueprimarykey/"/>
    <id>http://runnerliu.github.io/2017/07/15/uniqueprimarykey/</id>
    <published>2017-07-15T09:30:51.000Z</published>
    <updated>2017-07-15T11:08:56.373Z</updated>
    
    <content type="html"><![CDATA[<p>定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；</p>
<p>PRIMARY KEY 不可空不可重复，在一个表里可以定义联合主键；</p>
<p>一般来说，PRIMARY KEY = UNIQUE KEY +  NOT NULL</p>
<p>UNIQUE KEY 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。比如说，如果你有一个person 表，并且表中有个身份证的 column，那么你就可以指定该字段为UNIQUE KEY。 从技术的角度来看，PRIMARY KEY和UNIQUE KEY有很多相似之处。但还是有以下区别： </p>
<ul>
<li>作为 PRIMARY KEY 的域/域组不能为NULL，而 UNIQUE KEY 可以。 </li>
<li>在一个表中只能有一个PRIMARY KEY，而多个 UNIQUE KEY 可以同时存在。 </li>
</ul>
<p>更大的区别在逻辑设计上。PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而UNIQUE KEY 只是为了保证域/域组的唯一性。 </p>
<p>PRIMARY KEY 的语法：alter table name add constraint key name primary key( columns); </p>
<p>UNIQUE KEY 的语法：alter table name add constraint key name unique( columns); </p>
<p>一个表只能有一个主键，但是可以有好多个UNIQUE KEY，而且 UNIQUE KEY 可以为 NULL 值，如员工的电话号码一般就用UNIQUE KEY，因为电话号码肯定是唯一的，但是有的员工可能没有电话。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义了 UNIQUE 约束的字段中不能包含重复值，可以为一个或多个字段定义 UNIQUE 约束。因此，UNIQUE 即可以在字段级也可以在表级定义， 在 UNIQUED 约束的字段上可以包含空值。UNIQUED 可空，可以在一个表里的一个或多个字段定义；&lt;/p&gt;
&lt;p&gt;PR
    
    </summary>
    
      <category term="MySQL" scheme="http://runnerliu.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://runnerliu.github.io/tags/MySQL/"/>
    
      <category term="UNIQUE KEY" scheme="http://runnerliu.github.io/tags/UNIQUE-KEY/"/>
    
      <category term="PRIMARY KEY" scheme="http://runnerliu.github.io/tags/PRIMARY-KEY/"/>
    
  </entry>
  
</feed>
